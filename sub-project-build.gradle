
buildscript {
    repositories {
         mavenCentral()
    }
    dependencies {
        classpath 'net.sf.proguard:proguard-gradle:5.2.1'
    }
}

import org.apache.tools.ant.taskdefs.condition.Os

import java.util.zip.ZipEntry
import java.util.zip.ZipFile
import java.util.zip.ZipInputStream

project.ext {
    BUILD_TOOLS_VERSION = '21.1.2'
    TARGET_SDK_VERSION = 23

    sdk = [:]
    if(Os.isFamily(Os.FAMILY_WINDOWS)){
        sdk.aapt = "${rootDir}/aapt_win.exe"
        sdk.dex = "$sdkDir/build-tools/$BUILD_TOOLS_VERSION/dx.bat"
    }
    else if (Os.isFamily(Os.FAMILY_MAC)){
        sdk.aapt = "${rootDir}/aapt_mac"
        sdk.dex = "$sdkDir/build-tools/$BUILD_TOOLS_VERSION/dx"
    }
    else if (Os.isFamily(Os.FAMILY_UNIX)){
        sdk.aapt = "${rootDir}/aapt_linux"
        sdk.dex = "$sdkDir/build-tools/$BUILD_TOOLS_VERSION/dx"
    }
    sdk.androidJar = "$sdkDir/platforms/android-$TARGET_SDK_VERSION/android.jar"
    if(TARGET_SDK_VERSION >= 23){
        sdk.apacheJar = "$sdkDir/platforms/android-23/optional/org.apache.http.legacy.jar";
    }
    idList = new ArrayList<HashMap<String,String>>();       //定义主APP 全局列表
}

//初始化，确保必要目录都存在
task init << {
    new File(rootDir, 'build-outputs').mkdirs()

    buildDir.mkdirs()

    new File(buildDir, 'gen/r').mkdirs()

    new File(buildDir, 'intermediates').mkdirs()

    new File(buildDir, 'intermediates/classes').mkdirs()

    new File(buildDir, 'intermediates/classes-obfuscated').mkdirs()

    new File(buildDir, 'intermediates/res').mkdirs()

    new File(buildDir, 'intermediates/dex').mkdirs()
    copyInputFile.execute()
    aarLibPrepare.execute()

}


//清除build产出物
task clean (type:Delete) {
    delete buildDir
    delete "${rootDir}/build-outputs/${apkName}-mapping.txt"
    delete "${rootDir}/build-outputs/${apkName}.so"
}



task copyInputFile(type: Copy) {
    from configurations.needBuildFile
    into "${rootDir}/build-inputs/"
}

task aarLibPrepare(type: UnZipTask) {
    sources = fileTree(new File(rootDir, 'build-inputs')).include("*.aar")
    target = "$buildDir/intermediates/explore-aar"
}


def getAppIdList(){
    def appfilepath = "${rootDir}/app/build/generated/source/r/release/com/huanju/chajianhuatest/R.java"
    def stringBuffer = new StringBuffer()
    def style
    new File(appfilepath).withReader('UTF-8') { reader ->
        reader.eachLine {
            def idMap = new HashMap<String,String>()
            if (it.contains(" public static final class") && it.contains("{")) {
                style = it.substring(it.indexOf("class")+5,it.indexOf("{")).trim()
            }

            if (it.contains(" public static final int")) {
                def name = it.substring(it.indexOf("final int")+9,it.indexOf("=")).trim()
                idMap.put(style,name)
                println  style+"，"+name
                idList.add(idMap)
            }
        }
    }
}


//
def fileAppRReader(String bundlefilepath){
    //读取
    def stringBuffer = new StringBuffer()
    def isAppDiyResUsed     //是否用到主APP里面自定义控件属性
    def bundleRenameMap = new HashMap<String,String>()
    new File(bundlefilepath).withReader('UTF-8') { reader ->
        reader.eachLine {
            if (it.find("@attr/") || it.find("@color/") ||
                    it.find("@dimen/") || it.find("@drawable/")
                    ||it.find("@mipmap/") || it.find("@string/") || it.find("@style/") ) {
                println it
                def wiget_name = it.substring(it.indexOf("/")+1,it.length()-1).trim()
                println wiget_name
                def wiget_type = it.substring(it.indexOf("\"@")+2,it.indexOf("/")).trim()
                println wiget_type
                bundleRenameMap.put(wiget_type,wiget_name)
                def temp_map = new HashMap<String,String>()
                temp_map.put(wiget_type,wiget_name)
                if(idList.contains(temp_map)){
                    println wiget_name
                    println "wiget_type =  "+wiget_type
                    def lineStr = it.replace("@"+wiget_type,"@*com.huanju.chajianhuatest:"+wiget_type)
                    println lineStr
                    stringBuffer.append(lineStr+"\n")
                }
            } else if(it.trim().startsWith("app:") ){       //引用了主APP中的自定义控件属性
                stringBuffer.append(it+"\n")
                isAppDiyResUsed = true

            } else {
                stringBuffer.append(it+"\n")
            }
        }

        def origin = "xmlns:app=\"http://schemas.android.com/apk/res-auto\""
        def res_auto_line =  "xmlns:app=\"http://schemas.android.com/apk/res/com.huanju.chajianhuatest\""
        if(isAppDiyResUsed && stringBuffer.toString().contains(origin)){
            println "-----------------包含了origin"
            println "-----------------begin=" +stringBuffer.indexOf(origin)
            println "-----------------to=" +origin.length()
            println "-----------------res_auto_line=" +res_auto_line.length()
            stringBuffer.replace(stringBuffer.indexOf(origin),stringBuffer.indexOf(origin)+origin.length(),res_auto_line);
        }

        new File(bundlefilepath).withWriter('UTF-8') {
            writer ->
                writer.append(stringBuffer)
        }
    }
}


//文件读取 循环替换资源文件中，用到主app部分的资源ID
task listFileAndReplace <<{
    getAppIdList()          //第一步读取主APP ID
    def layoutFiles = files(file("$projectDir/res/layout").listFiles())

    layoutFiles.each { File file ->
        println 'The next file is: ' + "$projectDir/res/layout/"+file.name
        def filePath = "$projectDir/res/layout/"+file.name
        fileAppRReader(filePath)
    }
}

//task aaptRelease (type: Exec,dependsOn:['init','listFileAndReplace']){
task aaptRelease (type: Exec,dependsOn:['init']) {
//task aaptRelease (type: Exec,dependsOn:'init'){
    inputs.file "$sdk.androidJar"
    inputs.file "${rootDir}/build-outputs/demo-base-release.apk"
    inputs.file "$projectDir/AndroidManifest.xml"
    inputs.dir "$projectDir/res"
    inputs.dir "$projectDir/assets"
//    inputs.file "${rootDir}/app/build/generated/source/r/release/com/huanju/chajianhuatest/R.java"
    outputs.dir "$buildDir/gen/r"
    outputs.file "$buildDir/intermediates/res/resources.zip"
    outputs.file "$buildDir/intermediates/res/aapt-rules.txt"

    def resourceId = ''
    def parseApkXml = (new XmlParser()).parse(new File(rootDir, 'apk_module_config.xml'))
    parseApkXml.Module.each { module ->
        if (module.@packageName == "${packageName}") {
            resourceId = module.@resourceId
            println "find packageName: " + module.@packageName + " ,resourceId:" + resourceId
        }
    }
    workingDir buildDir
    executable sdk.aapt

    def argv = []
    argv << 'package'   //打包
    argv << "-v"
    argv << '-f' //强制覆盖已有文件
    argv << "-I"
    argv << "$sdk.androidJar"        //添加一个已有的固化jar包
    argv << '-I'
    argv << "${rootDir}/build-outputs/demo-base-release.apk"
    if (project.hasProperty('parentModuleName') && rootProject.hasProperty('TypeModuleSO')) {
        argv << '-I'
        argv << "${rootDir}/build-inputs/${parentModuleName}-${parentDependency}-RES.zip"
    } else if (project.hasProperty('parentModuleName')) {
        def parentProject = project(":${parentModuleName}");
        argv << '-I'
        argv << "${parentProject.buildDir}/intermediates/res/resources.zip"
    }

    //---------------aar start
    def aarFileTrees = new File(rootDir, 'build-inputs').list(new FilenameFilter() {
        @Override
        boolean accept(File dir, String name) {
            return name.endsWith(".aar");
        }
    })
    if (aarFileTrees.size() > 0) {
        argv << '--auto-add-overlay'
        def extraPackages = ""
        aarFileTrees.each {
            aarName ->
                println "$aarName"
                if(new File("$buildDir/intermediates/explore-aar/${aarName}/AndroidManifest.xml").exists()){
                    def parseManifestXml = new XmlSlurper().parse("$buildDir/intermediates/explore-aar/${aarName}/AndroidManifest.xml")
                    println "+++++++++++++++++parseManifestXml.@'package': " + parseManifestXml.@'package'
                    extraPackages = extraPackages + ":" + parseManifestXml.@'package'
                    argv << '-M'
                    argv << "$buildDir/intermediates/explore-aar/${aarName}/AndroidManifest.xml"
                    //指定manifest文件
                    argv << '-S'
                    argv << "$buildDir/intermediates/explore-aar/${aarName}/res"
                    argv << '-A'
                    argv << "$buildDir/intermediates/explore-aar/${aarName}/assets"
                }

                // assets目录
        }

        if(extraPackages.length()>1){
            extraPackages = extraPackages.substring(1, extraPackages.length())
            println "+++++++++++++++++--extra-packages : " + extraPackages
            argv << '--extra-packages'
            argv << extraPackages
        }

    }
    //---------------aar end

    argv << '-M'
    argv << "$projectDir/AndroidManifest.xml"    //指定manifest文件
    argv << '-S'
    argv << "$projectDir/res"                    //res目录
    argv << '-A'
    argv << "$projectDir/assets"                 //assets目录
    argv << '-m'        //make package directories under location specified by -J
    argv << '-J'
    argv << "$buildDir/gen/r"         //哪里输出R.java定义
    argv << '-F'
    argv << "$buildDir/intermediates/res/resources.zip"   //指定apk的输出位置
    argv << '-G'        //-G  A file to output proguard options into.
    argv << "$buildDir/intermediates/res/aapt-rules.txt"
    // argv << '--debug-mode'      //manifest的application元素添加android:debuggable="true"
    argv << '--custom-package'      //指定R.java生成的package包名
    argv << "${packageName}"
    argv << '-0'    //指定哪些后缀名不会被压缩
    argv << 'apk'
//    argv << '--public-R-path'
//    argv << "${rootDir}/app/build/generated/source/r/release/com/huanju/chajianhuatest/R.java"
    argv << '--apk-module'
    argv << "$resourceId"
    args = argv

}

task compileRelease(type: JavaCompile,dependsOn:'aaptRelease') {
    inputs.file "$sdk.androidJar"
    inputs.files fileTree("${projectDir}/libs").include('*.jar')
    inputs.file "${rootDir}/app/build/intermediates/classes-proguard/release/classes.jar"
    inputs.files fileTree("$projectDir/src").include('**/*.java')
    inputs.files fileTree("$buildDir/gen/r").include('**/*.java')
    inputs.files fileTree("$buildDir/intermediates/explore-aar").include('**/*.jar')

    outputs.dir "$buildDir/intermediates/classes"
    sourceCompatibility = '1.7'
    targetCompatibility = '1.7'

    def inputJarfile = ''
    if (project.hasProperty('parentModuleName') && rootProject.hasProperty('TypeModuleSO')) {
        inputJarfile = "${rootDir}/build-inputs/${parentModuleName}-${parentDependency}-JAR.jar"
        inputs.file "${inputJarfile}"
    } else if (project.hasProperty('parentModuleName')) {
        def parentProject = project(":$parentModuleName");
        inputJarfile = "${parentProject.buildDir}/intermediates/classes-obfuscated/classes-obfuscated.jar"
        inputs.file "${inputJarfile}"
    }
    classpath = files(
            "${sdk.androidJar}",
            "${sdk.apacheJar}",
            fileTree("${projectDir}/libs").include('*.jar')
    )

    def aarFileTrees = new File(rootDir, 'build-inputs').list(new FilenameFilter() {
        @Override
        boolean accept(File dir, String name) {
            return name.endsWith(".aar");
        }
    })
    println "-------compileRelease-" + aarFileTrees.size()
    if (aarFileTrees.size() > 0) {
        classpath.from(fileTree("$buildDir/intermediates/explore-aar").include('**/*.jar'))
    }

    destinationDir = file("$buildDir/intermediates/classes")

    dependencyCacheDir = file("${buildDir}/dependency-cache")

    source = files(fileTree("$projectDir/src").include('**/*.java'),
            fileTree("$buildDir/gen/r").include('**/*.java'))
    options.encoding = 'UTF-8'
}



task dexRelease(type: Exec, dependsOn: 'obfuscateRelease') {
    inputs.file "${buildDir}/intermediates/classes-obfuscated/classes-obfuscated.jar"
    outputs.file "${buildDir}/intermediates/dex/${project.name}_dex.zip"
    workingDir buildDir
    executable sdk.dex

    def argv = []
    argv << '--dex'
    argv << "--output=${buildDir}/intermediates/dex/${project.name}_dex.zip"
    argv << "${buildDir}/intermediates/classes-obfuscated/classes-obfuscated.jar"

    args = argv
}

task obfuscateRelease(type:proguard.gradle.ProGuardTask, dependsOn:'compileRelease') {
    inputs.file "$rootDir/sub-project-proguard-rules.pro"
    inputs.file "$buildDir/intermediates/res/aapt-rules.txt"
    inputs.dir "$buildDir/intermediates/classes"
    inputs.files fileTree("${projectDir}/libs").include('*.jar')
    inputs.file "${sdk.androidJar}"
//    inputs.file "${rootDir}/QYVideoClient/build/intermediates/classes-proguard/release/classes.jar"
    inputs.files fileTree("$buildDir/intermediates/explore-aar").include('**/*.jar')

    outputs.file "$buildDir/intermediates/classes-obfuscated/classes-obfuscated.jar"
    outputs.file "${rootDir}/build-outputs/${apkName}-mapping.txt"
    configuration file("$rootDir/sub-project-proguard-rules.pro")
    configuration file ("$buildDir/intermediates/res/aapt-rules.txt")
    injars file("$buildDir/intermediates/classes")
    injars fileTree("${projectDir}/libs").include('*.jar')
    injars fileTree("$buildDir/intermediates/explore-aar").include('**/*.jar')

    outjars file("$buildDir/intermediates/classes-obfuscated/classes-obfuscated.jar")
    printmapping file("${rootDir}/build-outputs/${apkName}-mapping.txt")

    libraryjars file("${sdk.androidJar}")
    libraryjars file("${rootDir}/app/build/intermediates/classes-proguard/release/classes.jar")
}

class UnZipTask extends DefaultTask {
    @InputFiles
    FileCollection sources

    String target

    @TaskAction
    void concat() {
        String path = target + File.separatorChar
        sources.each { sourceFile ->
            ZipFile zipFile = new ZipFile(sourceFile)
            ZipInputStream zipInputStream = new ZipInputStream(new FileInputStream(sourceFile))
            ZipEntry zipEntry = null
            while ((zipEntry = zipInputStream.getNextEntry()) != null) {
                String fileName = zipEntry.getName()
                File tmpFile = new File(path + sourceFile.getName() + File.separatorChar + fileName)
                if (!tmpFile.getParentFile().exists()) {
                    tmpFile.getParentFile().mkdirs()
                }
                if (zipEntry.isDirectory()) {
                    tmpFile.mkdir()
                    continue
                }
                System.out.println(tmpFile.getName())
                OutputStream os = new FileOutputStream(tmpFile)
                InputStream is = zipFile.getInputStream(zipEntry)
                int len = 0
                while ((len = is.read()) != -1)
                    os.write(len)
                os.close()
                is.close()
            }
            zipInputStream.close();
            File tmpFile = new File(path + sourceFile.getName() + File.separatorChar + "assets/.gitignore")
            if (!tmpFile.getParentFile().exists()) {
                tmpFile.getParentFile().mkdirs()
            }
            OutputStream os = new FileOutputStream(tmpFile)
            os.write("/build\n*.iml".bytes)
            os.close()
        }

    }
}

task bundleRelease (type:Zip,dependsOn:['compileRelease','aaptRelease','obfuscateRelease','dexRelease']){
    inputs.file "$buildDir/intermediates/dex/${project.name}_dex.zip"
    inputs.file "$buildDir/intermediates/res/resources.zip"

    outputs.file "${rootDir}/build-outputs/${apkName}.so"

    archiveName = "${apkName}.so"
    destinationDir = file("${rootDir}/build-outputs")
    duplicatesStrategy = 'fail'
    from zipTree("$buildDir/intermediates/dex/${project.name}_dex.zip")
    from zipTree("$buildDir/intermediates/res/resources.zip")
}

//task bundleRelease (type:Zip,dependsOn:['aaptRelease','compileRelease','dexRelease']){
//    inputs.file "$buildDir/intermediates/dex/${project.name}_dex.zip"
//    inputs.file "$buildDir/intermediates/res/resources.zip"
//
//    outputs.file "${rootDir}/build-outputs/${apkName}.so"
//
//    archiveName = "${apkName}.so"
//    destinationDir = file("${rootDir}/build-outputs")
//    duplicatesStrategy = 'fail'
//    from zipTree("$buildDir/intermediates/dex/${project.name}_dex.zip")
//    from zipTree("$buildDir/intermediates/res/resources.zip")
//}

