buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'net.sf.proguard:proguard-gradle:5.2.1'
    }
}

import org.apache.tools.ant.taskdefs.condition.Os

import java.util.regex.Matcher
import java.util.regex.Pattern
import java.util.zip.ZipEntry
import java.util.zip.ZipFile
import java.util.zip.ZipInputStream

//这里需要定期关注升级
project.ext {
    BUILD_TOOLS_VERSION = '21.1.2'
    TARGET_SDK_VERSION = 23

    sdk = [:]
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        sdk.aapt = "${rootDir}/aapt_win.exe"
        sdk.dex = "$sdkDir/build-tools/$BUILD_TOOLS_VERSION/dx.bat"
    } else if (Os.isFamily(Os.FAMILY_MAC)) {
        sdk.aapt = "${rootDir}/aapt_mac"
        sdk.dex = "$sdkDir/build-tools/$BUILD_TOOLS_VERSION/dx"
    } else if (Os.isFamily(Os.FAMILY_UNIX)) {
        sdk.aapt = "${rootDir}/aapt_linux"
        sdk.dex = "$sdkDir/build-tools/$BUILD_TOOLS_VERSION/dx"
    }
    sdk.androidJar = "$sdkDir/platforms/android-$TARGET_SDK_VERSION/android.jar"
    if (TARGET_SDK_VERSION >= 23) {
        sdk.apacheJar = "$sdkDir/platforms/android-23/optional/org.apache.http.legacy.jar";
    }
    idList = new ArrayList<HashMap<String, String>>();       //定义主APP 全局列表
    stringBuffer = new StringBuffer()
    recoveryOriginSB = new StringBuffer()       //回写时使用
}

task init << {}
task clean {}

task copyFileToInputsDir(type: Copy) {
    from configurations.needBuildFile
    into "${rootDir}/build-inputs/"
}

task copyJarFileToExportAar(type: Copy) {
    from fileTree(new File(rootDir, 'build-inputs')).include("*.jar")
    into "$buildDir/intermediates/explore-aar"
}

task aarLibPrepare(type: UnZipTask) {
    sources = fileTree(new File(rootDir, 'build-inputs')).include("*.aar")
    target = "$buildDir/intermediates/explore-aar"
}

task cleanBuild(type: Delete) {
    try {
        delete buildDir
        delete "${rootDir}/build-inputs/"
        delete "${rootDir}/build-outputs/remoteApk"
        delete "${rootDir}/build-outputs/${apkName}-mapping.txt"
        delete "${rootDir}/build-outputs/${apkName}.so"
        delete "${rootDir}/build-outputs/jni"
        delete "${rootDir}/build-outputs/lint"
    } catch (Exception e) {

    }

}

//初始化，确保必要目录都存在
task initBuild {
    cleanBuild.execute()
    new File(rootDir, 'build-inputs').mkdirs()
    new File(rootDir, 'build-outputs').mkdirs()
    new File(rootDir, 'build-outputs/remoteApk').mkdirs()
    buildDir.mkdirs()
    new File(buildDir, 'gen/r').mkdirs()
    new File(buildDir, 'intermediates').mkdirs()
    new File(buildDir, 'intermediates/classes').mkdirs()
    new File(buildDir, 'intermediates/classes-obfuscated').mkdirs()
    new File(buildDir, 'intermediates/res').mkdirs()
    new File(buildDir, 'intermediates/dex').mkdirs()

    //拷贝其他BU的so文件到output中
    new File(rootDir, "/build-outputs/jni/armeabi/").mkdirs()
    new File(rootDir, "/build-outputs/jni/x86/").mkdirs()

    copyFileToInputsDir.execute()

    project.ext.aarFiles = new File(rootDir, 'build-inputs').list(new FilenameFilter() {
        @Override
        boolean accept(File dir, String name) {
            return name.endsWith(".aar");
        }
    })
    aarLibPrepare.execute()
    copyJarFileToExportAar.execute()
}

def getAppIdList() {
    def appfilepath = "${rootDir}/app/build/generated/source/r/release/com/huanju/chajianhuatest/R.java"
    def style
    new File(appfilepath).withReader('UTF-8') { reader ->
        reader.eachLine {
            def idMap = new HashMap<String, String>()
            if (it.contains(" public static final class") && it.contains("{")) {
                style = it.substring(it.indexOf("class") + 5, it.indexOf("{")).trim()
            }
            if (it.contains(" public static final int")) {
                def name = it.substring(it.indexOf("final int") + 9, it.indexOf("=")).trim()
                idMap.put(style, name)
                println style + "，" + name
                idList.add(idMap)
            }
        }
    }
}


def fileAppRReader(String bundlefilepath) {
    //读取
    def isAppDiyResUsed     //是否用到主APP里面自定义控件属性
    def bundleRenameMap = new HashMap<String, String>()
    new File(bundlefilepath).withReader('UTF-8') { reader ->
        reader.eachLine {
            if (it.trim().startsWith("app:")) {       //引用了主APP中的自定义控件属性
                isAppDiyResUsed = true
            }

//            if (it.find("@attr/") || it.find("@color/") ||
//                    it.find("@dimen/") || it.find("@drawable/")
//                    ||it.find("@mipmap/") || it.find("@string/") || it.find("@style/") ) {
//                println "原始it ="+ it
//                def wiget_name = it.substring(it.indexOf("/")+1,it.lastIndexOf("\"")).trim()
//                println "wiget_name ="+wiget_name
//                def wiget_type = it.substring(it.indexOf("\"@")+2,it.indexOf("/")).trim()
//                println "origin wiget_type = "+wiget_type
//                bundleRenameMap.put(wiget_type,wiget_name)
//                def temp_map = new HashMap<String,String>()
//                temp_map.put(wiget_type,wiget_name)
//                if(idList.contains(temp_map)){
//                    println wiget_name
//                    println "wiget_type =  "+wiget_type
//                    def lineStr = it.replace("@"+wiget_type,"@*com.huanju.chajianhuatest:"+wiget_type)
//                    println lineStr
//                    stringBuffer.append(lineStr+"\n")
//                }
//            }else {
//                stringBuffer.append(it+"\n")
//            }

            stringBuffer.append(it + "\n")
        }
//        def origin = "xmlns:app=\"http://schemas.android.com/apk/res-auto\""
//        def res_auto_line = "xmlns:app=\"http://schemas.android.com/apk/res/com.huanju.chajianhuatest\"" + "\n"
//        //如果定义了命名空间xmlns:app ，并且有实际引用
//        if (isAppDiyResUsed && stringBuffer.toString().contains(origin)) {
//            println "-----------------包含了origin"
//            println "-----------------begin=" + stringBuffer.indexOf(origin)
//            println "-----------------to=" + origin.length()
//            println "-----------------res_auto_line=" + res_auto_line.length()
//            stringBuffer.replace(stringBuffer.indexOf(origin), stringBuffer.indexOf(origin) + origin.length(), res_auto_line);
//        }
//        println "-----------------fileAppRReader ------>>stringBuffer=" + stringBuffer
        getNameSpaceStr()
        getPatternReplaceStr()
        new File(bundlefilepath).withWriter('UTF-8') {
            writer ->
                writer.append(stringBuffer)
        }
        //置位
        stringBuffer = new StringBuffer()
    }
}

def getNameSpaceStr(){
    String res_auto_line = "xmlns:app=\"http://schemas.android.com/apk/res/com.huanju.chajianhuatest\"";
    //如果定义了命名空间xmlns:app ，并且有实际引用
    String REGEX = "xmlns:app=\"http://schemas.android.com/apk/res-auto\"";
    Pattern p = Pattern.compile(REGEX);
    Matcher m = p.matcher(stringBuffer);
    StringBuffer sb = new StringBuffer();
    while(m.find()){
        System.out.println("----------");
        m.appendReplacement(sb,res_auto_line);
    }
    m.appendTail(sb);
    stringBuffer = sb
}

def getPatternReplaceStr() {
    String REGEX = "@attr/.+?\"|@color/.+?\"|@dimen/.+?\"|@drawable/.+?\"|@mipmap/.+?\"|@string/.+?\"|@style/.+?\""
    Pattern p = Pattern.compile(REGEX);
    Matcher m = p.matcher(stringBuffer);
    StringBuffer sb = new StringBuffer();
    while (m.find()) {
        System.out.println("----------");
        String ptgroup = m.group();
        String[] ptStr = ptgroup.split("/");
        def temp_map = new HashMap<String, String>()
        temp_map.put(ptStr[0].replace("@",""), ptStr[1])
        if (idList.contains(temp_map)) {
            println ptStr[0].replace("@","")
            println "wiget_type =  " + ptStr[1]
        }

        System.out.println(ptgroup.split("/")[0] + "----------" + ptgroup.split("/")[1]);
        m.appendReplacement(sb, "@*com.huanju.chajianhuatest:" + ptStr[0].replace("@", "") + "/" + ptStr[1]);
    }
    m.appendTail(sb)
    stringBuffer = sb
}

/**
 * 定义正则表达式  增加主app全路径包名
 * @param patternStr
 * @return
 */
//def getPatternStr(String patternStr) {
//    println "-----------------patternStr=" + patternStr
//    String REGEX = "=\"@.*?/";
//    String REPLACE = "=\"@*com.huanju.chajianhuatest:" + patternStr + "/";
//    Pattern p = Pattern.compile(REGEX);
//    // 获取 matcher 对象
//    Matcher m = p.matcher(stringBuffer);
//    StringBuffer sb = new StringBuffer();
//    while (m.find()) {
//        m.appendReplacement(sb, REPLACE);
//    }
//    m.appendTail(sb);
//    println "-----------------getPatternStr ------>>stringBuffer=" + stringBuffer
//    System.out.println("sb------------------------=" + sb.toString());
//}

//文件读取 循环替换资源文件中，用到主app部分的资源ID
task listFileAndReplace << {
    getAppIdList()          //第一步读取主APP ID
    def layoutFiles = files(file("$projectDir/res/layout").listFiles())

    layoutFiles.each { File file ->
        println 'The next file is: ' + "$projectDir/res/layout/" + file.name
        def filePath = "$projectDir/res/layout/" + file.name
        fileAppRReader(filePath)
    }
}

task aaptRelease(type: Exec, dependsOn: ['initBuild', 'listFileAndReplace']) {
//task aaptRelease (type: Exec,dependsOn:['initBuild']) {
    inputs.file "$sdk.androidJar"
    inputs.file "${rootDir}/build-outputs/demo-base-release.apk"
    inputs.file "$projectDir/AndroidManifest.xml"
    inputs.dir "$projectDir/res"
    inputs.dir "$projectDir/assets"
    inputs.file "${rootDir}/app/build/generated/source/r/release/com/huanju/chajianhuatest/R.java"
    outputs.dir "$buildDir/gen/r"
    outputs.file "$buildDir/intermediates/res/resources.zip"
    outputs.file "$buildDir/intermediates/res/aapt-rules.txt"

    def resourceId = ''
    def parseApkXml = (new XmlParser()).parse(new File(rootDir, 'apk_module_config.xml'))
    parseApkXml.Module.each { module ->
        if (module.@packageName == "${packageName}") {
            resourceId = module.@resourceId
            println "find packageName: " + module.@packageName + " ,resourceId:" + resourceId
        }
    }

    workingDir buildDir
    executable sdk.aapt

    def argv = []
    argv << 'package'   //打包
    argv << "-v"
    argv << '-f' //强制覆盖已有文件
    argv << "-I"
    argv << "$sdk.androidJar"        //添加一个已有的固化jar包
    argv << '-I'
    argv << "${rootDir}/build-outputs/demo-base-release.apk"
    argv << '-M'
    argv << "$projectDir/AndroidManifest.xml"    //指定manifest文件
    argv << '-S'
    argv << "$projectDir/res"                    //res目录
    argv << '-A'
    argv << "$projectDir/assets"                 //assets目录
    argv << '-m'        //make package directories under location specified by -J
    argv << '-J'
    argv << "$buildDir/gen/r"         //哪里输出R.java定义
    argv << '-F'
    argv << "$buildDir/intermediates/res/resources.zip"   //指定apk的输出位置
    argv << '-G'        //-G  A file to output proguard options into.
    argv << "$buildDir/intermediates/res/aapt-rules.txt"
    // argv << '--debug-mode'      //manifest的application元素添加android:debuggable="true"
    argv << '--custom-package'      //指定R.java生成的package包名
    argv << "${packageName}"
    argv << '-0'    //指定哪些后缀名不会被压缩
    argv << 'apk'
    argv << '--public-R-path'
    argv << "${rootDir}/app/build/generated/source/r/release/com/huanju/chajianhuatest/R.java"
    argv << '--apk-module'
    argv << "$resourceId"
    args = argv

}

task compileRelease(type: JavaCompile, dependsOn: 'aaptRelease') {
    inputs.file "$sdk.androidJar"
    inputs.files fileTree("${projectDir}/libs").include('*.jar')
    inputs.file "${rootDir}/app/build/intermediates/classes-proguard/release/classes.jar"
    inputs.files fileTree("$projectDir/src").include('**/*.java')
    inputs.files fileTree("$buildDir/gen/r").include('**/*.java')
    inputs.files fileTree("$buildDir/intermediates/explore-aar").include('**/*.jar')

    outputs.dir "$buildDir/intermediates/classes"
    sourceCompatibility = '1.7'
    targetCompatibility = '1.7'
    def inputJarfile = ''
    classpath = files(
            "${sdk.androidJar}",
            "${sdk.apacheJar}",
            fileTree("${projectDir}/libs").include('*.jar')
    )
    def aarFileTrees = new File(rootDir, 'build-inputs').list(new FilenameFilter() {
        @Override
        boolean accept(File dir, String name) {
            return name.endsWith(".aar");
        }
    })
    println "-------compileRelease-" + aarFileTrees.size()
    if (aarFileTrees.size() > 0) {
        aarFileTrees.each {}
        classpath.from(fileTree("$buildDir/intermediates/explore-aar").include('**/*.jar'))
    }

    destinationDir = file("$buildDir/intermediates/classes")
    dependencyCacheDir = file("${buildDir}/dependency-cache")
    source = files(fileTree("$projectDir/src").include('**/*.java'),
            fileTree("$buildDir/gen/r").include('**/*.java'))
    options.encoding = 'UTF-8'
}

task copySofileTask(dependsOn: 'compileRelease') {
    String subPath = file("$buildDir").getParent()
    copy {
        from "$subPath/libs/armeabi/"
        into "$rootDir/build-outputs/jni/armeabi/"
    }

    // so
    def aarFileTrees = new File(rootDir, 'build-inputs').list(new FilenameFilter() {
        @Override
        boolean accept(File dir, String name) {
            return name.endsWith(".aar");
        }
    })
    if (aarFileTrees.size() > 0) {
        aarFileTrees.each {
            copy {
                from "$buildDir/intermediates/explore-aar/$it/jni/armeabi"
                into "$rootDir/build-outputs/jni/armeabi/"
            }
        }
    }

    copy {
        from "$subPath/libs/x86/"
        into "$rootDir/build-outputs/jni/x86/"
    }
}

task obfuscateRelease(type: proguard.gradle.ProGuardTask, dependsOn: 'copySofileTask') {
    inputs.file "$rootDir/sub-project-proguard-rules.pro"
    inputs.file "$buildDir/intermediates/res/aapt-rules.txt"
    inputs.dir "$buildDir/intermediates/classes"
    inputs.files fileTree("${projectDir}/libs").include('*.jar')
    inputs.file "${sdk.androidJar}"
//    inputs.files fileTree("$buildDir/intermediates/explore-aar").include('**/*.jar')

    outputs.file "$buildDir/intermediates/classes-obfuscated/classes-obfuscated.jar"
    outputs.file "${rootDir}/build-outputs/${apkName}-mapping.txt"
    configuration file("$rootDir/sub-project-proguard-rules.pro")
    configuration file("$buildDir/intermediates/res/aapt-rules.txt")
    injars file("$buildDir/intermediates/classes")
    injars fileTree("${projectDir}/libs").include('*.jar')

//    libraryjars fileTree("$buildDir/intermediates/explore-aar").include('**/*.jar')
    outjars file("$buildDir/intermediates/classes-obfuscated/classes-obfuscated.jar")
    printmapping file("${rootDir}/build-outputs/${apkName}-mapping.txt")

    libraryjars file("${sdk.androidJar}")
}

task dexRelease(type: Exec, dependsOn: 'obfuscateRelease') {
    inputs.file "${buildDir}/intermediates/classes-obfuscated/classes-obfuscated.jar"
    outputs.file "${buildDir}/intermediates/dex/${project.name}_dex.zip"
    workingDir buildDir
    executable sdk.dex

    def argv = []
    argv << '--dex'
    argv << "--output=${buildDir}/intermediates/dex/${project.name}_dex.zip"
    argv << "${buildDir}/intermediates/classes-obfuscated/classes-obfuscated.jar"

    args = argv
}

class UnZipTask extends DefaultTask {
    @InputFiles
    FileCollection sources

    String target

    @TaskAction
    void concat() {
        String path = target + File.separatorChar
        sources.each { sourceFile ->
            ZipFile zipFile = new ZipFile(sourceFile)
            ZipInputStream zipInputStream = new ZipInputStream(new FileInputStream(sourceFile))
            ZipEntry zipEntry = null
            while ((zipEntry = zipInputStream.getNextEntry()) != null) {
                String fileName = zipEntry.getName()
                File tmpFile = new File(path + sourceFile.getName() + File.separatorChar + fileName)
                if (!tmpFile.getParentFile().exists()) {
                    tmpFile.getParentFile().mkdirs()
                }
                if (zipEntry.isDirectory()) {
                    tmpFile.mkdir()
                    continue
                }
                System.out.println(tmpFile.getName())
                OutputStream os = new FileOutputStream(tmpFile)
                InputStream is = zipFile.getInputStream(zipEntry)
                int len = 0
                while ((len = is.read()) != -1)
                    os.write(len)
                os.close()
                is.close()
            }
            zipInputStream.close();
            File tmpFile = new File(path + sourceFile.getName() + File.separatorChar + "assets/.gitignore")
            if (!tmpFile.getParentFile().exists()) {
                tmpFile.getParentFile().mkdirs()
            }
            OutputStream os = new FileOutputStream(tmpFile)
            os.write("/build\n*.iml".bytes)
            os.close()
        }

    }
}

/**
 *-----------------------------------回写 逻辑 开始--------------------
 */

def replaceToOrigin(String bundlefilepath) {
    println bundlefilepath + "开始回写逻辑"
    new File(bundlefilepath).withReader('UTF-8') { reader ->
        reader.eachLine {
//            if (it.find("@*com.huanju.chajianhuatest:")) {
//                println "发现回写点 " + it
//                def lineStr = it.replace("@*com.huanju.chajianhuatest:", "@")
//
//                println "回写后String = " + lineStr
//                stringBuffer.append(lineStr + "\n")
//            } else {
            recoveryOriginSB.append(it + "\n")

            }
        }
        recoveryNameSpaceStr()
        recoveryPackageNameStr()
        new File(bundlefilepath).withWriter('UTF-8') {
            writer ->
                writer.append(recoveryOriginSB)
        }
    recoveryOriginSB = new StringBuffer()
}

/**
 * 恢复子模块 xml 文件
 */
task ReReplace(dependsOn: 'dexRelease') <<{
    def layoutFiles = files(file("$projectDir/res/layout").listFiles())
    println '重新替换文件' + "----------------"
    layoutFiles.each { File file ->
        def filePath = "$projectDir/res/layout/" + file.name
        println filePath
        replaceToOrigin(filePath)
    }
}

def recoveryNameSpaceStr(){
    String regex = "xmlns:app=\"http://schemas.android.com/apk/res/com.huanju.chajianhuatest\""
    //如果定义了命名空间xmlns:app ，并且有实际引用
    String replaceStr = "xmlns:app=\"http://schemas.android.com/apk/res-auto\""
    Pattern p = Pattern.compile(regex);
    Matcher m = p.matcher(recoveryOriginSB);
    StringBuffer sb = new StringBuffer();
    while(m.find()){
        System.out.println("----------------------");
        m.appendReplacement(sb,replaceStr);
    }
    m.appendTail(sb)
    println 'sb = ' + "----------------" +sb
    recoveryOriginSB = sb
}


def recoveryPackageNameStr(){
    String regex = "@\\*com.huanju.chajianhuatest:"
    //如果定义了命名空间xmlns:app ，并且有实际引用
    String replaceStr = "@"
    Pattern p = Pattern.compile(regex)
    Matcher m = p.matcher(recoveryOriginSB)
    StringBuffer sb = new StringBuffer()
    while(m.find()){
        System.out.println("----------")
        m.appendReplacement(sb,replaceStr)
    }
    m.appendTail(sb)
    recoveryOriginSB = sb
}

/*
 *-----------------------------------回写 逻辑 结束--------------------
 */

task bundleRelease(type: Zip, dependsOn: ['obfuscateRelease', 'compileRelease', 'aaptRelease', 'dexRelease','ReReplace']) {
    inputs.file "$buildDir/intermediates/dex/${project.name}_dex.zip"
    inputs.file "$buildDir/intermediates/res/resources.zip"
    outputs.file "${rootDir}/build-outputs/${apkName}.so"
    archiveName = "${apkName}.so"
    destinationDir = file("${rootDir}/build-outputs")
    duplicatesStrategy = 'fail'
    from zipTree("$buildDir/intermediates/dex/${project.name}_dex.zip")
    from zipTree("$buildDir/intermediates/res/resources.zip")
}


