bolts.AndroidExecutors -> a.a:
    bolts.AndroidExecutors INSTANCE -> aA
    java.util.concurrent.Executor uiThread -> aB
    int CPU_COUNT -> aC
    int CORE_POOL_SIZE -> aD
    int MAX_POOL_SIZE -> aE
    void <init>() -> <init>
    java.util.concurrent.ExecutorService newCachedThreadPool() -> newCachedThreadPool
    void allowCoreThreadTimeout(java.util.concurrent.ThreadPoolExecutor,boolean) -> a
    java.util.concurrent.Executor uiThread() -> s
    void <clinit>() -> <clinit>
bolts.AndroidExecutors$1 -> a.b:
bolts.AndroidExecutors$UIThreadExecutor -> a.c:
    void <init>() -> <init>
    void execute(java.lang.Runnable) -> execute
    void <init>(bolts.AndroidExecutors$1) -> <init>
bolts.BoltsExecutors -> a.d:
    bolts.BoltsExecutors INSTANCE -> aF
    java.util.concurrent.ExecutorService background -> aG
    java.util.concurrent.ScheduledExecutorService scheduled -> aH
    java.util.concurrent.Executor immediate -> aI
    boolean isAndroidRuntime() -> t
    void <init>() -> <init>
    java.util.concurrent.ExecutorService background() -> u
    java.util.concurrent.Executor immediate() -> v
    void <clinit>() -> <clinit>
bolts.BoltsExecutors$1 -> a.e:
bolts.BoltsExecutors$ImmediateExecutor -> a.f:
    java.lang.ThreadLocal executionDepth -> aJ
    void <init>() -> <init>
    int incrementDepth() -> w
    int decrementDepth() -> x
    void execute(java.lang.Runnable) -> execute
    void <init>(bolts.BoltsExecutors$1) -> <init>
bolts.CancellationToken -> a.g:
    bolts.CancellationTokenSource tokenSource -> aK
    boolean isCancellationRequested() -> y
    java.lang.String toString() -> toString
bolts.CancellationTokenRegistration -> a.h:
    java.lang.Object lock -> lock
    bolts.CancellationTokenSource tokenSource -> aK
    java.lang.Runnable action -> aL
    boolean closed -> closed
    void close() -> close
bolts.CancellationTokenSource -> a.i:
    java.lang.Object lock -> lock
    java.util.List registrations -> aM
    java.util.concurrent.ScheduledFuture scheduledCancellation -> aN
    boolean cancellationRequested -> aO
    boolean closed -> closed
    boolean isCancellationRequested() -> y
    void close() -> close
    void unregister(bolts.CancellationTokenRegistration) -> a
    java.lang.String toString() -> toString
    void throwIfClosed() -> z
    void cancelScheduledCancellation() -> A
bolts.Continuation -> a.j:
    java.lang.Object then(bolts.Task) -> then
bolts.ExecutorException -> a.k:
    void <init>(java.lang.Exception) -> <init>
bolts.Task -> a.l:
    java.util.concurrent.ExecutorService BACKGROUND_EXECUTOR -> aP
    java.util.concurrent.Executor IMMEDIATE_EXECUTOR -> aQ
    java.util.concurrent.Executor UI_THREAD_EXECUTOR -> aR
    bolts.Task$UnobservedExceptionHandler unobservedExceptionHandler -> aS
    java.lang.Object lock -> lock
    boolean complete -> aT
    boolean cancelled -> aU
    java.lang.Object result -> result
    java.lang.Exception error -> aV
    boolean errorHasBeenObserved -> aW
    bolts.UnobservedErrorNotifier unobservedErrorNotifier -> aX
    java.util.List continuations -> aY
    bolts.Task TASK_NULL -> aZ
    bolts.Task TASK_TRUE -> ba
    bolts.Task TASK_FALSE -> bb
    bolts.Task TASK_CANCELLED -> bc
    bolts.Task$UnobservedExceptionHandler getUnobservedExceptionHandler() -> B
    void <init>() -> <init>
    void <init>(java.lang.Object) -> <init>
    void <init>(boolean) -> <init>
    boolean isCompleted() -> isCompleted
    boolean isCancelled() -> isCancelled
    boolean isFaulted() -> C
    java.lang.Object getResult() -> getResult
    java.lang.Exception getError() -> D
    bolts.Task forResult(java.lang.Object) -> a
    bolts.Task forError(java.lang.Exception) -> a
    bolts.Task call(java.util.concurrent.Callable,java.util.concurrent.Executor) -> a
    bolts.Task call(java.util.concurrent.Callable,java.util.concurrent.Executor,bolts.CancellationToken) -> a
    bolts.Task continueWith(bolts.Continuation,java.util.concurrent.Executor,bolts.CancellationToken) -> a
    bolts.Task continueWith(bolts.Continuation) -> a
    bolts.Task continueWithTask(bolts.Continuation,java.util.concurrent.Executor,bolts.CancellationToken) -> b
    bolts.Task continueWithTask(bolts.Continuation) -> b
    void completeImmediately(bolts.TaskCompletionSource,bolts.Continuation,bolts.Task,java.util.concurrent.Executor,bolts.CancellationToken) -> a
    void completeAfterTask(bolts.TaskCompletionSource,bolts.Continuation,bolts.Task,java.util.concurrent.Executor,bolts.CancellationToken) -> b
    void runContinuations() -> E
    boolean trySetCancelled() -> F
    boolean trySetResult(java.lang.Object) -> b
    boolean trySetError(java.lang.Exception) -> b
    void access$000(bolts.TaskCompletionSource,bolts.Continuation,bolts.Task,java.util.concurrent.Executor,bolts.CancellationToken) -> c
    void access$100(bolts.TaskCompletionSource,bolts.Continuation,bolts.Task,java.util.concurrent.Executor,bolts.CancellationToken) -> d
    void <clinit>() -> <clinit>
bolts.Task$10 -> a.m:
    bolts.TaskCompletionSource val$tcs -> bd
    bolts.Continuation val$continuation -> be
    java.util.concurrent.Executor val$executor -> bf
    bolts.CancellationToken val$ct -> bg
    bolts.Task this$0 -> bh
    void <init>(bolts.Task,bolts.TaskCompletionSource,bolts.Continuation,java.util.concurrent.Executor,bolts.CancellationToken) -> <init>
    java.lang.Void then(bolts.Task) -> then
    java.lang.Object then(bolts.Task) -> then
bolts.Task$11 -> a.n:
    bolts.TaskCompletionSource val$tcs -> bd
    bolts.Continuation val$continuation -> be
    java.util.concurrent.Executor val$executor -> bf
    bolts.CancellationToken val$ct -> bg
    bolts.Task this$0 -> bh
    void <init>(bolts.Task,bolts.TaskCompletionSource,bolts.Continuation,java.util.concurrent.Executor,bolts.CancellationToken) -> <init>
    java.lang.Void then(bolts.Task) -> then
    java.lang.Object then(bolts.Task) -> then
bolts.Task$14 -> a.o:
    bolts.CancellationToken val$ct -> bg
    bolts.TaskCompletionSource val$tcs -> bd
    bolts.Continuation val$continuation -> be
    bolts.Task val$task -> bi
    void <init>(bolts.CancellationToken,bolts.TaskCompletionSource,bolts.Continuation,bolts.Task) -> <init>
    void run() -> run
bolts.Task$15 -> a.p:
    bolts.CancellationToken val$ct -> bg
    bolts.TaskCompletionSource val$tcs -> bd
    bolts.Continuation val$continuation -> be
    bolts.Task val$task -> bi
    void <init>(bolts.CancellationToken,bolts.TaskCompletionSource,bolts.Continuation,bolts.Task) -> <init>
    void run() -> run
bolts.Task$15$1 -> a.q:
    bolts.Task$15 this$0 -> bj
    void <init>(bolts.Task$15) -> <init>
    java.lang.Void then(bolts.Task) -> then
    java.lang.Object then(bolts.Task) -> then
bolts.Task$4 -> a.r:
    bolts.CancellationToken val$ct -> bg
    bolts.TaskCompletionSource val$tcs -> bd
    java.util.concurrent.Callable val$callable -> bk
    void <init>(bolts.CancellationToken,bolts.TaskCompletionSource,java.util.concurrent.Callable) -> <init>
    void run() -> run
bolts.Task$UnobservedExceptionHandler -> a.s:
    void unobservedException(bolts.Task,bolts.UnobservedTaskException) -> a
bolts.TaskCompletionSource -> a.t:
    bolts.Task task -> bl
    void <init>() -> <init>
    bolts.Task getTask() -> G
    boolean trySetCancelled() -> F
    boolean trySetResult(java.lang.Object) -> b
    boolean trySetError(java.lang.Exception) -> b
    void setCancelled() -> H
    void setResult(java.lang.Object) -> c
    void setError(java.lang.Exception) -> c
bolts.UnobservedErrorNotifier -> a.u:
    bolts.Task task -> bl
    void <init>(bolts.Task) -> <init>
    void finalize() -> finalize
    void setObserved() -> I
bolts.UnobservedTaskException -> a.v:
    void <init>(java.lang.Throwable) -> <init>
com.baidu.location.Address -> com.baidu.location.Address:
    java.lang.String country -> country
    java.lang.String countryCode -> countryCode
    java.lang.String province -> province
    java.lang.String city -> city
    java.lang.String cityCode -> cityCode
    java.lang.String district -> district
    java.lang.String street -> street
    java.lang.String streetNumber -> streetNumber
    java.lang.String address -> address
    void <init>(com.baidu.location.Address$Builder) -> <init>
    void <init>(com.baidu.location.Address$Builder,com.baidu.location.Address$1) -> <init>
com.baidu.location.Address$1 -> com.baidu.location.Address$1:
com.baidu.location.Address$Builder -> com.baidu.location.Address$Builder:
    java.lang.String mCountry -> mCountry
    java.lang.String mCountryCode -> mCountryCode
    java.lang.String mProvince -> mProvince
    java.lang.String mCity -> mCity
    java.lang.String mCityCode -> mCityCode
    java.lang.String mDistrict -> mDistrict
    java.lang.String mStreet -> mStreet
    java.lang.String mStreetNumber -> mStreetNumber
    java.lang.String mAddress -> mAddress
    java.lang.String BEI_JING -> BEI_JING
    java.lang.String TIAN_JIN -> TIAN_JIN
    java.lang.String CHONG_QIN -> CHONG_QIN
    java.lang.String SHANG_HAI -> SHANG_HAI
    void <init>() -> <init>
    com.baidu.location.Address$Builder country(java.lang.String) -> country
    com.baidu.location.Address$Builder countryCode(java.lang.String) -> countryCode
    com.baidu.location.Address$Builder province(java.lang.String) -> province
    com.baidu.location.Address$Builder city(java.lang.String) -> city
    com.baidu.location.Address$Builder cityCode(java.lang.String) -> cityCode
    com.baidu.location.Address$Builder district(java.lang.String) -> district
    com.baidu.location.Address$Builder street(java.lang.String) -> street
    com.baidu.location.Address$Builder streetNumber(java.lang.String) -> streetNumber
    com.baidu.location.Address build() -> build
    java.lang.String access$100(com.baidu.location.Address$Builder) -> access$100
    java.lang.String access$200(com.baidu.location.Address$Builder) -> access$200
    java.lang.String access$300(com.baidu.location.Address$Builder) -> access$300
    java.lang.String access$400(com.baidu.location.Address$Builder) -> access$400
    java.lang.String access$500(com.baidu.location.Address$Builder) -> access$500
    java.lang.String access$600(com.baidu.location.Address$Builder) -> access$600
    java.lang.String access$700(com.baidu.location.Address$Builder) -> access$700
    java.lang.String access$800(com.baidu.location.Address$Builder) -> access$800
    java.lang.String access$900(com.baidu.location.Address$Builder) -> access$900
com.baidu.location.BDLocation -> com.baidu.location.BDLocation:
    int TypeNone -> TypeNone
    int TypeGpsLocation -> TypeGpsLocation
    int TypeCriteriaException -> TypeCriteriaException
    int TypeNetWorkException -> TypeNetWorkException
    int TypeOffLineLocation -> TypeOffLineLocation
    int TypeOffLineLocationFail -> TypeOffLineLocationFail
    int TypeOffLineLocationNetworkFail -> TypeOffLineLocationNetworkFail
    int TypeNetWorkLocation -> TypeNetWorkLocation
    int TypeCacheLocation -> TypeCacheLocation
    int TypeServerError -> TypeServerError
    int TypeServerDecryptError -> TypeServerDecryptError
    int TypeServerCheckKeyError -> TypeServerCheckKeyError
    int LOCATION_WHERE_UNKNOW -> LOCATION_WHERE_UNKNOW
    int LOCATION_WHERE_IN_CN -> LOCATION_WHERE_IN_CN
    int LOCATION_WHERE_OUT_CN -> LOCATION_WHERE_OUT_CN
    int USER_INDOOR_UNKNOW -> USER_INDOOR_UNKNOW
    int USER_INDDOR_TRUE -> USER_INDDOR_TRUE
    int USER_INDOOR_FALSE -> USER_INDOOR_FALSE
    int INDOOR_LOCATION_SURPPORT_UNKNOW -> INDOOR_LOCATION_SURPPORT_UNKNOW
    int INDOOR_LOCATION_SURPPORT_TRUE -> INDOOR_LOCATION_SURPPORT_TRUE
    int INDOOR_LOCATION_SURPPORT_FALSE -> INDOOR_LOCATION_SURPPORT_FALSE
    int INDOOR_NETWORK_STATE_HIGH -> INDOOR_NETWORK_STATE_HIGH
    int INDOOR_NETWORK_STATE_MIDDLE -> INDOOR_NETWORK_STATE_MIDDLE
    int INDOOR_NETWORK_STATE_LOW -> INDOOR_NETWORK_STATE_LOW
    int OPERATORS_TYPE_UNKONW -> OPERATORS_TYPE_UNKONW
    int OPERATORS_TYPE_MOBILE -> OPERATORS_TYPE_MOBILE
    int OPERATORS_TYPE_UNICOM -> OPERATORS_TYPE_UNICOM
    int OPERATORS_TYPE_TELECOMU -> OPERATORS_TYPE_TELECOMU
    java.lang.String BDLOCATION_GCJ02_TO_BD09 -> BDLOCATION_GCJ02_TO_BD09
    java.lang.String BDLOCATION_GCJ02_TO_BD09LL -> BDLOCATION_GCJ02_TO_BD09LL
    java.lang.String BDLOCATION_BD09_TO_GCJ02 -> BDLOCATION_BD09_TO_GCJ02
    java.lang.String BDLOCATION_BD09LL_TO_GCJ02 -> BDLOCATION_BD09LL_TO_GCJ02
    int mLocType -> mLocType
    java.lang.String mTime -> mTime
    double mLatitude -> mLatitude
    double mLongitude -> mLongitude
    boolean mHasAltitude -> mHasAltitude
    double mAltitude -> mAltitude
    boolean mHasSpeed -> mHasSpeed
    float mSpeed -> mSpeed
    boolean mHasRadius -> mHasRadius
    float mRadius -> mRadius
    boolean mHasSateNumber -> mHasSateNumber
    int mSatelliteNumber -> mSatelliteNumber
    float mDerect -> mDerect
    java.lang.String mCoorType -> mCoorType
    boolean mHasAddr -> mHasAddr
    java.lang.String mAddrStr -> mAddrStr
    java.lang.String mSemaAptag -> mSemaAptag
    java.lang.String mSemaPoiRegion -> mSemaPoiRegion
    java.lang.String mSemaRegular -> mSemaRegular
    boolean isCellChangeFlag -> isCellChangeFlag
    com.baidu.location.Address mAddr -> mAddr
    java.lang.String floor -> floor
    java.lang.String buildingid -> buildingid
    java.lang.String mBuildingName -> mBuildingName
    boolean indoorLocMode -> indoorLocMode
    int mParkState -> mParkState
    int mLocationWhere -> mLocationWhere
    java.lang.String netWorkLocationType -> netWorkLocationType
    int mOperators -> mOperators
    java.lang.String mCu -> mCu
    int mIndoorState -> mIndoorState
    int mIndoorLocationSurpport -> mIndoorLocationSurpport
    int mIndoorNetworkState -> mIndoorNetworkState
    java.util.List mPoiList -> mPoiList
    java.lang.String mDescription -> mDescription
    android.os.Parcelable$Creator CREATOR -> CREATOR
    void <init>() -> <init>
    void <init>(com.baidu.location.BDLocation) -> <init>
    void <init>(java.lang.String) -> <init>
    java.util.List getPoiList() -> getPoiList
    void setPoiList(java.util.List) -> setPoiList
    void setCellChangeFlag(java.lang.Boolean) -> setCellChangeFlag
    boolean isCellChangeFlag() -> isCellChangeFlag
    int getUserIndoorState() -> getUserIndoorState
    void setUserIndoorState(int) -> setUserIndoorState
    int getIndoorLocationSurpport() -> getIndoorLocationSurpport
    void setIndoorLocationSurpport(int) -> setIndoorLocationSurpport
    int getIndoorNetworkState() -> getIndoorNetworkState
    void setIndoorNetworkState(int) -> setIndoorNetworkState
    java.lang.String getTime() -> getTime
    void setTime(java.lang.String) -> setTime
    double getLatitude() -> getLatitude
    void setLatitude(double) -> setLatitude
    double getLongitude() -> getLongitude
    void setLongitude(double) -> setLongitude
    double getAltitude() -> getAltitude
    void setAltitude(double) -> setAltitude
    float getSpeed() -> getSpeed
    void setSpeed(float) -> setSpeed
    float getRadius() -> getRadius
    void setRadius(float) -> setRadius
    java.lang.String getCoorType() -> getCoorType
    void setCoorType(java.lang.String) -> setCoorType
    void setAddrStr(java.lang.String) -> setAddrStr
    boolean hasAltitude() -> hasAltitude
    boolean hasSpeed() -> hasSpeed
    boolean hasRadius() -> hasRadius
    void setLocType(int) -> setLocType
    int getLocType() -> getLocType
    java.lang.String getLocTypeDescription() -> getLocTypeDescription
    void setLocTypeDescription(java.lang.String) -> setLocTypeDescription
    void setSatelliteNumber(int) -> setSatelliteNumber
    int getSatelliteNumber() -> getSatelliteNumber
    float getDerect() -> getDerect
    float getDirection() -> getDirection
    void setDirection(float) -> setDirection
    boolean hasSateNumber() -> hasSateNumber
    boolean hasAddr() -> hasAddr
    com.baidu.location.Address getAddress() -> getAddress
    void setAddr(com.baidu.location.Address) -> setAddr
    java.lang.String getAddrStr() -> getAddrStr
    java.lang.String getProvince() -> getProvince
    java.lang.String getCity() -> getCity
    java.lang.String getCityCode() -> getCityCode
    java.lang.String getCountry() -> getCountry
    java.lang.String getCountryCode() -> getCountryCode
    java.lang.String getDistrict() -> getDistrict
    java.lang.String getStreet() -> getStreet
    java.lang.String getStreetNumber() -> getStreetNumber
    java.lang.String getLocationDescribe() -> getLocationDescribe
    void setLocationDescribe(java.lang.String) -> setLocationDescribe
    java.lang.String getFloor() -> getFloor
    void setFloor(java.lang.String) -> setFloor
    java.lang.String getBuildingID() -> getBuildingID
    void setBuildingID(java.lang.String) -> setBuildingID
    java.lang.String getBuildingName() -> getBuildingName
    void setBuildingName(java.lang.String) -> setBuildingName
    int isParkAvailable() -> isParkAvailable
    void setParkAvailable(int) -> setParkAvailable
    boolean isIndoorLocMode() -> isIndoorLocMode
    void setIndoorLocMode(boolean) -> setIndoorLocMode
    int getLocationWhere() -> getLocationWhere
    void setLocationWhere(int) -> setLocationWhere
    java.lang.String getSemaAptag() -> getSemaAptag
    java.lang.String getSemaPoiRegion() -> getSemaPoiRegion
    java.lang.String getSemaRegular() -> getSemaRegular
    java.lang.String getNetworkLocationType() -> getNetworkLocationType
    void setNetworkLocationType(java.lang.String) -> setNetworkLocationType
    int getOperators() -> getOperators
    void setOperators(int) -> setOperators
    int describeContents() -> describeContents
    void <init>(android.os.Parcel) -> <init>
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
    java.lang.String getCuid() -> getCuid
    java.lang.String getAdUrl(java.lang.String) -> getAdUrl
    java.lang.String getModel() -> getModel
    void internalSet(int,java.lang.String) -> internalSet
    void <init>(android.os.Parcel,com.baidu.location.BDLocation$1) -> <init>
    void <clinit>() -> <clinit>
com.baidu.location.BDLocation$1 -> com.baidu.location.BDLocation$1:
    void <init>() -> <init>
    com.baidu.location.BDLocation createFromParcel(android.os.Parcel) -> createFromParcel
    com.baidu.location.BDLocation[] newArray(int) -> newArray
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
com.baidu.location.BDLocationListener -> com.baidu.location.BDLocationListener:
    void onReceiveLocation(com.baidu.location.BDLocation) -> onReceiveLocation
com.baidu.location.BDNotifyListener -> com.baidu.location.BDNotifyListener:
    double mLatitude -> mLatitude
    double mLongitude -> mLongitude
    float mRadius -> mRadius
    float differDistance -> differDistance
    java.lang.String mCoorType -> mCoorType
    double mLatitudeC -> mLatitudeC
    double mLongitudeC -> mLongitudeC
    int Notified -> Notified
    boolean isAdded -> isAdded
    com.baidu.location.c.a mNotifyCache -> mNotifyCache
    void <init>() -> <init>
    void SetNotifyLocation(double,double,float,java.lang.String) -> SetNotifyLocation
    void onNotify(com.baidu.location.BDLocation,float) -> onNotify
com.baidu.location.Jni -> com.baidu.location.Jni:
    int a -> a
    int b -> b
    int c -> c
    int d -> d
    int e -> e
    int f -> f
    int g -> g
    int h -> h
    int i -> i
    boolean j -> j
    void <init>() -> <init>
    java.lang.String a(byte[],int) -> a
    java.lang.String b(double,double,int,int) -> b
    java.lang.String c(byte[],int) -> c
    java.lang.String ib(byte[],byte[]) -> ib
    java.lang.String sky() -> sky
    java.lang.String ee(java.lang.String,int) -> ee
    byte[] encrypt(byte[]) -> encrypt
    java.lang.String g(byte[]) -> g
    void f(byte[],byte[]) -> f
    java.lang.String encode(java.lang.String) -> encode
    java.lang.String decodeIBeacon(byte[],byte[]) -> decodeIBeacon
    java.lang.String en1(java.lang.String) -> en1
    java.lang.String encode2(java.lang.String) -> encode2
    long murmur(java.lang.String) -> murmur
    java.lang.Long encode3(java.lang.String) -> encode3
    java.lang.String getSkyKey() -> getSkyKey
    java.lang.String encodeOfflineLocationUpdateRequest(java.lang.String) -> encodeOfflineLocationUpdateRequest
    java.lang.String encodeTp4(java.lang.String) -> encodeTp4
    java.lang.String encodeNotLimit(java.lang.String,int) -> encodeNotLimit
    double[] coorEncrypt(double,double,java.lang.String) -> coorEncrypt
    void tr2(java.lang.String,java.lang.String) -> tr2
    java.lang.String gtr2(java.lang.String) -> gtr2
    java.lang.String Encrypt(java.lang.String) -> Encrypt
    java.lang.String a(byte[]) -> a
    void <clinit>() -> <clinit>
com.baidu.location.LLSInterface -> com.baidu.location.LLSInterface:
    void onCreate(android.content.Context) -> onCreate
    int onStartCommand(android.content.Intent,int,int) -> onStartCommand
    android.os.IBinder onBind(android.content.Intent) -> onBind
    boolean onUnBind(android.content.Intent) -> onUnBind
    void onDestroy() -> onDestroy
    double getVersion() -> getVersion
com.baidu.location.LocationClient -> com.baidu.location.LocationClient:
    java.lang.String mTAG -> mTAG
    int MSG_START -> MSG_START
    int MSG_STOP -> MSG_STOP
    int MSG_SET_OPT -> MSG_SET_OPT
    int MSG_REQ_LOC -> MSG_REQ_LOC
    int MSG_REG_LISTENER -> MSG_REG_LISTENER
    int MSG_UNREG_LISTENER -> MSG_UNREG_LISTENER
    int MSG_REQ_POI -> MSG_REQ_POI
    int MSG_REG_NOTIFY_LISTENER -> MSG_REG_NOTIFY_LISTENER
    int MSG_RIGSTER_NOTIFY -> MSG_RIGSTER_NOTIFY
    int MSG_REMOVE_NOTIFY -> MSG_REMOVE_NOTIFY
    int MSG_REQ_NOTIFY_LOC -> MSG_REQ_NOTIFY_LOC
    int MSG_REQ_OFFLINE_LOC -> MSG_REQ_OFFLINE_LOC
    int MIN_REQUEST_SPAN -> MIN_REQUEST_SPAN
    long mLastRequestTime -> mLastRequestTime
    java.lang.String mPackName -> mPackName
    com.baidu.location.LocationClientOption mOption -> mOption
    boolean mIsStarted -> mIsStarted
    android.content.Context mContext -> mContext
    android.os.Messenger mServer -> mServer
    com.baidu.location.LocationClient$a mHandler -> mHandler
    android.os.Messenger mMessenger -> mMessenger
    java.util.ArrayList mLocationListeners -> mLocationListeners
    com.baidu.location.BDLocation mLastLocation -> mLastLocation
    boolean isWaitingForLocation -> isWaitingForLocation
    boolean isWaitingLocTag -> isWaitingLocTag
    boolean isScheduled -> isScheduled
    com.baidu.location.LocationClient$b mScheduledRequest -> mScheduledRequest
    boolean mGpsStatus -> mGpsStatus
    java.lang.Object mLock -> mLock
    long lastReceiveGpsTime -> lastReceiveGpsTime
    long lastReceiveLocationTime -> lastReceiveLocationTime
    com.baidu.location.c.a mNotifyCache -> mNotifyCache
    com.baidu.location.BDLocationListener NotifyLocationListenner -> NotifyLocationListenner
    java.lang.String serviceName -> serviceName
    java.lang.String mKey -> mKey
    boolean inDoorState -> inDoorState
    boolean isStop -> isStop
    java.lang.Boolean mConfig_map -> mConfig_map
    java.lang.Boolean mConfig_preimport -> mConfig_preimport
    java.lang.Boolean firstConnected -> firstConnected
    boolean mDebugByDev -> mDebugByDev
    com.baidu.location.a.b mloc -> mloc
    boolean clientFirst -> clientFirst
    boolean serverFirst -> serverFirst
    android.content.ServiceConnection mConnection -> mConnection
    void <init>(android.content.Context) -> <init>
    void <init>(android.content.Context,com.baidu.location.LocationClientOption) -> <init>
    com.baidu.location.LocationClientOption getLocOption() -> getLocOption
    void setLocOption(com.baidu.location.LocationClientOption) -> setLocOption
    boolean updateLocation(android.location.Location) -> updateLocation
    void requestNotifyLocation() -> requestNotifyLocation
    int requestOfflineLocation() -> requestOfflineLocation
    void onRequestOffLineLocation() -> onRequestOffLineLocation
    int requestLocation() -> requestLocation
    boolean isStarted() -> isStarted
    com.baidu.location.BDLocation getLastKnownLocation() -> getLastKnownLocation
    java.lang.String getVersion() -> getVersion
    void start() -> start
    void onStart() -> onStart
    void stop() -> stop
    void onStop() -> onStop
    void registerNotify(com.baidu.location.BDNotifyListener) -> registerNotify
    void onRegisterNotify(android.os.Message) -> onRegisterNotify
    void removeNotifyEvent(com.baidu.location.BDNotifyListener) -> removeNotifyEvent
    void onRemoveNotifyEvent(android.os.Message) -> onRemoveNotifyEvent
    void onSetOption(android.os.Message) -> onSetOption
    android.os.Bundle getOptionBundle() -> getOptionBundle
    void registerNotifyLocationListener(com.baidu.location.BDLocationListener) -> registerNotifyLocationListener
    void onRegisterNotifyLocationListener(android.os.Message) -> onRegisterNotifyLocationListener
    void registerLocationListener(com.baidu.location.BDLocationListener) -> registerLocationListener
    void onRegisterListener(android.os.Message) -> onRegisterListener
    void unRegisterLocationListener(com.baidu.location.BDLocationListener) -> unRegisterLocationListener
    void onUnRegisterListener(android.os.Message) -> onUnRegisterListener
    void onRequestNotifyLocation() -> onRequestNotifyLocation
    void onRequestLocation() -> onRequestLocation
    void onNewLocation(android.os.Message,int) -> onNewLocation
    void onNewNotifyLocation(android.os.Message) -> onNewNotifyLocation
    void callListeners(int) -> callListeners
    java.lang.String getAccessKey() -> getAccessKey
    com.baidu.location.BDLocation getBDLocationInCoorType(com.baidu.location.BDLocation,java.lang.String) -> getBDLocationInCoorType
    void sendFirstLoc(com.baidu.location.BDLocation) -> sendFirstLoc
    void onReceiveLocation(com.baidu.location.BDLocation) -> onReceiveLocation
    android.os.Messenger access$102(com.baidu.location.LocationClient,android.os.Messenger) -> access$102
    android.os.Messenger access$100(com.baidu.location.LocationClient) -> access$100
    boolean access$202(com.baidu.location.LocationClient,boolean) -> access$202
    boolean access$300(com.baidu.location.LocationClient) -> access$300
    com.baidu.location.LocationClient$a access$400(com.baidu.location.LocationClient) -> access$400
    android.os.Messenger access$500(com.baidu.location.LocationClient) -> access$500
    android.os.Bundle access$600(com.baidu.location.LocationClient) -> access$600
    com.baidu.location.LocationClientOption access$700(com.baidu.location.LocationClient) -> access$700
    java.lang.Boolean access$800(com.baidu.location.LocationClient) -> access$800
    java.lang.Boolean access$802(com.baidu.location.LocationClient,java.lang.Boolean) -> access$802
    java.lang.Object access$1000(com.baidu.location.LocationClient) -> access$1000
    boolean access$1102(com.baidu.location.LocationClient,boolean) -> access$1102
    java.util.ArrayList access$1200(com.baidu.location.LocationClient) -> access$1200
    boolean access$1300(com.baidu.location.LocationClient) -> access$1300
    com.baidu.location.LocationClient$b access$1400(com.baidu.location.LocationClient) -> access$1400
    com.baidu.location.LocationClient$b access$1402(com.baidu.location.LocationClient,com.baidu.location.LocationClient$b) -> access$1402
    void access$1500(com.baidu.location.LocationClient,android.os.Message) -> access$1500
    void access$1600(com.baidu.location.LocationClient,android.os.Message) -> access$1600
    void access$1700(com.baidu.location.LocationClient,android.os.Message) -> access$1700
    void access$1800(com.baidu.location.LocationClient,android.os.Message) -> access$1800
    void access$1900(com.baidu.location.LocationClient,android.os.Message) -> access$1900
    void access$2000(com.baidu.location.LocationClient,android.os.Message) -> access$2000
    void access$2100(com.baidu.location.LocationClient) -> access$2100
    void access$2200(com.baidu.location.LocationClient) -> access$2200
    void access$2300(com.baidu.location.LocationClient) -> access$2300
    void access$2400(com.baidu.location.LocationClient) -> access$2400
    void access$2500(com.baidu.location.LocationClient) -> access$2500
    boolean access$2602(com.baidu.location.LocationClient,boolean) -> access$2602
    boolean access$2700(com.baidu.location.LocationClient) -> access$2700
    boolean access$2800(com.baidu.location.LocationClient) -> access$2800
    boolean access$2702(com.baidu.location.LocationClient,boolean) -> access$2702
    void access$2900(com.baidu.location.LocationClient,android.os.Message,int) -> access$2900
    void access$3000(com.baidu.location.LocationClient,android.os.Message) -> access$3000
    void access$3100(com.baidu.location.LocationClient,com.baidu.location.BDLocation) -> access$3100
com.baidu.location.LocationClient$1 -> com.baidu.location.LocationClient$1:
    com.baidu.location.LocationClient a -> a
    void <init>(com.baidu.location.LocationClient) -> <init>
    void onServiceConnected(android.content.ComponentName,android.os.IBinder) -> onServiceConnected
    void onServiceDisconnected(android.content.ComponentName) -> onServiceDisconnected
com.baidu.location.LocationClient$a -> com.baidu.location.LocationClient$a:
    com.baidu.location.LocationClient a -> a
    void <init>(com.baidu.location.LocationClient) -> <init>
    void handleMessage(android.os.Message) -> handleMessage
    void <init>(com.baidu.location.LocationClient,com.baidu.location.LocationClient$1) -> <init>
com.baidu.location.LocationClient$b -> com.baidu.location.LocationClient$b:
    com.baidu.location.LocationClient a -> a
    void <init>(com.baidu.location.LocationClient) -> <init>
    void run() -> run
    void <init>(com.baidu.location.LocationClient,com.baidu.location.LocationClient$1) -> <init>
com.baidu.location.LocationClientOption -> com.baidu.location.LocationClientOption:
    int MIN_SCAN_SPAN -> MIN_SCAN_SPAN
    int GpsFirst -> GpsFirst
    int NetWorkFirst -> NetWorkFirst
    int GpsOnly -> GpsOnly
    java.lang.String coorType -> coorType
    java.lang.String addrType -> addrType
    boolean openGps -> openGps
    int scanSpan -> scanSpan
    int timeOut -> timeOut
    java.lang.String prodName -> prodName
    int priority -> priority
    boolean location_change_notify -> location_change_notify
    boolean disableLocCache -> disableLocCache
    boolean enableSimulateGps -> enableSimulateGps
    java.lang.String serviceName -> serviceName
    boolean isIgnoreCacheException -> isIgnoreCacheException
    boolean isIgnoreKillProcess -> isIgnoreKillProcess
    boolean mIsNeedDeviceDirect -> mIsNeedDeviceDirect
    boolean isNeedAptag -> isNeedAptag
    boolean isNeedAptagd -> isNeedAptagd
    boolean isNeedPoiRegion -> isNeedPoiRegion
    boolean isNeedRegular -> isNeedRegular
    boolean isNeedAltitude -> isNeedAltitude
    com.baidu.location.LocationClientOption$LocationMode mLocationMode -> mLocationMode
    int LOC_SENSITIVITY_HIGHT -> LOC_SENSITIVITY_HIGHT
    int LOC_SENSITIVITY_MIDDLE -> LOC_SENSITIVITY_MIDDLE
    int LOC_SENSITIVITY_LOW -> LOC_SENSITIVITY_LOW
    int MIN_AUTO_NOTIFY_INTERVAL -> MIN_AUTO_NOTIFY_INTERVAL
    int autoNotifyMaxInterval -> autoNotifyMaxInterval
    float autoNotifyLocSensitivity -> autoNotifyLocSensitivity
    int autoNotifyMinTimeInterval -> autoNotifyMinTimeInterval
    int autoNotifyMinDistance -> autoNotifyMinDistance
    void <init>() -> <init>
    void <init>(com.baidu.location.LocationClientOption) -> <init>
    boolean optionEquals(com.baidu.location.LocationClientOption) -> optionEquals
    java.lang.String getCoorType() -> getCoorType
    void setCoorType(java.lang.String) -> setCoorType
    java.lang.String getAddrType() -> getAddrType
    void setAddrType(java.lang.String) -> setAddrType
    void setIsNeedAddress(boolean) -> setIsNeedAddress
    boolean isOpenGps() -> isOpenGps
    void setOpenGps(boolean) -> setOpenGps
    boolean isLocationNotify() -> isLocationNotify
    void setLocationNotify(boolean) -> setLocationNotify
    void setOpenAutoNotifyMode() -> setOpenAutoNotifyMode
    void setOpenAutoNotifyMode(int,int,int) -> setOpenAutoNotifyMode
    int getAutoNotifyMaxInterval() -> getAutoNotifyMaxInterval
    int getAutoNotifyMinTimeInterval() -> getAutoNotifyMinTimeInterval
    int getAutoNotifyMinDistance() -> getAutoNotifyMinDistance
    float getAutoNotifyLocSensitivity() -> getAutoNotifyLocSensitivity
    int getScanSpan() -> getScanSpan
    void setScanSpan(int) -> setScanSpan
    int getTimeOut() -> getTimeOut
    void setTimeOut(int) -> setTimeOut
    java.lang.String getProdName() -> getProdName
    void setProdName(java.lang.String) -> setProdName
    int getPriority() -> getPriority
    void setPriority(int) -> setPriority
    void setLocationMode(com.baidu.location.LocationClientOption$LocationMode) -> setLocationMode
    com.baidu.location.LocationClientOption$LocationMode getLocationMode() -> getLocationMode
    void setNeedDeviceDirect(boolean) -> setNeedDeviceDirect
    java.lang.String getServiceName() -> getServiceName
    void setServiceName(java.lang.String) -> setServiceName
    void setIsNeedLocationDescribe(boolean) -> setIsNeedLocationDescribe
    void setIsNeedAltitude(boolean) -> setIsNeedAltitude
    void setIsNeedLocationPoiList(boolean) -> setIsNeedLocationPoiList
    void setSema(boolean,boolean,boolean) -> setSema
    void disableCache(boolean) -> disableCache
    boolean isDisableCache() -> isDisableCache
    void SetIgnoreCacheException(boolean) -> SetIgnoreCacheException
    void setIgnoreKillProcess(boolean) -> setIgnoreKillProcess
    void setEnableSimulateGps(boolean) -> setEnableSimulateGps
com.baidu.location.LocationClientOption$1 -> com.baidu.location.LocationClientOption$1:
    int[] a -> a
    void <clinit>() -> <clinit>
com.baidu.location.LocationClientOption$LocationMode -> com.baidu.location.LocationClientOption$LocationMode:
    com.baidu.location.LocationClientOption$LocationMode Hight_Accuracy -> Hight_Accuracy
    com.baidu.location.LocationClientOption$LocationMode Battery_Saving -> Battery_Saving
    com.baidu.location.LocationClientOption$LocationMode Device_Sensors -> Device_Sensors
    com.baidu.location.LocationClientOption$LocationMode[] $VALUES -> $VALUES
    com.baidu.location.LocationClientOption$LocationMode[] values() -> values
    com.baidu.location.LocationClientOption$LocationMode valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.baidu.location.Poi -> com.baidu.location.Poi:
    double mRank -> mRank
    java.lang.String mId -> mId
    java.lang.String mName -> mName
    android.os.Parcelable$Creator CREATOR -> CREATOR
    void <init>(java.lang.String,java.lang.String,double) -> <init>
    java.lang.String getId() -> getId
    double getRank() -> getRank
    java.lang.String getName() -> getName
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
    void <clinit>() -> <clinit>
com.baidu.location.Poi$1 -> com.baidu.location.Poi$1:
    void <init>() -> <init>
    com.baidu.location.Poi createFromParcel(android.os.Parcel) -> createFromParcel
    com.baidu.location.Poi[] newArray(int) -> newArray
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
com.baidu.location.a.a -> com.baidu.location.a.a:
    com.baidu.location.a.a b -> b
    java.util.ArrayList c -> c
    boolean d -> d
    boolean a -> a
    com.baidu.location.BDLocation e -> e
    com.baidu.location.a.a a() -> a
    void <init>() -> <init>
    void b() -> b
    void a(android.os.Message) -> a
    void b(android.os.Message) -> b
    boolean c(android.os.Message) -> c
    void a(com.baidu.location.BDLocation) -> a
    void a(java.lang.String) -> a
    java.lang.String c() -> c
    int d(android.os.Message) -> d
    int e(android.os.Message) -> e
    com.baidu.location.a.a$a a(android.os.Messenger) -> a
    void a(com.baidu.location.a.a$a) -> a
    void e() -> e
    void f() -> f
    void d() -> d
    void <clinit>() -> <clinit>
com.baidu.location.a.a$a -> com.baidu.location.a.a$a:
    java.lang.String a -> a
    android.os.Messenger b -> b
    com.baidu.location.LocationClientOption c -> c
    int d -> d
    com.baidu.location.a.a e -> e
    void <init>(com.baidu.location.a.a,android.os.Message) -> <init>
    void a(com.baidu.location.BDLocation) -> a
    void a(com.baidu.location.BDLocation,int) -> a
    void a() -> a
    void a(int) -> a
    void a(int,java.lang.String,com.baidu.location.BDLocation) -> a
    void a(com.baidu.location.a.a$a,int) -> a
com.baidu.location.a.b -> com.baidu.location.a.b:
    android.content.Context b -> b
    android.telephony.TelephonyManager c -> c
    com.baidu.location.a.b$a d -> d
    java.lang.reflect.Method e -> e
    java.lang.reflect.Method f -> f
    java.lang.reflect.Method g -> g
    java.lang.Class h -> h
    android.net.wifi.WifiManager i -> i
    com.baidu.location.a.b$d j -> j
    java.lang.String k -> k
    com.baidu.location.LocationClientOption l -> l
    com.baidu.location.a.b$b m -> m
    java.lang.String n -> n
    com.baidu.location.a.b$c a -> a
    void <init>(android.content.Context,com.baidu.location.LocationClientOption,com.baidu.location.a.b$b) -> <init>
    java.lang.String a() -> a
    java.lang.String b() -> b
    java.lang.String a(int) -> a
    void c() -> c
    void a(android.telephony.CellLocation) -> a
    android.content.Context a(com.baidu.location.a.b) -> a
    com.baidu.location.LocationClientOption b(com.baidu.location.a.b) -> b
    com.baidu.location.a.b$b c(com.baidu.location.a.b) -> c
    void <clinit>() -> <clinit>
com.baidu.location.a.b$1 -> com.baidu.location.a.b$1:
com.baidu.location.a.b$a -> com.baidu.location.a.b$a:
    int a -> a
    int b -> b
    int c -> c
    int d -> d
    char e -> e
    com.baidu.location.a.b f -> f
    void <init>(com.baidu.location.a.b) -> <init>
    boolean d() -> d
    int a() -> a
    java.lang.String b() -> b
    java.lang.String c() -> c
    void <init>(com.baidu.location.a.b,com.baidu.location.a.b$1) -> <init>
    boolean a(com.baidu.location.a.b$a) -> a
com.baidu.location.a.b$b -> com.baidu.location.a.b$b:
    void onReceiveLocation(com.baidu.location.BDLocation) -> onReceiveLocation
com.baidu.location.a.b$c -> com.baidu.location.a.b$c:
    java.lang.String a -> a
    com.baidu.location.a.b b -> b
    void <init>(com.baidu.location.a.b) -> <init>
    void a() -> a
    void a(boolean) -> a
    void a(java.lang.String) -> a
com.baidu.location.a.b$d -> com.baidu.location.a.b$d:
    java.util.List a -> a
    long c -> c
    com.baidu.location.a.b b -> b
    void <init>(com.baidu.location.a.b,java.util.List) -> <init>
    int a() -> a
    java.lang.String a(int) -> a
    void b() -> b
com.baidu.location.a.c -> com.baidu.location.a.c:
    com.baidu.location.a.c a -> a
    java.lang.String b -> b
    java.io.File c -> c
    java.lang.StringBuffer d -> d
    boolean e -> e
    int f -> f
    int g -> g
    long h -> h
    long i -> i
    long j -> j
    double k -> k
    double l -> l
    int m -> m
    int n -> n
    int o -> o
    java.lang.String p -> p
    boolean q -> q
    com.baidu.location.a.c a() -> a
    void <init>(java.lang.String) -> <init>
    boolean a(android.location.Location) -> a
    boolean a(android.location.Location,int,int) -> a
    boolean a(java.lang.String) -> a
    java.lang.String a(int) -> a
    void c() -> c
    java.lang.String b() -> b
    boolean d() -> d
    boolean a(int,int,int) -> a
    void <clinit>() -> <clinit>
com.baidu.location.a.d -> com.baidu.location.a.d:
    com.baidu.location.e.i a -> a
    com.baidu.location.e.a b -> b
    boolean e -> e
    boolean f -> f
    java.lang.String c -> c
    android.os.Handler d -> d
    void <init>() -> <init>
    void a(android.os.Message) -> a
    void a() -> a
    java.lang.String a(java.lang.String) -> a
    void <clinit>() -> <clinit>
com.baidu.location.a.d$a -> com.baidu.location.a.d$a:
    com.baidu.location.a.d a -> a
    void <init>(com.baidu.location.a.d) -> <init>
    void handleMessage(android.os.Message) -> handleMessage
com.baidu.location.a.d$b -> com.baidu.location.a.d$b:
    java.lang.String a -> a
    java.lang.String b -> b
    com.baidu.location.a.d c -> c
    void <init>(com.baidu.location.a.d) -> <init>
    void a() -> a
    void a(boolean) -> a
    void a(java.lang.String) -> a
com.baidu.location.a.e -> com.baidu.location.a.e:
    com.baidu.location.a.e i -> i
    int e -> e
    boolean j -> j
    com.baidu.location.a.d$b f -> f
    java.lang.String k -> k
    com.baidu.location.BDLocation l -> l
    com.baidu.location.BDLocation m -> m
    com.baidu.location.e.i n -> n
    com.baidu.location.e.a o -> o
    com.baidu.location.e.i p -> p
    com.baidu.location.e.a q -> q
    boolean r -> r
    boolean s -> s
    boolean t -> t
    long u -> u
    long v -> v
    com.baidu.location.Address w -> w
    java.lang.String x -> x
    java.util.List y -> y
    double z -> z
    double A -> A
    boolean B -> B
    long C -> C
    long D -> D
    com.baidu.location.a.e$a E -> E
    boolean F -> F
    boolean G -> G
    boolean H -> H
    android.os.Handler g -> g
    boolean I -> I
    com.baidu.location.a.e$b J -> J
    boolean K -> K
    boolean h -> h
    com.baidu.location.a.e b() -> b
    void <init>() -> <init>
    void b(android.os.Message) -> b
    void c() -> c
    void d() -> d
    void c(android.os.Message) -> c
    void d(android.os.Message) -> d
    void e(android.os.Message) -> e
    com.baidu.location.Address a(com.baidu.location.BDLocation) -> a
    java.lang.String e() -> e
    java.util.List f() -> f
    void f(android.os.Message) -> f
    boolean a(com.baidu.location.e.i) -> a
    boolean g() -> g
    boolean a(com.baidu.location.e.a) -> a
    boolean b(com.baidu.location.e.a) -> b
    boolean j() -> j
    void g(android.os.Message) -> g
    java.lang.String[] k() -> k
    void h() -> h
    void a(android.os.Message) -> a
    void a() -> a
    void i() -> i
    void l() -> l
    void m() -> m
    void a(boolean) -> a
    void b(com.baidu.location.BDLocation) -> b
    boolean a(com.baidu.location.a.e) -> a
    boolean a(com.baidu.location.a.e,boolean) -> a
    boolean b(com.baidu.location.a.e) -> b
    boolean b(com.baidu.location.a.e,boolean) -> b
    void a(com.baidu.location.a.e,android.os.Message) -> a
    boolean c(com.baidu.location.a.e) -> c
    boolean c(com.baidu.location.a.e,boolean) -> c
    boolean d(com.baidu.location.a.e) -> d
    void <clinit>() -> <clinit>
com.baidu.location.a.e$1 -> com.baidu.location.a.e$1:
com.baidu.location.a.e$a -> com.baidu.location.a.e$a:
    com.baidu.location.a.e a -> a
    void <init>(com.baidu.location.a.e) -> <init>
    void run() -> run
    void <init>(com.baidu.location.a.e,com.baidu.location.a.e$1) -> <init>
com.baidu.location.a.e$b -> com.baidu.location.a.e$b:
    com.baidu.location.a.e a -> a
    void <init>(com.baidu.location.a.e) -> <init>
    void run() -> run
    void <init>(com.baidu.location.a.e,com.baidu.location.a.e$1) -> <init>
com.baidu.location.a.f -> com.baidu.location.a.f:
    float[] a -> a
    float[] b -> b
    android.hardware.SensorManager c -> c
    com.baidu.location.a.f d -> d
    float e -> e
    double f -> f
    boolean g -> g
    boolean h -> h
    boolean i -> i
    float j -> j
    long k -> k
    boolean l -> l
    long m -> m
    com.baidu.location.a.f a() -> a
    void <init>() -> <init>
    void b() -> b
    void c() -> c
    void d() -> d
    void onSensorChanged(android.hardware.SensorEvent) -> onSensorChanged
    void onAccuracyChanged(android.hardware.Sensor,int) -> onAccuracyChanged
    void k() -> k
    float e() -> e
    void a(boolean) -> a
    void b(boolean) -> b
    boolean f() -> f
    boolean g() -> g
    float h() -> h
    double i() -> i
    android.hardware.SensorManager a(com.baidu.location.a.f) -> a
    com.baidu.location.a.f j() -> j
com.baidu.location.a.f$1 -> com.baidu.location.a.f$1:
    com.baidu.location.a.f a -> a
    void <init>(com.baidu.location.a.f) -> <init>
    void run() -> run
com.baidu.location.a.g -> com.baidu.location.a.g:
    java.lang.String a -> a
    java.lang.String b -> b
    java.lang.String c -> c
    java.lang.String d -> d
    int e -> e
    android.os.Handler f -> f
    com.baidu.location.a.g p -> p
    com.baidu.location.a.g b() -> b
    void <init>() -> <init>
    void c() -> c
    android.os.Handler f() -> f
    void a() -> a
    void a(boolean) -> a
    void g() -> g
    void h() -> h
    boolean i() -> i
    void j() -> j
    boolean a(java.lang.String,java.lang.String) -> a
    void a(java.io.File,java.io.File) -> a
    void a(com.baidu.location.a.g) -> a
    boolean b(com.baidu.location.a.g) -> b
    void c(com.baidu.location.a.g) -> c
    void <clinit>() -> <clinit>
com.baidu.location.a.g$1 -> com.baidu.location.a.g$1:
    com.baidu.location.a.g a -> a
    void <init>(com.baidu.location.a.g) -> <init>
    void run() -> run
com.baidu.location.a.g$2 -> com.baidu.location.a.g$2:
    com.baidu.location.a.g a -> a
    void <init>(com.baidu.location.a.g) -> <init>
    void run() -> run
com.baidu.location.a.g$3 -> com.baidu.location.a.g$3:
    com.baidu.location.a.g a -> a
    void <init>(com.baidu.location.a.g) -> <init>
    void run() -> run
com.baidu.location.a.g$4 -> com.baidu.location.a.g$4:
    com.baidu.location.a.g a -> a
    void <init>(com.baidu.location.a.g) -> <init>
    void run() -> run
com.baidu.location.a.h -> com.baidu.location.a.h:
    long a -> a
    com.baidu.location.e.a b -> b
    android.location.Location c -> c
    java.lang.String d -> d
    void a(java.lang.String) -> a
    java.lang.String a() -> a
    long b() -> b
    void a(long) -> a
    com.baidu.location.e.a c() -> c
    void a(com.baidu.location.e.a) -> a
    android.location.Location d() -> d
    void a(android.location.Location) -> a
com.baidu.location.a.i -> com.baidu.location.a.i:
    java.util.ArrayList b -> b
    java.util.ArrayList c -> c
    java.util.ArrayList d -> d
    java.lang.String e -> e
    java.lang.String f -> f
    java.lang.String g -> g
    java.lang.String h -> h
    java.lang.String i -> i
    java.io.File j -> j
    int k -> k
    int l -> l
    int m -> m
    int n -> n
    double o -> o
    double p -> p
    double q -> q
    double r -> r
    int s -> s
    int t -> t
    int u -> u
    android.location.Location v -> v
    android.location.Location w -> w
    android.location.Location x -> x
    com.baidu.location.e.i y -> y
    com.baidu.location.a.i$a z -> z
    com.baidu.location.a.i A -> A
    int B -> B
    long a -> a
    com.baidu.location.a.i a() -> a
    void <init>() -> <init>
    java.lang.String b() -> b
    void a(com.baidu.location.e.a,com.baidu.location.e.i,android.location.Location,java.lang.String) -> a
    boolean a(android.location.Location,boolean) -> a
    boolean a(android.location.Location) -> a
    boolean a(android.location.Location,com.baidu.location.e.i) -> a
    void c() -> c
    void c(java.lang.String) -> c
    void d(java.lang.String) -> d
    void e(java.lang.String) -> e
    int a(java.util.List,int) -> a
    boolean a(int,int,int,int,long) -> a
    void a(java.lang.String) -> a
    void b(java.lang.String) -> b
    void a(int,boolean) -> a
    boolean a(java.lang.String,java.util.List) -> a
    java.lang.String d() -> d
    void e() -> e
    java.lang.String a(int) -> a
    java.lang.String f() -> f
    void <clinit>() -> <clinit>
com.baidu.location.a.i$a -> com.baidu.location.a.i$a:
    boolean a -> a
    int b -> b
    int c -> c
    java.util.ArrayList e -> e
    com.baidu.location.a.i d -> d
    void <init>(com.baidu.location.a.i) -> <init>
    void a() -> a
    void a(boolean) -> a
    void b() -> b
com.baidu.location.b.a -> com.baidu.location.b.a:
    com.baidu.location.b.a a -> a
    boolean b -> b
    android.os.Handler c -> c
    android.app.AlarmManager d -> d
    com.baidu.location.b.a$a e -> e
    android.app.PendingIntent f -> f
    long g -> g
    com.baidu.location.b.a a() -> a
    void <init>() -> <init>
    void b() -> b
    void f() -> f
    void c() -> c
    void g() -> g
    void d() -> d
    void e() -> e
    void a(com.baidu.location.b.a) -> a
    void b(com.baidu.location.b.a) -> b
    boolean c(com.baidu.location.b.a) -> c
    android.os.Handler d(com.baidu.location.b.a) -> d
    android.app.PendingIntent a(com.baidu.location.b.a,android.app.PendingIntent) -> a
    void <clinit>() -> <clinit>
com.baidu.location.b.a$1 -> com.baidu.location.b.a$1:
    com.baidu.location.b.a a -> a
    void <init>(com.baidu.location.b.a) -> <init>
    void handleMessage(android.os.Message) -> handleMessage
com.baidu.location.b.a$a -> com.baidu.location.b.a$a:
    com.baidu.location.b.a a -> a
    void <init>(com.baidu.location.b.a) -> <init>
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
    void <init>(com.baidu.location.b.a,com.baidu.location.b.a$1) -> <init>
com.baidu.location.b.b -> com.baidu.location.b.b:
    boolean a -> a
    java.lang.String b -> b
    com.baidu.location.b.b$a c -> c
    com.baidu.location.b.b d -> d
    int e -> e
    com.baidu.location.b.b a() -> a
    void <init>() -> <init>
    void b() -> b
    void c() -> c
    java.lang.String d() -> d
    boolean e() -> e
    int f() -> f
    boolean a(com.baidu.location.b.b,boolean) -> a
    int a(com.baidu.location.b.b,int) -> a
    java.lang.String a(com.baidu.location.b.b,java.lang.String) -> a
    void <clinit>() -> <clinit>
com.baidu.location.b.b$a -> com.baidu.location.b.b$a:
    com.baidu.location.b.b a -> a
    void <init>(com.baidu.location.b.b) -> <init>
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.baidu.location.b.c -> com.baidu.location.b.c:
    com.baidu.location.b.c i -> i
    com.baidu.location.b.c$a j -> j
    boolean a -> a
    boolean b -> b
    boolean c -> c
    boolean d -> d
    boolean e -> e
    boolean f -> f
    boolean g -> g
    boolean h -> h
    java.lang.String k -> k
    int l -> l
    int m -> m
    int n -> n
    com.baidu.location.b.c a() -> a
    void <init>() -> <init>
    void b() -> b
    void c() -> c
    void d() -> d
    void e() -> e
    boolean b(java.lang.String) -> b
    void a(org.json.JSONObject) -> a
    void f() -> f
    void g() -> g
    void h() -> h
    void a(java.lang.String) -> a
    void a(byte[]) -> a
    void c(java.lang.String) -> c
    void a(int) -> a
    void i() -> i
    void j() -> j
    void b(int) -> b
    void a(com.baidu.location.b.c,byte[]) -> a
    void a(com.baidu.location.b.c,java.lang.String) -> a
    void <clinit>() -> <clinit>
com.baidu.location.b.c$a -> com.baidu.location.b.c$a:
    java.lang.String a -> a
    boolean b -> b
    boolean c -> c
    com.baidu.location.b.c d -> d
    void <init>(com.baidu.location.b.c) -> <init>
    void a() -> a
    void a(boolean) -> a
    void a(java.lang.String,boolean) -> a
com.baidu.location.b.d -> com.baidu.location.b.d:
    com.baidu.location.b.d a -> a
    long b -> b
    long c -> c
    long d -> d
    java.lang.String e -> e
    java.lang.String f -> f
    java.lang.String g -> g
    java.lang.String h -> h
    int i -> i
    com.baidu.location.b.d$a j -> j
    com.baidu.location.b.d a() -> a
    void <init>() -> <init>
    java.lang.String b() -> b
    java.lang.String c() -> c
    void d() -> d
    void e() -> e
    void a(java.lang.String) -> a
    java.lang.String a(com.baidu.location.b.d) -> a
    long b(com.baidu.location.b.d) -> b
    java.lang.String a(com.baidu.location.b.d,java.lang.String) -> a
    java.lang.String b(com.baidu.location.b.d,java.lang.String) -> b
    int a(com.baidu.location.b.d,int) -> a
    long a(com.baidu.location.b.d,long) -> a
    long c(com.baidu.location.b.d) -> c
    void d(com.baidu.location.b.d) -> d
    java.lang.String c(com.baidu.location.b.d,java.lang.String) -> c
    java.lang.String d(com.baidu.location.b.d,java.lang.String) -> d
    long b(com.baidu.location.b.d,long) -> b
    void <clinit>() -> <clinit>
com.baidu.location.b.d$a -> com.baidu.location.b.d$a:
    boolean b -> b
    com.baidu.location.b.d a -> a
    void <init>(com.baidu.location.b.d) -> <init>
    void a() -> a
    void a(boolean) -> a
    void b() -> b
    void c() -> c
com.baidu.location.b.e -> com.baidu.location.b.e:
    com.baidu.location.b.e a -> a
    int b -> b
    com.baidu.location.b.e a() -> a
    void <init>() -> <init>
    void uncaughtException(java.lang.Thread,java.lang.Throwable) -> uncaughtException
    void a(java.io.File,java.lang.String,java.lang.String) -> a
    void b() -> b
    java.lang.String a(java.lang.Throwable) -> a
    boolean a(java.lang.String,java.lang.String) -> a
    void <clinit>() -> <clinit>
com.baidu.location.b.f -> com.baidu.location.b.f:
    com.baidu.location.b.f j -> j
    int k -> k
    double l -> l
    java.lang.String m -> m
    int n -> n
    int o -> o
    int p -> p
    int q -> q
    double r -> r
    double s -> s
    double t -> t
    int u -> u
    int v -> v
    int w -> w
    int x -> x
    int y -> y
    long z -> z
    com.baidu.location.b.f$a A -> A
    boolean B -> B
    boolean C -> C
    int D -> D
    float E -> E
    float F -> F
    long G -> G
    int H -> H
    long a -> a
    android.location.Location b -> b
    android.location.Location c -> c
    java.lang.StringBuilder d -> d
    long e -> e
    android.os.Handler I -> I
    java.lang.String f -> f
    byte[] J -> J
    byte[] K -> K
    int L -> L
    java.util.List M -> M
    boolean N -> N
    int g -> g
    double h -> h
    double i -> i
    com.baidu.location.b.f a() -> a
    void <init>() -> <init>
    void c() -> c
    void d() -> d
    void b() -> b
    boolean a(java.lang.String,android.content.Context) -> a
    void a(android.location.Location) -> a
    void b(android.location.Location) -> b
    boolean e() -> e
    void f() -> f
    void g() -> g
    void c(android.location.Location) -> c
    void h() -> h
    byte[] a(int) -> a
    void d(android.location.Location) -> d
    void e(android.location.Location) -> e
    void b(int) -> b
    byte[] a(java.lang.String) -> a
    java.lang.String a(java.io.File,java.lang.String) -> a
    void i() -> i
    java.lang.String b(java.lang.String) -> b
    void j() -> j
    void c(java.lang.String) -> c
    void d(java.lang.String) -> d
    void c(int) -> c
    void e(java.lang.String) -> e
    void a(com.baidu.location.b.f,android.location.Location) -> a
    java.lang.String a(com.baidu.location.b.f,java.io.File,java.lang.String) -> a
    void a(com.baidu.location.b.f,java.lang.String) -> a
    void <clinit>() -> <clinit>
com.baidu.location.b.f$1 -> com.baidu.location.b.f$1:
    android.location.Location a -> a
    com.baidu.location.b.f b -> b
    void <init>(com.baidu.location.b.f,android.location.Location) -> <init>
    void run() -> run
com.baidu.location.b.f$2 -> com.baidu.location.b.f$2:
    com.baidu.location.b.f a -> a
    void <init>(com.baidu.location.b.f) -> <init>
    void run() -> run
com.baidu.location.b.f$a -> com.baidu.location.b.f$a:
    java.lang.String a -> a
    com.baidu.location.b.f b -> b
    void <init>(com.baidu.location.b.f) -> <init>
    void a() -> a
    void a(boolean) -> a
    void a(java.lang.String) -> a
com.baidu.location.b.g -> com.baidu.location.b.g:
    com.baidu.location.b.g b -> b
    java.lang.String c -> c
    int d -> d
    int e -> e
    java.lang.String f -> f
    java.lang.String g -> g
    java.lang.String a -> a
    java.text.SimpleDateFormat h -> h
    com.baidu.location.b.h i -> i
    com.baidu.location.b.h j -> j
    com.baidu.location.b.g$a k -> k
    long l -> l
    com.baidu.location.b.g a() -> a
    void <init>() -> <init>
    com.baidu.location.b.h b() -> b
    void c() -> c
    void a(com.baidu.location.b.h) -> a
    void a(java.lang.String) -> a
    void d() -> d
    void b(java.lang.String) -> b
    boolean a(java.lang.String,java.util.List) -> a
    void a(java.lang.String,java.lang.String) -> a
    long a(com.baidu.location.b.g,long) -> a
    void <clinit>() -> <clinit>
com.baidu.location.b.g$a -> com.baidu.location.b.g$a:
    java.lang.String b -> b
    boolean c -> c
    com.baidu.location.b.g a -> a
    void <init>(com.baidu.location.b.g) -> <init>
    boolean b() -> b
    void a() -> a
    void a(boolean) -> a
    void a(java.lang.String) -> a
com.baidu.location.b.h -> com.baidu.location.b.h:
    long a -> a
    long b -> b
    long c -> c
    long d -> d
    int e -> e
    java.lang.String f -> f
    java.lang.String g -> g
    java.lang.String h -> h
    void <init>() -> <init>
    void a() -> a
    void a(long) -> a
    void b(long) -> b
    void c(long) -> c
    void d(long) -> d
    void a(boolean) -> a
    void a(java.lang.String) -> a
    void b(java.lang.String) -> b
    java.lang.String b() -> b
com.baidu.location.b.i -> com.baidu.location.b.i:
    com.baidu.location.b.i b -> b
    com.baidu.location.b.i$a c -> c
    boolean d -> d
    boolean e -> e
    boolean f -> f
    boolean g -> g
    boolean h -> h
    android.os.Handler a -> a
    com.baidu.location.b.i a() -> a
    void <init>() -> <init>
    void b() -> b
    void c() -> c
    void f() -> f
    void d() -> d
    void e() -> e
    boolean a(com.baidu.location.b.i) -> a
    boolean b(com.baidu.location.b.i) -> b
    boolean a(com.baidu.location.b.i,boolean) -> a
    void c(com.baidu.location.b.i) -> c
    void <clinit>() -> <clinit>
com.baidu.location.b.i$1 -> com.baidu.location.b.i$1:
com.baidu.location.b.i$a -> com.baidu.location.b.i$a:
    com.baidu.location.b.i a -> a
    void <init>(com.baidu.location.b.i) -> <init>
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
    void <init>(com.baidu.location.b.i,com.baidu.location.b.i$1) -> <init>
com.baidu.location.b.i$b -> com.baidu.location.b.i$b:
    com.baidu.location.b.i a -> a
    void <init>(com.baidu.location.b.i) -> <init>
    void run() -> run
    void <init>(com.baidu.location.b.i,com.baidu.location.b.i$1) -> <init>
com.baidu.location.b.i$b$1 -> com.baidu.location.b.i$b$1:
    com.baidu.location.b.i$b a -> a
    void <init>(com.baidu.location.b.i$b) -> <init>
    void run() -> run
com.baidu.location.c.a -> com.baidu.location.c.a:
    java.util.ArrayList a -> a
    float b -> b
    com.baidu.location.BDLocation c -> c
    long d -> d
    com.baidu.location.LocationClient e -> e
    android.content.Context f -> f
    int g -> g
    long h -> h
    boolean i -> i
    android.app.PendingIntent j -> j
    android.app.AlarmManager k -> k
    com.baidu.location.c.a$a l -> l
    com.baidu.location.c.a$b m -> m
    boolean n -> n
    void <init>(android.content.Context,com.baidu.location.LocationClient) -> <init>
    void a() -> a
    int a(com.baidu.location.BDNotifyListener) -> a
    void b(com.baidu.location.BDNotifyListener) -> b
    int c(com.baidu.location.BDNotifyListener) -> c
    boolean b() -> b
    void c() -> c
    void a(long) -> a
    void a(com.baidu.location.BDLocation) -> a
    java.util.ArrayList a(com.baidu.location.c.a) -> a
    void a(com.baidu.location.c.a,com.baidu.location.BDLocation) -> a
    com.baidu.location.LocationClient b(com.baidu.location.c.a) -> b
com.baidu.location.c.a$a -> com.baidu.location.c.a$a:
    com.baidu.location.c.a a -> a
    void <init>(com.baidu.location.c.a) -> <init>
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.baidu.location.c.a$b -> com.baidu.location.c.a$b:
    com.baidu.location.c.a a -> a
    void <init>(com.baidu.location.c.a) -> <init>
    void onReceiveLocation(com.baidu.location.BDLocation) -> onReceiveLocation
com.baidu.location.d.a -> com.baidu.location.d.a:
    com.baidu.location.d.a a -> a
    java.lang.String b -> b
    boolean c -> c
    boolean d -> d
    double e -> e
    double f -> f
    double g -> g
    double h -> h
    double i -> i
    boolean j -> j
    java.lang.String k -> k
    java.lang.String l -> l
    android.os.Handler m -> m
    com.baidu.location.d.a a() -> a
    void <init>() -> <init>
    void b() -> b
    com.baidu.location.BDLocation a(boolean) -> a
    com.baidu.location.BDLocation a(java.lang.String,java.util.List,boolean) -> a
    void a(java.lang.String,java.util.List) -> a
    void a(java.lang.String,android.database.sqlite.SQLiteDatabase) -> a
    void a(java.util.List,android.database.sqlite.SQLiteDatabase) -> a
    void a(java.lang.String,com.baidu.location.e.a,android.database.sqlite.SQLiteDatabase) -> a
    void a(com.baidu.location.e.i,com.baidu.location.BDLocation,android.database.sqlite.SQLiteDatabase) -> a
    void a(java.lang.String,com.baidu.location.e.a,com.baidu.location.e.i,com.baidu.location.BDLocation) -> a
    java.lang.String b(boolean) -> b
    void d() -> d
    void a(com.baidu.location.d.a) -> a
    void a(com.baidu.location.d.a,java.lang.String,java.util.List) -> a
    java.lang.String a(com.baidu.location.d.a,boolean) -> a
    boolean b(com.baidu.location.d.a,boolean) -> b
    java.lang.String c() -> c
    void a(com.baidu.location.d.a,java.lang.String,com.baidu.location.e.a,android.database.sqlite.SQLiteDatabase) -> a
    void a(com.baidu.location.d.a,com.baidu.location.e.i,com.baidu.location.BDLocation,android.database.sqlite.SQLiteDatabase) -> a
    void <clinit>() -> <clinit>
com.baidu.location.d.a$1 -> com.baidu.location.d.a$1:
    com.baidu.location.d.a a -> a
    void <init>(com.baidu.location.d.a) -> <init>
    void run() -> run
com.baidu.location.d.a$2 -> com.baidu.location.d.a$2:
    java.lang.String a -> a
    java.util.List b -> b
    com.baidu.location.d.a c -> c
    void <init>(com.baidu.location.d.a,java.lang.String,java.util.List) -> <init>
    java.lang.String a() -> a
    java.lang.Object call() -> call
com.baidu.location.d.a$a -> com.baidu.location.d.a$a:
    com.baidu.location.d.a a -> a
    void <init>(com.baidu.location.d.a) -> <init>
    java.lang.Boolean a(java.lang.Boolean[]) -> a
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
    void <init>(com.baidu.location.d.a,com.baidu.location.d.a$1) -> <init>
com.baidu.location.d.a$b -> com.baidu.location.d.a$b:
    com.baidu.location.d.a a -> a
    void <init>(com.baidu.location.d.a) -> <init>
    java.lang.Boolean a(java.lang.Object[]) -> a
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
    void <init>(com.baidu.location.d.a,com.baidu.location.d.a$1) -> <init>
com.baidu.location.d.b -> com.baidu.location.d.b:
    com.baidu.location.d.d a -> a
    int b -> b
    double c -> c
    double d -> d
    java.lang.Long e -> e
    com.baidu.location.d.b$c f -> f
    com.baidu.location.d.b$c g -> g
    android.database.sqlite.SQLiteDatabase h -> h
    android.database.sqlite.SQLiteDatabase i -> i
    java.lang.StringBuffer j -> j
    java.lang.StringBuffer k -> k
    java.util.HashSet l -> l
    java.util.concurrent.ConcurrentHashMap m -> m
    java.util.concurrent.ConcurrentHashMap n -> n
    java.lang.StringBuffer o -> o
    boolean p -> p
    void <init>(com.baidu.location.d.d) -> <init>
    android.database.sqlite.SQLiteDatabase a() -> a
    com.baidu.location.BDLocation a(java.lang.Long) -> a
    com.baidu.location.BDLocation a(java.util.LinkedHashMap,com.baidu.location.BDLocation,int) -> a
    void a(java.lang.String,java.lang.Long,com.baidu.location.BDLocation) -> a
    void a(java.util.LinkedHashMap) -> a
    void a(com.baidu.location.BDLocation,com.baidu.location.BDLocation,com.baidu.location.BDLocation,java.lang.String,java.lang.Long) -> a
    android.database.Cursor a(com.baidu.location.d.e$a) -> a
    double a(double,double,double,double) -> a
    int a(java.util.ArrayList,double) -> a
    void b() -> b
    void a(java.lang.String,java.lang.String,java.lang.String) -> a
    void a(java.lang.String[]) -> a
    void a(com.baidu.location.d.b,java.lang.String,java.lang.Long,com.baidu.location.BDLocation) -> a
    java.lang.StringBuffer a(com.baidu.location.d.b,java.lang.StringBuffer) -> a
    java.lang.StringBuffer b(com.baidu.location.d.b,java.lang.StringBuffer) -> b
    void a(com.baidu.location.d.b,java.util.LinkedHashMap) -> a
    void a(com.baidu.location.d.b,com.baidu.location.BDLocation,com.baidu.location.BDLocation,com.baidu.location.BDLocation,java.lang.String,java.lang.Long) -> a
    com.baidu.location.d.d a(com.baidu.location.d.b) -> a
    android.database.sqlite.SQLiteDatabase b(com.baidu.location.d.b) -> b
    android.database.sqlite.SQLiteDatabase c(com.baidu.location.d.b) -> c
    void a(com.baidu.location.d.b,java.lang.String[]) -> a
    void a(com.baidu.location.d.b,java.lang.String,java.lang.String,java.lang.String) -> a
    com.baidu.location.d.b$c d(com.baidu.location.d.b) -> d
com.baidu.location.d.b$1 -> com.baidu.location.d.b$1:
    com.baidu.location.d.b a -> a
    void <init>(com.baidu.location.d.b,java.lang.String,java.lang.Long,com.baidu.location.BDLocation,com.baidu.location.BDLocation,com.baidu.location.BDLocation,java.lang.String,java.util.LinkedHashMap) -> <init>
com.baidu.location.d.b$a -> com.baidu.location.d.b$a:
    double a -> a
    double b -> b
    double c -> c
    void <init>(double,double,double) -> <init>
    void <init>(double,double,double,com.baidu.location.d.b$1) -> <init>
com.baidu.location.d.b$b -> com.baidu.location.d.b$b:
    java.lang.String a -> a
    java.lang.Long c -> c
    com.baidu.location.BDLocation d -> d
    com.baidu.location.BDLocation e -> e
    com.baidu.location.BDLocation f -> f
    java.lang.String g -> g
    java.util.LinkedHashMap h -> h
    com.baidu.location.d.b b -> b
    void <init>(com.baidu.location.d.b,java.lang.String,java.lang.Long,com.baidu.location.BDLocation,com.baidu.location.BDLocation,com.baidu.location.BDLocation,java.lang.String,java.util.LinkedHashMap) -> <init>
    void run() -> run
    void <init>(com.baidu.location.d.b,java.lang.String,java.lang.Long,com.baidu.location.BDLocation,com.baidu.location.BDLocation,com.baidu.location.BDLocation,java.lang.String,java.util.LinkedHashMap,com.baidu.location.d.b$1) -> <init>
com.baidu.location.d.b$c -> com.baidu.location.d.b$c:
    java.lang.String b -> b
    java.lang.String c -> c
    java.lang.String d -> d
    com.baidu.location.d.b e -> e
    boolean f -> f
    int p -> p
    long q -> q
    long r -> r
    long s -> s
    long t -> t
    com.baidu.location.d.b a -> a
    void <init>(com.baidu.location.d.b,com.baidu.location.d.b,boolean) -> <init>
    void a() -> a
    void a(boolean) -> a
    void b() -> b
    void c() -> c
    boolean f() -> f
    void g() -> g
    java.lang.String h() -> h
    java.lang.String i() -> i
    java.lang.String j() -> j
    java.lang.String k() -> k
    boolean l() -> l
    void a(java.lang.String,java.lang.String,java.lang.String) -> a
    void a(com.baidu.location.d.b$c,java.lang.String,java.lang.String,java.lang.String) -> a
    boolean a(com.baidu.location.d.b$c,boolean) -> a
    long a(com.baidu.location.d.b$c,long) -> a
    com.baidu.location.d.b a(com.baidu.location.d.b$c) -> a
    void b(com.baidu.location.d.b$c) -> b
com.baidu.location.d.b$c$1 -> com.baidu.location.d.b$c$1:
    com.baidu.location.d.b$c a -> a
    void <init>(com.baidu.location.d.b$c) -> <init>
    void run() -> run
com.baidu.location.d.c -> com.baidu.location.d.c:
    com.baidu.location.d.d a -> a
    android.database.sqlite.SQLiteDatabase b -> b
    com.baidu.location.d.c$a c -> c
    boolean d -> d
    boolean e -> e
    boolean f -> f
    boolean g -> g
    boolean h -> h
    java.lang.String[] i -> i
    boolean j -> j
    int k -> k
    int l -> l
    int m -> m
    double n -> n
    double o -> o
    double p -> p
    double q -> q
    double r -> r
    int s -> s
    boolean t -> t
    long u -> u
    long v -> v
    long w -> w
    long x -> x
    long y -> y
    void <init>(com.baidu.location.d.d,android.database.sqlite.SQLiteDatabase) -> <init>
    int a() -> a
    double b() -> b
    double c() -> c
    double d() -> d
    double e() -> e
    double f() -> f
    void g() -> g
    boolean h() -> h
    boolean i() -> i
    boolean j() -> j
    boolean k() -> k
    boolean l() -> l
    boolean m() -> m
    long a(java.lang.String) -> a
    int n() -> n
    java.lang.String[] o() -> o
    int p() -> p
    int q() -> q
    void a(java.lang.String[]) -> a
    boolean a(com.baidu.location.d.c,boolean) -> a
    boolean b(com.baidu.location.d.c,boolean) -> b
    boolean c(com.baidu.location.d.c,boolean) -> c
    boolean d(com.baidu.location.d.c,boolean) -> d
    boolean e(com.baidu.location.d.c,boolean) -> e
    boolean f(com.baidu.location.d.c,boolean) -> f
    java.lang.String[] a(com.baidu.location.d.c,java.lang.String[]) -> a
    int a(com.baidu.location.d.c,int) -> a
    int b(com.baidu.location.d.c,int) -> b
    int c(com.baidu.location.d.c,int) -> c
    double a(com.baidu.location.d.c,double) -> a
    double b(com.baidu.location.d.c,double) -> b
    double c(com.baidu.location.d.c,double) -> c
    double d(com.baidu.location.d.c,double) -> d
    double e(com.baidu.location.d.c,double) -> e
    long a(com.baidu.location.d.c,long) -> a
    long b(com.baidu.location.d.c,long) -> b
    long c(com.baidu.location.d.c,long) -> c
    long d(com.baidu.location.d.c,long) -> d
    long e(com.baidu.location.d.c,long) -> e
    int d(com.baidu.location.d.c,int) -> d
    boolean a(com.baidu.location.d.c) -> a
    boolean b(com.baidu.location.d.c) -> b
    boolean c(com.baidu.location.d.c) -> c
    boolean d(com.baidu.location.d.c) -> d
    boolean e(com.baidu.location.d.c) -> e
    boolean f(com.baidu.location.d.c) -> f
    int g(com.baidu.location.d.c) -> g
    double h(com.baidu.location.d.c) -> h
    double i(com.baidu.location.d.c) -> i
    double j(com.baidu.location.d.c) -> j
    double k(com.baidu.location.d.c) -> k
    double l(com.baidu.location.d.c) -> l
    long m(com.baidu.location.d.c) -> m
    long n(com.baidu.location.d.c) -> n
    long o(com.baidu.location.d.c) -> o
    long p(com.baidu.location.d.c) -> p
    long q(com.baidu.location.d.c) -> q
    int r(com.baidu.location.d.c) -> r
    int s(com.baidu.location.d.c) -> s
    int t(com.baidu.location.d.c) -> t
    com.baidu.location.d.d u(com.baidu.location.d.c) -> u
com.baidu.location.d.c$1 -> com.baidu.location.d.c$1:
com.baidu.location.d.c$a -> com.baidu.location.d.c$a:
    int b -> b
    long c -> c
    long d -> d
    boolean e -> e
    java.lang.String f -> f
    com.baidu.location.d.c a -> a
    void <init>(com.baidu.location.d.c) -> <init>
    void a() -> a
    void a(boolean) -> a
    void b() -> b
    boolean c() -> c
    void <init>(com.baidu.location.d.c,com.baidu.location.d.c$1) -> <init>
    void a(com.baidu.location.d.c$a) -> a
com.baidu.location.d.d -> com.baidu.location.d.d:
    android.content.Context c -> c
    com.baidu.location.d.d d -> d
    java.io.File e -> e
    com.baidu.location.d.f f -> f
    com.baidu.location.d.b g -> g
    com.baidu.location.d.g h -> h
    com.baidu.location.d.c i -> i
    java.lang.String a -> a
    java.lang.String b -> b
    android.net.Uri c(java.lang.String) -> c
    void <init>() -> <init>
    com.baidu.location.d.d a() -> a
    void a(android.content.Context) -> a
    android.content.Context b() -> b
    java.io.File c() -> c
    com.baidu.location.BDLocation a(java.lang.String[]) -> a
    com.baidu.location.BDLocation a(com.baidu.location.e.a,com.baidu.location.e.i,com.baidu.location.BDLocation,com.baidu.location.d.d$b,com.baidu.location.d.d$a) -> a
    boolean d() -> d
    boolean e() -> e
    boolean f() -> f
    boolean g() -> g
    boolean h() -> h
    long a(java.lang.String) -> a
    void i() -> i
    com.baidu.location.d.f j() -> j
    com.baidu.location.d.g k() -> k
    com.baidu.location.d.c l() -> l
    void q() -> q
    boolean r() -> r
    void m() -> m
    void n() -> n
    double o() -> o
    android.content.Context p() -> p
    com.baidu.location.d.c a(com.baidu.location.d.d) -> a
    android.net.Uri b(java.lang.String) -> b
    com.baidu.location.d.b b(com.baidu.location.d.d) -> b
    void <clinit>() -> <clinit>
com.baidu.location.d.d$1 -> com.baidu.location.d.d$1:
    java.lang.String[] a -> a
    com.baidu.location.d.d b -> b
    void <init>(com.baidu.location.d.d,java.lang.String[]) -> <init>
    com.baidu.location.BDLocation a() -> a
    java.lang.Object call() -> call
com.baidu.location.d.d$a -> com.baidu.location.d.d$a:
    com.baidu.location.d.d$a a -> a
    com.baidu.location.d.d$a b -> b
    com.baidu.location.d.d$a[] c -> c
    com.baidu.location.d.d$a[] values() -> values
    com.baidu.location.d.d$a valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.baidu.location.d.d$b -> com.baidu.location.d.d$b:
    com.baidu.location.d.d$b a -> a
    com.baidu.location.d.d$b b -> b
    com.baidu.location.d.d$b[] c -> c
    com.baidu.location.d.d$b[] values() -> values
    com.baidu.location.d.d$b valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.baidu.location.d.d$c -> com.baidu.location.d.d$c:
    com.baidu.location.d.d$c a -> a
    com.baidu.location.d.d$c b -> b
    com.baidu.location.d.d$c c -> c
    com.baidu.location.d.d$c d -> d
    com.baidu.location.d.d$c e -> e
    com.baidu.location.d.d$c[] f -> f
    com.baidu.location.d.d$c[] values() -> values
    com.baidu.location.d.d$c valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.baidu.location.d.e -> com.baidu.location.d.e:
    java.lang.String[] a -> a
    com.baidu.location.BDLocation a(android.database.Cursor) -> a
    android.database.Cursor a(com.baidu.location.BDLocation) -> a
    java.lang.String[] a(com.baidu.location.e.a,com.baidu.location.e.i,com.baidu.location.BDLocation,java.lang.String,boolean,int) -> a
    java.lang.String a(com.baidu.location.BDLocation,int) -> a
    java.lang.String a(com.baidu.location.BDLocation,com.baidu.location.BDLocation,com.baidu.location.d.e$a) -> a
    void <clinit>() -> <clinit>
com.baidu.location.d.e$a -> com.baidu.location.d.e$a:
    java.lang.String a -> a
    java.lang.String b -> b
    boolean c -> c
    boolean d -> d
    boolean e -> e
    int f -> f
    com.baidu.location.BDLocation g -> g
    boolean h -> h
    java.util.LinkedHashMap i -> i
    void <init>(java.lang.String[]) -> <init>
com.baidu.location.d.f -> com.baidu.location.d.f:
    java.lang.String a -> a
    android.database.sqlite.SQLiteDatabase b -> b
    com.baidu.location.d.f$a c -> c
    java.lang.String d -> d
    java.lang.String e -> e
    void <init>(android.database.sqlite.SQLiteDatabase) -> <init>
    void a() -> a
    void a(java.lang.String) -> a
    java.lang.String b() -> b
    void a(boolean) -> a
    void a(com.baidu.location.d.f,boolean) -> a
    java.lang.String a(com.baidu.location.d.f) -> a
    void <clinit>() -> <clinit>
com.baidu.location.d.f$a -> com.baidu.location.d.f$a:
    int b -> b
    long c -> c
    java.lang.String d -> d
    boolean e -> e
    boolean f -> f
    com.baidu.location.d.f p -> p
    com.baidu.location.d.f a -> a
    void <init>(com.baidu.location.d.f,com.baidu.location.d.f) -> <init>
    void a() -> a
    void a(boolean) -> a
    void b() -> b
    void a(com.baidu.location.d.f$a) -> a
    boolean b(com.baidu.location.d.f$a) -> b
    com.baidu.location.d.f c(com.baidu.location.d.f$a) -> c
com.baidu.location.d.f$a$1 -> com.baidu.location.d.f$a$1:
    com.baidu.location.d.f$a a -> a
    void <init>(com.baidu.location.d.f$a) -> <init>
    void run() -> run
com.baidu.location.d.g -> com.baidu.location.d.g:
    com.baidu.location.d.d a -> a
    double[] b -> b
    int c -> c
    android.database.sqlite.SQLiteDatabase d -> d
    int e -> e
    int f -> f
    void <init>(com.baidu.location.d.d,android.database.sqlite.SQLiteDatabase,int) -> <init>
    boolean a() -> a
    org.json.JSONObject b() -> b
    void a(org.json.JSONObject) -> a
    com.baidu.location.Address a(double,double) -> a
    java.util.List b(double,double) -> b
    int a(int,int) -> a
    double[] b(double,double,double,double) -> b
    double c(double,double,double,double) -> c
    double a(double,double,double,double,double,double) -> a
    java.lang.String b(int,double,double) -> b
    java.lang.String a(int,double,double) -> a
    double[] c() -> c
    double[] a(double,double,double,double) -> a
    void <clinit>() -> <clinit>
com.baidu.location.d.g$1 -> com.baidu.location.d.g$1:
com.baidu.location.d.g$a -> com.baidu.location.d.g$a:
    double a -> a
    double b -> b
    void <init>(double,double) -> <init>
    void <init>(double,double,com.baidu.location.d.g$1) -> <init>
    double a(com.baidu.location.d.g$a) -> a
    double b(com.baidu.location.d.g$a) -> b
    double a(com.baidu.location.d.g$a,double) -> a
    double b(com.baidu.location.d.g$a,double) -> b
com.baidu.location.d.g$b -> com.baidu.location.d.g$b:
    com.baidu.location.d.g$b a -> a
    com.baidu.location.d.g$b b -> b
    com.baidu.location.d.g$b c -> c
    com.baidu.location.d.g$b d -> d
    int e -> e
    java.lang.String f -> f
    java.lang.String g -> g
    java.lang.String h -> h
    int i -> i
    com.baidu.location.d.g$b[] j -> j
    com.baidu.location.d.g$b[] values() -> values
    com.baidu.location.d.g$b valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,int,int) -> <init>
    java.util.List a(org.json.JSONObject,java.lang.String,int) -> a
    void b(java.lang.StringBuffer,java.lang.String,java.lang.String,int) -> b
    java.lang.String a(org.json.JSONObject) -> a
    java.lang.String a(int,double,double) -> a
    java.lang.String a(com.baidu.location.d.g$b) -> a
    java.lang.String b(com.baidu.location.d.g$b) -> b
    java.lang.String a(com.baidu.location.d.g$b,org.json.JSONObject) -> a
    int c(com.baidu.location.d.g$b) -> c
    java.lang.String a(com.baidu.location.d.g$b,int,double,double) -> a
    int d(com.baidu.location.d.g$b) -> d
    void <init>(java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,int,int,com.baidu.location.d.g$1) -> <init>
    void a(java.lang.StringBuffer,java.lang.String,java.lang.String,int) -> a
    void <clinit>() -> <clinit>
com.baidu.location.d.g$b$1 -> com.baidu.location.d.g$b$1:
    void <init>(java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,int,int) -> <init>
    java.util.List a(org.json.JSONObject,java.lang.String,int) -> a
com.baidu.location.d.g$b$2 -> com.baidu.location.d.g$b$2:
    void <init>(java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,int,int) -> <init>
    java.util.List a(org.json.JSONObject,java.lang.String,int) -> a
com.baidu.location.d.g$b$3 -> com.baidu.location.d.g$b$3:
    void <init>(java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,int,int) -> <init>
    java.util.List a(org.json.JSONObject,java.lang.String,int) -> a
com.baidu.location.d.g$b$4 -> com.baidu.location.d.g$b$4:
    void <init>(java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,int,int) -> <init>
    java.util.List a(org.json.JSONObject,java.lang.String,int) -> a
com.baidu.location.e.a -> com.baidu.location.e.a:
    int a -> a
    int b -> b
    int c -> c
    int d -> d
    int e -> e
    int f -> f
    long g -> g
    int h -> h
    char i -> i
    boolean j -> j
    void <init>() -> <init>
    void <init>(int,int,int,int,int,char) -> <init>
    void <init>(com.baidu.location.e.a) -> <init>
    boolean a(com.baidu.location.e.a) -> a
    boolean a() -> a
    boolean b() -> b
    boolean c() -> c
    boolean d() -> d
    boolean e() -> e
    void f() -> f
    java.lang.String g() -> g
    java.lang.String h() -> h
com.baidu.location.e.b -> com.baidu.location.e.b:
    com.baidu.location.e.b c -> c
    android.telephony.TelephonyManager d -> d
    java.lang.Object e -> e
    com.baidu.location.e.a f -> f
    com.baidu.location.e.a g -> g
    java.util.List h -> h
    com.baidu.location.e.b$a i -> i
    boolean j -> j
    java.lang.reflect.Method k -> k
    java.lang.reflect.Method l -> l
    java.lang.reflect.Method m -> m
    java.lang.reflect.Method n -> n
    java.lang.reflect.Method o -> o
    java.lang.Class p -> p
    boolean q -> q
    int a -> a
    int b -> b
    com.baidu.location.e.b a() -> a
    void <init>() -> <init>
    void b() -> b
    void c() -> c
    boolean d() -> d
    void i() -> i
    void j() -> j
    int e() -> e
    com.baidu.location.e.a f() -> f
    void k() -> k
    android.telephony.CellLocation l() -> l
    java.lang.Class m() -> m
    android.telephony.CellLocation a(java.util.List) -> a
    com.baidu.location.e.a a(android.telephony.CellLocation) -> a
    com.baidu.location.e.a a(android.telephony.CellLocation,boolean) -> a
    void c(com.baidu.location.e.a) -> c
    com.baidu.location.e.a n() -> n
    com.baidu.location.e.a a(android.telephony.CellInfo) -> a
    int a(int) -> a
    java.lang.String g() -> g
    int h() -> h
    java.lang.String d(com.baidu.location.e.a) -> d
    java.lang.String a(com.baidu.location.e.a) -> a
    java.lang.String b(com.baidu.location.e.a) -> b
    int o() -> o
    void a(com.baidu.location.e.b) -> a
    com.baidu.location.e.a b(com.baidu.location.e.b) -> b
    void <clinit>() -> <clinit>
com.baidu.location.e.b$a -> com.baidu.location.e.b$a:
    com.baidu.location.e.b a -> a
    void <init>(com.baidu.location.e.b) -> <init>
    void onCellLocationChanged(android.telephony.CellLocation) -> onCellLocationChanged
    void onSignalStrengthsChanged(android.telephony.SignalStrength) -> onSignalStrengthsChanged
com.baidu.location.e.c -> com.baidu.location.e.c:
    java.lang.String a(int) -> a
    com.baidu.location.e.d a() -> a
com.baidu.location.e.d -> com.baidu.location.e.d:
    void <init>() -> <init>
    void b() -> b
    void c() -> c
    com.baidu.location.e.a f() -> f
    java.lang.String a(com.baidu.location.e.a) -> a
    int e() -> e
    int h() -> h
com.baidu.location.e.e -> com.baidu.location.e.e:
    long a -> a
    long b -> b
    com.baidu.location.e.e c -> c
    android.content.Context d -> d
    android.location.LocationManager e -> e
    android.location.Location f -> f
    com.baidu.location.e.e$b g -> g
    com.baidu.location.e.e$c h -> h
    android.location.GpsStatus i -> i
    com.baidu.location.e.e$a j -> j
    int k -> k
    long l -> l
    boolean m -> m
    boolean n -> n
    java.lang.String o -> o
    boolean p -> p
    long q -> q
    java.lang.String r -> r
    android.os.Handler s -> s
    int t -> t
    int u -> u
    int v -> v
    int w -> w
    int x -> x
    int y -> y
    java.util.HashMap z -> z
    com.baidu.location.e.e a() -> a
    void <init>() -> <init>
    void b() -> b
    void a(java.lang.String,android.location.Location) -> a
    void c() -> c
    void d() -> d
    void e() -> e
    void a(boolean) -> a
    java.lang.String a(android.location.Location) -> a
    java.lang.String f() -> f
    android.location.Location g() -> g
    boolean h() -> h
    boolean i() -> i
    boolean a(android.location.Location,android.location.Location,boolean) -> a
    void d(android.location.Location) -> d
    void e(android.location.Location) -> e
    void a(double,double,float) -> a
    void b(boolean) -> b
    java.lang.String b(android.location.Location) -> b
    java.lang.String c(android.location.Location) -> c
    java.lang.String a(android.location.GpsSatellite,java.util.HashMap) -> a
    int a(java.util.HashMap) -> a
    double[] a(java.util.List) -> a
    double[] a(double,double) -> a
    double[] b(double,double) -> b
    int a(com.baidu.location.e.h,int) -> a
    void a(com.baidu.location.e.e,android.location.Location) -> a
    com.baidu.location.e.e$a a(com.baidu.location.e.e) -> a
    void a(com.baidu.location.e.e,java.lang.String,android.location.Location) -> a
    boolean b(com.baidu.location.e.e) -> b
    android.os.Handler c(com.baidu.location.e.e) -> c
    long a(com.baidu.location.e.e,long) -> a
    void a(com.baidu.location.e.e,boolean) -> a
    void b(com.baidu.location.e.e,android.location.Location) -> b
    boolean b(com.baidu.location.e.e,boolean) -> b
    long b(com.baidu.location.e.e,long) -> b
    android.location.LocationManager d(com.baidu.location.e.e) -> d
    android.location.GpsStatus e(com.baidu.location.e.e) -> e
    android.location.GpsStatus a(com.baidu.location.e.e,android.location.GpsStatus) -> a
    int a(com.baidu.location.e.e,int) -> a
    int b(com.baidu.location.e.e,int) -> b
    java.util.HashMap a(com.baidu.location.e.e,java.util.HashMap) -> a
    int f(com.baidu.location.e.e) -> f
    java.util.HashMap g(com.baidu.location.e.e) -> g
    java.lang.String a(com.baidu.location.e.e,android.location.GpsSatellite,java.util.HashMap) -> a
    int a(int) -> a
    int h(com.baidu.location.e.e) -> h
    int a(com.baidu.location.e.e,com.baidu.location.e.h,int) -> a
    java.lang.String a(java.lang.String) -> a
    void <clinit>() -> <clinit>
com.baidu.location.e.e$1 -> com.baidu.location.e.e$1:
    com.baidu.location.e.e a -> a
    void <init>(com.baidu.location.e.e) -> <init>
    void handleMessage(android.os.Message) -> handleMessage
com.baidu.location.e.e$a -> com.baidu.location.e.e$a:
    long a -> a
    long c -> c
    int d -> d
    boolean e -> e
    java.util.List f -> f
    java.lang.String g -> g
    java.lang.String h -> h
    java.lang.String i -> i
    long j -> j
    com.baidu.location.e.e b -> b
    void <init>(com.baidu.location.e.e) -> <init>
    void onGpsStatusChanged(int) -> onGpsStatusChanged
    void onNmeaReceived(long,java.lang.String) -> onNmeaReceived
    void a(java.lang.String) -> a
    void <init>(com.baidu.location.e.e,com.baidu.location.e.e$1) -> <init>
com.baidu.location.e.e$b -> com.baidu.location.e.e$b:
    com.baidu.location.e.e a -> a
    void <init>(com.baidu.location.e.e) -> <init>
    void onLocationChanged(android.location.Location) -> onLocationChanged
    void onProviderDisabled(java.lang.String) -> onProviderDisabled
    void onProviderEnabled(java.lang.String) -> onProviderEnabled
    void onStatusChanged(java.lang.String,int,android.os.Bundle) -> onStatusChanged
    void <init>(com.baidu.location.e.e,com.baidu.location.e.e$1) -> <init>
com.baidu.location.e.e$c -> com.baidu.location.e.e$c:
    long b -> b
    com.baidu.location.e.e a -> a
    void <init>(com.baidu.location.e.e) -> <init>
    void onLocationChanged(android.location.Location) -> onLocationChanged
    void onProviderDisabled(java.lang.String) -> onProviderDisabled
    void onProviderEnabled(java.lang.String) -> onProviderEnabled
    void onStatusChanged(java.lang.String,int,android.os.Bundle) -> onStatusChanged
    void <init>(com.baidu.location.e.e,com.baidu.location.e.e$1) -> <init>
com.baidu.location.e.f -> com.baidu.location.e.f:
    com.baidu.location.e.g a() -> a
com.baidu.location.e.g -> com.baidu.location.e.g:
    void <init>() -> <init>
    void b() -> b
    void c() -> c
    void d() -> d
    void e() -> e
    void a(boolean) -> a
    java.lang.String f() -> f
    android.location.Location g() -> g
    boolean h() -> h
    boolean i() -> i
com.baidu.location.e.h -> com.baidu.location.e.h:
    boolean c -> c
    java.lang.String d -> d
    boolean e -> e
    double f -> f
    double g -> g
    java.lang.String a -> a
    int b -> b
    void <init>(java.util.List,java.lang.String,java.lang.String,java.lang.String) -> <init>
    void d() -> d
    boolean a(java.lang.String) -> a
    boolean a() -> a
    double b() -> b
    double c() -> c
    void <clinit>() -> <clinit>
com.baidu.location.e.i -> com.baidu.location.e.i:
    java.util.List a -> a
    long b -> b
    long c -> c
    boolean d -> d
    boolean e -> e
    void <init>(java.util.List,long) -> <init>
    int a() -> a
    java.lang.String b() -> b
    java.lang.String c() -> c
    java.lang.String a(int) -> a
    java.lang.String a(int,boolean) -> a
    boolean a(java.lang.String) -> a
    java.lang.String b(int) -> b
    void i() -> i
    java.lang.String c(int) -> c
    boolean a(com.baidu.location.e.i) -> a
    boolean b(com.baidu.location.e.i) -> b
    boolean c(com.baidu.location.e.i) -> c
    int d() -> d
    boolean e() -> e
    boolean f() -> f
    boolean g() -> g
    boolean h() -> h
com.baidu.location.e.j -> com.baidu.location.e.j:
    com.baidu.location.e.j b -> b
    android.net.wifi.WifiManager c -> c
    com.baidu.location.e.j$a d -> d
    com.baidu.location.e.i e -> e
    long f -> f
    long g -> g
    boolean h -> h
    java.lang.Object i -> i
    boolean j -> j
    android.os.Handler k -> k
    long a -> a
    com.baidu.location.e.j a() -> a
    void <init>() -> <init>
    void b() -> b
    void c() -> c
    boolean d() -> d
    boolean e() -> e
    java.lang.String f() -> f
    boolean g() -> g
    boolean h() -> h
    android.net.wifi.WifiInfo i() -> i
    com.baidu.location.e.i j() -> j
    com.baidu.location.e.i k() -> k
    com.baidu.location.e.i l() -> l
    void n() -> n
    boolean a(com.baidu.location.e.i,com.baidu.location.e.i,float) -> a
    java.lang.String m() -> m
    void a(com.baidu.location.e.j) -> a
    void <clinit>() -> <clinit>
com.baidu.location.e.j$1 -> com.baidu.location.e.j$1:
com.baidu.location.e.j$a -> com.baidu.location.e.j$a:
    long b -> b
    boolean c -> c
    com.baidu.location.e.j a -> a
    void <init>(com.baidu.location.e.j) -> <init>
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
    void <init>(com.baidu.location.e.j,com.baidu.location.e.j$1) -> <init>
com.baidu.location.e.k -> com.baidu.location.e.k:
    com.baidu.location.e.l a() -> a
com.baidu.location.e.l -> com.baidu.location.e.l:
    void <init>() -> <init>
    void b() -> b
    void c() -> c
    boolean d() -> d
    boolean e() -> e
    boolean g() -> g
    boolean h() -> h
    com.baidu.location.e.i j() -> j
    com.baidu.location.e.i k() -> k
    com.baidu.location.e.i l() -> l
    java.lang.String m() -> m
    android.net.wifi.WifiInfo i() -> i
com.baidu.location.f -> com.baidu.location.f:
    com.baidu.location.LLSInterface libJar -> libJar
    com.baidu.location.LLSInterface libNat -> libNat
    com.baidu.location.LLSInterface lib -> lib
    java.lang.String replaceFileName -> replaceFileName
    java.lang.String jarFileName -> jarFileName
    android.content.Context mC -> mC
    boolean isServing -> isServing
    void <init>() -> <init>
    void onCreate() -> onCreate
    boolean readConf(java.io.File) -> readConf
    int onStartCommand(android.content.Intent,int,int) -> onStartCommand
    android.os.IBinder onBind(android.content.Intent) -> onBind
    boolean onUnbind(android.content.Intent) -> onUnbind
    void onDestroy() -> onDestroy
    float getFrameVersion() -> getFrameVersion
    java.lang.String getJarFileName() -> getJarFileName
    android.content.Context getServiceContext() -> getServiceContext
    void <clinit>() -> <clinit>
com.baidu.location.f.a -> com.baidu.location.f.a:
    com.baidu.location.f.a$a a -> a
    android.os.Messenger b -> b
    android.os.Looper c -> c
    android.os.HandlerThread d -> d
    boolean e -> e
    long f -> f
    void <init>() -> <init>
    void onCreate(android.content.Context) -> onCreate
    void c() -> c
    android.os.IBinder onBind(android.content.Intent) -> onBind
    void onDestroy() -> onDestroy
    void d() -> d
    int onStartCommand(android.content.Intent,int,int) -> onStartCommand
    android.os.Handler a() -> a
    long b() -> b
    void a(android.os.Message) -> a
    void b(android.os.Message) -> b
    void c(android.os.Message) -> c
    boolean onUnBind(android.content.Intent) -> onUnBind
    double getVersion() -> getVersion
    void a(com.baidu.location.f.a,android.os.Message) -> a
    void b(com.baidu.location.f.a,android.os.Message) -> b
    void c(com.baidu.location.f.a,android.os.Message) -> c
    void a(com.baidu.location.f.a) -> a
    void b(com.baidu.location.f.a) -> b
    void <clinit>() -> <clinit>
com.baidu.location.f.a$a -> com.baidu.location.f.a$a:
    com.baidu.location.f.a a -> a
    void <init>(com.baidu.location.f.a,android.os.Looper) -> <init>
    void handleMessage(android.os.Message) -> handleMessage
com.baidu.location.g.a -> com.baidu.location.g.a:
    java.lang.String a(android.content.Context) -> a
    java.lang.String b(android.content.Context) -> b
    java.lang.String a(android.content.Context,java.lang.String) -> a
    java.lang.String a(java.security.cert.X509Certificate) -> a
    byte[] a(byte[]) -> a
com.baidu.location.g.a$a -> com.baidu.location.g.a$a:
    java.lang.String a(byte[]) -> a
com.baidu.location.g.b -> com.baidu.location.g.b:
    java.lang.String a -> a
    int b -> b
    int c -> c
    int d -> d
    int e -> e
    int f -> f
    int g -> g
    int h -> h
    int i -> i
    void <clinit>() -> <clinit>
com.baidu.location.g.c -> com.baidu.location.g.c:
    com.baidu.location.g.c h -> h
    java.lang.String a -> a
    java.lang.String b -> b
    java.lang.String c -> c
    boolean i -> i
    java.lang.String d -> d
    java.lang.String e -> e
    java.lang.String f -> f
    java.lang.String g -> g
    com.baidu.location.g.c a() -> a
    void <init>() -> <init>
    void a(android.content.Context) -> a
    void a(java.lang.String,java.lang.String) -> a
    java.lang.String b() -> b
    java.lang.String c() -> c
    java.lang.String a(boolean) -> a
    java.lang.String a(boolean,java.lang.String) -> a
    java.lang.String d() -> d
    void <clinit>() -> <clinit>
com.baidu.location.g.d -> com.baidu.location.g.d:
    java.lang.String a -> a
    int b -> b
    com.baidu.location.g.d c -> c
    int d -> d
    int e -> e
    int f -> f
    int g -> g
    int h -> h
    int i -> i
    void <init>() -> <init>
    com.baidu.location.g.d a() -> a
    void a(int,long) -> a
    long a(int) -> a
    long b() -> b
    void a(long) -> a
    long c() -> c
    void b(long) -> b
    long d() -> d
    void c(long) -> c
com.baidu.location.g.e -> com.baidu.location.g.e:
    com.baidu.location.g.e a -> a
    double[] b -> b
    double[] c -> c
    java.util.LinkedList d -> d
    com.baidu.location.g.e a() -> a
    void <init>() -> <init>
    boolean a(double,double) -> a
    int a(double) -> a
    void <clinit>() -> <clinit>
com.baidu.location.g.e$a -> com.baidu.location.g.e$a:
    double a -> a
    double b -> b
    com.baidu.location.g.e c -> c
    void <init>(com.baidu.location.g.e,double,double) -> <init>
com.baidu.location.g.e$b -> com.baidu.location.g.e$b:
    com.baidu.location.g.e$a a -> a
    com.baidu.location.g.e$a b -> b
    com.baidu.location.g.e c -> c
    void <init>(com.baidu.location.g.e,com.baidu.location.g.e$a,com.baidu.location.g.e$a) -> <init>
    double a(com.baidu.location.g.e$a) -> a
    boolean b(com.baidu.location.g.e$a) -> b
com.baidu.location.g.f -> com.baidu.location.g.f:
    int g -> g
    java.lang.String a -> a
    int b -> b
    java.lang.String h -> h
    int i -> i
    java.lang.String j -> j
    java.util.Map k -> k
    java.lang.String l -> l
    byte[] m -> m
    java.lang.String n -> n
    int o -> o
    void <init>() -> <init>
    void a() -> a
    void a(boolean) -> a
    void d() -> d
    void e() -> e
    void b(boolean) -> b
    void b() -> b
    int c() -> c
    int a(android.content.Context,android.net.NetworkInfo) -> a
    void a(com.baidu.location.g.f) -> a
    void <clinit>() -> <clinit>
com.baidu.location.g.f$1 -> com.baidu.location.g.f$1:
    com.baidu.location.g.f a -> a
    void <init>(com.baidu.location.g.f) -> <init>
    void run() -> run
com.baidu.location.g.f$2 -> com.baidu.location.g.f$2:
    boolean a -> a
    com.baidu.location.g.f b -> b
    void <init>(com.baidu.location.g.f,boolean) -> <init>
    void run() -> run
com.baidu.location.g.g -> com.baidu.location.g.g:
    java.lang.String a -> a
    java.lang.String b -> b
    boolean c -> c
    void <init>(java.lang.String,boolean,java.lang.String) -> <init>
    java.lang.String a() -> a
    java.lang.String toString() -> toString
com.baidu.location.g.h -> com.baidu.location.g.h:
    java.util.List b -> b
    com.baidu.location.g.h c -> c
    android.content.Context d -> d
    java.lang.String a -> a
    void <init>(android.content.Context) -> <init>
    com.baidu.location.g.h a() -> a
    java.lang.String b() -> b
    java.util.List c() -> c
    java.util.List d() -> d
    java.util.List e() -> e
    boolean a(java.lang.String) -> a
    void <clinit>() -> <clinit>
com.baidu.location.g.i -> com.baidu.location.g.i:
    boolean a -> a
    boolean b -> b
    boolean c -> c
    int d -> d
    java.lang.String as -> as
    java.lang.String e -> e
    java.lang.String at -> at
    java.lang.String au -> au
    java.lang.String av -> av
    java.lang.String aw -> aw
    java.lang.String ax -> ax
    java.lang.String ay -> ay
    java.lang.String az -> az
    java.lang.String f -> f
    boolean g -> g
    boolean h -> h
    boolean i -> i
    boolean j -> j
    boolean k -> k
    java.lang.String l -> l
    boolean m -> m
    int n -> n
    double o -> o
    double p -> p
    double q -> q
    double r -> r
    int s -> s
    byte[] t -> t
    boolean u -> u
    int v -> v
    float w -> w
    float x -> x
    float y -> y
    float z -> z
    int A -> A
    int B -> B
    int C -> C
    int D -> D
    int E -> E
    int F -> F
    int G -> G
    float H -> H
    float I -> I
    float J -> J
    float K -> K
    int L -> L
    float M -> M
    int N -> N
    float O -> O
    float P -> P
    float Q -> Q
    int R -> R
    int S -> S
    int T -> T
    int U -> U
    int V -> V
    int W -> W
    boolean X -> X
    boolean Y -> Y
    int Z -> Z
    int aa -> aa
    int ab -> ab
    long ac -> ac
    long ad -> ad
    long ae -> ae
    long af -> af
    long ag -> ag
    long ah -> ah
    int ai -> ai
    int aj -> aj
    int ak -> ak
    int al -> al
    float am -> am
    float an -> an
    float ao -> ao
    int ap -> ap
    int aq -> aq
    int ar -> ar
    int a(java.lang.String,java.lang.String,java.lang.String) -> a
    java.lang.Object a(android.content.Context,java.lang.String) -> a
    java.lang.String a() -> a
    java.lang.String a(com.baidu.location.e.a,com.baidu.location.e.i,android.location.Location,java.lang.String,int) -> a
    boolean a(android.content.Context) -> a
    java.lang.String b() -> b
    java.lang.Object a(java.lang.Object,java.lang.String,java.lang.Object[]) -> a
    int b(java.lang.Object,java.lang.String,java.lang.Object[]) -> b
    boolean a(com.baidu.location.BDLocation) -> a
    java.lang.String c() -> c
    java.lang.String d() -> d
    java.lang.String e() -> e
    java.lang.String f() -> f
    java.lang.String g() -> g
    java.lang.String a(java.io.File) -> a
    int b(android.content.Context) -> b
    int c(android.content.Context) -> c
    java.lang.String d(android.content.Context) -> d
    int b(android.content.Context,java.lang.String) -> b
    java.lang.String e(android.content.Context) -> e
    void <clinit>() -> <clinit>
com.facebook.animated.gif.GifFrame -> com.facebook.animated.gif.GifFrame:
    long mNativeContext -> mNativeContext
    void <init>(long) -> <init>
    void finalize() -> finalize
    void dispose() -> dispose
    void renderFrame(int,int,android.graphics.Bitmap) -> renderFrame
    int getDurationMs() -> getDurationMs
    int getWidth() -> getWidth
    int getHeight() -> getHeight
    int getXOffset() -> getXOffset
    int getYOffset() -> getYOffset
    boolean hasTransparency() -> hasTransparency
    int getTransparentPixelColor() -> getTransparentPixelColor
    int getDisposalMode() -> getDisposalMode
    void nativeRenderFrame(int,int,android.graphics.Bitmap) -> nativeRenderFrame
    int nativeGetDurationMs() -> nativeGetDurationMs
    int nativeGetWidth() -> nativeGetWidth
    int nativeGetHeight() -> nativeGetHeight
    int nativeGetXOffset() -> nativeGetXOffset
    int nativeGetYOffset() -> nativeGetYOffset
    int nativeGetDisposalMode() -> nativeGetDisposalMode
    int nativeGetTransparentPixelColor() -> nativeGetTransparentPixelColor
    boolean nativeHasTransparency() -> nativeHasTransparency
    void nativeDispose() -> nativeDispose
    void nativeFinalize() -> nativeFinalize
com.facebook.animated.gif.GifImage -> com.facebook.animated.gif.GifImage:
    int LOOP_COUNT_FOREVER -> LOOP_COUNT_FOREVER
    int LOOP_COUNT_MISSING -> LOOP_COUNT_MISSING
    boolean sInitialized -> sInitialized
    long mNativeContext -> mNativeContext
    void ensure() -> ensure
    com.facebook.animated.gif.GifImage create(byte[]) -> create
    com.facebook.animated.gif.GifImage create(long,int) -> create
    com.facebook.imagepipeline.animated.base.AnimatedImage decode(long,int) -> decode
    void <init>() -> <init>
    void <init>(long) -> <init>
    void finalize() -> finalize
    void dispose() -> dispose
    int getWidth() -> getWidth
    int getHeight() -> getHeight
    int getFrameCount() -> getFrameCount
    int getDuration() -> getDuration
    int[] getFrameDurations() -> getFrameDurations
    int getLoopCount() -> getLoopCount
    com.facebook.animated.gif.GifFrame getFrame(int) -> getFrame
    boolean doesRenderSupportScaling() -> doesRenderSupportScaling
    int getSizeInBytes() -> getSizeInBytes
    com.facebook.imagepipeline.animated.base.AnimatedDrawableFrameInfo getFrameInfo(int) -> getFrameInfo
    com.facebook.imagepipeline.animated.base.AnimatedDrawableFrameInfo$DisposalMethod fromGifDisposalMethod(int) -> fromGifDisposalMethod
    com.facebook.animated.gif.GifImage nativeCreateFromDirectByteBuffer(java.nio.ByteBuffer) -> nativeCreateFromDirectByteBuffer
    com.facebook.animated.gif.GifImage nativeCreateFromNativeMemory(long,int) -> nativeCreateFromNativeMemory
    int nativeGetWidth() -> nativeGetWidth
    int nativeGetHeight() -> nativeGetHeight
    int nativeGetDuration() -> nativeGetDuration
    int nativeGetFrameCount() -> nativeGetFrameCount
    int[] nativeGetFrameDurations() -> nativeGetFrameDurations
    int nativeGetLoopCount() -> nativeGetLoopCount
    com.facebook.animated.gif.GifFrame nativeGetFrame(int) -> nativeGetFrame
    int nativeGetSizeInBytes() -> nativeGetSizeInBytes
    void nativeDispose() -> nativeDispose
    void nativeFinalize() -> nativeFinalize
    com.facebook.imagepipeline.animated.base.AnimatedImageFrame getFrame(int) -> getFrame
com.facebook.animated.webp.WebPFrame -> com.facebook.animated.webp.WebPFrame:
    long mNativeContext -> mNativeContext
    void <init>(long) -> <init>
    void finalize() -> finalize
    void dispose() -> dispose
    void renderFrame(int,int,android.graphics.Bitmap) -> renderFrame
    int getDurationMs() -> getDurationMs
    int getWidth() -> getWidth
    int getHeight() -> getHeight
    int getXOffset() -> getXOffset
    int getYOffset() -> getYOffset
    boolean shouldDisposeToBackgroundColor() -> shouldDisposeToBackgroundColor
    boolean isBlendWithPreviousFrame() -> isBlendWithPreviousFrame
    void nativeRenderFrame(int,int,android.graphics.Bitmap) -> nativeRenderFrame
    int nativeGetDurationMs() -> nativeGetDurationMs
    int nativeGetWidth() -> nativeGetWidth
    int nativeGetHeight() -> nativeGetHeight
    int nativeGetXOffset() -> nativeGetXOffset
    int nativeGetYOffset() -> nativeGetYOffset
    boolean nativeShouldDisposeToBackgroundColor() -> nativeShouldDisposeToBackgroundColor
    boolean nativeIsBlendWithPreviousFrame() -> nativeIsBlendWithPreviousFrame
    void nativeDispose() -> nativeDispose
    void nativeFinalize() -> nativeFinalize
com.facebook.animated.webp.WebPImage -> com.facebook.animated.webp.WebPImage:
    long mNativeContext -> mNativeContext
    void <init>() -> <init>
    void <init>(long) -> <init>
    void finalize() -> finalize
    void dispose() -> dispose
    com.facebook.animated.webp.WebPImage create(byte[]) -> create
    com.facebook.animated.webp.WebPImage create(long,int) -> create
    com.facebook.imagepipeline.animated.base.AnimatedImage decode(long,int) -> decode
    int getWidth() -> getWidth
    int getHeight() -> getHeight
    int getFrameCount() -> getFrameCount
    int getDuration() -> getDuration
    int[] getFrameDurations() -> getFrameDurations
    int getLoopCount() -> getLoopCount
    com.facebook.animated.webp.WebPFrame getFrame(int) -> getFrame
    int getSizeInBytes() -> getSizeInBytes
    boolean doesRenderSupportScaling() -> doesRenderSupportScaling
    com.facebook.imagepipeline.animated.base.AnimatedDrawableFrameInfo getFrameInfo(int) -> getFrameInfo
    com.facebook.animated.webp.WebPImage nativeCreateFromDirectByteBuffer(java.nio.ByteBuffer) -> nativeCreateFromDirectByteBuffer
    com.facebook.animated.webp.WebPImage nativeCreateFromNativeMemory(long,int) -> nativeCreateFromNativeMemory
    int nativeGetWidth() -> nativeGetWidth
    int nativeGetHeight() -> nativeGetHeight
    int nativeGetDuration() -> nativeGetDuration
    int nativeGetFrameCount() -> nativeGetFrameCount
    int[] nativeGetFrameDurations() -> nativeGetFrameDurations
    int nativeGetLoopCount() -> nativeGetLoopCount
    com.facebook.animated.webp.WebPFrame nativeGetFrame(int) -> nativeGetFrame
    int nativeGetSizeInBytes() -> nativeGetSizeInBytes
    void nativeDispose() -> nativeDispose
    void nativeFinalize() -> nativeFinalize
    com.facebook.imagepipeline.animated.base.AnimatedImageFrame getFrame(int) -> getFrame
com.facebook.binaryresource.BinaryResource -> com.facebook.binaryresource.BinaryResource:
    java.io.InputStream openStream() -> openStream
    byte[] read() -> read
    long size() -> size
com.facebook.binaryresource.ByteArrayBinaryResource -> com.facebook.binaryresource.ByteArrayBinaryResource:
    byte[] mBytes -> mBytes
    void <init>(byte[]) -> <init>
    long size() -> size
    java.io.InputStream openStream() -> openStream
    byte[] read() -> read
com.facebook.binaryresource.FileBinaryResource -> com.facebook.binaryresource.FileBinaryResource:
    java.io.File mFile -> mFile
    void <init>(java.io.File) -> <init>
    java.io.File getFile() -> getFile
    java.io.InputStream openStream() -> openStream
    long size() -> size
    byte[] read() -> read
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    com.facebook.binaryresource.FileBinaryResource createOrNull(java.io.File) -> createOrNull
com.facebook.cache.common.CacheErrorLogger -> com.facebook.cache.common.CacheErrorLogger:
    void logError(com.facebook.cache.common.CacheErrorLogger$CacheErrorCategory,java.lang.Class,java.lang.String,java.lang.Throwable) -> logError
com.facebook.cache.common.CacheErrorLogger$CacheErrorCategory -> com.facebook.cache.common.CacheErrorLogger$CacheErrorCategory:
    com.facebook.cache.common.CacheErrorLogger$CacheErrorCategory READ_DECODE -> READ_DECODE
    com.facebook.cache.common.CacheErrorLogger$CacheErrorCategory READ_FILE -> READ_FILE
    com.facebook.cache.common.CacheErrorLogger$CacheErrorCategory READ_FILE_NOT_FOUND -> READ_FILE_NOT_FOUND
    com.facebook.cache.common.CacheErrorLogger$CacheErrorCategory READ_INVALID_ENTRY -> READ_INVALID_ENTRY
    com.facebook.cache.common.CacheErrorLogger$CacheErrorCategory WRITE_ENCODE -> WRITE_ENCODE
    com.facebook.cache.common.CacheErrorLogger$CacheErrorCategory WRITE_CREATE_TEMPFILE -> WRITE_CREATE_TEMPFILE
    com.facebook.cache.common.CacheErrorLogger$CacheErrorCategory WRITE_UPDATE_FILE_NOT_FOUND -> WRITE_UPDATE_FILE_NOT_FOUND
    com.facebook.cache.common.CacheErrorLogger$CacheErrorCategory WRITE_RENAME_FILE_TEMPFILE_NOT_FOUND -> WRITE_RENAME_FILE_TEMPFILE_NOT_FOUND
    com.facebook.cache.common.CacheErrorLogger$CacheErrorCategory WRITE_RENAME_FILE_TEMPFILE_PARENT_NOT_FOUND -> WRITE_RENAME_FILE_TEMPFILE_PARENT_NOT_FOUND
    com.facebook.cache.common.CacheErrorLogger$CacheErrorCategory WRITE_RENAME_FILE_OTHER -> WRITE_RENAME_FILE_OTHER
    com.facebook.cache.common.CacheErrorLogger$CacheErrorCategory WRITE_CREATE_DIR -> WRITE_CREATE_DIR
    com.facebook.cache.common.CacheErrorLogger$CacheErrorCategory WRITE_CALLBACK_ERROR -> WRITE_CALLBACK_ERROR
    com.facebook.cache.common.CacheErrorLogger$CacheErrorCategory WRITE_INVALID_ENTRY -> WRITE_INVALID_ENTRY
    com.facebook.cache.common.CacheErrorLogger$CacheErrorCategory DELETE_FILE -> DELETE_FILE
    com.facebook.cache.common.CacheErrorLogger$CacheErrorCategory EVICTION -> EVICTION
    com.facebook.cache.common.CacheErrorLogger$CacheErrorCategory GENERIC_IO -> GENERIC_IO
    com.facebook.cache.common.CacheErrorLogger$CacheErrorCategory OTHER -> OTHER
    com.facebook.cache.common.CacheErrorLogger$CacheErrorCategory[] $VALUES -> $VALUES
    com.facebook.cache.common.CacheErrorLogger$CacheErrorCategory[] values() -> values
    com.facebook.cache.common.CacheErrorLogger$CacheErrorCategory valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.facebook.cache.common.CacheEvent -> com.facebook.cache.common.CacheEvent:
    com.facebook.cache.common.CacheKey getCacheKey() -> getCacheKey
    java.lang.String getResourceId() -> getResourceId
    long getItemSize() -> getItemSize
    long getCacheSize() -> getCacheSize
    long getCacheLimit() -> getCacheLimit
    java.io.IOException getException() -> getException
    com.facebook.cache.common.CacheEventListener$EvictionReason getEvictionReason() -> getEvictionReason
com.facebook.cache.common.CacheEventListener -> com.facebook.cache.common.CacheEventListener:
    void onHit(com.facebook.cache.common.CacheEvent) -> onHit
    void onMiss(com.facebook.cache.common.CacheEvent) -> onMiss
    void onWriteAttempt(com.facebook.cache.common.CacheEvent) -> onWriteAttempt
    void onWriteSuccess(com.facebook.cache.common.CacheEvent) -> onWriteSuccess
    void onReadException(com.facebook.cache.common.CacheEvent) -> onReadException
    void onWriteException(com.facebook.cache.common.CacheEvent) -> onWriteException
    void onEviction(com.facebook.cache.common.CacheEvent) -> onEviction
    void onCleared() -> onCleared
com.facebook.cache.common.CacheEventListener$EvictionReason -> com.facebook.cache.common.CacheEventListener$EvictionReason:
    com.facebook.cache.common.CacheEventListener$EvictionReason CACHE_FULL -> CACHE_FULL
    com.facebook.cache.common.CacheEventListener$EvictionReason CONTENT_STALE -> CONTENT_STALE
    com.facebook.cache.common.CacheEventListener$EvictionReason USER_FORCED -> USER_FORCED
    com.facebook.cache.common.CacheEventListener$EvictionReason CACHE_MANAGER_TRIMMED -> CACHE_MANAGER_TRIMMED
    com.facebook.cache.common.CacheEventListener$EvictionReason[] $VALUES -> $VALUES
    com.facebook.cache.common.CacheEventListener$EvictionReason[] values() -> values
    com.facebook.cache.common.CacheEventListener$EvictionReason valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.facebook.cache.common.CacheKey -> com.facebook.cache.common.CacheKey:
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    boolean containsUri(android.net.Uri) -> containsUri
    java.lang.String getUriString() -> getUriString
com.facebook.cache.common.CacheKeyUtil -> com.facebook.cache.common.CacheKeyUtil:
    void <init>() -> <init>
    java.util.List getResourceIds(com.facebook.cache.common.CacheKey) -> getResourceIds
    java.lang.String getFirstResourceId(com.facebook.cache.common.CacheKey) -> getFirstResourceId
    java.lang.String secureHashKey(com.facebook.cache.common.CacheKey) -> secureHashKey
com.facebook.cache.common.DebuggingCacheKey -> com.facebook.cache.common.DebuggingCacheKey:
    java.lang.Object mCallerContext -> mCallerContext
    void <init>(java.lang.String,java.lang.Object) -> <init>
    java.lang.Object getCallerContext() -> getCallerContext
com.facebook.cache.common.MultiCacheKey -> com.facebook.cache.common.MultiCacheKey:
    java.util.List mCacheKeys -> mCacheKeys
    void <init>(java.util.List) -> <init>
    java.util.List getCacheKeys() -> getCacheKeys
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    boolean containsUri(android.net.Uri) -> containsUri
    java.lang.String getUriString() -> getUriString
com.facebook.cache.common.NoOpCacheErrorLogger -> com.facebook.cache.common.NoOpCacheErrorLogger:
    com.facebook.cache.common.NoOpCacheErrorLogger sInstance -> sInstance
    void <init>() -> <init>
    com.facebook.cache.common.NoOpCacheErrorLogger getInstance() -> getInstance
    void logError(com.facebook.cache.common.CacheErrorLogger$CacheErrorCategory,java.lang.Class,java.lang.String,java.lang.Throwable) -> logError
    void <clinit>() -> <clinit>
com.facebook.cache.common.NoOpCacheEventListener -> com.facebook.cache.common.NoOpCacheEventListener:
    com.facebook.cache.common.NoOpCacheEventListener sInstance -> sInstance
    void <init>() -> <init>
    com.facebook.cache.common.NoOpCacheEventListener getInstance() -> getInstance
    void onHit(com.facebook.cache.common.CacheEvent) -> onHit
    void onMiss(com.facebook.cache.common.CacheEvent) -> onMiss
    void onWriteAttempt(com.facebook.cache.common.CacheEvent) -> onWriteAttempt
    void onWriteSuccess(com.facebook.cache.common.CacheEvent) -> onWriteSuccess
    void onReadException(com.facebook.cache.common.CacheEvent) -> onReadException
    void onWriteException(com.facebook.cache.common.CacheEvent) -> onWriteException
    void onEviction(com.facebook.cache.common.CacheEvent) -> onEviction
    void onCleared() -> onCleared
    void <clinit>() -> <clinit>
com.facebook.cache.common.SimpleCacheKey -> com.facebook.cache.common.SimpleCacheKey:
    java.lang.Class TAG -> TAG
    java.lang.String mKey -> mKey
    void <init>(java.lang.String) -> <init>
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    boolean containsUri(android.net.Uri) -> containsUri
    java.lang.String getUriString() -> getUriString
    void <clinit>() -> <clinit>
com.facebook.cache.common.WriterCallback -> com.facebook.cache.common.WriterCallback:
    void write(java.io.OutputStream) -> write
com.facebook.cache.common.WriterCallbacks -> com.facebook.cache.common.WriterCallbacks:
    void <init>() -> <init>
    com.facebook.cache.common.WriterCallback from(java.io.InputStream) -> from
    com.facebook.cache.common.WriterCallback from(byte[]) -> from
com.facebook.cache.common.WriterCallbacks$1 -> com.facebook.cache.common.WriterCallbacks$1:
    java.io.InputStream val$is -> val$is
    void <init>(java.io.InputStream) -> <init>
    void write(java.io.OutputStream) -> write
com.facebook.cache.common.WriterCallbacks$2 -> com.facebook.cache.common.WriterCallbacks$2:
    byte[] val$data -> val$data
    void <init>(byte[]) -> <init>
    void write(java.io.OutputStream) -> write
com.facebook.cache.disk.DefaultDiskStorage -> com.facebook.cache.disk.DefaultDiskStorage:
    java.lang.Class TAG -> TAG
    java.lang.String CONTENT_FILE_EXTENSION -> CONTENT_FILE_EXTENSION
    java.lang.String TEMP_FILE_EXTENSION -> TEMP_FILE_EXTENSION
    java.lang.String DEFAULT_DISK_STORAGE_VERSION_PREFIX -> DEFAULT_DISK_STORAGE_VERSION_PREFIX
    int SHARDING_BUCKET_COUNT -> SHARDING_BUCKET_COUNT
    long TEMP_FILE_LIFETIME_MS -> TEMP_FILE_LIFETIME_MS
    java.io.File mRootDirectory -> mRootDirectory
    boolean mIsExternal -> mIsExternal
    java.io.File mVersionDirectory -> mVersionDirectory
    com.facebook.cache.common.CacheErrorLogger mCacheErrorLogger -> mCacheErrorLogger
    com.facebook.common.time.Clock mClock -> mClock
    void <init>(java.io.File,int,com.facebook.cache.common.CacheErrorLogger) -> <init>
    boolean isExternal(java.io.File,com.facebook.cache.common.CacheErrorLogger) -> isExternal
    java.lang.String getVersionSubdirectoryName(int) -> getVersionSubdirectoryName
    boolean isEnabled() -> isEnabled
    boolean isExternal() -> isExternal
    java.lang.String getStorageName() -> getStorageName
    void recreateDirectoryIfVersionChanges() -> recreateDirectoryIfVersionChanges
    java.io.File getContentFileFor(java.lang.String) -> getContentFileFor
    java.lang.String getSubdirectoryPath(java.lang.String) -> getSubdirectoryPath
    java.io.File getSubdirectory(java.lang.String) -> getSubdirectory
    void purgeUnexpectedResources() -> purgeUnexpectedResources
    void mkdirs(java.io.File,java.lang.String) -> mkdirs
    com.facebook.cache.disk.DiskStorage$Inserter insert(java.lang.String,java.lang.Object) -> insert
    com.facebook.binaryresource.BinaryResource getResource(java.lang.String,java.lang.Object) -> getResource
    java.lang.String getFilename(java.lang.String) -> getFilename
    boolean contains(java.lang.String,java.lang.Object) -> contains
    boolean touch(java.lang.String,java.lang.Object) -> touch
    boolean query(java.lang.String,boolean) -> query
    long remove(com.facebook.cache.disk.DiskStorage$Entry) -> remove
    long remove(java.lang.String) -> remove
    long doRemove(java.io.File) -> doRemove
    void clearAll() -> clearAll
    com.facebook.cache.disk.DiskStorage$DiskDumpInfo getDumpInfo() -> getDumpInfo
    com.facebook.cache.disk.DiskStorage$DiskDumpInfoEntry dumpCacheEntry(com.facebook.cache.disk.DiskStorage$Entry) -> dumpCacheEntry
    java.lang.String typeOfBytes(byte[]) -> typeOfBytes
    java.util.List getEntries() -> getEntries
    com.facebook.cache.disk.DefaultDiskStorage$FileInfo getShardFileInfo(java.io.File) -> getShardFileInfo
    java.util.Collection getEntries() -> getEntries
    com.facebook.cache.disk.DefaultDiskStorage$FileInfo access$000(com.facebook.cache.disk.DefaultDiskStorage,java.io.File) -> access$000
    java.io.File access$200(com.facebook.cache.disk.DefaultDiskStorage) -> access$200
    java.io.File access$300(com.facebook.cache.disk.DefaultDiskStorage) -> access$300
    com.facebook.common.time.Clock access$400(com.facebook.cache.disk.DefaultDiskStorage) -> access$400
    java.lang.Class access$800() -> access$800
    com.facebook.cache.common.CacheErrorLogger access$900(com.facebook.cache.disk.DefaultDiskStorage) -> access$900
    void <clinit>() -> <clinit>
com.facebook.cache.disk.DefaultDiskStorage$1 -> com.facebook.cache.disk.DefaultDiskStorage$1:
com.facebook.cache.disk.DefaultDiskStorage$EntriesCollector -> com.facebook.cache.disk.DefaultDiskStorage$EntriesCollector:
    java.util.List result -> result
    com.facebook.cache.disk.DefaultDiskStorage this$0 -> this$0
    void <init>(com.facebook.cache.disk.DefaultDiskStorage) -> <init>
    void preVisitDirectory(java.io.File) -> preVisitDirectory
    void visitFile(java.io.File) -> visitFile
    void postVisitDirectory(java.io.File) -> postVisitDirectory
    java.util.List getEntries() -> getEntries
    void <init>(com.facebook.cache.disk.DefaultDiskStorage,com.facebook.cache.disk.DefaultDiskStorage$1) -> <init>
com.facebook.cache.disk.DefaultDiskStorage$EntryImpl -> com.facebook.cache.disk.DefaultDiskStorage$EntryImpl:
    java.lang.String id -> id
    com.facebook.binaryresource.FileBinaryResource resource -> resource
    long size -> size
    long timestamp -> timestamp
    void <init>(java.lang.String,java.io.File) -> <init>
    java.lang.String getId() -> getId
    long getTimestamp() -> getTimestamp
    com.facebook.binaryresource.FileBinaryResource getResource() -> getResource
    long getSize() -> getSize
    com.facebook.binaryresource.BinaryResource getResource() -> getResource
    void <init>(java.lang.String,java.io.File,com.facebook.cache.disk.DefaultDiskStorage$1) -> <init>
com.facebook.cache.disk.DefaultDiskStorage$FileInfo -> com.facebook.cache.disk.DefaultDiskStorage$FileInfo:
    com.facebook.cache.disk.DefaultDiskStorage$FileType type -> type
    java.lang.String resourceId -> resourceId
    void <init>(com.facebook.cache.disk.DefaultDiskStorage$FileType,java.lang.String) -> <init>
    java.lang.String toString() -> toString
    java.lang.String toPath(java.lang.String) -> toPath
    java.io.File createTempFile(java.io.File) -> createTempFile
    com.facebook.cache.disk.DefaultDiskStorage$FileInfo fromFile(java.io.File) -> fromFile
    void <init>(com.facebook.cache.disk.DefaultDiskStorage$FileType,java.lang.String,com.facebook.cache.disk.DefaultDiskStorage$1) -> <init>
com.facebook.cache.disk.DefaultDiskStorage$FileType -> com.facebook.cache.disk.DefaultDiskStorage$FileType:
    com.facebook.cache.disk.DefaultDiskStorage$FileType CONTENT -> CONTENT
    com.facebook.cache.disk.DefaultDiskStorage$FileType TEMP -> TEMP
    java.lang.String extension -> extension
    com.facebook.cache.disk.DefaultDiskStorage$FileType[] $VALUES -> $VALUES
    com.facebook.cache.disk.DefaultDiskStorage$FileType[] values() -> values
    com.facebook.cache.disk.DefaultDiskStorage$FileType valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,java.lang.String) -> <init>
    com.facebook.cache.disk.DefaultDiskStorage$FileType fromExtension(java.lang.String) -> fromExtension
    void <clinit>() -> <clinit>
com.facebook.cache.disk.DefaultDiskStorage$IncompleteFileException -> com.facebook.cache.disk.DefaultDiskStorage$IncompleteFileException:
    long expected -> expected
    long actual -> actual
    void <init>(long,long) -> <init>
com.facebook.cache.disk.DefaultDiskStorage$InserterImpl -> com.facebook.cache.disk.DefaultDiskStorage$InserterImpl:
    java.lang.String mResourceId -> mResourceId
    java.io.File mTemporaryFile -> mTemporaryFile
    com.facebook.cache.disk.DefaultDiskStorage this$0 -> this$0
    void <init>(com.facebook.cache.disk.DefaultDiskStorage,java.lang.String,java.io.File) -> <init>
    void writeData(com.facebook.cache.common.WriterCallback,java.lang.Object) -> writeData
    com.facebook.binaryresource.BinaryResource commit(java.lang.Object) -> commit
    boolean cleanUp() -> cleanUp
com.facebook.cache.disk.DefaultDiskStorage$PurgingVisitor -> com.facebook.cache.disk.DefaultDiskStorage$PurgingVisitor:
    boolean insideBaseDirectory -> insideBaseDirectory
    com.facebook.cache.disk.DefaultDiskStorage this$0 -> this$0
    void <init>(com.facebook.cache.disk.DefaultDiskStorage) -> <init>
    void preVisitDirectory(java.io.File) -> preVisitDirectory
    void visitFile(java.io.File) -> visitFile
    void postVisitDirectory(java.io.File) -> postVisitDirectory
    boolean isExpectedFile(java.io.File) -> isExpectedFile
    boolean isRecentFile(java.io.File) -> isRecentFile
    void <init>(com.facebook.cache.disk.DefaultDiskStorage,com.facebook.cache.disk.DefaultDiskStorage$1) -> <init>
com.facebook.cache.disk.DefaultEntryEvictionComparatorSupplier -> com.facebook.cache.disk.DefaultEntryEvictionComparatorSupplier:
    void <init>() -> <init>
    com.facebook.cache.disk.EntryEvictionComparator get() -> get
com.facebook.cache.disk.DefaultEntryEvictionComparatorSupplier$1 -> com.facebook.cache.disk.DefaultEntryEvictionComparatorSupplier$1:
    com.facebook.cache.disk.DefaultEntryEvictionComparatorSupplier this$0 -> this$0
    void <init>(com.facebook.cache.disk.DefaultEntryEvictionComparatorSupplier) -> <init>
    int compare(com.facebook.cache.disk.DiskStorage$Entry,com.facebook.cache.disk.DiskStorage$Entry) -> compare
    int compare(java.lang.Object,java.lang.Object) -> compare
com.facebook.cache.disk.DiskCacheConfig -> com.facebook.cache.disk.DiskCacheConfig:
    int mVersion -> mVersion
    java.lang.String mBaseDirectoryName -> mBaseDirectoryName
    com.facebook.common.internal.Supplier mBaseDirectoryPathSupplier -> mBaseDirectoryPathSupplier
    long mDefaultSizeLimit -> mDefaultSizeLimit
    long mLowDiskSpaceSizeLimit -> mLowDiskSpaceSizeLimit
    long mMinimumSizeLimit -> mMinimumSizeLimit
    com.facebook.cache.disk.EntryEvictionComparatorSupplier mEntryEvictionComparatorSupplier -> mEntryEvictionComparatorSupplier
    com.facebook.cache.common.CacheErrorLogger mCacheErrorLogger -> mCacheErrorLogger
    com.facebook.cache.common.CacheEventListener mCacheEventListener -> mCacheEventListener
    com.facebook.common.disk.DiskTrimmableRegistry mDiskTrimmableRegistry -> mDiskTrimmableRegistry
    android.content.Context mContext -> mContext
    boolean mIndexPopulateAtStartupEnabled -> mIndexPopulateAtStartupEnabled
    void <init>(com.facebook.cache.disk.DiskCacheConfig$Builder) -> <init>
    int getVersion() -> getVersion
    java.lang.String getBaseDirectoryName() -> getBaseDirectoryName
    com.facebook.common.internal.Supplier getBaseDirectoryPathSupplier() -> getBaseDirectoryPathSupplier
    long getDefaultSizeLimit() -> getDefaultSizeLimit
    long getLowDiskSpaceSizeLimit() -> getLowDiskSpaceSizeLimit
    long getMinimumSizeLimit() -> getMinimumSizeLimit
    com.facebook.cache.disk.EntryEvictionComparatorSupplier getEntryEvictionComparatorSupplier() -> getEntryEvictionComparatorSupplier
    com.facebook.cache.common.CacheErrorLogger getCacheErrorLogger() -> getCacheErrorLogger
    com.facebook.cache.common.CacheEventListener getCacheEventListener() -> getCacheEventListener
    com.facebook.common.disk.DiskTrimmableRegistry getDiskTrimmableRegistry() -> getDiskTrimmableRegistry
    android.content.Context getContext() -> getContext
    boolean getIndexPopulateAtStartupEnabled() -> getIndexPopulateAtStartupEnabled
    com.facebook.cache.disk.DiskCacheConfig$Builder newBuilder(android.content.Context) -> newBuilder
    void <init>(com.facebook.cache.disk.DiskCacheConfig$Builder,com.facebook.cache.disk.DiskCacheConfig$1) -> <init>
com.facebook.cache.disk.DiskCacheConfig$1 -> com.facebook.cache.disk.DiskCacheConfig$1:
com.facebook.cache.disk.DiskCacheConfig$Builder -> com.facebook.cache.disk.DiskCacheConfig$Builder:
    int mVersion -> mVersion
    java.lang.String mBaseDirectoryName -> mBaseDirectoryName
    com.facebook.common.internal.Supplier mBaseDirectoryPathSupplier -> mBaseDirectoryPathSupplier
    long mMaxCacheSize -> mMaxCacheSize
    long mMaxCacheSizeOnLowDiskSpace -> mMaxCacheSizeOnLowDiskSpace
    long mMaxCacheSizeOnVeryLowDiskSpace -> mMaxCacheSizeOnVeryLowDiskSpace
    com.facebook.cache.disk.EntryEvictionComparatorSupplier mEntryEvictionComparatorSupplier -> mEntryEvictionComparatorSupplier
    com.facebook.cache.common.CacheErrorLogger mCacheErrorLogger -> mCacheErrorLogger
    com.facebook.cache.common.CacheEventListener mCacheEventListener -> mCacheEventListener
    com.facebook.common.disk.DiskTrimmableRegistry mDiskTrimmableRegistry -> mDiskTrimmableRegistry
    boolean mIndexPopulateAtStartupEnabled -> mIndexPopulateAtStartupEnabled
    android.content.Context mContext -> mContext
    void <init>(android.content.Context) -> <init>
    com.facebook.cache.disk.DiskCacheConfig$Builder setVersion(int) -> setVersion
    com.facebook.cache.disk.DiskCacheConfig$Builder setBaseDirectoryName(java.lang.String) -> setBaseDirectoryName
    com.facebook.cache.disk.DiskCacheConfig$Builder setBaseDirectoryPath(java.io.File) -> setBaseDirectoryPath
    com.facebook.cache.disk.DiskCacheConfig$Builder setBaseDirectoryPathSupplier(com.facebook.common.internal.Supplier) -> setBaseDirectoryPathSupplier
    com.facebook.cache.disk.DiskCacheConfig$Builder setMaxCacheSize(long) -> setMaxCacheSize
    com.facebook.cache.disk.DiskCacheConfig$Builder setMaxCacheSizeOnLowDiskSpace(long) -> setMaxCacheSizeOnLowDiskSpace
    com.facebook.cache.disk.DiskCacheConfig$Builder setMaxCacheSizeOnVeryLowDiskSpace(long) -> setMaxCacheSizeOnVeryLowDiskSpace
    com.facebook.cache.disk.DiskCacheConfig$Builder setEntryEvictionComparatorSupplier(com.facebook.cache.disk.EntryEvictionComparatorSupplier) -> setEntryEvictionComparatorSupplier
    com.facebook.cache.disk.DiskCacheConfig$Builder setCacheErrorLogger(com.facebook.cache.common.CacheErrorLogger) -> setCacheErrorLogger
    com.facebook.cache.disk.DiskCacheConfig$Builder setCacheEventListener(com.facebook.cache.common.CacheEventListener) -> setCacheEventListener
    com.facebook.cache.disk.DiskCacheConfig$Builder setDiskTrimmableRegistry(com.facebook.common.disk.DiskTrimmableRegistry) -> setDiskTrimmableRegistry
    com.facebook.cache.disk.DiskCacheConfig$Builder setIndexPopulateAtStartupEnabled(boolean) -> setIndexPopulateAtStartupEnabled
    com.facebook.cache.disk.DiskCacheConfig build() -> build
    int access$000(com.facebook.cache.disk.DiskCacheConfig$Builder) -> access$000
    java.lang.String access$100(com.facebook.cache.disk.DiskCacheConfig$Builder) -> access$100
    com.facebook.common.internal.Supplier access$200(com.facebook.cache.disk.DiskCacheConfig$Builder) -> access$200
    long access$300(com.facebook.cache.disk.DiskCacheConfig$Builder) -> access$300
    long access$400(com.facebook.cache.disk.DiskCacheConfig$Builder) -> access$400
    long access$500(com.facebook.cache.disk.DiskCacheConfig$Builder) -> access$500
    com.facebook.cache.disk.EntryEvictionComparatorSupplier access$600(com.facebook.cache.disk.DiskCacheConfig$Builder) -> access$600
    com.facebook.cache.common.CacheErrorLogger access$700(com.facebook.cache.disk.DiskCacheConfig$Builder) -> access$700
    com.facebook.cache.common.CacheEventListener access$800(com.facebook.cache.disk.DiskCacheConfig$Builder) -> access$800
    com.facebook.common.disk.DiskTrimmableRegistry access$900(com.facebook.cache.disk.DiskCacheConfig$Builder) -> access$900
    android.content.Context access$1000(com.facebook.cache.disk.DiskCacheConfig$Builder) -> access$1000
    boolean access$1100(com.facebook.cache.disk.DiskCacheConfig$Builder) -> access$1100
    void <init>(android.content.Context,com.facebook.cache.disk.DiskCacheConfig$1) -> <init>
com.facebook.cache.disk.DiskCacheConfig$Builder$1 -> com.facebook.cache.disk.DiskCacheConfig$Builder$1:
    com.facebook.cache.disk.DiskCacheConfig$Builder this$0 -> this$0
    void <init>(com.facebook.cache.disk.DiskCacheConfig$Builder) -> <init>
    java.io.File get() -> get
    java.lang.Object get() -> get
com.facebook.cache.disk.DiskStorage -> com.facebook.cache.disk.DiskStorage:
    boolean isEnabled() -> isEnabled
    boolean isExternal() -> isExternal
    com.facebook.binaryresource.BinaryResource getResource(java.lang.String,java.lang.Object) -> getResource
    boolean contains(java.lang.String,java.lang.Object) -> contains
    boolean touch(java.lang.String,java.lang.Object) -> touch
    void purgeUnexpectedResources() -> purgeUnexpectedResources
    com.facebook.cache.disk.DiskStorage$Inserter insert(java.lang.String,java.lang.Object) -> insert
    java.util.Collection getEntries() -> getEntries
    long remove(com.facebook.cache.disk.DiskStorage$Entry) -> remove
    long remove(java.lang.String) -> remove
    void clearAll() -> clearAll
    com.facebook.cache.disk.DiskStorage$DiskDumpInfo getDumpInfo() -> getDumpInfo
    java.lang.String getStorageName() -> getStorageName
com.facebook.cache.disk.DiskStorage$DiskDumpInfo -> com.facebook.cache.disk.DiskStorage$DiskDumpInfo:
    java.util.List entries -> entries
    java.util.Map typeCounts -> typeCounts
    void <init>() -> <init>
com.facebook.cache.disk.DiskStorage$DiskDumpInfoEntry -> com.facebook.cache.disk.DiskStorage$DiskDumpInfoEntry:
    java.lang.String path -> path
    java.lang.String type -> type
    float size -> size
    java.lang.String firstBits -> firstBits
    void <init>(java.lang.String,java.lang.String,float,java.lang.String) -> <init>
com.facebook.cache.disk.DiskStorage$Entry -> com.facebook.cache.disk.DiskStorage$Entry:
    java.lang.String getId() -> getId
    long getTimestamp() -> getTimestamp
    long getSize() -> getSize
    com.facebook.binaryresource.BinaryResource getResource() -> getResource
com.facebook.cache.disk.DiskStorage$Inserter -> com.facebook.cache.disk.DiskStorage$Inserter:
    void writeData(com.facebook.cache.common.WriterCallback,java.lang.Object) -> writeData
    com.facebook.binaryresource.BinaryResource commit(java.lang.Object) -> commit
    boolean cleanUp() -> cleanUp
com.facebook.cache.disk.DiskStorageCache -> com.facebook.cache.disk.DiskStorageCache:
    java.lang.Class TAG -> TAG
    int START_OF_VERSIONING -> START_OF_VERSIONING
    long FUTURE_TIMESTAMP_THRESHOLD_MS -> FUTURE_TIMESTAMP_THRESHOLD_MS
    long FILECACHE_SIZE_UPDATE_PERIOD_MS -> FILECACHE_SIZE_UPDATE_PERIOD_MS
    double TRIMMING_LOWER_BOUND -> TRIMMING_LOWER_BOUND
    long UNINITIALIZED -> UNINITIALIZED
    java.lang.String SHARED_PREFS_FILENAME_PREFIX -> SHARED_PREFS_FILENAME_PREFIX
    long mLowDiskSpaceCacheSizeLimit -> mLowDiskSpaceCacheSizeLimit
    long mDefaultCacheSizeLimit -> mDefaultCacheSizeLimit
    java.util.concurrent.CountDownLatch mCountDownLatch -> mCountDownLatch
    long mCacheSizeLimit -> mCacheSizeLimit
    com.facebook.cache.common.CacheEventListener mCacheEventListener -> mCacheEventListener
    java.util.Set mResourceIndex -> mResourceIndex
    long mCacheSizeLastUpdateTime -> mCacheSizeLastUpdateTime
    long mCacheSizeLimitMinimum -> mCacheSizeLimitMinimum
    com.facebook.common.statfs.StatFsHelper mStatFsHelper -> mStatFsHelper
    com.facebook.cache.disk.DiskStorage mStorage -> mStorage
    com.facebook.cache.disk.EntryEvictionComparatorSupplier mEntryEvictionComparatorSupplier -> mEntryEvictionComparatorSupplier
    com.facebook.cache.common.CacheErrorLogger mCacheErrorLogger -> mCacheErrorLogger
    boolean mIndexPopulateAtStartupEnabled -> mIndexPopulateAtStartupEnabled
    com.facebook.cache.disk.DiskStorageCache$CacheStats mCacheStats -> mCacheStats
    com.facebook.common.time.Clock mClock -> mClock
    java.lang.Object mLock -> mLock
    boolean mIndexReady -> mIndexReady
    void <init>(com.facebook.cache.disk.DiskStorage,com.facebook.cache.disk.EntryEvictionComparatorSupplier,com.facebook.cache.disk.DiskStorageCache$Params,com.facebook.cache.common.CacheEventListener,com.facebook.cache.common.CacheErrorLogger,com.facebook.common.disk.DiskTrimmableRegistry,android.content.Context,java.util.concurrent.Executor,boolean) -> <init>
    com.facebook.cache.disk.DiskStorage$DiskDumpInfo getDumpInfo() -> getDumpInfo
    boolean isEnabled() -> isEnabled
    void awaitIndex() -> awaitIndex
    boolean isIndexReady() -> isIndexReady
    com.facebook.binaryresource.BinaryResource getResource(com.facebook.cache.common.CacheKey) -> getResource
    boolean probe(com.facebook.cache.common.CacheKey) -> probe
    com.facebook.cache.disk.DiskStorage$Inserter startInsert(java.lang.String,com.facebook.cache.common.CacheKey) -> startInsert
    com.facebook.binaryresource.BinaryResource endInsert(com.facebook.cache.disk.DiskStorage$Inserter,com.facebook.cache.common.CacheKey,java.lang.String) -> endInsert
    com.facebook.binaryresource.BinaryResource insert(com.facebook.cache.common.CacheKey,com.facebook.cache.common.WriterCallback) -> insert
    void remove(com.facebook.cache.common.CacheKey) -> remove
    long clearOldEntries(long) -> clearOldEntries
    void maybeEvictFilesInCacheDir() -> maybeEvictFilesInCacheDir
    void evictAboveSize(long,com.facebook.cache.common.CacheEventListener$EvictionReason) -> evictAboveSize
    java.util.Collection getSortedEntries(java.util.Collection) -> getSortedEntries
    void updateFileCacheSizeLimit() -> updateFileCacheSizeLimit
    long getSize() -> getSize
    long getCount() -> getCount
    void clearAll() -> clearAll
    boolean hasKeySync(com.facebook.cache.common.CacheKey) -> hasKeySync
    boolean hasKey(com.facebook.cache.common.CacheKey) -> hasKey
    void trimToMinimum() -> trimToMinimum
    void trimToNothing() -> trimToNothing
    void trimBy(double) -> trimBy
    boolean maybeUpdateFileCacheSize() -> maybeUpdateFileCacheSize
    boolean maybeUpdateFileCacheSizeAndIndex() -> maybeUpdateFileCacheSizeAndIndex
    java.lang.Object access$000(com.facebook.cache.disk.DiskStorageCache) -> access$000
    boolean access$100(com.facebook.cache.disk.DiskStorageCache) -> access$100
    boolean access$202(com.facebook.cache.disk.DiskStorageCache,boolean) -> access$202
    java.util.concurrent.CountDownLatch access$300(com.facebook.cache.disk.DiskStorageCache) -> access$300
    void <clinit>() -> <clinit>
com.facebook.cache.disk.DiskStorageCache$1 -> com.facebook.cache.disk.DiskStorageCache$1:
    com.facebook.cache.disk.DiskStorageCache this$0 -> this$0
    void <init>(com.facebook.cache.disk.DiskStorageCache) -> <init>
    void run() -> run
com.facebook.cache.disk.DiskStorageCache$CacheStats -> com.facebook.cache.disk.DiskStorageCache$CacheStats:
    boolean mInitialized -> mInitialized
    long mSize -> mSize
    long mCount -> mCount
    void <init>() -> <init>
    boolean isInitialized() -> isInitialized
    void reset() -> reset
    void set(long,long) -> set
    void increment(long,long) -> increment
    long getSize() -> getSize
    long getCount() -> getCount
com.facebook.cache.disk.DiskStorageCache$Params -> com.facebook.cache.disk.DiskStorageCache$Params:
    long mCacheSizeLimitMinimum -> mCacheSizeLimitMinimum
    long mLowDiskSpaceCacheSizeLimit -> mLowDiskSpaceCacheSizeLimit
    long mDefaultCacheSizeLimit -> mDefaultCacheSizeLimit
    void <init>(long,long,long) -> <init>
com.facebook.cache.disk.DynamicDefaultDiskStorage -> com.facebook.cache.disk.DynamicDefaultDiskStorage:
    java.lang.Class TAG -> TAG
    int mVersion -> mVersion
    com.facebook.common.internal.Supplier mBaseDirectoryPathSupplier -> mBaseDirectoryPathSupplier
    java.lang.String mBaseDirectoryName -> mBaseDirectoryName
    com.facebook.cache.common.CacheErrorLogger mCacheErrorLogger -> mCacheErrorLogger
    com.facebook.cache.disk.DynamicDefaultDiskStorage$State mCurrentState -> mCurrentState
    void <init>(int,com.facebook.common.internal.Supplier,java.lang.String,com.facebook.cache.common.CacheErrorLogger) -> <init>
    boolean isEnabled() -> isEnabled
    boolean isExternal() -> isExternal
    java.lang.String getStorageName() -> getStorageName
    com.facebook.binaryresource.BinaryResource getResource(java.lang.String,java.lang.Object) -> getResource
    boolean contains(java.lang.String,java.lang.Object) -> contains
    boolean touch(java.lang.String,java.lang.Object) -> touch
    void purgeUnexpectedResources() -> purgeUnexpectedResources
    com.facebook.cache.disk.DiskStorage$Inserter insert(java.lang.String,java.lang.Object) -> insert
    java.util.Collection getEntries() -> getEntries
    long remove(com.facebook.cache.disk.DiskStorage$Entry) -> remove
    long remove(java.lang.String) -> remove
    void clearAll() -> clearAll
    com.facebook.cache.disk.DiskStorage$DiskDumpInfo getDumpInfo() -> getDumpInfo
    com.facebook.cache.disk.DiskStorage get() -> get
    boolean shouldCreateNewStorage() -> shouldCreateNewStorage
    void deleteOldStorageIfNecessary() -> deleteOldStorageIfNecessary
    void createStorage() -> createStorage
    void createRootDirectoryIfNecessary(java.io.File) -> createRootDirectoryIfNecessary
    void <clinit>() -> <clinit>
com.facebook.cache.disk.DynamicDefaultDiskStorage$State -> com.facebook.cache.disk.DynamicDefaultDiskStorage$State:
    com.facebook.cache.disk.DiskStorage delegate -> delegate
    java.io.File rootDirectory -> rootDirectory
    void <init>(java.io.File,com.facebook.cache.disk.DiskStorage) -> <init>
com.facebook.cache.disk.EntryEvictionComparator -> com.facebook.cache.disk.EntryEvictionComparator:
com.facebook.cache.disk.EntryEvictionComparatorSupplier -> com.facebook.cache.disk.EntryEvictionComparatorSupplier:
    com.facebook.cache.disk.EntryEvictionComparator get() -> get
com.facebook.cache.disk.FileCache -> com.facebook.cache.disk.FileCache:
    boolean isEnabled() -> isEnabled
    com.facebook.binaryresource.BinaryResource getResource(com.facebook.cache.common.CacheKey) -> getResource
    boolean hasKeySync(com.facebook.cache.common.CacheKey) -> hasKeySync
    boolean hasKey(com.facebook.cache.common.CacheKey) -> hasKey
    boolean probe(com.facebook.cache.common.CacheKey) -> probe
    com.facebook.binaryresource.BinaryResource insert(com.facebook.cache.common.CacheKey,com.facebook.cache.common.WriterCallback) -> insert
    void remove(com.facebook.cache.common.CacheKey) -> remove
    long getSize() -> getSize
    long getCount() -> getCount
    long clearOldEntries(long) -> clearOldEntries
    void clearAll() -> clearAll
    com.facebook.cache.disk.DiskStorage$DiskDumpInfo getDumpInfo() -> getDumpInfo
com.facebook.cache.disk.ScoreBasedEvictionComparatorSupplier -> com.facebook.cache.disk.ScoreBasedEvictionComparatorSupplier:
    float mAgeWeight -> mAgeWeight
    float mSizeWeight -> mSizeWeight
    void <init>(float,float) -> <init>
    com.facebook.cache.disk.EntryEvictionComparator get() -> get
    float calculateScore(com.facebook.cache.disk.DiskStorage$Entry,long) -> calculateScore
com.facebook.cache.disk.ScoreBasedEvictionComparatorSupplier$1 -> com.facebook.cache.disk.ScoreBasedEvictionComparatorSupplier$1:
    long now -> now
    com.facebook.cache.disk.ScoreBasedEvictionComparatorSupplier this$0 -> this$0
    void <init>(com.facebook.cache.disk.ScoreBasedEvictionComparatorSupplier) -> <init>
    int compare(com.facebook.cache.disk.DiskStorage$Entry,com.facebook.cache.disk.DiskStorage$Entry) -> compare
    int compare(java.lang.Object,java.lang.Object) -> compare
com.facebook.cache.disk.SettableCacheEvent -> com.facebook.cache.disk.SettableCacheEvent:
    java.lang.Object RECYCLER_LOCK -> RECYCLER_LOCK
    int MAX_RECYCLED -> MAX_RECYCLED
    com.facebook.cache.disk.SettableCacheEvent sFirstRecycledEvent -> sFirstRecycledEvent
    int sRecycledCount -> sRecycledCount
    com.facebook.cache.common.CacheKey mCacheKey -> mCacheKey
    java.lang.String mResourceId -> mResourceId
    long mItemSize -> mItemSize
    long mCacheLimit -> mCacheLimit
    long mCacheSize -> mCacheSize
    java.io.IOException mException -> mException
    com.facebook.cache.common.CacheEventListener$EvictionReason mEvictionReason -> mEvictionReason
    com.facebook.cache.disk.SettableCacheEvent mNextRecycledEvent -> mNextRecycledEvent
    com.facebook.cache.disk.SettableCacheEvent obtain() -> obtain
    void <init>() -> <init>
    com.facebook.cache.common.CacheKey getCacheKey() -> getCacheKey
    com.facebook.cache.disk.SettableCacheEvent setCacheKey(com.facebook.cache.common.CacheKey) -> setCacheKey
    java.lang.String getResourceId() -> getResourceId
    com.facebook.cache.disk.SettableCacheEvent setResourceId(java.lang.String) -> setResourceId
    long getItemSize() -> getItemSize
    com.facebook.cache.disk.SettableCacheEvent setItemSize(long) -> setItemSize
    long getCacheSize() -> getCacheSize
    com.facebook.cache.disk.SettableCacheEvent setCacheSize(long) -> setCacheSize
    long getCacheLimit() -> getCacheLimit
    com.facebook.cache.disk.SettableCacheEvent setCacheLimit(long) -> setCacheLimit
    java.io.IOException getException() -> getException
    com.facebook.cache.disk.SettableCacheEvent setException(java.io.IOException) -> setException
    com.facebook.cache.common.CacheEventListener$EvictionReason getEvictionReason() -> getEvictionReason
    com.facebook.cache.disk.SettableCacheEvent setEvictionReason(com.facebook.cache.common.CacheEventListener$EvictionReason) -> setEvictionReason
    void recycle() -> recycle
    void reset() -> reset
    void <clinit>() -> <clinit>
com.facebook.common.activitylistener.ActivityListener -> com.facebook.common.activitylistener.ActivityListener:
    void onActivityCreate(android.app.Activity) -> onActivityCreate
    void onStart(android.app.Activity) -> onStart
    void onResume(android.app.Activity) -> onResume
    void onPause(android.app.Activity) -> onPause
    void onStop(android.app.Activity) -> onStop
    void onDestroy(android.app.Activity) -> onDestroy
com.facebook.common.activitylistener.ActivityListenerManager -> com.facebook.common.activitylistener.ActivityListenerManager:
    void <init>() -> <init>
    void register(com.facebook.common.activitylistener.ActivityListener,android.content.Context) -> register
com.facebook.common.activitylistener.ActivityListenerManager$Listener -> com.facebook.common.activitylistener.ActivityListenerManager$Listener:
    java.lang.ref.WeakReference mActivityListenerRef -> mActivityListenerRef
    void <init>(com.facebook.common.activitylistener.ActivityListener) -> <init>
    void onActivityCreate(android.app.Activity) -> onActivityCreate
    void onDestroy(android.app.Activity) -> onDestroy
    void onStart(android.app.Activity) -> onStart
    void onStop(android.app.Activity) -> onStop
    void onResume(android.app.Activity) -> onResume
    void onPause(android.app.Activity) -> onPause
    com.facebook.common.activitylistener.ActivityListener getListenerOrCleanUp(android.app.Activity) -> getListenerOrCleanUp
com.facebook.common.activitylistener.BaseActivityListener -> com.facebook.common.activitylistener.BaseActivityListener:
    void <init>() -> <init>
    void onActivityCreate(android.app.Activity) -> onActivityCreate
    void onStop(android.app.Activity) -> onStop
    void onStart(android.app.Activity) -> onStart
    void onDestroy(android.app.Activity) -> onDestroy
    void onPause(android.app.Activity) -> onPause
    void onResume(android.app.Activity) -> onResume
com.facebook.common.activitylistener.ListenableActivity -> com.facebook.common.activitylistener.ListenableActivity:
    void addActivityListener(com.facebook.common.activitylistener.ActivityListener) -> addActivityListener
    void removeActivityListener(com.facebook.common.activitylistener.ActivityListener) -> removeActivityListener
com.facebook.common.disk.DiskTrimmable -> com.facebook.common.disk.DiskTrimmable:
    void trimToMinimum() -> trimToMinimum
    void trimToNothing() -> trimToNothing
com.facebook.common.disk.DiskTrimmableRegistry -> com.facebook.common.disk.DiskTrimmableRegistry:
    void registerDiskTrimmable(com.facebook.common.disk.DiskTrimmable) -> registerDiskTrimmable
    void unregisterDiskTrimmable(com.facebook.common.disk.DiskTrimmable) -> unregisterDiskTrimmable
com.facebook.common.disk.NoOpDiskTrimmableRegistry -> com.facebook.common.disk.NoOpDiskTrimmableRegistry:
    com.facebook.common.disk.NoOpDiskTrimmableRegistry sInstance -> sInstance
    void <init>() -> <init>
    com.facebook.common.disk.NoOpDiskTrimmableRegistry getInstance() -> getInstance
    void registerDiskTrimmable(com.facebook.common.disk.DiskTrimmable) -> registerDiskTrimmable
    void unregisterDiskTrimmable(com.facebook.common.disk.DiskTrimmable) -> unregisterDiskTrimmable
    void <clinit>() -> <clinit>
com.facebook.common.executors.CallerThreadExecutor -> com.facebook.common.executors.CallerThreadExecutor:
    com.facebook.common.executors.CallerThreadExecutor sInstance -> sInstance
    com.facebook.common.executors.CallerThreadExecutor getInstance() -> getInstance
    void <init>() -> <init>
    void execute(java.lang.Runnable) -> execute
    boolean isShutdown() -> isShutdown
    void shutdown() -> shutdown
    java.util.List shutdownNow() -> shutdownNow
    boolean isTerminated() -> isTerminated
    boolean awaitTermination(long,java.util.concurrent.TimeUnit) -> awaitTermination
    void <clinit>() -> <clinit>
com.facebook.common.executors.ConstrainedExecutorService -> com.facebook.common.executors.ConstrainedExecutorService:
    java.lang.Class TAG -> TAG
    java.lang.String mName -> mName
    java.util.concurrent.Executor mExecutor -> mExecutor
    int mMaxConcurrency -> mMaxConcurrency
    java.util.concurrent.BlockingQueue mWorkQueue -> mWorkQueue
    com.facebook.common.executors.ConstrainedExecutorService$Worker mTaskRunner -> mTaskRunner
    java.util.concurrent.atomic.AtomicInteger mPendingWorkers -> mPendingWorkers
    java.util.concurrent.atomic.AtomicInteger mMaxQueueSize -> mMaxQueueSize
    void <init>(java.lang.String,int,java.util.concurrent.Executor,java.util.concurrent.BlockingQueue) -> <init>
    com.facebook.common.executors.ConstrainedExecutorService newConstrainedExecutor(java.lang.String,int,int,java.util.concurrent.Executor) -> newConstrainedExecutor
    boolean isIdle() -> isIdle
    void execute(java.lang.Runnable) -> execute
    void startWorkerIfNeeded() -> startWorkerIfNeeded
    void shutdown() -> shutdown
    java.util.List shutdownNow() -> shutdownNow
    boolean isShutdown() -> isShutdown
    boolean isTerminated() -> isTerminated
    boolean awaitTermination(long,java.util.concurrent.TimeUnit) -> awaitTermination
    java.util.concurrent.BlockingQueue access$100(com.facebook.common.executors.ConstrainedExecutorService) -> access$100
    java.lang.Class access$200() -> access$200
    java.lang.String access$300(com.facebook.common.executors.ConstrainedExecutorService) -> access$300
    java.util.concurrent.atomic.AtomicInteger access$400(com.facebook.common.executors.ConstrainedExecutorService) -> access$400
    void access$500(com.facebook.common.executors.ConstrainedExecutorService) -> access$500
    void <clinit>() -> <clinit>
com.facebook.common.executors.ConstrainedExecutorService$1 -> com.facebook.common.executors.ConstrainedExecutorService$1:
com.facebook.common.executors.ConstrainedExecutorService$Worker -> com.facebook.common.executors.ConstrainedExecutorService$Worker:
    com.facebook.common.executors.ConstrainedExecutorService this$0 -> this$0
    void <init>(com.facebook.common.executors.ConstrainedExecutorService) -> <init>
    void run() -> run
    void <init>(com.facebook.common.executors.ConstrainedExecutorService,com.facebook.common.executors.ConstrainedExecutorService$1) -> <init>
com.facebook.common.executors.DefaultSerialExecutorService -> com.facebook.common.executors.DefaultSerialExecutorService:
    void <init>(java.util.concurrent.Executor) -> <init>
    void execute(java.lang.Runnable) -> execute
com.facebook.common.executors.HandlerExecutorService -> com.facebook.common.executors.HandlerExecutorService:
    void quit() -> quit
    boolean isHandlerThread() -> isHandlerThread
com.facebook.common.executors.HandlerExecutorServiceImpl -> com.facebook.common.executors.HandlerExecutorServiceImpl:
    android.os.Handler mHandler -> mHandler
    void <init>(android.os.Handler) -> <init>
    void shutdown() -> shutdown
    java.util.List shutdownNow() -> shutdownNow
    boolean isShutdown() -> isShutdown
    boolean isTerminated() -> isTerminated
    boolean awaitTermination(long,java.util.concurrent.TimeUnit) -> awaitTermination
    void execute(java.lang.Runnable) -> execute
    com.facebook.common.executors.ScheduledFutureImpl newTaskFor(java.lang.Runnable,java.lang.Object) -> newTaskFor
    com.facebook.common.executors.ScheduledFutureImpl newTaskFor(java.util.concurrent.Callable) -> newTaskFor
    java.util.concurrent.ScheduledFuture submit(java.lang.Runnable) -> submit
    java.util.concurrent.ScheduledFuture submit(java.lang.Runnable,java.lang.Object) -> submit
    java.util.concurrent.ScheduledFuture submit(java.util.concurrent.Callable) -> submit
    java.util.concurrent.ScheduledFuture schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit) -> schedule
    java.util.concurrent.ScheduledFuture schedule(java.util.concurrent.Callable,long,java.util.concurrent.TimeUnit) -> schedule
    java.util.concurrent.ScheduledFuture scheduleAtFixedRate(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit) -> scheduleAtFixedRate
    java.util.concurrent.ScheduledFuture scheduleWithFixedDelay(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit) -> scheduleWithFixedDelay
    void quit() -> quit
    boolean isHandlerThread() -> isHandlerThread
    java.util.concurrent.Future submit(java.util.concurrent.Callable) -> submit
    java.util.concurrent.Future submit(java.lang.Runnable,java.lang.Object) -> submit
    java.util.concurrent.Future submit(java.lang.Runnable) -> submit
    java.util.concurrent.RunnableFuture newTaskFor(java.util.concurrent.Callable) -> newTaskFor
    java.util.concurrent.RunnableFuture newTaskFor(java.lang.Runnable,java.lang.Object) -> newTaskFor
com.facebook.common.executors.ScheduledFutureImpl -> com.facebook.common.executors.ScheduledFutureImpl:
    android.os.Handler mHandler -> mHandler
    java.util.concurrent.FutureTask mListenableFuture -> mListenableFuture
    void <init>(android.os.Handler,java.util.concurrent.Callable) -> <init>
    void <init>(android.os.Handler,java.lang.Runnable,java.lang.Object) -> <init>
    long getDelay(java.util.concurrent.TimeUnit) -> getDelay
    int compareTo(java.util.concurrent.Delayed) -> compareTo
    void run() -> run
    boolean cancel(boolean) -> cancel
    boolean isCancelled() -> isCancelled
    boolean isDone() -> isDone
    java.lang.Object get() -> get
    java.lang.Object get(long,java.util.concurrent.TimeUnit) -> get
    int compareTo(java.lang.Object) -> compareTo
com.facebook.common.executors.SerialExecutorService -> com.facebook.common.executors.SerialExecutorService:
com.facebook.common.executors.StatefulRunnable -> com.facebook.common.executors.StatefulRunnable:
    int STATE_CREATED -> STATE_CREATED
    int STATE_STARTED -> STATE_STARTED
    int STATE_CANCELLED -> STATE_CANCELLED
    int STATE_FINISHED -> STATE_FINISHED
    int STATE_FAILED -> STATE_FAILED
    java.util.concurrent.atomic.AtomicInteger mState -> mState
    void <init>() -> <init>
    void run() -> run
    void cancel() -> cancel
    void onSuccess(java.lang.Object) -> onSuccess
    void onFailure(java.lang.Exception) -> onFailure
    void onCancellation() -> onCancellation
    void disposeResult(java.lang.Object) -> disposeResult
    java.lang.Object getResult() -> getResult
com.facebook.common.executors.UiThreadImmediateExecutorService -> com.facebook.common.executors.UiThreadImmediateExecutorService:
    com.facebook.common.executors.UiThreadImmediateExecutorService sInstance -> sInstance
    void <init>() -> <init>
    com.facebook.common.executors.UiThreadImmediateExecutorService getInstance() -> getInstance
    void execute(java.lang.Runnable) -> execute
    void <clinit>() -> <clinit>
com.facebook.common.file.FileTree -> com.facebook.common.file.FileTree:
    void <init>() -> <init>
    void walkFileTree(java.io.File,com.facebook.common.file.FileTreeVisitor) -> walkFileTree
    boolean deleteContents(java.io.File) -> deleteContents
    boolean deleteRecursively(java.io.File) -> deleteRecursively
com.facebook.common.file.FileTreeVisitor -> com.facebook.common.file.FileTreeVisitor:
    void preVisitDirectory(java.io.File) -> preVisitDirectory
    void visitFile(java.io.File) -> visitFile
    void postVisitDirectory(java.io.File) -> postVisitDirectory
com.facebook.common.file.FileUtils -> com.facebook.common.file.FileUtils:
    void <init>() -> <init>
    void mkdirs(java.io.File) -> mkdirs
    void rename(java.io.File,java.io.File) -> rename
com.facebook.common.file.FileUtils$CreateDirectoryException -> com.facebook.common.file.FileUtils$CreateDirectoryException:
    void <init>(java.lang.String) -> <init>
    void <init>(java.lang.String,java.lang.Throwable) -> <init>
com.facebook.common.file.FileUtils$FileDeleteException -> com.facebook.common.file.FileUtils$FileDeleteException:
    void <init>(java.lang.String) -> <init>
com.facebook.common.file.FileUtils$ParentDirNotFoundException -> com.facebook.common.file.FileUtils$ParentDirNotFoundException:
    void <init>(java.lang.String) -> <init>
com.facebook.common.file.FileUtils$RenameException -> com.facebook.common.file.FileUtils$RenameException:
    void <init>(java.lang.String) -> <init>
    void <init>(java.lang.String,java.lang.Throwable) -> <init>
com.facebook.common.internal.AndroidPredicates -> com.facebook.common.internal.AndroidPredicates:
    void <init>() -> <init>
    com.android.internal.util.Predicate True() -> True
    com.android.internal.util.Predicate False() -> False
com.facebook.common.internal.AndroidPredicates$1 -> com.facebook.common.internal.AndroidPredicates$1:
    void <init>() -> <init>
    boolean apply(java.lang.Object) -> apply
com.facebook.common.internal.AndroidPredicates$2 -> com.facebook.common.internal.AndroidPredicates$2:
    void <init>() -> <init>
    boolean apply(java.lang.Object) -> apply
com.facebook.common.internal.ByteStreams -> com.facebook.common.internal.ByteStreams:
    int BUF_SIZE -> BUF_SIZE
    void <init>() -> <init>
    long copy(java.io.InputStream,java.io.OutputStream) -> copy
    int read(java.io.InputStream,byte[],int,int) -> read
    byte[] toByteArray(java.io.InputStream) -> toByteArray
    byte[] toByteArray(java.io.InputStream,int) -> toByteArray
    void readFully(java.io.InputStream,byte[],int,int) -> readFully
com.facebook.common.internal.ByteStreams$1 -> com.facebook.common.internal.ByteStreams$1:
com.facebook.common.internal.ByteStreams$FastByteArrayOutputStream -> com.facebook.common.internal.ByteStreams$FastByteArrayOutputStream:
    void <init>() -> <init>
    void writeTo(byte[],int) -> writeTo
    void <init>(com.facebook.common.internal.ByteStreams$1) -> <init>
com.facebook.common.internal.Closeables -> com.facebook.common.internal.Closeables:
    java.util.logging.Logger logger -> logger
    void <init>() -> <init>
    void close(java.io.Closeable,boolean) -> close
    void closeQuietly(java.io.InputStream) -> closeQuietly
    void closeQuietly(java.io.Reader) -> closeQuietly
    void <clinit>() -> <clinit>
com.facebook.common.internal.CountingOutputStream -> com.facebook.common.internal.CountingOutputStream:
    long mCount -> mCount
    void <init>(java.io.OutputStream) -> <init>
    long getCount() -> getCount
    void write(byte[],int,int) -> write
    void write(int) -> write
    void close() -> close
com.facebook.common.internal.DoNotStrip -> com.facebook.common.internal.DoNotStrip:
com.facebook.common.internal.Files -> com.facebook.common.internal.Files:
    void <init>() -> <init>
    byte[] readFile(java.io.InputStream,long) -> readFile
    byte[] toByteArray(java.io.File) -> toByteArray
com.facebook.common.internal.ImmutableList -> com.facebook.common.internal.ImmutableList:
    void <init>(int) -> <init>
    void <init>(java.util.List) -> <init>
    com.facebook.common.internal.ImmutableList copyOf(java.util.List) -> copyOf
    com.facebook.common.internal.ImmutableList of(java.lang.Object[]) -> of
com.facebook.common.internal.ImmutableMap -> com.facebook.common.internal.ImmutableMap:
    void <init>(java.util.Map) -> <init>
    java.util.Map of() -> of
    java.util.Map of(java.lang.Object,java.lang.Object) -> of
    java.util.Map of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> of
    java.util.Map of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> of
    java.util.Map of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> of
    java.util.Map of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> of
    java.util.Map of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> of
    com.facebook.common.internal.ImmutableMap copyOf(java.util.Map) -> copyOf
com.facebook.common.internal.ImmutableSet -> com.facebook.common.internal.ImmutableSet:
    void <init>(java.util.Set) -> <init>
    com.facebook.common.internal.ImmutableSet copyOf(java.util.Set) -> copyOf
    com.facebook.common.internal.ImmutableSet of(java.lang.Object[]) -> of
com.facebook.common.internal.Ints -> com.facebook.common.internal.Ints:
    void <init>() -> <init>
    int max(int[]) -> max
com.facebook.common.internal.Objects -> com.facebook.common.internal.Objects:
    void <init>() -> <init>
    boolean equal(java.lang.Object,java.lang.Object) -> equal
    int hashCode(java.lang.Object[]) -> hashCode
    com.facebook.common.internal.Objects$ToStringHelper toStringHelper(java.lang.Object) -> toStringHelper
    com.facebook.common.internal.Objects$ToStringHelper toStringHelper(java.lang.Class) -> toStringHelper
    com.facebook.common.internal.Objects$ToStringHelper toStringHelper(java.lang.String) -> toStringHelper
    java.lang.String simpleName(java.lang.Class) -> simpleName
    java.lang.Object firstNonNull(java.lang.Object,java.lang.Object) -> firstNonNull
com.facebook.common.internal.Objects$1 -> com.facebook.common.internal.Objects$1:
com.facebook.common.internal.Objects$ToStringHelper -> com.facebook.common.internal.Objects$ToStringHelper:
    java.lang.String className -> className
    com.facebook.common.internal.Objects$ToStringHelper$ValueHolder holderHead -> holderHead
    com.facebook.common.internal.Objects$ToStringHelper$ValueHolder holderTail -> holderTail
    boolean omitNullValues -> omitNullValues
    void <init>(java.lang.String) -> <init>
    com.facebook.common.internal.Objects$ToStringHelper omitNullValues() -> omitNullValues
    com.facebook.common.internal.Objects$ToStringHelper add(java.lang.String,java.lang.Object) -> add
    com.facebook.common.internal.Objects$ToStringHelper add(java.lang.String,boolean) -> add
    com.facebook.common.internal.Objects$ToStringHelper add(java.lang.String,char) -> add
    com.facebook.common.internal.Objects$ToStringHelper add(java.lang.String,double) -> add
    com.facebook.common.internal.Objects$ToStringHelper add(java.lang.String,float) -> add
    com.facebook.common.internal.Objects$ToStringHelper add(java.lang.String,int) -> add
    com.facebook.common.internal.Objects$ToStringHelper add(java.lang.String,long) -> add
    com.facebook.common.internal.Objects$ToStringHelper addValue(java.lang.Object) -> addValue
    com.facebook.common.internal.Objects$ToStringHelper addValue(boolean) -> addValue
    com.facebook.common.internal.Objects$ToStringHelper addValue(char) -> addValue
    com.facebook.common.internal.Objects$ToStringHelper addValue(double) -> addValue
    com.facebook.common.internal.Objects$ToStringHelper addValue(float) -> addValue
    com.facebook.common.internal.Objects$ToStringHelper addValue(int) -> addValue
    com.facebook.common.internal.Objects$ToStringHelper addValue(long) -> addValue
    java.lang.String toString() -> toString
    com.facebook.common.internal.Objects$ToStringHelper$ValueHolder addHolder() -> addHolder
    com.facebook.common.internal.Objects$ToStringHelper addHolder(java.lang.Object) -> addHolder
    com.facebook.common.internal.Objects$ToStringHelper addHolder(java.lang.String,java.lang.Object) -> addHolder
    void <init>(java.lang.String,com.facebook.common.internal.Objects$1) -> <init>
com.facebook.common.internal.Objects$ToStringHelper$ValueHolder -> com.facebook.common.internal.Objects$ToStringHelper$ValueHolder:
    java.lang.String name -> name
    java.lang.Object value -> value
    com.facebook.common.internal.Objects$ToStringHelper$ValueHolder next -> next
    void <init>() -> <init>
    void <init>(com.facebook.common.internal.Objects$1) -> <init>
com.facebook.common.internal.Preconditions -> com.facebook.common.internal.Preconditions:
    void <init>() -> <init>
    void checkArgument(boolean) -> checkArgument
    void checkArgument(boolean,java.lang.Object) -> checkArgument
    void checkArgument(boolean,java.lang.String,java.lang.Object[]) -> checkArgument
    void checkState(boolean) -> checkState
    void checkState(boolean,java.lang.Object) -> checkState
    void checkState(boolean,java.lang.String,java.lang.Object[]) -> checkState
    java.lang.Object checkNotNull(java.lang.Object) -> checkNotNull
    java.lang.Object checkNotNull(java.lang.Object,java.lang.Object) -> checkNotNull
    java.lang.Object checkNotNull(java.lang.Object,java.lang.String,java.lang.Object[]) -> checkNotNull
    int checkElementIndex(int,int) -> checkElementIndex
    int checkElementIndex(int,int,java.lang.String) -> checkElementIndex
    java.lang.String badElementIndex(int,int,java.lang.String) -> badElementIndex
    int checkPositionIndex(int,int) -> checkPositionIndex
    int checkPositionIndex(int,int,java.lang.String) -> checkPositionIndex
    java.lang.String badPositionIndex(int,int,java.lang.String) -> badPositionIndex
    void checkPositionIndexes(int,int,int) -> checkPositionIndexes
    java.lang.String badPositionIndexes(int,int,int) -> badPositionIndexes
    java.lang.String format(java.lang.String,java.lang.Object[]) -> format
com.facebook.common.internal.Sets -> com.facebook.common.internal.Sets:
    void <init>() -> <init>
    java.util.HashSet newHashSet() -> newHashSet
    java.util.HashSet newHashSet(java.lang.Object[]) -> newHashSet
    java.util.HashSet newHashSetWithCapacity(int) -> newHashSetWithCapacity
    java.util.HashSet newHashSet(java.lang.Iterable) -> newHashSet
    java.util.HashSet newHashSet(java.util.Iterator) -> newHashSet
    java.util.Set newIdentityHashSet() -> newIdentityHashSet
    java.util.Set newSetFromMap(java.util.Map) -> newSetFromMap
    java.util.concurrent.CopyOnWriteArraySet newCopyOnWriteArraySet() -> newCopyOnWriteArraySet
    java.util.LinkedHashSet newLinkedHashSet() -> newLinkedHashSet
com.facebook.common.internal.Supplier -> com.facebook.common.internal.Supplier:
    java.lang.Object get() -> get
com.facebook.common.internal.Suppliers -> com.facebook.common.internal.Suppliers:
    void <init>() -> <init>
    com.facebook.common.internal.Supplier of(java.lang.Object) -> of
com.facebook.common.internal.Suppliers$1 -> com.facebook.common.internal.Suppliers$1:
    java.lang.Object val$instance -> val$instance
    void <init>(java.lang.Object) -> <init>
    java.lang.Object get() -> get
com.facebook.common.internal.Throwables -> com.facebook.common.internal.Throwables:
    void <init>() -> <init>
    void propagateIfInstanceOf(java.lang.Throwable,java.lang.Class) -> propagateIfInstanceOf
    void propagateIfPossible(java.lang.Throwable) -> propagateIfPossible
    void propagateIfPossible(java.lang.Throwable,java.lang.Class) -> propagateIfPossible
    void propagateIfPossible(java.lang.Throwable,java.lang.Class,java.lang.Class) -> propagateIfPossible
    java.lang.RuntimeException propagate(java.lang.Throwable) -> propagate
    java.lang.Throwable getRootCause(java.lang.Throwable) -> getRootCause
    java.util.List getCausalChain(java.lang.Throwable) -> getCausalChain
    java.lang.String getStackTraceAsString(java.lang.Throwable) -> getStackTraceAsString
com.facebook.common.internal.VisibleForTesting -> com.facebook.common.internal.VisibleForTesting:
com.facebook.common.lifecycle.AttachDetachListener -> com.facebook.common.lifecycle.AttachDetachListener:
    void onAttachToView(android.view.View) -> onAttachToView
    void onDetachFromView(android.view.View) -> onDetachFromView
com.facebook.common.logging.FLog -> com.facebook.common.logging.FLog:
    int VERBOSE -> VERBOSE
    int DEBUG -> DEBUG
    int INFO -> INFO
    int WARN -> WARN
    int ERROR -> ERROR
    int ASSERT -> ASSERT
    com.facebook.common.logging.LoggingDelegate sHandler -> sHandler
    void <init>() -> <init>
    void setLoggingDelegate(com.facebook.common.logging.LoggingDelegate) -> setLoggingDelegate
    boolean isLoggable(int) -> isLoggable
    void setMinimumLoggingLevel(int) -> setMinimumLoggingLevel
    int getMinimumLoggingLevel() -> getMinimumLoggingLevel
    void v(java.lang.String,java.lang.String) -> v
    void v(java.lang.String,java.lang.String,java.lang.Object) -> v
    void v(java.lang.String,java.lang.String,java.lang.Object,java.lang.Object) -> v
    void v(java.lang.String,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object) -> v
    void v(java.lang.String,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> v
    void v(java.lang.Class,java.lang.String) -> v
    void v(java.lang.Class,java.lang.String,java.lang.Object) -> v
    void v(java.lang.Class,java.lang.String,java.lang.Object,java.lang.Object) -> v
    void v(java.lang.Class,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object) -> v
    void v(java.lang.Class,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> v
    void v(java.lang.String,java.lang.String,java.lang.Object[]) -> v
    void v(java.lang.String,java.lang.Throwable,java.lang.String,java.lang.Object[]) -> v
    void v(java.lang.Class,java.lang.String,java.lang.Object[]) -> v
    void v(java.lang.Class,java.lang.Throwable,java.lang.String,java.lang.Object[]) -> v
    void v(java.lang.String,java.lang.String,java.lang.Throwable) -> v
    void v(java.lang.Class,java.lang.String,java.lang.Throwable) -> v
    void d(java.lang.String,java.lang.String) -> d
    void d(java.lang.String,java.lang.String,java.lang.Object) -> d
    void d(java.lang.String,java.lang.String,java.lang.Object,java.lang.Object) -> d
    void d(java.lang.String,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object) -> d
    void d(java.lang.String,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> d
    void d(java.lang.Class,java.lang.String) -> d
    void d(java.lang.Class,java.lang.String,java.lang.Object) -> d
    void d(java.lang.Class,java.lang.String,java.lang.Object,java.lang.Object) -> d
    void d(java.lang.Class,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object) -> d
    void d(java.lang.Class,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> d
    void d(java.lang.String,java.lang.String,java.lang.Object[]) -> d
    void d(java.lang.String,java.lang.Throwable,java.lang.String,java.lang.Object[]) -> d
    void d(java.lang.Class,java.lang.String,java.lang.Object[]) -> d
    void d(java.lang.Class,java.lang.Throwable,java.lang.String,java.lang.Object[]) -> d
    void d(java.lang.String,java.lang.String,java.lang.Throwable) -> d
    void d(java.lang.Class,java.lang.String,java.lang.Throwable) -> d
    void i(java.lang.String,java.lang.String) -> i
    void i(java.lang.String,java.lang.String,java.lang.Object) -> i
    void i(java.lang.String,java.lang.String,java.lang.Object,java.lang.Object) -> i
    void i(java.lang.String,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object) -> i
    void i(java.lang.String,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> i
    void i(java.lang.Class,java.lang.String) -> i
    void i(java.lang.Class,java.lang.String,java.lang.Object) -> i
    void i(java.lang.Class,java.lang.String,java.lang.Object,java.lang.Object) -> i
    void i(java.lang.Class,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object) -> i
    void i(java.lang.Class,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> i
    void i(java.lang.String,java.lang.String,java.lang.Object[]) -> i
    void i(java.lang.String,java.lang.Throwable,java.lang.String,java.lang.Object[]) -> i
    void i(java.lang.Class,java.lang.String,java.lang.Object[]) -> i
    void i(java.lang.Class,java.lang.Throwable,java.lang.String,java.lang.Object[]) -> i
    void i(java.lang.String,java.lang.String,java.lang.Throwable) -> i
    void i(java.lang.Class,java.lang.String,java.lang.Throwable) -> i
    void w(java.lang.String,java.lang.String) -> w
    void w(java.lang.Class,java.lang.String) -> w
    void w(java.lang.String,java.lang.String,java.lang.Object[]) -> w
    void w(java.lang.String,java.lang.Throwable,java.lang.String,java.lang.Object[]) -> w
    void w(java.lang.Class,java.lang.String,java.lang.Object[]) -> w
    void w(java.lang.Class,java.lang.Throwable,java.lang.String,java.lang.Object[]) -> w
    void w(java.lang.String,java.lang.String,java.lang.Throwable) -> w
    void w(java.lang.Class,java.lang.String,java.lang.Throwable) -> w
    void e(java.lang.String,java.lang.String) -> e
    void e(java.lang.Class,java.lang.String) -> e
    void e(java.lang.String,java.lang.String,java.lang.Object[]) -> e
    void e(java.lang.String,java.lang.Throwable,java.lang.String,java.lang.Object[]) -> e
    void e(java.lang.Class,java.lang.String,java.lang.Object[]) -> e
    void e(java.lang.Class,java.lang.Throwable,java.lang.String,java.lang.Object[]) -> e
    void e(java.lang.String,java.lang.String,java.lang.Throwable) -> e
    void e(java.lang.Class,java.lang.String,java.lang.Throwable) -> e
    void wtf(java.lang.String,java.lang.String) -> wtf
    void wtf(java.lang.Class,java.lang.String) -> wtf
    void wtf(java.lang.String,java.lang.String,java.lang.Object[]) -> wtf
    void wtf(java.lang.String,java.lang.Throwable,java.lang.String,java.lang.Object[]) -> wtf
    void wtf(java.lang.Class,java.lang.String,java.lang.Object[]) -> wtf
    void wtf(java.lang.Class,java.lang.Throwable,java.lang.String,java.lang.Object[]) -> wtf
    void wtf(java.lang.String,java.lang.String,java.lang.Throwable) -> wtf
    void wtf(java.lang.Class,java.lang.String,java.lang.Throwable) -> wtf
    java.lang.String formatString(java.lang.String,java.lang.Object[]) -> formatString
    java.lang.String getTag(java.lang.Class) -> getTag
    void <clinit>() -> <clinit>
com.facebook.common.logging.FLogDefaultLoggingDelegate -> com.facebook.common.logging.FLogDefaultLoggingDelegate:
    com.facebook.common.logging.FLogDefaultLoggingDelegate sInstance -> sInstance
    java.lang.String mApplicationTag -> mApplicationTag
    int mMinimumLoggingLevel -> mMinimumLoggingLevel
    com.facebook.common.logging.FLogDefaultLoggingDelegate getInstance() -> getInstance
    void <init>() -> <init>
    void setApplicationTag(java.lang.String) -> setApplicationTag
    void setMinimumLoggingLevel(int) -> setMinimumLoggingLevel
    int getMinimumLoggingLevel() -> getMinimumLoggingLevel
    boolean isLoggable(int) -> isLoggable
    void v(java.lang.String,java.lang.String) -> v
    void v(java.lang.String,java.lang.String,java.lang.Throwable) -> v
    void d(java.lang.String,java.lang.String) -> d
    void d(java.lang.String,java.lang.String,java.lang.Throwable) -> d
    void i(java.lang.String,java.lang.String) -> i
    void i(java.lang.String,java.lang.String,java.lang.Throwable) -> i
    void w(java.lang.String,java.lang.String) -> w
    void w(java.lang.String,java.lang.String,java.lang.Throwable) -> w
    void e(java.lang.String,java.lang.String) -> e
    void e(java.lang.String,java.lang.String,java.lang.Throwable) -> e
    void wtf(java.lang.String,java.lang.String) -> wtf
    void wtf(java.lang.String,java.lang.String,java.lang.Throwable) -> wtf
    void log(int,java.lang.String,java.lang.String) -> log
    void println(int,java.lang.String,java.lang.String) -> println
    void println(int,java.lang.String,java.lang.String,java.lang.Throwable) -> println
    java.lang.String prefixTag(java.lang.String) -> prefixTag
    java.lang.String getMsg(java.lang.String,java.lang.Throwable) -> getMsg
    java.lang.String getStackTraceString(java.lang.Throwable) -> getStackTraceString
    void <clinit>() -> <clinit>
com.facebook.common.logging.LoggingDelegate -> com.facebook.common.logging.LoggingDelegate:
    void setMinimumLoggingLevel(int) -> setMinimumLoggingLevel
    int getMinimumLoggingLevel() -> getMinimumLoggingLevel
    boolean isLoggable(int) -> isLoggable
    void v(java.lang.String,java.lang.String) -> v
    void v(java.lang.String,java.lang.String,java.lang.Throwable) -> v
    void d(java.lang.String,java.lang.String) -> d
    void d(java.lang.String,java.lang.String,java.lang.Throwable) -> d
    void i(java.lang.String,java.lang.String) -> i
    void i(java.lang.String,java.lang.String,java.lang.Throwable) -> i
    void w(java.lang.String,java.lang.String) -> w
    void w(java.lang.String,java.lang.String,java.lang.Throwable) -> w
    void e(java.lang.String,java.lang.String) -> e
    void e(java.lang.String,java.lang.String,java.lang.Throwable) -> e
    void wtf(java.lang.String,java.lang.String) -> wtf
    void wtf(java.lang.String,java.lang.String,java.lang.Throwable) -> wtf
    void log(int,java.lang.String,java.lang.String) -> log
com.facebook.common.media.MediaUtils -> com.facebook.common.media.MediaUtils:
    java.util.Map ADDITIONAL_ALLOWED_MIME_TYPES -> ADDITIONAL_ALLOWED_MIME_TYPES
    void <init>() -> <init>
    boolean isPhoto(java.lang.String) -> isPhoto
    boolean isVideo(java.lang.String) -> isVideo
    java.lang.String extractMime(java.lang.String) -> extractMime
    java.lang.String extractExtension(java.lang.String) -> extractExtension
    boolean isNonNativeSupportedMimeType(java.lang.String) -> isNonNativeSupportedMimeType
    void <clinit>() -> <clinit>
com.facebook.common.memory.ByteArrayPool -> com.facebook.common.memory.ByteArrayPool:
com.facebook.common.memory.MemoryTrimType -> com.facebook.common.memory.MemoryTrimType:
    com.facebook.common.memory.MemoryTrimType OnCloseToDalvikHeapLimit -> OnCloseToDalvikHeapLimit
    com.facebook.common.memory.MemoryTrimType OnSystemLowMemoryWhileAppInForeground -> OnSystemLowMemoryWhileAppInForeground
    com.facebook.common.memory.MemoryTrimType OnSystemLowMemoryWhileAppInBackground -> OnSystemLowMemoryWhileAppInBackground
    com.facebook.common.memory.MemoryTrimType OnAppBackgrounded -> OnAppBackgrounded
    double mSuggestedTrimRatio -> mSuggestedTrimRatio
    com.facebook.common.memory.MemoryTrimType[] $VALUES -> $VALUES
    com.facebook.common.memory.MemoryTrimType[] values() -> values
    com.facebook.common.memory.MemoryTrimType valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,double) -> <init>
    double getSuggestedTrimRatio() -> getSuggestedTrimRatio
    void <clinit>() -> <clinit>
com.facebook.common.memory.MemoryTrimmable -> com.facebook.common.memory.MemoryTrimmable:
    void trim(com.facebook.common.memory.MemoryTrimType) -> trim
com.facebook.common.memory.MemoryTrimmableRegistry -> com.facebook.common.memory.MemoryTrimmableRegistry:
    void registerMemoryTrimmable(com.facebook.common.memory.MemoryTrimmable) -> registerMemoryTrimmable
    void unregisterMemoryTrimmable(com.facebook.common.memory.MemoryTrimmable) -> unregisterMemoryTrimmable
com.facebook.common.memory.NoOpMemoryTrimmableRegistry -> com.facebook.common.memory.NoOpMemoryTrimmableRegistry:
    com.facebook.common.memory.NoOpMemoryTrimmableRegistry sInstance -> sInstance
    void <init>() -> <init>
    com.facebook.common.memory.NoOpMemoryTrimmableRegistry getInstance() -> getInstance
    void registerMemoryTrimmable(com.facebook.common.memory.MemoryTrimmable) -> registerMemoryTrimmable
    void unregisterMemoryTrimmable(com.facebook.common.memory.MemoryTrimmable) -> unregisterMemoryTrimmable
    void <clinit>() -> <clinit>
com.facebook.common.memory.Pool -> com.facebook.common.memory.Pool:
    java.lang.Object get(int) -> get
    void release(java.lang.Object) -> release
com.facebook.common.memory.PooledByteArrayBufferedInputStream -> com.facebook.common.memory.PooledByteArrayBufferedInputStream:
    java.lang.String TAG -> TAG
    java.io.InputStream mInputStream -> mInputStream
    byte[] mByteArray -> mByteArray
    com.facebook.common.references.ResourceReleaser mResourceReleaser -> mResourceReleaser
    int mBufferedSize -> mBufferedSize
    int mBufferOffset -> mBufferOffset
    boolean mClosed -> mClosed
    void <init>(java.io.InputStream,byte[],com.facebook.common.references.ResourceReleaser) -> <init>
    int read() -> read
    int read(byte[],int,int) -> read
    int available() -> available
    void close() -> close
    long skip(long) -> skip
    boolean ensureDataInBuffer() -> ensureDataInBuffer
    void ensureNotClosed() -> ensureNotClosed
    void finalize() -> finalize
com.facebook.common.memory.PooledByteBuffer -> com.facebook.common.memory.PooledByteBuffer:
    int size() -> size
    byte read(int) -> read
    void read(int,byte[],int,int) -> read
    long getNativePtr() -> getNativePtr
    void close() -> close
    boolean isClosed() -> isClosed
com.facebook.common.memory.PooledByteBuffer$ClosedException -> com.facebook.common.memory.PooledByteBuffer$ClosedException:
    void <init>() -> <init>
com.facebook.common.memory.PooledByteBufferFactory -> com.facebook.common.memory.PooledByteBufferFactory:
    com.facebook.common.memory.PooledByteBuffer newByteBuffer(int) -> newByteBuffer
    com.facebook.common.memory.PooledByteBuffer newByteBuffer(java.io.InputStream) -> newByteBuffer
    com.facebook.common.memory.PooledByteBuffer newByteBuffer(byte[]) -> newByteBuffer
    com.facebook.common.memory.PooledByteBuffer newByteBuffer(java.io.InputStream,int) -> newByteBuffer
    com.facebook.common.memory.PooledByteBufferOutputStream newOutputStream() -> newOutputStream
    com.facebook.common.memory.PooledByteBufferOutputStream newOutputStream(int) -> newOutputStream
com.facebook.common.memory.PooledByteBufferInputStream -> com.facebook.common.memory.PooledByteBufferInputStream:
    com.facebook.common.memory.PooledByteBuffer mPooledByteBuffer -> mPooledByteBuffer
    int mOffset -> mOffset
    int mMark -> mMark
    void <init>(com.facebook.common.memory.PooledByteBuffer) -> <init>
    int available() -> available
    void mark(int) -> mark
    boolean markSupported() -> markSupported
    int read() -> read
    int read(byte[]) -> read
    int read(byte[],int,int) -> read
    void reset() -> reset
    long skip(long) -> skip
com.facebook.common.memory.PooledByteBufferOutputStream -> com.facebook.common.memory.PooledByteBufferOutputStream:
    void <init>() -> <init>
    com.facebook.common.memory.PooledByteBuffer toByteBuffer() -> toByteBuffer
    int size() -> size
    void close() -> close
com.facebook.common.memory.PooledByteStreams -> com.facebook.common.memory.PooledByteStreams:
    int DEFAULT_TEMP_BUF_SIZE -> DEFAULT_TEMP_BUF_SIZE
    int mTempBufSize -> mTempBufSize
    com.facebook.common.memory.ByteArrayPool mByteArrayPool -> mByteArrayPool
    void <init>(com.facebook.common.memory.ByteArrayPool) -> <init>
    void <init>(com.facebook.common.memory.ByteArrayPool,int) -> <init>
    long copy(java.io.InputStream,java.io.OutputStream) -> copy
    long copy(java.io.InputStream,java.io.OutputStream,long) -> copy
com.facebook.common.references.CloseableReference -> com.facebook.common.references.CloseableReference:
    java.lang.Class TAG -> TAG
    com.facebook.common.references.ResourceReleaser DEFAULT_CLOSEABLE_RELEASER -> DEFAULT_CLOSEABLE_RELEASER
    boolean sUseFinalizers -> sUseFinalizers
    void <init>() -> <init>
    com.facebook.common.references.CloseableReference of(java.io.Closeable) -> of
    com.facebook.common.references.CloseableReference of(java.lang.Object,com.facebook.common.references.ResourceReleaser) -> of
    com.facebook.common.references.CloseableReference makeCloseableReference(java.lang.Object,com.facebook.common.references.ResourceReleaser) -> makeCloseableReference
    void close() -> close
    java.lang.Object get() -> get
    com.facebook.common.references.CloseableReference clone() -> clone
    com.facebook.common.references.CloseableReference cloneOrNull() -> cloneOrNull
    boolean isValid() -> isValid
    com.facebook.common.references.SharedReference getUnderlyingReferenceTestOnly() -> getUnderlyingReferenceTestOnly
    int getValueHash() -> getValueHash
    boolean isValid(com.facebook.common.references.CloseableReference) -> isValid
    com.facebook.common.references.CloseableReference cloneOrNull(com.facebook.common.references.CloseableReference) -> cloneOrNull
    java.util.List cloneOrNull(java.util.Collection) -> cloneOrNull
    void closeSafely(com.facebook.common.references.CloseableReference) -> closeSafely
    void closeSafely(java.lang.Iterable) -> closeSafely
    void setUseFinalizers(boolean) -> setUseFinalizers
    java.lang.Object clone() -> clone
    java.lang.Class access$300() -> access$300
    void <clinit>() -> <clinit>
com.facebook.common.references.CloseableReference$1 -> com.facebook.common.references.CloseableReference$1:
    void <init>() -> <init>
    void release(java.io.Closeable) -> release
    void release(java.lang.Object) -> release
com.facebook.common.references.CloseableReference$CloseableReferenceWithFinalizer -> com.facebook.common.references.CloseableReference$CloseableReferenceWithFinalizer:
    boolean mIsClosed -> mIsClosed
    com.facebook.common.references.SharedReference mSharedReference -> mSharedReference
    void <init>(com.facebook.common.references.SharedReference) -> <init>
    void <init>(java.lang.Object,com.facebook.common.references.ResourceReleaser) -> <init>
    void finalize() -> finalize
    java.lang.Object get() -> get
    com.facebook.common.references.CloseableReference clone() -> clone
    com.facebook.common.references.CloseableReference cloneOrNull() -> cloneOrNull
    boolean isValid() -> isValid
    com.facebook.common.references.SharedReference getUnderlyingReferenceTestOnly() -> getUnderlyingReferenceTestOnly
    int getValueHash() -> getValueHash
    void close() -> close
    java.lang.Object clone() -> clone
    void <init>(java.lang.Object,com.facebook.common.references.ResourceReleaser,com.facebook.common.references.CloseableReference$1) -> <init>
com.facebook.common.references.CloseableReference$CloseableReferenceWithoutFinalizer -> com.facebook.common.references.CloseableReference$CloseableReferenceWithoutFinalizer:
    java.lang.ref.ReferenceQueue REF_QUEUE -> REF_QUEUE
    com.facebook.common.references.SharedReference mSharedReference -> mSharedReference
    com.facebook.common.references.CloseableReference$CloseableReferenceWithoutFinalizer$Destructor mDestructor -> mDestructor
    void <init>(com.facebook.common.references.SharedReference) -> <init>
    void <init>(java.lang.Object,com.facebook.common.references.ResourceReleaser) -> <init>
    void close() -> close
    java.lang.Object get() -> get
    com.facebook.common.references.CloseableReference clone() -> clone
    com.facebook.common.references.CloseableReference cloneOrNull() -> cloneOrNull
    boolean isValid() -> isValid
    com.facebook.common.references.SharedReference getUnderlyingReferenceTestOnly() -> getUnderlyingReferenceTestOnly
    int getValueHash() -> getValueHash
    java.lang.Object clone() -> clone
    void <init>(java.lang.Object,com.facebook.common.references.ResourceReleaser,com.facebook.common.references.CloseableReference$1) -> <init>
    com.facebook.common.references.SharedReference access$200(com.facebook.common.references.CloseableReference$CloseableReferenceWithoutFinalizer) -> access$200
    java.lang.ref.ReferenceQueue access$400() -> access$400
    void <clinit>() -> <clinit>
com.facebook.common.references.CloseableReference$CloseableReferenceWithoutFinalizer$1 -> com.facebook.common.references.CloseableReference$CloseableReferenceWithoutFinalizer$1:
    void <init>() -> <init>
    void run() -> run
com.facebook.common.references.CloseableReference$CloseableReferenceWithoutFinalizer$Destructor -> com.facebook.common.references.CloseableReference$CloseableReferenceWithoutFinalizer$Destructor:
    com.facebook.common.references.CloseableReference$CloseableReferenceWithoutFinalizer$Destructor sHead -> sHead
    com.facebook.common.references.SharedReference mSharedReference -> mSharedReference
    com.facebook.common.references.CloseableReference$CloseableReferenceWithoutFinalizer$Destructor next -> next
    com.facebook.common.references.CloseableReference$CloseableReferenceWithoutFinalizer$Destructor previous -> previous
    boolean destroyed -> destroyed
    void <init>(com.facebook.common.references.CloseableReference$CloseableReferenceWithoutFinalizer,java.lang.ref.ReferenceQueue) -> <init>
    boolean isDestroyed() -> isDestroyed
    void destroy(boolean) -> destroy
com.facebook.common.references.OOMSoftReference -> com.facebook.common.references.OOMSoftReference:
    java.lang.ref.SoftReference softRef1 -> softRef1
    java.lang.ref.SoftReference softRef2 -> softRef2
    java.lang.ref.SoftReference softRef3 -> softRef3
    void <init>() -> <init>
    void set(java.lang.Object) -> set
    java.lang.Object get() -> get
    void clear() -> clear
com.facebook.common.references.ResourceReleaser -> com.facebook.common.references.ResourceReleaser:
    void release(java.lang.Object) -> release
com.facebook.common.references.SharedReference -> com.facebook.common.references.SharedReference:
    java.util.Map sLiveObjects -> sLiveObjects
    java.lang.Object mValue -> mValue
    int mRefCount -> mRefCount
    com.facebook.common.references.ResourceReleaser mResourceReleaser -> mResourceReleaser
    void <init>(java.lang.Object,com.facebook.common.references.ResourceReleaser) -> <init>
    void addLiveReference(java.lang.Object) -> addLiveReference
    void removeLiveReference(java.lang.Object) -> removeLiveReference
    java.lang.Object get() -> get
    boolean isValid() -> isValid
    boolean isValid(com.facebook.common.references.SharedReference) -> isValid
    void addReference() -> addReference
    void deleteReference() -> deleteReference
    int decreaseRefCount() -> decreaseRefCount
    void ensureValid() -> ensureValid
    int getRefCountTestOnly() -> getRefCountTestOnly
    void <clinit>() -> <clinit>
com.facebook.common.references.SharedReference$NullReferenceException -> com.facebook.common.references.SharedReference$NullReferenceException:
    void <init>() -> <init>
com.facebook.common.soloader.SoLoaderShim -> com.facebook.common.soloader.SoLoaderShim:
    com.facebook.common.soloader.SoLoaderShim$Handler sHandler -> sHandler
    void <init>() -> <init>
    void setHandler(com.facebook.common.soloader.SoLoaderShim$Handler) -> setHandler
    void loadLibrary(java.lang.String) -> loadLibrary
    void setInTestMode() -> setInTestMode
    void <clinit>() -> <clinit>
com.facebook.common.soloader.SoLoaderShim$1 -> com.facebook.common.soloader.SoLoaderShim$1:
    void <init>() -> <init>
    void loadLibrary(java.lang.String) -> loadLibrary
com.facebook.common.soloader.SoLoaderShim$DefaultHandler -> com.facebook.common.soloader.SoLoaderShim$DefaultHandler:
    void <init>() -> <init>
    void loadLibrary(java.lang.String) -> loadLibrary
com.facebook.common.soloader.SoLoaderShim$Handler -> com.facebook.common.soloader.SoLoaderShim$Handler:
    void loadLibrary(java.lang.String) -> loadLibrary
com.facebook.common.statfs.StatFsHelper -> com.facebook.common.statfs.StatFsHelper:
    com.facebook.common.statfs.StatFsHelper sStatsFsHelper -> sStatsFsHelper
    long RESTAT_INTERVAL_MS -> RESTAT_INTERVAL_MS
    android.os.StatFs mInternalStatFs -> mInternalStatFs
    java.io.File mInternalPath -> mInternalPath
    android.os.StatFs mExternalStatFs -> mExternalStatFs
    java.io.File mExternalPath -> mExternalPath
    long mLastRestatTime -> mLastRestatTime
    java.util.concurrent.locks.Lock lock -> lock
    boolean mInitialized -> mInitialized
    com.facebook.common.statfs.StatFsHelper getInstance() -> getInstance
    void <init>() -> <init>
    void ensureInitialized() -> ensureInitialized
    boolean testLowDiskSpace(com.facebook.common.statfs.StatFsHelper$StorageType,long) -> testLowDiskSpace
    long getFreeStorageSpace(com.facebook.common.statfs.StatFsHelper$StorageType) -> getFreeStorageSpace
    long getTotalStorageSpace(com.facebook.common.statfs.StatFsHelper$StorageType) -> getTotalStorageSpace
    long getAvailableStorageSpace(com.facebook.common.statfs.StatFsHelper$StorageType) -> getAvailableStorageSpace
    void maybeUpdateStats() -> maybeUpdateStats
    void resetStats() -> resetStats
    void updateStats() -> updateStats
    android.os.StatFs updateStatsHelper(android.os.StatFs,java.io.File) -> updateStatsHelper
    android.os.StatFs createStatFs(java.lang.String) -> createStatFs
    void <clinit>() -> <clinit>
com.facebook.common.statfs.StatFsHelper$StorageType -> com.facebook.common.statfs.StatFsHelper$StorageType:
    com.facebook.common.statfs.StatFsHelper$StorageType INTERNAL -> INTERNAL
    com.facebook.common.statfs.StatFsHelper$StorageType EXTERNAL -> EXTERNAL
    com.facebook.common.statfs.StatFsHelper$StorageType[] $VALUES -> $VALUES
    com.facebook.common.statfs.StatFsHelper$StorageType[] values() -> values
    com.facebook.common.statfs.StatFsHelper$StorageType valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.facebook.common.streams.LimitedInputStream -> com.facebook.common.streams.LimitedInputStream:
    int mBytesToRead -> mBytesToRead
    int mBytesToReadWhenMarked -> mBytesToReadWhenMarked
    void <init>(java.io.InputStream,int) -> <init>
    int read() -> read
    int read(byte[],int,int) -> read
    long skip(long) -> skip
    int available() -> available
    void mark(int) -> mark
    void reset() -> reset
com.facebook.common.streams.TailAppendingInputStream -> com.facebook.common.streams.TailAppendingInputStream:
    byte[] mTail -> mTail
    int mTailOffset -> mTailOffset
    int mMarkedTailOffset -> mMarkedTailOffset
    void <init>(java.io.InputStream,byte[]) -> <init>
    int read() -> read
    int read(byte[]) -> read
    int read(byte[],int,int) -> read
    void reset() -> reset
    void mark(int) -> mark
    int readNextTailByte() -> readNextTailByte
com.facebook.common.time.AwakeTimeSinceBootClock -> com.facebook.common.time.AwakeTimeSinceBootClock:
    com.facebook.common.time.AwakeTimeSinceBootClock INSTANCE -> INSTANCE
    void <init>() -> <init>
    com.facebook.common.time.AwakeTimeSinceBootClock get() -> get
    long now() -> now
    void <clinit>() -> <clinit>
com.facebook.common.time.Clock -> com.facebook.common.time.Clock:
    long MAX_TIME -> MAX_TIME
    long now() -> now
com.facebook.common.time.CurrentThreadTimeClock -> com.facebook.common.time.CurrentThreadTimeClock:
    void <init>() -> <init>
    long now() -> now
com.facebook.common.time.MonotonicClock -> com.facebook.common.time.MonotonicClock:
    long now() -> now
com.facebook.common.time.RealtimeSinceBootClock -> com.facebook.common.time.RealtimeSinceBootClock:
    com.facebook.common.time.RealtimeSinceBootClock INSTANCE -> INSTANCE
    void <init>() -> <init>
    com.facebook.common.time.RealtimeSinceBootClock get() -> get
    long now() -> now
    void <clinit>() -> <clinit>
com.facebook.common.time.SystemClock -> com.facebook.common.time.SystemClock:
    com.facebook.common.time.SystemClock INSTANCE -> INSTANCE
    void <init>() -> <init>
    com.facebook.common.time.SystemClock get() -> get
    long now() -> now
    void <clinit>() -> <clinit>
com.facebook.common.util.ByteConstants -> com.facebook.common.util.ByteConstants:
    int KB -> KB
    int MB -> MB
    void <init>() -> <init>
com.facebook.common.util.ExceptionWithNoStacktrace -> com.facebook.common.util.ExceptionWithNoStacktrace:
    java.lang.Throwable fillInStackTrace() -> fillInStackTrace
    void <init>(java.lang.String) -> <init>
com.facebook.common.util.HashCodeUtil -> com.facebook.common.util.HashCodeUtil:
    int X -> X
    void <init>() -> <init>
    int hashCode(java.lang.Object) -> hashCode
    int hashCode(java.lang.Object,java.lang.Object) -> hashCode
    int hashCode(java.lang.Object,java.lang.Object,java.lang.Object) -> hashCode
    int hashCode(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> hashCode
    int hashCode(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> hashCode
    int hashCode(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> hashCode
    int hashCode(int) -> hashCode
    int hashCode(int,int) -> hashCode
    int hashCode(int,int,int) -> hashCode
    int hashCode(int,int,int,int) -> hashCode
    int hashCode(int,int,int,int,int) -> hashCode
    int hashCode(int,int,int,int,int,int) -> hashCode
com.facebook.common.util.Hex -> com.facebook.common.util.Hex:
    char[] HEX_DIGITS -> HEX_DIGITS
    char[] FIRST_CHAR -> FIRST_CHAR
    char[] SECOND_CHAR -> SECOND_CHAR
    byte[] DIGITS -> DIGITS
    void <init>() -> <init>
    java.lang.String byte2Hex(int) -> byte2Hex
    java.lang.String encodeHex(byte[],boolean) -> encodeHex
    byte[] decodeHex(java.lang.String) -> decodeHex
    byte[] hexStringToByteArray(java.lang.String) -> hexStringToByteArray
    void <clinit>() -> <clinit>
com.facebook.common.util.SecureHashUtil -> com.facebook.common.util.SecureHashUtil:
    byte[] HEX_CHAR_TABLE -> HEX_CHAR_TABLE
    void <init>() -> <init>
    java.lang.String makeSHA1Hash(java.lang.String) -> makeSHA1Hash
    java.lang.String makeSHA1Hash(byte[]) -> makeSHA1Hash
    java.lang.String makeSHA256Hash(byte[]) -> makeSHA256Hash
    java.lang.String makeSHA1HashBase64(byte[]) -> makeSHA1HashBase64
    java.lang.String makeMD5Hash(java.lang.String) -> makeMD5Hash
    java.lang.String makeMD5Hash(byte[]) -> makeMD5Hash
    java.lang.String convertToHex(byte[]) -> convertToHex
    java.lang.String makeHash(byte[],java.lang.String) -> makeHash
    void <clinit>() -> <clinit>
com.facebook.common.util.StreamUtil -> com.facebook.common.util.StreamUtil:
    void <init>() -> <init>
    byte[] getBytesFromStream(java.io.InputStream) -> getBytesFromStream
    byte[] getBytesFromStream(java.io.InputStream,int) -> getBytesFromStream
    long skip(java.io.InputStream,long) -> skip
com.facebook.common.util.StreamUtil$1 -> com.facebook.common.util.StreamUtil$1:
    void <init>(int) -> <init>
    byte[] toByteArray() -> toByteArray
com.facebook.common.util.TriState -> com.facebook.common.util.TriState:
    com.facebook.common.util.TriState YES -> YES
    com.facebook.common.util.TriState NO -> NO
    com.facebook.common.util.TriState UNSET -> UNSET
    com.facebook.common.util.TriState[] $VALUES -> $VALUES
    com.facebook.common.util.TriState[] values() -> values
    com.facebook.common.util.TriState valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    boolean isSet() -> isSet
    com.facebook.common.util.TriState valueOf(boolean) -> valueOf
    com.facebook.common.util.TriState valueOf(java.lang.Boolean) -> valueOf
    boolean asBoolean() -> asBoolean
    boolean asBoolean(boolean) -> asBoolean
    java.lang.Boolean asBooleanObject() -> asBooleanObject
    int getDbValue() -> getDbValue
    com.facebook.common.util.TriState fromDbValue(int) -> fromDbValue
    void <clinit>() -> <clinit>
com.facebook.common.util.TriState$1 -> com.facebook.common.util.TriState$1:
    int[] $SwitchMap$com$facebook$common$util$TriState -> $SwitchMap$com$facebook$common$util$TriState
    void <clinit>() -> <clinit>
com.facebook.common.util.UriUtil -> com.facebook.common.util.UriUtil:
    java.lang.String HTTP_SCHEME -> HTTP_SCHEME
    java.lang.String HTTPS_SCHEME -> HTTPS_SCHEME
    java.lang.String LOCAL_FILE_SCHEME -> LOCAL_FILE_SCHEME
    java.lang.String LOCAL_CONTENT_SCHEME -> LOCAL_CONTENT_SCHEME
    java.lang.String LOCAL_CONTACT_IMAGE_PREFIX -> LOCAL_CONTACT_IMAGE_PREFIX
    java.lang.String LOCAL_ASSET_SCHEME -> LOCAL_ASSET_SCHEME
    java.lang.String LOCAL_RESOURCE_SCHEME -> LOCAL_RESOURCE_SCHEME
    java.lang.String DATA_SCHEME -> DATA_SCHEME
    void <init>() -> <init>
    boolean isNetworkUri(android.net.Uri) -> isNetworkUri
    boolean isLocalFileUri(android.net.Uri) -> isLocalFileUri
    boolean isLocalContentUri(android.net.Uri) -> isLocalContentUri
    boolean isLocalContactUri(android.net.Uri) -> isLocalContactUri
    boolean isLocalCameraUri(android.net.Uri) -> isLocalCameraUri
    boolean isLocalAssetUri(android.net.Uri) -> isLocalAssetUri
    boolean isLocalResourceUri(android.net.Uri) -> isLocalResourceUri
    boolean isDataUri(android.net.Uri) -> isDataUri
    java.lang.String getSchemeOrNull(android.net.Uri) -> getSchemeOrNull
    android.net.Uri parseUriOrNull(java.lang.String) -> parseUriOrNull
    java.lang.String getRealPathFromUri(android.content.ContentResolver,android.net.Uri) -> getRealPathFromUri
    android.net.Uri getUriForFile(java.io.File) -> getUriForFile
    android.net.Uri getUriForResourceId(int) -> getUriForResourceId
    void <clinit>() -> <clinit>
com.facebook.common.webp.BitmapCreator -> com.facebook.common.webp.BitmapCreator:
    android.graphics.Bitmap createNakedBitmap(int,int,android.graphics.Bitmap$Config) -> createNakedBitmap
com.facebook.common.webp.WebpBitmapFactory -> com.facebook.common.webp.WebpBitmapFactory:
    void setWebpErrorLogger(com.facebook.common.webp.WebpBitmapFactory$WebpErrorLogger) -> setWebpErrorLogger
    void setBitmapCreator(com.facebook.common.webp.BitmapCreator) -> setBitmapCreator
    android.graphics.Bitmap decodeFileDescriptor(java.io.FileDescriptor,android.graphics.Rect,android.graphics.BitmapFactory$Options) -> decodeFileDescriptor
    android.graphics.Bitmap decodeStream(java.io.InputStream,android.graphics.Rect,android.graphics.BitmapFactory$Options) -> decodeStream
    android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options) -> decodeFile
    android.graphics.Bitmap decodeByteArray(byte[],int,int,android.graphics.BitmapFactory$Options) -> decodeByteArray
com.facebook.common.webp.WebpBitmapFactory$WebpErrorLogger -> com.facebook.common.webp.WebpBitmapFactory$WebpErrorLogger:
    void onWebpErrorLog(java.lang.String,java.lang.String) -> onWebpErrorLog
com.facebook.common.webp.WebpSupportStatus -> com.facebook.common.webp.WebpSupportStatus:
    boolean sIsWebpSupportRequired -> sIsWebpSupportRequired
    boolean sIsSimpleWebpSupported -> sIsSimpleWebpSupported
    boolean sIsExtendedWebpSupported -> sIsExtendedWebpSupported
    com.facebook.common.webp.WebpBitmapFactory sWebpBitmapFactory -> sWebpBitmapFactory
    boolean sWebpLibraryChecked -> sWebpLibraryChecked
    java.lang.String VP8X_WEBP_BASE64 -> VP8X_WEBP_BASE64
    int SIMPLE_WEBP_HEADER_LENGTH -> SIMPLE_WEBP_HEADER_LENGTH
    int EXTENDED_WEBP_HEADER_LENGTH -> EXTENDED_WEBP_HEADER_LENGTH
    byte[] WEBP_RIFF_BYTES -> WEBP_RIFF_BYTES
    byte[] WEBP_NAME_BYTES -> WEBP_NAME_BYTES
    byte[] WEBP_VP8_BYTES -> WEBP_VP8_BYTES
    byte[] WEBP_VP8L_BYTES -> WEBP_VP8L_BYTES
    byte[] WEBP_VP8X_BYTES -> WEBP_VP8X_BYTES
    void <init>() -> <init>
    com.facebook.common.webp.WebpBitmapFactory loadWebpBitmapFactoryIfExists() -> loadWebpBitmapFactoryIfExists
    byte[] asciiBytes(java.lang.String) -> asciiBytes
    boolean isExtendedWebpSupported() -> isExtendedWebpSupported
    boolean isWebpSupportedByPlatform(byte[],int,int) -> isWebpSupportedByPlatform
    boolean isAnimatedWebpHeader(byte[],int) -> isAnimatedWebpHeader
    boolean isSimpleWebpHeader(byte[],int) -> isSimpleWebpHeader
    boolean isLosslessWebpHeader(byte[],int) -> isLosslessWebpHeader
    boolean isExtendedWebpHeader(byte[],int,int) -> isExtendedWebpHeader
    boolean isExtendedWebpHeaderWithAlpha(byte[],int) -> isExtendedWebpHeaderWithAlpha
    boolean isWebpHeader(byte[],int,int) -> isWebpHeader
    boolean matchBytePattern(byte[],int,byte[]) -> matchBytePattern
    void <clinit>() -> <clinit>
com.facebook.datasource.AbstractDataSource -> com.facebook.datasource.AbstractDataSource:
    com.facebook.datasource.AbstractDataSource$DataSourceStatus mDataSourceStatus -> mDataSourceStatus
    boolean mIsClosed -> mIsClosed
    java.lang.Object mResult -> mResult
    java.lang.Throwable mFailureThrowable -> mFailureThrowable
    float mProgress -> mProgress
    java.util.concurrent.ConcurrentLinkedQueue mSubscribers -> mSubscribers
    void <init>() -> <init>
    boolean isClosed() -> isClosed
    boolean isFinished() -> isFinished
    boolean hasResult() -> hasResult
    java.lang.Object getResult() -> getResult
    boolean hasFailed() -> hasFailed
    java.lang.Throwable getFailureCause() -> getFailureCause
    float getProgress() -> getProgress
    boolean close() -> close
    void closeResult(java.lang.Object) -> closeResult
    void subscribe(com.facebook.datasource.DataSubscriber,java.util.concurrent.Executor) -> subscribe
    void notifyDataSubscribers() -> notifyDataSubscribers
    void notifyDataSubscriber(com.facebook.datasource.DataSubscriber,java.util.concurrent.Executor,boolean,boolean) -> notifyDataSubscriber
    boolean wasCancelled() -> wasCancelled
    boolean setResult(java.lang.Object,boolean) -> setResult
    boolean setFailure(java.lang.Throwable) -> setFailure
    boolean setProgress(float) -> setProgress
    boolean setResultInternal(java.lang.Object,boolean) -> setResultInternal
    boolean setFailureInternal(java.lang.Throwable) -> setFailureInternal
    boolean setProgressInternal(float) -> setProgressInternal
    void notifyProgressUpdate() -> notifyProgressUpdate
com.facebook.datasource.AbstractDataSource$1 -> com.facebook.datasource.AbstractDataSource$1:
    boolean val$isFailure -> val$isFailure
    com.facebook.datasource.DataSubscriber val$dataSubscriber -> val$dataSubscriber
    boolean val$isCancellation -> val$isCancellation
    com.facebook.datasource.AbstractDataSource this$0 -> this$0
    void <init>(com.facebook.datasource.AbstractDataSource,boolean,com.facebook.datasource.DataSubscriber,boolean) -> <init>
    void run() -> run
com.facebook.datasource.AbstractDataSource$2 -> com.facebook.datasource.AbstractDataSource$2:
    com.facebook.datasource.DataSubscriber val$subscriber -> val$subscriber
    com.facebook.datasource.AbstractDataSource this$0 -> this$0
    void <init>(com.facebook.datasource.AbstractDataSource,com.facebook.datasource.DataSubscriber) -> <init>
    void run() -> run
com.facebook.datasource.AbstractDataSource$DataSourceStatus -> com.facebook.datasource.AbstractDataSource$DataSourceStatus:
    com.facebook.datasource.AbstractDataSource$DataSourceStatus IN_PROGRESS -> IN_PROGRESS
    com.facebook.datasource.AbstractDataSource$DataSourceStatus SUCCESS -> SUCCESS
    com.facebook.datasource.AbstractDataSource$DataSourceStatus FAILURE -> FAILURE
    com.facebook.datasource.AbstractDataSource$DataSourceStatus[] $VALUES -> $VALUES
    com.facebook.datasource.AbstractDataSource$DataSourceStatus[] values() -> values
    com.facebook.datasource.AbstractDataSource$DataSourceStatus valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.facebook.datasource.BaseBooleanSubscriber -> com.facebook.datasource.BaseBooleanSubscriber:
    void <init>() -> <init>
    void onNewResult(com.facebook.datasource.DataSource) -> onNewResult
    void onFailure(com.facebook.datasource.DataSource) -> onFailure
    void onCancellation(com.facebook.datasource.DataSource) -> onCancellation
    void onProgressUpdate(com.facebook.datasource.DataSource) -> onProgressUpdate
    void onNewResultImpl(boolean) -> onNewResultImpl
    void onFailureImpl(com.facebook.datasource.DataSource) -> onFailureImpl
com.facebook.datasource.BaseDataSubscriber -> com.facebook.datasource.BaseDataSubscriber:
    void <init>() -> <init>
    void onNewResult(com.facebook.datasource.DataSource) -> onNewResult
    void onFailure(com.facebook.datasource.DataSource) -> onFailure
    void onCancellation(com.facebook.datasource.DataSource) -> onCancellation
    void onProgressUpdate(com.facebook.datasource.DataSource) -> onProgressUpdate
    void onNewResultImpl(com.facebook.datasource.DataSource) -> onNewResultImpl
    void onFailureImpl(com.facebook.datasource.DataSource) -> onFailureImpl
com.facebook.datasource.DataSource -> com.facebook.datasource.DataSource:
    boolean isClosed() -> isClosed
    java.lang.Object getResult() -> getResult
    boolean hasResult() -> hasResult
    boolean isFinished() -> isFinished
    boolean hasFailed() -> hasFailed
    java.lang.Throwable getFailureCause() -> getFailureCause
    float getProgress() -> getProgress
    boolean close() -> close
    void subscribe(com.facebook.datasource.DataSubscriber,java.util.concurrent.Executor) -> subscribe
com.facebook.datasource.DataSources -> com.facebook.datasource.DataSources:
    void <init>() -> <init>
    com.facebook.datasource.DataSource immediateFailedDataSource(java.lang.Throwable) -> immediateFailedDataSource
    com.facebook.datasource.DataSource immediateDataSource(java.lang.Object) -> immediateDataSource
    com.facebook.common.internal.Supplier getFailedDataSourceSupplier(java.lang.Throwable) -> getFailedDataSourceSupplier
com.facebook.datasource.DataSources$1 -> com.facebook.datasource.DataSources$1:
    java.lang.Throwable val$failure -> val$failure
    void <init>(java.lang.Throwable) -> <init>
    com.facebook.datasource.DataSource get() -> get
    java.lang.Object get() -> get
com.facebook.datasource.DataSubscriber -> com.facebook.datasource.DataSubscriber:
    void onNewResult(com.facebook.datasource.DataSource) -> onNewResult
    void onFailure(com.facebook.datasource.DataSource) -> onFailure
    void onCancellation(com.facebook.datasource.DataSource) -> onCancellation
    void onProgressUpdate(com.facebook.datasource.DataSource) -> onProgressUpdate
com.facebook.datasource.FirstAvailableDataSourceSupplier -> com.facebook.datasource.FirstAvailableDataSourceSupplier:
    java.util.List mDataSourceSuppliers -> mDataSourceSuppliers
    void <init>(java.util.List) -> <init>
    com.facebook.datasource.FirstAvailableDataSourceSupplier create(java.util.List) -> create
    com.facebook.datasource.DataSource get() -> get
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
    java.lang.Object get() -> get
    java.util.List access$100(com.facebook.datasource.FirstAvailableDataSourceSupplier) -> access$100
com.facebook.datasource.FirstAvailableDataSourceSupplier$1 -> com.facebook.datasource.FirstAvailableDataSourceSupplier$1:
com.facebook.datasource.FirstAvailableDataSourceSupplier$FirstAvailableDataSource -> com.facebook.datasource.FirstAvailableDataSourceSupplier$FirstAvailableDataSource:
    int mIndex -> mIndex
    com.facebook.datasource.DataSource mCurrentDataSource -> mCurrentDataSource
    com.facebook.datasource.DataSource mDataSourceWithResult -> mDataSourceWithResult
    com.facebook.datasource.FirstAvailableDataSourceSupplier this$0 -> this$0
    void <init>(com.facebook.datasource.FirstAvailableDataSourceSupplier) -> <init>
    java.lang.Object getResult() -> getResult
    boolean hasResult() -> hasResult
    boolean close() -> close
    boolean startNextDataSource() -> startNextDataSource
    com.facebook.common.internal.Supplier getNextSupplier() -> getNextSupplier
    boolean setCurrentDataSource(com.facebook.datasource.DataSource) -> setCurrentDataSource
    boolean clearCurrentDataSource(com.facebook.datasource.DataSource) -> clearCurrentDataSource
    com.facebook.datasource.DataSource getDataSourceWithResult() -> getDataSourceWithResult
    void maybeSetDataSourceWithResult(com.facebook.datasource.DataSource,boolean) -> maybeSetDataSourceWithResult
    void onDataSourceFailed(com.facebook.datasource.DataSource) -> onDataSourceFailed
    void onDataSourceNewResult(com.facebook.datasource.DataSource) -> onDataSourceNewResult
    void closeSafely(com.facebook.datasource.DataSource) -> closeSafely
    void access$200(com.facebook.datasource.FirstAvailableDataSourceSupplier$FirstAvailableDataSource,com.facebook.datasource.DataSource) -> access$200
    void access$300(com.facebook.datasource.FirstAvailableDataSourceSupplier$FirstAvailableDataSource,com.facebook.datasource.DataSource) -> access$300
com.facebook.datasource.FirstAvailableDataSourceSupplier$FirstAvailableDataSource$InternalDataSubscriber -> com.facebook.datasource.FirstAvailableDataSourceSupplier$FirstAvailableDataSource$InternalDataSubscriber:
    com.facebook.datasource.FirstAvailableDataSourceSupplier$FirstAvailableDataSource this$1 -> this$1
    void <init>(com.facebook.datasource.FirstAvailableDataSourceSupplier$FirstAvailableDataSource) -> <init>
    void onFailure(com.facebook.datasource.DataSource) -> onFailure
    void onCancellation(com.facebook.datasource.DataSource) -> onCancellation
    void onNewResult(com.facebook.datasource.DataSource) -> onNewResult
    void onProgressUpdate(com.facebook.datasource.DataSource) -> onProgressUpdate
    void <init>(com.facebook.datasource.FirstAvailableDataSourceSupplier$FirstAvailableDataSource,com.facebook.datasource.FirstAvailableDataSourceSupplier$1) -> <init>
com.facebook.datasource.IncreasingQualityDataSourceSupplier -> com.facebook.datasource.IncreasingQualityDataSourceSupplier:
    java.util.List mDataSourceSuppliers -> mDataSourceSuppliers
    void <init>(java.util.List) -> <init>
    com.facebook.datasource.IncreasingQualityDataSourceSupplier create(java.util.List) -> create
    com.facebook.datasource.DataSource get() -> get
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
    java.lang.Object get() -> get
    java.util.List access$000(com.facebook.datasource.IncreasingQualityDataSourceSupplier) -> access$000
com.facebook.datasource.IncreasingQualityDataSourceSupplier$IncreasingQualityDataSource -> com.facebook.datasource.IncreasingQualityDataSourceSupplier$IncreasingQualityDataSource:
    java.util.ArrayList mDataSources -> mDataSources
    int mIndexOfDataSourceWithResult -> mIndexOfDataSourceWithResult
    com.facebook.datasource.IncreasingQualityDataSourceSupplier this$0 -> this$0
    void <init>(com.facebook.datasource.IncreasingQualityDataSourceSupplier) -> <init>
    com.facebook.datasource.DataSource getDataSource(int) -> getDataSource
    com.facebook.datasource.DataSource getAndClearDataSource(int) -> getAndClearDataSource
    com.facebook.datasource.DataSource getDataSourceWithResult() -> getDataSourceWithResult
    java.lang.Object getResult() -> getResult
    boolean hasResult() -> hasResult
    boolean close() -> close
    void onDataSourceNewResult(int,com.facebook.datasource.DataSource) -> onDataSourceNewResult
    void onDataSourceFailed(int,com.facebook.datasource.DataSource) -> onDataSourceFailed
    void maybeSetIndexOfDataSourceWithResult(int,com.facebook.datasource.DataSource,boolean) -> maybeSetIndexOfDataSourceWithResult
    com.facebook.datasource.DataSource tryGetAndClearDataSource(int,com.facebook.datasource.DataSource) -> tryGetAndClearDataSource
    void closeSafely(com.facebook.datasource.DataSource) -> closeSafely
    void access$100(com.facebook.datasource.IncreasingQualityDataSourceSupplier$IncreasingQualityDataSource,int,com.facebook.datasource.DataSource) -> access$100
    void access$200(com.facebook.datasource.IncreasingQualityDataSourceSupplier$IncreasingQualityDataSource,int,com.facebook.datasource.DataSource) -> access$200
com.facebook.datasource.IncreasingQualityDataSourceSupplier$IncreasingQualityDataSource$InternalDataSubscriber -> com.facebook.datasource.IncreasingQualityDataSourceSupplier$IncreasingQualityDataSource$InternalDataSubscriber:
    int mIndex -> mIndex
    com.facebook.datasource.IncreasingQualityDataSourceSupplier$IncreasingQualityDataSource this$1 -> this$1
    void <init>(com.facebook.datasource.IncreasingQualityDataSourceSupplier$IncreasingQualityDataSource,int) -> <init>
    void onNewResult(com.facebook.datasource.DataSource) -> onNewResult
    void onFailure(com.facebook.datasource.DataSource) -> onFailure
    void onCancellation(com.facebook.datasource.DataSource) -> onCancellation
    void onProgressUpdate(com.facebook.datasource.DataSource) -> onProgressUpdate
com.facebook.datasource.SimpleDataSource -> com.facebook.datasource.SimpleDataSource:
    void <init>() -> <init>
    com.facebook.datasource.SimpleDataSource create() -> create
    boolean setResult(java.lang.Object,boolean) -> setResult
    boolean setResult(java.lang.Object) -> setResult
    boolean setFailure(java.lang.Throwable) -> setFailure
    boolean setProgress(float) -> setProgress
com.facebook.drawable.base.DrawableWithCaches -> com.facebook.drawable.base.DrawableWithCaches:
    void dropCaches() -> dropCaches
com.facebook.drawee.backends.pipeline.DrawableFactory -> com.facebook.drawee.backends.pipeline.DrawableFactory:
    boolean supportsImageType(com.facebook.imagepipeline.image.CloseableImage) -> supportsImageType
    android.graphics.drawable.Drawable createDrawable(com.facebook.imagepipeline.image.CloseableImage) -> createDrawable
com.facebook.drawee.backends.pipeline.DraweeConfig -> com.facebook.drawee.backends.pipeline.DraweeConfig:
    com.facebook.common.internal.ImmutableList mCustomDrawableFactories -> mCustomDrawableFactories
    com.facebook.drawee.backends.pipeline.PipelineDraweeControllerFactory mPipelineDraweeControllerFactory -> mPipelineDraweeControllerFactory
    com.facebook.common.internal.Supplier mDebugOverlayEnabledSupplier -> mDebugOverlayEnabledSupplier
    void <init>(com.facebook.drawee.backends.pipeline.DraweeConfig$Builder) -> <init>
    com.facebook.common.internal.ImmutableList getCustomDrawableFactories() -> getCustomDrawableFactories
    com.facebook.drawee.backends.pipeline.PipelineDraweeControllerFactory getPipelineDraweeControllerFactory() -> getPipelineDraweeControllerFactory
    com.facebook.drawee.backends.pipeline.DraweeConfig$Builder newBuilder() -> newBuilder
    com.facebook.common.internal.Supplier getDebugOverlayEnabledSupplier() -> getDebugOverlayEnabledSupplier
    void <init>(com.facebook.drawee.backends.pipeline.DraweeConfig$Builder,com.facebook.drawee.backends.pipeline.DraweeConfig$1) -> <init>
com.facebook.drawee.backends.pipeline.DraweeConfig$1 -> com.facebook.drawee.backends.pipeline.DraweeConfig$1:
com.facebook.drawee.backends.pipeline.DraweeConfig$Builder -> com.facebook.drawee.backends.pipeline.DraweeConfig$Builder:
    java.util.List mCustomDrawableFactories -> mCustomDrawableFactories
    com.facebook.common.internal.Supplier mDebugOverlayEnabledSupplier -> mDebugOverlayEnabledSupplier
    com.facebook.drawee.backends.pipeline.PipelineDraweeControllerFactory mPipelineDraweeControllerFactory -> mPipelineDraweeControllerFactory
    void <init>() -> <init>
    com.facebook.drawee.backends.pipeline.DraweeConfig$Builder addCustomDrawableFactory(com.facebook.drawee.backends.pipeline.DrawableFactory) -> addCustomDrawableFactory
    com.facebook.drawee.backends.pipeline.DraweeConfig$Builder setDrawDebugOverlay(boolean) -> setDrawDebugOverlay
    com.facebook.drawee.backends.pipeline.DraweeConfig$Builder setDebugOverlayEnabledSupplier(com.facebook.common.internal.Supplier) -> setDebugOverlayEnabledSupplier
    com.facebook.drawee.backends.pipeline.DraweeConfig$Builder setPipelineDraweeControllerFactory(com.facebook.drawee.backends.pipeline.PipelineDraweeControllerFactory) -> setPipelineDraweeControllerFactory
    com.facebook.drawee.backends.pipeline.DraweeConfig build() -> build
    java.util.List access$000(com.facebook.drawee.backends.pipeline.DraweeConfig$Builder) -> access$000
    com.facebook.common.internal.Supplier access$100(com.facebook.drawee.backends.pipeline.DraweeConfig$Builder) -> access$100
    com.facebook.drawee.backends.pipeline.PipelineDraweeControllerFactory access$200(com.facebook.drawee.backends.pipeline.DraweeConfig$Builder) -> access$200
com.facebook.drawee.backends.pipeline.Fresco -> com.facebook.drawee.backends.pipeline.Fresco:
    java.lang.Class TAG -> TAG
    com.facebook.drawee.backends.pipeline.PipelineDraweeControllerBuilderSupplier sDraweeControllerBuilderSupplier -> sDraweeControllerBuilderSupplier
    boolean sIsInitialized -> sIsInitialized
    void <init>() -> <init>
    void initialize(android.content.Context) -> initialize
    void initialize(android.content.Context,com.facebook.imagepipeline.core.ImagePipelineConfig) -> initialize
    void initialize(android.content.Context,com.facebook.imagepipeline.core.ImagePipelineConfig,com.facebook.drawee.backends.pipeline.DraweeConfig) -> initialize
    void initializeDrawee(android.content.Context,com.facebook.drawee.backends.pipeline.DraweeConfig) -> initializeDrawee
    com.facebook.drawee.backends.pipeline.PipelineDraweeControllerBuilderSupplier getDraweeControllerBuilderSupplier() -> getDraweeControllerBuilderSupplier
    com.facebook.drawee.backends.pipeline.PipelineDraweeControllerBuilder newDraweeControllerBuilder() -> newDraweeControllerBuilder
    com.facebook.imagepipeline.core.ImagePipelineFactory getImagePipelineFactory() -> getImagePipelineFactory
    com.facebook.imagepipeline.core.ImagePipeline getImagePipeline() -> getImagePipeline
    void shutDown() -> shutDown
    boolean hasBeenInitialized() -> hasBeenInitialized
    void <clinit>() -> <clinit>
com.facebook.drawee.backends.pipeline.PipelineDraweeController -> com.facebook.drawee.backends.pipeline.PipelineDraweeController:
    java.lang.Class TAG -> TAG
    android.content.res.Resources mResources -> mResources
    com.facebook.imagepipeline.animated.factory.AnimatedDrawableFactory mAnimatedDrawableFactory -> mAnimatedDrawableFactory
    com.facebook.common.internal.ImmutableList mDrawableFactories -> mDrawableFactories
    com.facebook.imagepipeline.cache.MemoryCache mMemoryCache -> mMemoryCache
    com.facebook.cache.common.CacheKey mCacheKey -> mCacheKey
    com.facebook.common.internal.Supplier mDataSourceSupplier -> mDataSourceSupplier
    boolean mDrawDebugOverlay -> mDrawDebugOverlay
    com.facebook.drawee.backends.pipeline.DrawableFactory mDefaultDrawableFactory -> mDefaultDrawableFactory
    void <init>(android.content.res.Resources,com.facebook.drawee.components.DeferredReleaser,com.facebook.imagepipeline.animated.factory.AnimatedDrawableFactory,java.util.concurrent.Executor,com.facebook.imagepipeline.cache.MemoryCache,com.facebook.common.internal.Supplier,java.lang.String,com.facebook.cache.common.CacheKey,java.lang.Object) -> <init>
    void <init>(android.content.res.Resources,com.facebook.drawee.components.DeferredReleaser,com.facebook.imagepipeline.animated.factory.AnimatedDrawableFactory,java.util.concurrent.Executor,com.facebook.imagepipeline.cache.MemoryCache,com.facebook.common.internal.Supplier,java.lang.String,com.facebook.cache.common.CacheKey,java.lang.Object,com.facebook.common.internal.ImmutableList) -> <init>
    void initialize(com.facebook.common.internal.Supplier,java.lang.String,com.facebook.cache.common.CacheKey,java.lang.Object) -> initialize
    void setDrawDebugOverlay(boolean) -> setDrawDebugOverlay
    void init(com.facebook.common.internal.Supplier) -> init
    android.content.res.Resources getResources() -> getResources
    com.facebook.datasource.DataSource getDataSource() -> getDataSource
    android.graphics.drawable.Drawable createDrawable(com.facebook.common.references.CloseableReference) -> createDrawable
    void setHierarchy(com.facebook.drawee.interfaces.DraweeHierarchy) -> setHierarchy
    void maybeUpdateDebugOverlay(com.facebook.imagepipeline.image.CloseableImage) -> maybeUpdateDebugOverlay
    com.facebook.imagepipeline.image.ImageInfo getImageInfo(com.facebook.common.references.CloseableReference) -> getImageInfo
    int getImageHash(com.facebook.common.references.CloseableReference) -> getImageHash
    void releaseImage(com.facebook.common.references.CloseableReference) -> releaseImage
    void releaseDrawable(android.graphics.drawable.Drawable) -> releaseDrawable
    com.facebook.common.references.CloseableReference getCachedImage() -> getCachedImage
    java.lang.String toString() -> toString
    java.lang.Object getCachedImage() -> getCachedImage
    void releaseImage(java.lang.Object) -> releaseImage
    int getImageHash(java.lang.Object) -> getImageHash
    java.lang.Object getImageInfo(java.lang.Object) -> getImageInfo
    android.graphics.drawable.Drawable createDrawable(java.lang.Object) -> createDrawable
    android.content.res.Resources access$000(com.facebook.drawee.backends.pipeline.PipelineDraweeController) -> access$000
    com.facebook.imagepipeline.animated.factory.AnimatedDrawableFactory access$100(com.facebook.drawee.backends.pipeline.PipelineDraweeController) -> access$100
    void <clinit>() -> <clinit>
com.facebook.drawee.backends.pipeline.PipelineDraweeController$1 -> com.facebook.drawee.backends.pipeline.PipelineDraweeController$1:
    com.facebook.drawee.backends.pipeline.PipelineDraweeController this$0 -> this$0
    void <init>(com.facebook.drawee.backends.pipeline.PipelineDraweeController) -> <init>
    boolean supportsImageType(com.facebook.imagepipeline.image.CloseableImage) -> supportsImageType
    android.graphics.drawable.Drawable createDrawable(com.facebook.imagepipeline.image.CloseableImage) -> createDrawable
com.facebook.drawee.backends.pipeline.PipelineDraweeControllerBuilder -> com.facebook.drawee.backends.pipeline.PipelineDraweeControllerBuilder:
    com.facebook.imagepipeline.core.ImagePipeline mImagePipeline -> mImagePipeline
    com.facebook.drawee.backends.pipeline.PipelineDraweeControllerFactory mPipelineDraweeControllerFactory -> mPipelineDraweeControllerFactory
    void <init>(android.content.Context,com.facebook.drawee.backends.pipeline.PipelineDraweeControllerFactory,com.facebook.imagepipeline.core.ImagePipeline,java.util.Set) -> <init>
    com.facebook.drawee.backends.pipeline.PipelineDraweeControllerBuilder setUri(android.net.Uri) -> setUri
    com.facebook.drawee.backends.pipeline.PipelineDraweeControllerBuilder setUri(java.lang.String) -> setUri
    com.facebook.drawee.backends.pipeline.PipelineDraweeController obtainController() -> obtainController
    com.facebook.cache.common.CacheKey getCacheKey() -> getCacheKey
    com.facebook.datasource.DataSource getDataSourceForRequest(com.facebook.imagepipeline.request.ImageRequest,java.lang.Object,com.facebook.drawee.controller.AbstractDraweeControllerBuilder$CacheLevel) -> getDataSourceForRequest
    com.facebook.drawee.backends.pipeline.PipelineDraweeControllerBuilder getThis() -> getThis
    com.facebook.imagepipeline.request.ImageRequest$RequestLevel convertCacheLevelToRequestLevel(com.facebook.drawee.controller.AbstractDraweeControllerBuilder$CacheLevel) -> convertCacheLevelToRequestLevel
    com.facebook.drawee.controller.AbstractDraweeControllerBuilder getThis() -> getThis
    com.facebook.datasource.DataSource getDataSourceForRequest(java.lang.Object,java.lang.Object,com.facebook.drawee.controller.AbstractDraweeControllerBuilder$CacheLevel) -> getDataSourceForRequest
    com.facebook.drawee.controller.AbstractDraweeController obtainController() -> obtainController
    com.facebook.drawee.interfaces.SimpleDraweeControllerBuilder setUri(java.lang.String) -> setUri
    com.facebook.drawee.interfaces.SimpleDraweeControllerBuilder setUri(android.net.Uri) -> setUri
com.facebook.drawee.backends.pipeline.PipelineDraweeControllerBuilder$1 -> com.facebook.drawee.backends.pipeline.PipelineDraweeControllerBuilder$1:
    int[] $SwitchMap$com$facebook$drawee$controller$AbstractDraweeControllerBuilder$CacheLevel -> $SwitchMap$com$facebook$drawee$controller$AbstractDraweeControllerBuilder$CacheLevel
    void <clinit>() -> <clinit>
com.facebook.drawee.backends.pipeline.PipelineDraweeControllerBuilderSupplier -> com.facebook.drawee.backends.pipeline.PipelineDraweeControllerBuilderSupplier:
    android.content.Context mContext -> mContext
    com.facebook.imagepipeline.core.ImagePipeline mImagePipeline -> mImagePipeline
    com.facebook.drawee.backends.pipeline.PipelineDraweeControllerFactory mPipelineDraweeControllerFactory -> mPipelineDraweeControllerFactory
    java.util.Set mBoundControllerListeners -> mBoundControllerListeners
    void <init>(android.content.Context) -> <init>
    void <init>(android.content.Context,com.facebook.drawee.backends.pipeline.DraweeConfig) -> <init>
    void <init>(android.content.Context,com.facebook.imagepipeline.core.ImagePipelineFactory,com.facebook.drawee.backends.pipeline.DraweeConfig) -> <init>
    void <init>(android.content.Context,com.facebook.imagepipeline.core.ImagePipelineFactory,java.util.Set,com.facebook.drawee.backends.pipeline.DraweeConfig) -> <init>
    com.facebook.drawee.backends.pipeline.PipelineDraweeControllerBuilder get() -> get
    java.lang.Object get() -> get
com.facebook.drawee.backends.pipeline.PipelineDraweeControllerFactory -> com.facebook.drawee.backends.pipeline.PipelineDraweeControllerFactory:
    android.content.res.Resources mResources -> mResources
    com.facebook.drawee.components.DeferredReleaser mDeferredReleaser -> mDeferredReleaser
    com.facebook.imagepipeline.animated.factory.AnimatedDrawableFactory mAnimatedDrawableFactory -> mAnimatedDrawableFactory
    java.util.concurrent.Executor mUiThreadExecutor -> mUiThreadExecutor
    com.facebook.imagepipeline.cache.MemoryCache mMemoryCache -> mMemoryCache
    com.facebook.common.internal.ImmutableList mDrawableFactories -> mDrawableFactories
    com.facebook.common.internal.Supplier mDebugOverlayEnabledSupplier -> mDebugOverlayEnabledSupplier
    void <init>() -> <init>
    void init(android.content.res.Resources,com.facebook.drawee.components.DeferredReleaser,com.facebook.imagepipeline.animated.factory.AnimatedDrawableFactory,java.util.concurrent.Executor,com.facebook.imagepipeline.cache.MemoryCache,com.facebook.common.internal.ImmutableList,com.facebook.common.internal.Supplier) -> init
    com.facebook.drawee.backends.pipeline.PipelineDraweeController newController(com.facebook.common.internal.Supplier,java.lang.String,com.facebook.cache.common.CacheKey,java.lang.Object) -> newController
    com.facebook.drawee.backends.pipeline.PipelineDraweeController internalCreateController(android.content.res.Resources,com.facebook.drawee.components.DeferredReleaser,com.facebook.imagepipeline.animated.factory.AnimatedDrawableFactory,java.util.concurrent.Executor,com.facebook.imagepipeline.cache.MemoryCache,com.facebook.common.internal.ImmutableList,com.facebook.common.internal.Supplier,java.lang.String,com.facebook.cache.common.CacheKey,java.lang.Object) -> internalCreateController
com.facebook.drawee.components.DeferredReleaser -> com.facebook.drawee.components.DeferredReleaser:
    com.facebook.drawee.components.DeferredReleaser sInstance -> sInstance
    java.util.Set mPendingReleasables -> mPendingReleasables
    android.os.Handler mUiHandler -> mUiHandler
    java.lang.Runnable releaseRunnable -> releaseRunnable
    com.facebook.drawee.components.DeferredReleaser getInstance() -> getInstance
    void <init>() -> <init>
    void scheduleDeferredRelease(com.facebook.drawee.components.DeferredReleaser$Releasable) -> scheduleDeferredRelease
    void cancelDeferredRelease(com.facebook.drawee.components.DeferredReleaser$Releasable) -> cancelDeferredRelease
    void ensureOnUiThread() -> ensureOnUiThread
    void access$000() -> access$000
    java.util.Set access$100(com.facebook.drawee.components.DeferredReleaser) -> access$100
    void <clinit>() -> <clinit>
com.facebook.drawee.components.DeferredReleaser$1 -> com.facebook.drawee.components.DeferredReleaser$1:
    com.facebook.drawee.components.DeferredReleaser this$0 -> this$0
    void <init>(com.facebook.drawee.components.DeferredReleaser) -> <init>
    void run() -> run
com.facebook.drawee.components.DeferredReleaser$Releasable -> com.facebook.drawee.components.DeferredReleaser$Releasable:
    void release() -> release
com.facebook.drawee.components.DraweeEventTracker -> com.facebook.drawee.components.DraweeEventTracker:
    java.util.Queue mEventQueue -> mEventQueue
    int MAX_EVENTS_TO_TRACK -> MAX_EVENTS_TO_TRACK
    com.facebook.drawee.components.DraweeEventTracker sInstance -> sInstance
    boolean sEnabled -> sEnabled
    void <init>() -> <init>
    com.facebook.drawee.components.DraweeEventTracker newInstance() -> newInstance
    void disable() -> disable
    void recordEvent(com.facebook.drawee.components.DraweeEventTracker$Event) -> recordEvent
    java.lang.String toString() -> toString
    void <clinit>() -> <clinit>
com.facebook.drawee.components.DraweeEventTracker$Event -> com.facebook.drawee.components.DraweeEventTracker$Event:
    com.facebook.drawee.components.DraweeEventTracker$Event ON_SET_HIERARCHY -> ON_SET_HIERARCHY
    com.facebook.drawee.components.DraweeEventTracker$Event ON_CLEAR_HIERARCHY -> ON_CLEAR_HIERARCHY
    com.facebook.drawee.components.DraweeEventTracker$Event ON_SET_CONTROLLER -> ON_SET_CONTROLLER
    com.facebook.drawee.components.DraweeEventTracker$Event ON_CLEAR_OLD_CONTROLLER -> ON_CLEAR_OLD_CONTROLLER
    com.facebook.drawee.components.DraweeEventTracker$Event ON_CLEAR_CONTROLLER -> ON_CLEAR_CONTROLLER
    com.facebook.drawee.components.DraweeEventTracker$Event ON_INIT_CONTROLLER -> ON_INIT_CONTROLLER
    com.facebook.drawee.components.DraweeEventTracker$Event ON_ATTACH_CONTROLLER -> ON_ATTACH_CONTROLLER
    com.facebook.drawee.components.DraweeEventTracker$Event ON_DETACH_CONTROLLER -> ON_DETACH_CONTROLLER
    com.facebook.drawee.components.DraweeEventTracker$Event ON_RELEASE_CONTROLLER -> ON_RELEASE_CONTROLLER
    com.facebook.drawee.components.DraweeEventTracker$Event ON_DATASOURCE_SUBMIT -> ON_DATASOURCE_SUBMIT
    com.facebook.drawee.components.DraweeEventTracker$Event ON_DATASOURCE_RESULT -> ON_DATASOURCE_RESULT
    com.facebook.drawee.components.DraweeEventTracker$Event ON_DATASOURCE_RESULT_INT -> ON_DATASOURCE_RESULT_INT
    com.facebook.drawee.components.DraweeEventTracker$Event ON_DATASOURCE_FAILURE -> ON_DATASOURCE_FAILURE
    com.facebook.drawee.components.DraweeEventTracker$Event ON_DATASOURCE_FAILURE_INT -> ON_DATASOURCE_FAILURE_INT
    com.facebook.drawee.components.DraweeEventTracker$Event ON_HOLDER_ATTACH -> ON_HOLDER_ATTACH
    com.facebook.drawee.components.DraweeEventTracker$Event ON_HOLDER_DETACH -> ON_HOLDER_DETACH
    com.facebook.drawee.components.DraweeEventTracker$Event ON_DRAWABLE_SHOW -> ON_DRAWABLE_SHOW
    com.facebook.drawee.components.DraweeEventTracker$Event ON_DRAWABLE_HIDE -> ON_DRAWABLE_HIDE
    com.facebook.drawee.components.DraweeEventTracker$Event ON_ACTIVITY_START -> ON_ACTIVITY_START
    com.facebook.drawee.components.DraweeEventTracker$Event ON_ACTIVITY_STOP -> ON_ACTIVITY_STOP
    com.facebook.drawee.components.DraweeEventTracker$Event ON_RUN_CLEAR_CONTROLLER -> ON_RUN_CLEAR_CONTROLLER
    com.facebook.drawee.components.DraweeEventTracker$Event ON_SCHEDULE_CLEAR_CONTROLLER -> ON_SCHEDULE_CLEAR_CONTROLLER
    com.facebook.drawee.components.DraweeEventTracker$Event ON_SAME_CONTROLLER_SKIPPED -> ON_SAME_CONTROLLER_SKIPPED
    com.facebook.drawee.components.DraweeEventTracker$Event ON_SUBMIT_CACHE_HIT -> ON_SUBMIT_CACHE_HIT
    com.facebook.drawee.components.DraweeEventTracker$Event[] $VALUES -> $VALUES
    com.facebook.drawee.components.DraweeEventTracker$Event[] values() -> values
    com.facebook.drawee.components.DraweeEventTracker$Event valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.facebook.drawee.components.RetryManager -> com.facebook.drawee.components.RetryManager:
    int MAX_TAP_TO_RETRY_ATTEMPTS -> MAX_TAP_TO_RETRY_ATTEMPTS
    boolean mTapToRetryEnabled -> mTapToRetryEnabled
    int mMaxTapToRetryAttempts -> mMaxTapToRetryAttempts
    int mTapToRetryAttempts -> mTapToRetryAttempts
    void <init>() -> <init>
    com.facebook.drawee.components.RetryManager newInstance() -> newInstance
    void init() -> init
    void reset() -> reset
    boolean isTapToRetryEnabled() -> isTapToRetryEnabled
    void setTapToRetryEnabled(boolean) -> setTapToRetryEnabled
    void setMaxTapToRetryAttemps(int) -> setMaxTapToRetryAttemps
    boolean shouldRetryOnTap() -> shouldRetryOnTap
    void notifyTapToRetry() -> notifyTapToRetry
com.facebook.drawee.controller.AbstractDraweeController -> com.facebook.drawee.controller.AbstractDraweeController:
    java.lang.Class TAG -> TAG
    com.facebook.drawee.components.DraweeEventTracker mEventTracker -> mEventTracker
    com.facebook.drawee.components.DeferredReleaser mDeferredReleaser -> mDeferredReleaser
    java.util.concurrent.Executor mUiThreadImmediateExecutor -> mUiThreadImmediateExecutor
    com.facebook.drawee.components.RetryManager mRetryManager -> mRetryManager
    com.facebook.drawee.gestures.GestureDetector mGestureDetector -> mGestureDetector
    com.facebook.drawee.controller.ControllerListener mControllerListener -> mControllerListener
    com.facebook.drawee.controller.ControllerViewportVisibilityListener mControllerViewportVisibilityListener -> mControllerViewportVisibilityListener
    com.facebook.drawee.interfaces.SettableDraweeHierarchy mSettableDraweeHierarchy -> mSettableDraweeHierarchy
    android.graphics.drawable.Drawable mControllerOverlay -> mControllerOverlay
    java.lang.String mId -> mId
    java.lang.Object mCallerContext -> mCallerContext
    boolean mIsAttached -> mIsAttached
    boolean mIsRequestSubmitted -> mIsRequestSubmitted
    boolean mIsVisibleInViewportHint -> mIsVisibleInViewportHint
    boolean mHasFetchFailed -> mHasFetchFailed
    boolean mRetainImageOnFailure -> mRetainImageOnFailure
    java.lang.String mContentDescription -> mContentDescription
    com.facebook.datasource.DataSource mDataSource -> mDataSource
    java.lang.Object mFetchedImage -> mFetchedImage
    android.graphics.drawable.Drawable mDrawable -> mDrawable
    void <init>(com.facebook.drawee.components.DeferredReleaser,java.util.concurrent.Executor,java.lang.String,java.lang.Object) -> <init>
    void initialize(java.lang.String,java.lang.Object) -> initialize
    void init(java.lang.String,java.lang.Object,boolean) -> init
    void release() -> release
    void releaseFetch() -> releaseFetch
    java.lang.String getId() -> getId
    java.lang.Object getCallerContext() -> getCallerContext
    com.facebook.drawee.components.RetryManager getRetryManager() -> getRetryManager
    void setRetryManager(com.facebook.drawee.components.RetryManager) -> setRetryManager
    com.facebook.drawee.gestures.GestureDetector getGestureDetector() -> getGestureDetector
    void setGestureDetector(com.facebook.drawee.gestures.GestureDetector) -> setGestureDetector
    void setRetainImageOnFailure(boolean) -> setRetainImageOnFailure
    java.lang.String getContentDescription() -> getContentDescription
    void setContentDescription(java.lang.String) -> setContentDescription
    void addControllerListener(com.facebook.drawee.controller.ControllerListener) -> addControllerListener
    void removeControllerListener(com.facebook.drawee.controller.ControllerListener) -> removeControllerListener
    com.facebook.drawee.controller.ControllerListener getControllerListener() -> getControllerListener
    void setControllerViewportVisibilityListener(com.facebook.drawee.controller.ControllerViewportVisibilityListener) -> setControllerViewportVisibilityListener
    com.facebook.drawee.interfaces.DraweeHierarchy getHierarchy() -> getHierarchy
    void setHierarchy(com.facebook.drawee.interfaces.DraweeHierarchy) -> setHierarchy
    void setControllerOverlay(android.graphics.drawable.Drawable) -> setControllerOverlay
    android.graphics.drawable.Drawable getControllerOverlay() -> getControllerOverlay
    void onAttach() -> onAttach
    void onDetach() -> onDetach
    void onViewportVisibilityHint(boolean) -> onViewportVisibilityHint
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    boolean shouldHandleGesture() -> shouldHandleGesture
    boolean shouldRetryOnTap() -> shouldRetryOnTap
    boolean onClick() -> onClick
    void submitRequest() -> submitRequest
    void onNewResultInternal(java.lang.String,com.facebook.datasource.DataSource,java.lang.Object,float,boolean,boolean) -> onNewResultInternal
    void onFailureInternal(java.lang.String,com.facebook.datasource.DataSource,java.lang.Throwable,boolean) -> onFailureInternal
    void onProgressUpdateInternal(java.lang.String,com.facebook.datasource.DataSource,float,boolean) -> onProgressUpdateInternal
    boolean isExpectedDataSource(java.lang.String,com.facebook.datasource.DataSource) -> isExpectedDataSource
    void logMessageAndImage(java.lang.String,java.lang.Object) -> logMessageAndImage
    void logMessageAndFailure(java.lang.String,java.lang.Throwable) -> logMessageAndFailure
    android.graphics.drawable.Animatable getAnimatable() -> getAnimatable
    com.facebook.datasource.DataSource getDataSource() -> getDataSource
    android.graphics.drawable.Drawable createDrawable(java.lang.Object) -> createDrawable
    java.lang.Object getImageInfo(java.lang.Object) -> getImageInfo
    java.lang.String getImageClass(java.lang.Object) -> getImageClass
    int getImageHash(java.lang.Object) -> getImageHash
    void releaseImage(java.lang.Object) -> releaseImage
    void releaseDrawable(android.graphics.drawable.Drawable) -> releaseDrawable
    java.lang.String toString() -> toString
    java.lang.Object getCachedImage() -> getCachedImage
    void access$000(com.facebook.drawee.controller.AbstractDraweeController,java.lang.String,com.facebook.datasource.DataSource,java.lang.Object,float,boolean,boolean) -> access$000
    void access$100(com.facebook.drawee.controller.AbstractDraweeController,java.lang.String,com.facebook.datasource.DataSource,java.lang.Throwable,boolean) -> access$100
    void access$200(com.facebook.drawee.controller.AbstractDraweeController,java.lang.String,com.facebook.datasource.DataSource,float,boolean) -> access$200
    void <clinit>() -> <clinit>
com.facebook.drawee.controller.AbstractDraweeController$1 -> com.facebook.drawee.controller.AbstractDraweeController$1:
    java.lang.String val$id -> val$id
    boolean val$wasImmediate -> val$wasImmediate
    com.facebook.drawee.controller.AbstractDraweeController this$0 -> this$0
    void <init>(com.facebook.drawee.controller.AbstractDraweeController,java.lang.String,boolean) -> <init>
    void onNewResultImpl(com.facebook.datasource.DataSource) -> onNewResultImpl
    void onFailureImpl(com.facebook.datasource.DataSource) -> onFailureImpl
    void onProgressUpdate(com.facebook.datasource.DataSource) -> onProgressUpdate
com.facebook.drawee.controller.AbstractDraweeController$InternalForwardingListener -> com.facebook.drawee.controller.AbstractDraweeController$InternalForwardingListener:
    void <init>() -> <init>
    com.facebook.drawee.controller.AbstractDraweeController$InternalForwardingListener createInternal(com.facebook.drawee.controller.ControllerListener,com.facebook.drawee.controller.ControllerListener) -> createInternal
com.facebook.drawee.controller.AbstractDraweeControllerBuilder -> com.facebook.drawee.controller.AbstractDraweeControllerBuilder:
    com.facebook.drawee.controller.ControllerListener sAutoPlayAnimationsListener -> sAutoPlayAnimationsListener
    java.lang.NullPointerException NO_REQUEST_EXCEPTION -> NO_REQUEST_EXCEPTION
    android.content.Context mContext -> mContext
    java.lang.ref.SoftReference mViewSoftReferenceContext -> mViewSoftReferenceContext
    java.util.Set mBoundControllerListeners -> mBoundControllerListeners
    java.lang.Object mCallerContext -> mCallerContext
    java.lang.Object mImageRequest -> mImageRequest
    java.lang.Object mLowResImageRequest -> mLowResImageRequest
    java.lang.Object[] mMultiImageRequests -> mMultiImageRequests
    boolean mTryCacheOnlyFirst -> mTryCacheOnlyFirst
    com.facebook.common.internal.Supplier mDataSourceSupplier -> mDataSourceSupplier
    com.facebook.drawee.controller.ControllerListener mControllerListener -> mControllerListener
    com.facebook.drawee.controller.ControllerViewportVisibilityListener mControllerViewportVisibilityListener -> mControllerViewportVisibilityListener
    boolean mTapToRetryEnabled -> mTapToRetryEnabled
    boolean mAutoPlayAnimations -> mAutoPlayAnimations
    boolean mRetainImageOnFailure -> mRetainImageOnFailure
    java.lang.String mContentDescription -> mContentDescription
    com.facebook.drawee.interfaces.DraweeController mOldController -> mOldController
    java.util.concurrent.atomic.AtomicLong sIdCounter -> sIdCounter
    void <init>(android.content.Context,java.util.Set) -> <init>
    void init() -> init
    com.facebook.drawee.controller.AbstractDraweeControllerBuilder reset() -> reset
    java.lang.ref.SoftReference getViewSoftReferenceContext() -> getViewSoftReferenceContext
    com.facebook.drawee.controller.AbstractDraweeControllerBuilder setCallerViewContext(android.content.Context) -> setCallerViewContext
    com.facebook.drawee.controller.AbstractDraweeControllerBuilder setCallerContext(java.lang.Object) -> setCallerContext
    java.lang.Object getCallerContext() -> getCallerContext
    com.facebook.drawee.controller.AbstractDraweeControllerBuilder setImageRequest(java.lang.Object) -> setImageRequest
    java.lang.Object getImageRequest() -> getImageRequest
    com.facebook.drawee.controller.AbstractDraweeControllerBuilder setLowResImageRequest(java.lang.Object) -> setLowResImageRequest
    java.lang.Object getLowResImageRequest() -> getLowResImageRequest
    com.facebook.drawee.controller.AbstractDraweeControllerBuilder setFirstAvailableImageRequests(java.lang.Object[]) -> setFirstAvailableImageRequests
    com.facebook.drawee.controller.AbstractDraweeControllerBuilder setFirstAvailableImageRequests(java.lang.Object[],boolean) -> setFirstAvailableImageRequests
    java.lang.Object[] getFirstAvailableImageRequests() -> getFirstAvailableImageRequests
    void setDataSourceSupplier(com.facebook.common.internal.Supplier) -> setDataSourceSupplier
    com.facebook.common.internal.Supplier getDataSourceSupplier() -> getDataSourceSupplier
    com.facebook.drawee.controller.AbstractDraweeControllerBuilder setTapToRetryEnabled(boolean) -> setTapToRetryEnabled
    boolean getTapToRetryEnabled() -> getTapToRetryEnabled
    com.facebook.drawee.controller.AbstractDraweeControllerBuilder setRetainImageOnFailure(boolean) -> setRetainImageOnFailure
    boolean getRetainImageOnFailure() -> getRetainImageOnFailure
    com.facebook.drawee.controller.AbstractDraweeControllerBuilder setAutoPlayAnimations(boolean) -> setAutoPlayAnimations
    boolean getAutoPlayAnimations() -> getAutoPlayAnimations
    com.facebook.drawee.controller.AbstractDraweeControllerBuilder setControllerListener(com.facebook.drawee.controller.ControllerListener) -> setControllerListener
    com.facebook.drawee.controller.ControllerListener getControllerListener() -> getControllerListener
    com.facebook.drawee.controller.AbstractDraweeControllerBuilder setControllerViewportVisibilityListener(com.facebook.drawee.controller.ControllerViewportVisibilityListener) -> setControllerViewportVisibilityListener
    com.facebook.drawee.controller.ControllerViewportVisibilityListener getControllerViewportVisibilityListener() -> getControllerViewportVisibilityListener
    com.facebook.drawee.controller.AbstractDraweeControllerBuilder setContentDescription(java.lang.String) -> setContentDescription
    java.lang.String getContentDescription() -> getContentDescription
    com.facebook.drawee.controller.AbstractDraweeControllerBuilder setOldController(com.facebook.drawee.interfaces.DraweeController) -> setOldController
    com.facebook.drawee.interfaces.DraweeController getOldController() -> getOldController
    com.facebook.drawee.controller.AbstractDraweeController build() -> build
    void validate() -> validate
    com.facebook.drawee.controller.AbstractDraweeController buildController() -> buildController
    java.lang.String generateUniqueControllerId() -> generateUniqueControllerId
    com.facebook.common.internal.Supplier obtainDataSourceSupplier() -> obtainDataSourceSupplier
    com.facebook.common.internal.Supplier getFirstAvailableDataSourceSupplier(java.lang.Object[],boolean) -> getFirstAvailableDataSourceSupplier
    com.facebook.common.internal.Supplier getDataSourceSupplierForRequest(java.lang.Object) -> getDataSourceSupplierForRequest
    com.facebook.common.internal.Supplier getDataSourceSupplierForRequest(java.lang.Object,com.facebook.drawee.controller.AbstractDraweeControllerBuilder$CacheLevel) -> getDataSourceSupplierForRequest
    void maybeAttachListeners(com.facebook.drawee.controller.AbstractDraweeController) -> maybeAttachListeners
    void maybeBuildAndSetRetryManager(com.facebook.drawee.controller.AbstractDraweeController) -> maybeBuildAndSetRetryManager
    void maybeBuildAndSetGestureDetector(com.facebook.drawee.controller.AbstractDraweeController) -> maybeBuildAndSetGestureDetector
    android.content.Context getContext() -> getContext
    com.facebook.drawee.controller.AbstractDraweeController obtainController() -> obtainController
    com.facebook.datasource.DataSource getDataSourceForRequest(java.lang.Object,java.lang.Object,com.facebook.drawee.controller.AbstractDraweeControllerBuilder$CacheLevel) -> getDataSourceForRequest
    com.facebook.drawee.controller.AbstractDraweeControllerBuilder getThis() -> getThis
    com.facebook.drawee.interfaces.DraweeController build() -> build
    com.facebook.drawee.interfaces.SimpleDraweeControllerBuilder setCallerViewContext(android.content.Context) -> setCallerViewContext
    com.facebook.drawee.interfaces.SimpleDraweeControllerBuilder setOldController(com.facebook.drawee.interfaces.DraweeController) -> setOldController
    com.facebook.drawee.interfaces.SimpleDraweeControllerBuilder setCallerContext(java.lang.Object) -> setCallerContext
    void <clinit>() -> <clinit>
com.facebook.drawee.controller.AbstractDraweeControllerBuilder$1 -> com.facebook.drawee.controller.AbstractDraweeControllerBuilder$1:
    void <init>() -> <init>
    void onFinalImageSet(java.lang.String,java.lang.Object,android.graphics.drawable.Animatable) -> onFinalImageSet
com.facebook.drawee.controller.AbstractDraweeControllerBuilder$2 -> com.facebook.drawee.controller.AbstractDraweeControllerBuilder$2:
    java.lang.Object val$imageRequest -> val$imageRequest
    java.lang.Object val$callerContext -> val$callerContext
    com.facebook.drawee.controller.AbstractDraweeControllerBuilder$CacheLevel val$cacheLevel -> val$cacheLevel
    com.facebook.drawee.controller.AbstractDraweeControllerBuilder this$0 -> this$0
    void <init>(com.facebook.drawee.controller.AbstractDraweeControllerBuilder,java.lang.Object,java.lang.Object,com.facebook.drawee.controller.AbstractDraweeControllerBuilder$CacheLevel) -> <init>
    com.facebook.datasource.DataSource get() -> get
    java.lang.String toString() -> toString
    java.lang.Object get() -> get
com.facebook.drawee.controller.AbstractDraweeControllerBuilder$CacheLevel -> com.facebook.drawee.controller.AbstractDraweeControllerBuilder$CacheLevel:
    com.facebook.drawee.controller.AbstractDraweeControllerBuilder$CacheLevel FULL_FETCH -> FULL_FETCH
    com.facebook.drawee.controller.AbstractDraweeControllerBuilder$CacheLevel DISK_CACHE -> DISK_CACHE
    com.facebook.drawee.controller.AbstractDraweeControllerBuilder$CacheLevel BITMAP_MEMORY_CACHE -> BITMAP_MEMORY_CACHE
    com.facebook.drawee.controller.AbstractDraweeControllerBuilder$CacheLevel[] $VALUES -> $VALUES
    com.facebook.drawee.controller.AbstractDraweeControllerBuilder$CacheLevel[] values() -> values
    com.facebook.drawee.controller.AbstractDraweeControllerBuilder$CacheLevel valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.facebook.drawee.controller.BaseControllerListener -> com.facebook.drawee.controller.BaseControllerListener:
    com.facebook.drawee.controller.ControllerListener NO_OP_LISTENER -> NO_OP_LISTENER
    void <init>() -> <init>
    com.facebook.drawee.controller.ControllerListener getNoOpListener() -> getNoOpListener
    void onSubmit(java.lang.String,java.lang.Object) -> onSubmit
    void onFinalImageSet(java.lang.String,java.lang.Object,android.graphics.drawable.Animatable) -> onFinalImageSet
    void onIntermediateImageSet(java.lang.String,java.lang.Object) -> onIntermediateImageSet
    void onIntermediateImageFailed(java.lang.String,java.lang.Throwable) -> onIntermediateImageFailed
    void onFailure(java.lang.String,java.lang.Throwable) -> onFailure
    void onRelease(java.lang.String) -> onRelease
    void <clinit>() -> <clinit>
com.facebook.drawee.controller.ControllerListener -> com.facebook.drawee.controller.ControllerListener:
    void onSubmit(java.lang.String,java.lang.Object) -> onSubmit
    void onFinalImageSet(java.lang.String,java.lang.Object,android.graphics.drawable.Animatable) -> onFinalImageSet
    void onIntermediateImageSet(java.lang.String,java.lang.Object) -> onIntermediateImageSet
    void onIntermediateImageFailed(java.lang.String,java.lang.Throwable) -> onIntermediateImageFailed
    void onFailure(java.lang.String,java.lang.Throwable) -> onFailure
    void onRelease(java.lang.String) -> onRelease
com.facebook.drawee.controller.ControllerViewportVisibilityListener -> com.facebook.drawee.controller.ControllerViewportVisibilityListener:
    void onDraweeViewportEntry(java.lang.String) -> onDraweeViewportEntry
    void onDraweeViewportExit(java.lang.String) -> onDraweeViewportExit
com.facebook.drawee.controller.ForwardingControllerListener -> com.facebook.drawee.controller.ForwardingControllerListener:
    java.lang.String TAG -> TAG
    java.util.List mListeners -> mListeners
    void <init>() -> <init>
    com.facebook.drawee.controller.ForwardingControllerListener create() -> create
    com.facebook.drawee.controller.ForwardingControllerListener of(com.facebook.drawee.controller.ControllerListener) -> of
    com.facebook.drawee.controller.ForwardingControllerListener of(com.facebook.drawee.controller.ControllerListener,com.facebook.drawee.controller.ControllerListener) -> of
    void addListener(com.facebook.drawee.controller.ControllerListener) -> addListener
    void removeListener(com.facebook.drawee.controller.ControllerListener) -> removeListener
    void clearListeners() -> clearListeners
    void onException(java.lang.String,java.lang.Throwable) -> onException
    void onSubmit(java.lang.String,java.lang.Object) -> onSubmit
    void onFinalImageSet(java.lang.String,java.lang.Object,android.graphics.drawable.Animatable) -> onFinalImageSet
    void onIntermediateImageSet(java.lang.String,java.lang.Object) -> onIntermediateImageSet
    void onIntermediateImageFailed(java.lang.String,java.lang.Throwable) -> onIntermediateImageFailed
    void onFailure(java.lang.String,java.lang.Throwable) -> onFailure
    void onRelease(java.lang.String) -> onRelease
com.facebook.drawee.debug.DebugControllerOverlayDrawable -> com.facebook.drawee.debug.DebugControllerOverlayDrawable:
    java.lang.String NO_CONTROLLER_ID -> NO_CONTROLLER_ID
    int OVERLAY_COLOR_IMAGE_OK -> OVERLAY_COLOR_IMAGE_OK
    int OVERLAY_COLOR_IMAGE_ALMOST_OK -> OVERLAY_COLOR_IMAGE_ALMOST_OK
    int OVERLAY_COLOR_IMAGE_NOT_OK -> OVERLAY_COLOR_IMAGE_NOT_OK
    float IMAGE_SIZE_THRESHOLD_OK -> IMAGE_SIZE_THRESHOLD_OK
    float IMAGE_SIZE_THRESHOLD_NOT_OK -> IMAGE_SIZE_THRESHOLD_NOT_OK
    int OUTLINE_COLOR -> OUTLINE_COLOR
    int TEXT_COLOR -> TEXT_COLOR
    int OUTLINE_STROKE_WIDTH_PX -> OUTLINE_STROKE_WIDTH_PX
    int MAX_TEXT_SIZE_PX -> MAX_TEXT_SIZE_PX
    int MIN_TEXT_SIZE_PX -> MIN_TEXT_SIZE_PX
    int TEXT_LINE_SPACING_PX -> TEXT_LINE_SPACING_PX
    int TEXT_PADDING_PX -> TEXT_PADDING_PX
    int MAX_NUMBER_OF_LINES -> MAX_NUMBER_OF_LINES
    int MAX_LINE_WIDTH_EM -> MAX_LINE_WIDTH_EM
    java.lang.String mControllerId -> mControllerId
    int mWidthPx -> mWidthPx
    int mHeightPx -> mHeightPx
    int mImageSizeBytes -> mImageSizeBytes
    java.lang.String mImageFormat -> mImageFormat
    com.facebook.drawee.drawable.ScalingUtils$ScaleType mScaleType -> mScaleType
    int mFrameCount -> mFrameCount
    int mLoopCount -> mLoopCount
    int mTextGravity -> mTextGravity
    android.graphics.Paint mPaint -> mPaint
    android.graphics.Matrix mMatrix -> mMatrix
    android.graphics.Rect mRect -> mRect
    android.graphics.RectF mRectF -> mRectF
    int mStartTextXPx -> mStartTextXPx
    int mStartTextYPx -> mStartTextYPx
    int mLineIncrementPx -> mLineIncrementPx
    int mCurrentTextXPx -> mCurrentTextXPx
    int mCurrentTextYPx -> mCurrentTextYPx
    void <init>() -> <init>
    void reset() -> reset
    void setTextGravity(int) -> setTextGravity
    void setControllerId(java.lang.String) -> setControllerId
    void setDimensions(int,int) -> setDimensions
    void setAnimationInfo(int,int) -> setAnimationInfo
    void setImageSize(int) -> setImageSize
    void setImageFormat(java.lang.String) -> setImageFormat
    void setScaleType(com.facebook.drawee.drawable.ScalingUtils$ScaleType) -> setScaleType
    void onBoundsChange(android.graphics.Rect) -> onBoundsChange
    void draw(android.graphics.Canvas) -> draw
    void setAlpha(int) -> setAlpha
    void setColorFilter(android.graphics.ColorFilter) -> setColorFilter
    int getOpacity() -> getOpacity
    void prepareDebugTextParameters(android.graphics.Rect,int,int) -> prepareDebugTextParameters
    void addDebugText(android.graphics.Canvas,java.lang.String,java.lang.Object[]) -> addDebugText
    int determineOverlayColor(int,int,com.facebook.drawee.drawable.ScalingUtils$ScaleType) -> determineOverlayColor
com.facebook.drawee.drawable.ArrayDrawable -> com.facebook.drawee.drawable.ArrayDrawable:
    com.facebook.drawee.drawable.TransformCallback mTransformCallback -> mTransformCallback
    com.facebook.drawee.drawable.DrawableProperties mDrawableProperties -> mDrawableProperties
    android.graphics.drawable.Drawable[] mLayers -> mLayers
    com.facebook.drawee.drawable.DrawableParent[] mDrawableParents -> mDrawableParents
    android.graphics.Rect mTmpRect -> mTmpRect
    boolean mIsStateful -> mIsStateful
    boolean mIsStatefulCalculated -> mIsStatefulCalculated
    boolean mIsMutated -> mIsMutated
    void <init>(android.graphics.drawable.Drawable[]) -> <init>
    int getNumberOfLayers() -> getNumberOfLayers
    android.graphics.drawable.Drawable getDrawable(int) -> getDrawable
    android.graphics.drawable.Drawable setDrawable(int,android.graphics.drawable.Drawable) -> setDrawable
    int getIntrinsicWidth() -> getIntrinsicWidth
    int getIntrinsicHeight() -> getIntrinsicHeight
    void onBoundsChange(android.graphics.Rect) -> onBoundsChange
    boolean isStateful() -> isStateful
    boolean onStateChange(int[]) -> onStateChange
    boolean onLevelChange(int) -> onLevelChange
    void draw(android.graphics.Canvas) -> draw
    boolean getPadding(android.graphics.Rect) -> getPadding
    android.graphics.drawable.Drawable mutate() -> mutate
    int getOpacity() -> getOpacity
    void setAlpha(int) -> setAlpha
    void setColorFilter(android.graphics.ColorFilter) -> setColorFilter
    void setDither(boolean) -> setDither
    void setFilterBitmap(boolean) -> setFilterBitmap
    boolean setVisible(boolean,boolean) -> setVisible
    com.facebook.drawee.drawable.DrawableParent getDrawableParentForIndex(int) -> getDrawableParentForIndex
    com.facebook.drawee.drawable.DrawableParent createDrawableParentForIndex(int) -> createDrawableParentForIndex
    void invalidateDrawable(android.graphics.drawable.Drawable) -> invalidateDrawable
    void scheduleDrawable(android.graphics.drawable.Drawable,java.lang.Runnable,long) -> scheduleDrawable
    void unscheduleDrawable(android.graphics.drawable.Drawable,java.lang.Runnable) -> unscheduleDrawable
    void setTransformCallback(com.facebook.drawee.drawable.TransformCallback) -> setTransformCallback
    void getTransform(android.graphics.Matrix) -> getTransform
    void getRootBounds(android.graphics.RectF) -> getRootBounds
    void setHotspot(float,float) -> setHotspot
com.facebook.drawee.drawable.ArrayDrawable$1 -> com.facebook.drawee.drawable.ArrayDrawable$1:
    int val$index -> val$index
    com.facebook.drawee.drawable.ArrayDrawable this$0 -> this$0
    void <init>(com.facebook.drawee.drawable.ArrayDrawable,int) -> <init>
    android.graphics.drawable.Drawable setDrawable(android.graphics.drawable.Drawable) -> setDrawable
    android.graphics.drawable.Drawable getDrawable() -> getDrawable
com.facebook.drawee.drawable.AutoRotateDrawable -> com.facebook.drawee.drawable.AutoRotateDrawable:
    int DEGREES_IN_FULL_ROTATION -> DEGREES_IN_FULL_ROTATION
    int FRAME_INTERVAL_MS -> FRAME_INTERVAL_MS
    int mInterval -> mInterval
    boolean mClockwise -> mClockwise
    float mRotationAngle -> mRotationAngle
    boolean mIsScheduled -> mIsScheduled
    void <init>(android.graphics.drawable.Drawable,int) -> <init>
    void <init>(android.graphics.drawable.Drawable,int,boolean) -> <init>
    void reset() -> reset
    void setClockwise(boolean) -> setClockwise
    void draw(android.graphics.Canvas) -> draw
    void run() -> run
    com.facebook.drawee.drawable.AutoRotateDrawable cloneDrawable() -> cloneDrawable
    void scheduleNextFrame() -> scheduleNextFrame
    int getIncrement() -> getIncrement
    android.graphics.drawable.Drawable cloneDrawable() -> cloneDrawable
com.facebook.drawee.drawable.CloneableDrawable -> com.facebook.drawee.drawable.CloneableDrawable:
    android.graphics.drawable.Drawable cloneDrawable() -> cloneDrawable
com.facebook.drawee.drawable.DrawableParent -> com.facebook.drawee.drawable.DrawableParent:
    android.graphics.drawable.Drawable setDrawable(android.graphics.drawable.Drawable) -> setDrawable
    android.graphics.drawable.Drawable getDrawable() -> getDrawable
com.facebook.drawee.drawable.DrawableProperties -> com.facebook.drawee.drawable.DrawableProperties:
    int UNSET -> UNSET
    int mAlpha -> mAlpha
    boolean mIsSetColorFilter -> mIsSetColorFilter
    android.graphics.ColorFilter mColorFilter -> mColorFilter
    int mDither -> mDither
    int mFilterBitmap -> mFilterBitmap
    void <init>() -> <init>
    void setAlpha(int) -> setAlpha
    void setColorFilter(android.graphics.ColorFilter) -> setColorFilter
    void setDither(boolean) -> setDither
    void setFilterBitmap(boolean) -> setFilterBitmap
    void applyTo(android.graphics.drawable.Drawable) -> applyTo
com.facebook.drawee.drawable.DrawableUtils -> com.facebook.drawee.drawable.DrawableUtils:
    void <init>() -> <init>
    android.graphics.drawable.Drawable cloneDrawable(android.graphics.drawable.Drawable) -> cloneDrawable
    void copyProperties(android.graphics.drawable.Drawable,android.graphics.drawable.Drawable) -> copyProperties
    void setDrawableProperties(android.graphics.drawable.Drawable,com.facebook.drawee.drawable.DrawableProperties) -> setDrawableProperties
    void setCallbacks(android.graphics.drawable.Drawable,android.graphics.drawable.Drawable$Callback,com.facebook.drawee.drawable.TransformCallback) -> setCallbacks
    int multiplyColorAlpha(int,int) -> multiplyColorAlpha
    int getOpacityFromColor(int) -> getOpacityFromColor
com.facebook.drawee.drawable.FadeDrawable -> com.facebook.drawee.drawable.FadeDrawable:
    int TRANSITION_STARTING -> TRANSITION_STARTING
    int TRANSITION_RUNNING -> TRANSITION_RUNNING
    int TRANSITION_NONE -> TRANSITION_NONE
    android.graphics.drawable.Drawable[] mLayers -> mLayers
    int mTransitionState -> mTransitionState
    int mDurationMs -> mDurationMs
    long mStartTimeMs -> mStartTimeMs
    int[] mStartAlphas -> mStartAlphas
    int[] mAlphas -> mAlphas
    int mAlpha -> mAlpha
    boolean[] mIsLayerOn -> mIsLayerOn
    int mPreventInvalidateCount -> mPreventInvalidateCount
    void <init>(android.graphics.drawable.Drawable[]) -> <init>
    void invalidateSelf() -> invalidateSelf
    void beginBatchMode() -> beginBatchMode
    void endBatchMode() -> endBatchMode
    void setTransitionDuration(int) -> setTransitionDuration
    int getTransitionDuration() -> getTransitionDuration
    void resetInternal() -> resetInternal
    void reset() -> reset
    void fadeInLayer(int) -> fadeInLayer
    void fadeOutLayer(int) -> fadeOutLayer
    void fadeInAllLayers() -> fadeInAllLayers
    void fadeOutAllLayers() -> fadeOutAllLayers
    void fadeToLayer(int) -> fadeToLayer
    void fadeUpToLayer(int) -> fadeUpToLayer
    void finishTransitionImmediately() -> finishTransitionImmediately
    boolean updateAlphas(float) -> updateAlphas
    void draw(android.graphics.Canvas) -> draw
    void drawDrawableWithAlpha(android.graphics.Canvas,android.graphics.drawable.Drawable,int) -> drawDrawableWithAlpha
    void setAlpha(int) -> setAlpha
    int getAlpha() -> getAlpha
    long getCurrentTimeMs() -> getCurrentTimeMs
    int getTransitionState() -> getTransitionState
    boolean isLayerOn(int) -> isLayerOn
com.facebook.drawee.drawable.ForwardingDrawable -> com.facebook.drawee.drawable.ForwardingDrawable:
    android.graphics.drawable.Drawable mCurrentDelegate -> mCurrentDelegate
    com.facebook.drawee.drawable.DrawableProperties mDrawableProperties -> mDrawableProperties
    com.facebook.drawee.drawable.TransformCallback mTransformCallback -> mTransformCallback
    android.graphics.Matrix sTempTransform -> sTempTransform
    void <init>(android.graphics.drawable.Drawable) -> <init>
    android.graphics.drawable.Drawable setCurrent(android.graphics.drawable.Drawable) -> setCurrent
    android.graphics.drawable.Drawable setCurrentWithoutInvalidate(android.graphics.drawable.Drawable) -> setCurrentWithoutInvalidate
    int getOpacity() -> getOpacity
    void setAlpha(int) -> setAlpha
    void setColorFilter(android.graphics.ColorFilter) -> setColorFilter
    void setDither(boolean) -> setDither
    void setFilterBitmap(boolean) -> setFilterBitmap
    boolean setVisible(boolean,boolean) -> setVisible
    void onBoundsChange(android.graphics.Rect) -> onBoundsChange
    boolean isStateful() -> isStateful
    boolean onStateChange(int[]) -> onStateChange
    boolean onLevelChange(int) -> onLevelChange
    void draw(android.graphics.Canvas) -> draw
    int getIntrinsicWidth() -> getIntrinsicWidth
    int getIntrinsicHeight() -> getIntrinsicHeight
    boolean getPadding(android.graphics.Rect) -> getPadding
    android.graphics.drawable.Drawable mutate() -> mutate
    android.graphics.drawable.Drawable getCurrent() -> getCurrent
    android.graphics.drawable.Drawable setDrawable(android.graphics.drawable.Drawable) -> setDrawable
    android.graphics.drawable.Drawable getDrawable() -> getDrawable
    void invalidateDrawable(android.graphics.drawable.Drawable) -> invalidateDrawable
    void scheduleDrawable(android.graphics.drawable.Drawable,java.lang.Runnable,long) -> scheduleDrawable
    void unscheduleDrawable(android.graphics.drawable.Drawable,java.lang.Runnable) -> unscheduleDrawable
    void setTransformCallback(com.facebook.drawee.drawable.TransformCallback) -> setTransformCallback
    void getParentTransform(android.graphics.Matrix) -> getParentTransform
    void getTransform(android.graphics.Matrix) -> getTransform
    void getRootBounds(android.graphics.RectF) -> getRootBounds
    void getTransformedBounds(android.graphics.RectF) -> getTransformedBounds
    void setHotspot(float,float) -> setHotspot
    void <clinit>() -> <clinit>
com.facebook.drawee.drawable.MatrixDrawable -> com.facebook.drawee.drawable.MatrixDrawable:
    android.graphics.Matrix mMatrix -> mMatrix
    android.graphics.Matrix mDrawMatrix -> mDrawMatrix
    int mUnderlyingWidth -> mUnderlyingWidth
    int mUnderlyingHeight -> mUnderlyingHeight
    void <init>(android.graphics.drawable.Drawable,android.graphics.Matrix) -> <init>
    android.graphics.drawable.Drawable setCurrent(android.graphics.drawable.Drawable) -> setCurrent
    android.graphics.Matrix getMatrix() -> getMatrix
    void setMatrix(android.graphics.Matrix) -> setMatrix
    void draw(android.graphics.Canvas) -> draw
    void onBoundsChange(android.graphics.Rect) -> onBoundsChange
    void configureBoundsIfUnderlyingChanged() -> configureBoundsIfUnderlyingChanged
    void configureBounds() -> configureBounds
    void getTransform(android.graphics.Matrix) -> getTransform
com.facebook.drawee.drawable.OrientedDrawable -> com.facebook.drawee.drawable.OrientedDrawable:
    android.graphics.Matrix mRotationMatrix -> mRotationMatrix
    int mRotationAngle -> mRotationAngle
    android.graphics.Matrix mTempMatrix -> mTempMatrix
    android.graphics.RectF mTempRectF -> mTempRectF
    void <init>(android.graphics.drawable.Drawable,int) -> <init>
    void draw(android.graphics.Canvas) -> draw
    int getIntrinsicWidth() -> getIntrinsicWidth
    int getIntrinsicHeight() -> getIntrinsicHeight
    void onBoundsChange(android.graphics.Rect) -> onBoundsChange
    void getTransform(android.graphics.Matrix) -> getTransform
com.facebook.drawee.drawable.ProgressBarDrawable -> com.facebook.drawee.drawable.ProgressBarDrawable:
    android.graphics.Paint mPaint -> mPaint
    android.graphics.Path mPath -> mPath
    android.graphics.RectF mRect -> mRect
    int mBackgroundColor -> mBackgroundColor
    int mColor -> mColor
    int mPadding -> mPadding
    int mBarWidth -> mBarWidth
    int mLevel -> mLevel
    int mRadius -> mRadius
    boolean mHideWhenZero -> mHideWhenZero
    boolean mIsVertical -> mIsVertical
    void <init>() -> <init>
    void setColor(int) -> setColor
    int getColor() -> getColor
    void setBackgroundColor(int) -> setBackgroundColor
    int getBackgroundColor() -> getBackgroundColor
    void setPadding(int) -> setPadding
    boolean getPadding(android.graphics.Rect) -> getPadding
    void setBarWidth(int) -> setBarWidth
    int getBarWidth() -> getBarWidth
    void setHideWhenZero(boolean) -> setHideWhenZero
    boolean getHideWhenZero() -> getHideWhenZero
    void setRadius(int) -> setRadius
    int getRadius() -> getRadius
    void setIsVertical(boolean) -> setIsVertical
    boolean getIsVertical() -> getIsVertical
    boolean onLevelChange(int) -> onLevelChange
    void setAlpha(int) -> setAlpha
    void setColorFilter(android.graphics.ColorFilter) -> setColorFilter
    int getOpacity() -> getOpacity
    void draw(android.graphics.Canvas) -> draw
    android.graphics.drawable.Drawable cloneDrawable() -> cloneDrawable
    void drawHorizontalBar(android.graphics.Canvas,int,int) -> drawHorizontalBar
    void drawVerticalBar(android.graphics.Canvas,int,int) -> drawVerticalBar
    void drawBar(android.graphics.Canvas,int) -> drawBar
com.facebook.drawee.drawable.Rounded -> com.facebook.drawee.drawable.Rounded:
    void setCircle(boolean) -> setCircle
    boolean isCircle() -> isCircle
    void setRadius(float) -> setRadius
    void setRadii(float[]) -> setRadii
    float[] getRadii() -> getRadii
    void setBorder(int,float) -> setBorder
    int getBorderColor() -> getBorderColor
    float getBorderWidth() -> getBorderWidth
    void setPadding(float) -> setPadding
    float getPadding() -> getPadding
com.facebook.drawee.drawable.RoundedBitmapDrawable -> com.facebook.drawee.drawable.RoundedBitmapDrawable:
    boolean mIsCircle -> mIsCircle
    boolean mRadiiNonZero -> mRadiiNonZero
    float[] mCornerRadii -> mCornerRadii
    float[] mBorderRadii -> mBorderRadii
    android.graphics.RectF mRootBounds -> mRootBounds
    android.graphics.RectF mPrevRootBounds -> mPrevRootBounds
    android.graphics.RectF mBitmapBounds -> mBitmapBounds
    android.graphics.RectF mDrawableBounds -> mDrawableBounds
    android.graphics.Matrix mBoundsTransform -> mBoundsTransform
    android.graphics.Matrix mPrevBoundsTransform -> mPrevBoundsTransform
    android.graphics.Matrix mParentTransform -> mParentTransform
    android.graphics.Matrix mPrevParentTransform -> mPrevParentTransform
    android.graphics.Matrix mInverseParentTransform -> mInverseParentTransform
    android.graphics.Matrix mTransform -> mTransform
    float mBorderWidth -> mBorderWidth
    int mBorderColor -> mBorderColor
    float mPadding -> mPadding
    android.graphics.Path mPath -> mPath
    android.graphics.Path mBorderPath -> mBorderPath
    boolean mIsPathDirty -> mIsPathDirty
    android.graphics.Paint mPaint -> mPaint
    android.graphics.Paint mBorderPaint -> mBorderPaint
    boolean mIsShaderTransformDirty -> mIsShaderTransformDirty
    java.lang.ref.WeakReference mLastBitmap -> mLastBitmap
    com.facebook.drawee.drawable.TransformCallback mTransformCallback -> mTransformCallback
    void <init>(android.content.res.Resources,android.graphics.Bitmap) -> <init>
    void <init>(android.content.res.Resources,android.graphics.Bitmap,android.graphics.Paint) -> <init>
    com.facebook.drawee.drawable.RoundedBitmapDrawable fromBitmapDrawable(android.content.res.Resources,android.graphics.drawable.BitmapDrawable) -> fromBitmapDrawable
    void setCircle(boolean) -> setCircle
    boolean isCircle() -> isCircle
    void setRadius(float) -> setRadius
    void setRadii(float[]) -> setRadii
    float[] getRadii() -> getRadii
    void setBorder(int,float) -> setBorder
    int getBorderColor() -> getBorderColor
    float getBorderWidth() -> getBorderWidth
    void setPadding(float) -> setPadding
    float getPadding() -> getPadding
    void setTransformCallback(com.facebook.drawee.drawable.TransformCallback) -> setTransformCallback
    void setAlpha(int) -> setAlpha
    void setColorFilter(android.graphics.ColorFilter) -> setColorFilter
    void draw(android.graphics.Canvas) -> draw
    boolean shouldRound() -> shouldRound
    void updateTransform() -> updateTransform
    void updatePath() -> updatePath
    void updatePaint() -> updatePaint
com.facebook.drawee.drawable.RoundedColorDrawable -> com.facebook.drawee.drawable.RoundedColorDrawable:
    float[] mRadii -> mRadii
    float[] mBorderRadii -> mBorderRadii
    android.graphics.Paint mPaint -> mPaint
    boolean mIsCircle -> mIsCircle
    float mBorderWidth -> mBorderWidth
    float mPadding -> mPadding
    int mBorderColor -> mBorderColor
    android.graphics.Path mPath -> mPath
    android.graphics.Path mBorderPath -> mBorderPath
    int mColor -> mColor
    android.graphics.RectF mTempRect -> mTempRect
    int mAlpha -> mAlpha
    void <init>(int) -> <init>
    com.facebook.drawee.drawable.RoundedColorDrawable fromColorDrawable(android.graphics.drawable.ColorDrawable) -> fromColorDrawable
    void <init>(float[],int) -> <init>
    void <init>(float,int) -> <init>
    void onBoundsChange(android.graphics.Rect) -> onBoundsChange
    void draw(android.graphics.Canvas) -> draw
    void setCircle(boolean) -> setCircle
    boolean isCircle() -> isCircle
    void setRadii(float[]) -> setRadii
    float[] getRadii() -> getRadii
    void setRadius(float) -> setRadius
    void setColor(int) -> setColor
    int getColor() -> getColor
    void setBorder(int,float) -> setBorder
    int getBorderColor() -> getBorderColor
    float getBorderWidth() -> getBorderWidth
    void setPadding(float) -> setPadding
    float getPadding() -> getPadding
    void setAlpha(int) -> setAlpha
    int getAlpha() -> getAlpha
    void setColorFilter(android.graphics.ColorFilter) -> setColorFilter
    int getOpacity() -> getOpacity
    void updatePath() -> updatePath
com.facebook.drawee.drawable.RoundedCornersDrawable -> com.facebook.drawee.drawable.RoundedCornersDrawable:
    com.facebook.drawee.drawable.RoundedCornersDrawable$Type mType -> mType
    float[] mRadii -> mRadii
    float[] mBorderRadii -> mBorderRadii
    android.graphics.Paint mPaint -> mPaint
    boolean mIsCircle -> mIsCircle
    float mBorderWidth -> mBorderWidth
    int mBorderColor -> mBorderColor
    int mOverlayColor -> mOverlayColor
    float mPadding -> mPadding
    android.graphics.Path mPath -> mPath
    android.graphics.Path mBorderPath -> mBorderPath
    android.graphics.RectF mTempRectangle -> mTempRectangle
    void <init>(android.graphics.drawable.Drawable) -> <init>
    void setType(com.facebook.drawee.drawable.RoundedCornersDrawable$Type) -> setType
    void setCircle(boolean) -> setCircle
    boolean isCircle() -> isCircle
    void setRadius(float) -> setRadius
    void setRadii(float[]) -> setRadii
    float[] getRadii() -> getRadii
    void setOverlayColor(int) -> setOverlayColor
    int getOverlayColor() -> getOverlayColor
    void setBorder(int,float) -> setBorder
    int getBorderColor() -> getBorderColor
    float getBorderWidth() -> getBorderWidth
    void setPadding(float) -> setPadding
    float getPadding() -> getPadding
    void onBoundsChange(android.graphics.Rect) -> onBoundsChange
    void updatePath() -> updatePath
    void draw(android.graphics.Canvas) -> draw
com.facebook.drawee.drawable.RoundedCornersDrawable$1 -> com.facebook.drawee.drawable.RoundedCornersDrawable$1:
    int[] $SwitchMap$com$facebook$drawee$drawable$RoundedCornersDrawable$Type -> $SwitchMap$com$facebook$drawee$drawable$RoundedCornersDrawable$Type
    void <clinit>() -> <clinit>
com.facebook.drawee.drawable.RoundedCornersDrawable$Type -> com.facebook.drawee.drawable.RoundedCornersDrawable$Type:
    com.facebook.drawee.drawable.RoundedCornersDrawable$Type OVERLAY_COLOR -> OVERLAY_COLOR
    com.facebook.drawee.drawable.RoundedCornersDrawable$Type CLIPPING -> CLIPPING
    com.facebook.drawee.drawable.RoundedCornersDrawable$Type[] $VALUES -> $VALUES
    com.facebook.drawee.drawable.RoundedCornersDrawable$Type[] values() -> values
    com.facebook.drawee.drawable.RoundedCornersDrawable$Type valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.facebook.drawee.drawable.ScaleTypeDrawable -> com.facebook.drawee.drawable.ScaleTypeDrawable:
    com.facebook.drawee.drawable.ScalingUtils$ScaleType mScaleType -> mScaleType
    java.lang.Object mScaleTypeState -> mScaleTypeState
    android.graphics.PointF mFocusPoint -> mFocusPoint
    int mUnderlyingWidth -> mUnderlyingWidth
    int mUnderlyingHeight -> mUnderlyingHeight
    android.graphics.Matrix mDrawMatrix -> mDrawMatrix
    android.graphics.Matrix mTempMatrix -> mTempMatrix
    void <init>(android.graphics.drawable.Drawable,com.facebook.drawee.drawable.ScalingUtils$ScaleType) -> <init>
    android.graphics.drawable.Drawable setCurrent(android.graphics.drawable.Drawable) -> setCurrent
    com.facebook.drawee.drawable.ScalingUtils$ScaleType getScaleType() -> getScaleType
    void setScaleType(com.facebook.drawee.drawable.ScalingUtils$ScaleType) -> setScaleType
    android.graphics.PointF getFocusPoint() -> getFocusPoint
    void setFocusPoint(android.graphics.PointF) -> setFocusPoint
    void draw(android.graphics.Canvas) -> draw
    void onBoundsChange(android.graphics.Rect) -> onBoundsChange
    void configureBoundsIfUnderlyingChanged() -> configureBoundsIfUnderlyingChanged
    void configureBounds() -> configureBounds
    void getTransform(android.graphics.Matrix) -> getTransform
com.facebook.drawee.drawable.ScalingUtils -> com.facebook.drawee.drawable.ScalingUtils:
    void <init>() -> <init>
    com.facebook.drawee.drawable.ScaleTypeDrawable getActiveScaleTypeDrawable(android.graphics.drawable.Drawable) -> getActiveScaleTypeDrawable
com.facebook.drawee.drawable.ScalingUtils$AbstractScaleType -> com.facebook.drawee.drawable.ScalingUtils$AbstractScaleType:
    void <init>() -> <init>
    android.graphics.Matrix getTransform(android.graphics.Matrix,android.graphics.Rect,int,int,float,float) -> getTransform
    void getTransformImpl(android.graphics.Matrix,android.graphics.Rect,int,int,float,float,float,float) -> getTransformImpl
com.facebook.drawee.drawable.ScalingUtils$InterpolatingScaleType -> com.facebook.drawee.drawable.ScalingUtils$InterpolatingScaleType:
    com.facebook.drawee.drawable.ScalingUtils$ScaleType mScaleTypeFrom -> mScaleTypeFrom
    com.facebook.drawee.drawable.ScalingUtils$ScaleType mScaleTypeTo -> mScaleTypeTo
    android.graphics.Rect mBoundsFrom -> mBoundsFrom
    android.graphics.Rect mBoundsTo -> mBoundsTo
    float[] mMatrixValuesFrom -> mMatrixValuesFrom
    float[] mMatrixValuesTo -> mMatrixValuesTo
    float[] mMatrixValuesInterpolated -> mMatrixValuesInterpolated
    float mInterpolatingValue -> mInterpolatingValue
    void <init>(com.facebook.drawee.drawable.ScalingUtils$ScaleType,com.facebook.drawee.drawable.ScalingUtils$ScaleType,android.graphics.Rect,android.graphics.Rect) -> <init>
    void <init>(com.facebook.drawee.drawable.ScalingUtils$ScaleType,com.facebook.drawee.drawable.ScalingUtils$ScaleType) -> <init>
    com.facebook.drawee.drawable.ScalingUtils$ScaleType getScaleTypeFrom() -> getScaleTypeFrom
    com.facebook.drawee.drawable.ScalingUtils$ScaleType getScaleTypeTo() -> getScaleTypeTo
    android.graphics.Rect getBoundsFrom() -> getBoundsFrom
    android.graphics.Rect getBoundsTo() -> getBoundsTo
    void setValue(float) -> setValue
    float getValue() -> getValue
    java.lang.Object getState() -> getState
    android.graphics.Matrix getTransform(android.graphics.Matrix,android.graphics.Rect,int,int,float,float) -> getTransform
    java.lang.String toString() -> toString
com.facebook.drawee.drawable.ScalingUtils$ScaleType -> com.facebook.drawee.drawable.ScalingUtils$ScaleType:
    com.facebook.drawee.drawable.ScalingUtils$ScaleType FIT_XY -> FIT_XY
    com.facebook.drawee.drawable.ScalingUtils$ScaleType FIT_START -> FIT_START
    com.facebook.drawee.drawable.ScalingUtils$ScaleType FIT_CENTER -> FIT_CENTER
    com.facebook.drawee.drawable.ScalingUtils$ScaleType FIT_END -> FIT_END
    com.facebook.drawee.drawable.ScalingUtils$ScaleType CENTER -> CENTER
    com.facebook.drawee.drawable.ScalingUtils$ScaleType CENTER_INSIDE -> CENTER_INSIDE
    com.facebook.drawee.drawable.ScalingUtils$ScaleType CENTER_CROP -> CENTER_CROP
    com.facebook.drawee.drawable.ScalingUtils$ScaleType FOCUS_CROP -> FOCUS_CROP
    android.graphics.Matrix getTransform(android.graphics.Matrix,android.graphics.Rect,int,int,float,float) -> getTransform
    void <clinit>() -> <clinit>
com.facebook.drawee.drawable.ScalingUtils$ScaleTypeCenter -> com.facebook.drawee.drawable.ScalingUtils$ScaleTypeCenter:
    com.facebook.drawee.drawable.ScalingUtils$ScaleType INSTANCE -> INSTANCE
    void <init>() -> <init>
    void getTransformImpl(android.graphics.Matrix,android.graphics.Rect,int,int,float,float,float,float) -> getTransformImpl
    java.lang.String toString() -> toString
    void <clinit>() -> <clinit>
com.facebook.drawee.drawable.ScalingUtils$ScaleTypeCenterCrop -> com.facebook.drawee.drawable.ScalingUtils$ScaleTypeCenterCrop:
    com.facebook.drawee.drawable.ScalingUtils$ScaleType INSTANCE -> INSTANCE
    void <init>() -> <init>
    void getTransformImpl(android.graphics.Matrix,android.graphics.Rect,int,int,float,float,float,float) -> getTransformImpl
    java.lang.String toString() -> toString
    void <clinit>() -> <clinit>
com.facebook.drawee.drawable.ScalingUtils$ScaleTypeCenterInside -> com.facebook.drawee.drawable.ScalingUtils$ScaleTypeCenterInside:
    com.facebook.drawee.drawable.ScalingUtils$ScaleType INSTANCE -> INSTANCE
    void <init>() -> <init>
    void getTransformImpl(android.graphics.Matrix,android.graphics.Rect,int,int,float,float,float,float) -> getTransformImpl
    java.lang.String toString() -> toString
    void <clinit>() -> <clinit>
com.facebook.drawee.drawable.ScalingUtils$ScaleTypeFitCenter -> com.facebook.drawee.drawable.ScalingUtils$ScaleTypeFitCenter:
    com.facebook.drawee.drawable.ScalingUtils$ScaleType INSTANCE -> INSTANCE
    void <init>() -> <init>
    void getTransformImpl(android.graphics.Matrix,android.graphics.Rect,int,int,float,float,float,float) -> getTransformImpl
    java.lang.String toString() -> toString
    void <clinit>() -> <clinit>
com.facebook.drawee.drawable.ScalingUtils$ScaleTypeFitEnd -> com.facebook.drawee.drawable.ScalingUtils$ScaleTypeFitEnd:
    com.facebook.drawee.drawable.ScalingUtils$ScaleType INSTANCE -> INSTANCE
    void <init>() -> <init>
    void getTransformImpl(android.graphics.Matrix,android.graphics.Rect,int,int,float,float,float,float) -> getTransformImpl
    java.lang.String toString() -> toString
    void <clinit>() -> <clinit>
com.facebook.drawee.drawable.ScalingUtils$ScaleTypeFitStart -> com.facebook.drawee.drawable.ScalingUtils$ScaleTypeFitStart:
    com.facebook.drawee.drawable.ScalingUtils$ScaleType INSTANCE -> INSTANCE
    void <init>() -> <init>
    void getTransformImpl(android.graphics.Matrix,android.graphics.Rect,int,int,float,float,float,float) -> getTransformImpl
    java.lang.String toString() -> toString
    void <clinit>() -> <clinit>
com.facebook.drawee.drawable.ScalingUtils$ScaleTypeFitXY -> com.facebook.drawee.drawable.ScalingUtils$ScaleTypeFitXY:
    com.facebook.drawee.drawable.ScalingUtils$ScaleType INSTANCE -> INSTANCE
    void <init>() -> <init>
    void getTransformImpl(android.graphics.Matrix,android.graphics.Rect,int,int,float,float,float,float) -> getTransformImpl
    java.lang.String toString() -> toString
    void <clinit>() -> <clinit>
com.facebook.drawee.drawable.ScalingUtils$ScaleTypeFocusCrop -> com.facebook.drawee.drawable.ScalingUtils$ScaleTypeFocusCrop:
    com.facebook.drawee.drawable.ScalingUtils$ScaleType INSTANCE -> INSTANCE
    void <init>() -> <init>
    void getTransformImpl(android.graphics.Matrix,android.graphics.Rect,int,int,float,float,float,float) -> getTransformImpl
    java.lang.String toString() -> toString
    void <clinit>() -> <clinit>
com.facebook.drawee.drawable.ScalingUtils$StatefulScaleType -> com.facebook.drawee.drawable.ScalingUtils$StatefulScaleType:
    java.lang.Object getState() -> getState
com.facebook.drawee.drawable.TransformAwareDrawable -> com.facebook.drawee.drawable.TransformAwareDrawable:
    void setTransformCallback(com.facebook.drawee.drawable.TransformCallback) -> setTransformCallback
com.facebook.drawee.drawable.TransformCallback -> com.facebook.drawee.drawable.TransformCallback:
    void getTransform(android.graphics.Matrix) -> getTransform
    void getRootBounds(android.graphics.RectF) -> getRootBounds
com.facebook.drawee.drawable.VisibilityAwareDrawable -> com.facebook.drawee.drawable.VisibilityAwareDrawable:
    void setVisibilityCallback(com.facebook.drawee.drawable.VisibilityCallback) -> setVisibilityCallback
com.facebook.drawee.drawable.VisibilityCallback -> com.facebook.drawee.drawable.VisibilityCallback:
    void onVisibilityChange(boolean) -> onVisibilityChange
    void onDraw() -> onDraw
com.facebook.drawee.generic.GenericDraweeHierarchy -> com.facebook.drawee.generic.GenericDraweeHierarchy:
    int BACKGROUND_IMAGE_INDEX -> BACKGROUND_IMAGE_INDEX
    int PLACEHOLDER_IMAGE_INDEX -> PLACEHOLDER_IMAGE_INDEX
    int ACTUAL_IMAGE_INDEX -> ACTUAL_IMAGE_INDEX
    int PROGRESS_BAR_IMAGE_INDEX -> PROGRESS_BAR_IMAGE_INDEX
    int RETRY_IMAGE_INDEX -> RETRY_IMAGE_INDEX
    int FAILURE_IMAGE_INDEX -> FAILURE_IMAGE_INDEX
    int OVERLAY_IMAGES_INDEX -> OVERLAY_IMAGES_INDEX
    android.graphics.drawable.Drawable mEmptyActualImageDrawable -> mEmptyActualImageDrawable
    android.content.res.Resources mResources -> mResources
    int mPressedStateOverlayIndex -> mPressedStateOverlayIndex
    com.facebook.drawee.generic.RoundingParams mRoundingParams -> mRoundingParams
    com.facebook.drawee.generic.RootDrawable mTopLevelDrawable -> mTopLevelDrawable
    com.facebook.drawee.drawable.FadeDrawable mFadeDrawable -> mFadeDrawable
    com.facebook.drawee.drawable.ForwardingDrawable mActualImageWrapper -> mActualImageWrapper
    void <init>(com.facebook.drawee.generic.GenericDraweeHierarchyBuilder) -> <init>
    android.graphics.drawable.Drawable buildActualImageBranch(android.graphics.drawable.Drawable,com.facebook.drawee.drawable.ScalingUtils$ScaleType,android.graphics.PointF,android.graphics.Matrix,android.graphics.ColorFilter) -> buildActualImageBranch
    android.graphics.drawable.Drawable buildBranch(android.graphics.drawable.Drawable,com.facebook.drawee.drawable.ScalingUtils$ScaleType) -> buildBranch
    void resetActualImages() -> resetActualImages
    void resetFade() -> resetFade
    void fadeOutBranches() -> fadeOutBranches
    void fadeInLayer(int) -> fadeInLayer
    void fadeOutLayer(int) -> fadeOutLayer
    void setProgress(float) -> setProgress
    android.graphics.drawable.Drawable getTopLevelDrawable() -> getTopLevelDrawable
    void reset() -> reset
    void setImage(android.graphics.drawable.Drawable,float,boolean) -> setImage
    void setProgress(float,boolean) -> setProgress
    void setFailure(java.lang.Throwable) -> setFailure
    void setRetry(java.lang.Throwable) -> setRetry
    void setControllerOverlay(android.graphics.drawable.Drawable) -> setControllerOverlay
    com.facebook.drawee.drawable.DrawableParent getParentDrawableAtIndex(int) -> getParentDrawableAtIndex
    void setChildDrawableAtIndex(int,android.graphics.drawable.Drawable) -> setChildDrawableAtIndex
    com.facebook.drawee.drawable.ScaleTypeDrawable getScaleTypeDrawableAtIndex(int) -> getScaleTypeDrawableAtIndex
    boolean hasScaleTypeDrawableAtIndex(int) -> hasScaleTypeDrawableAtIndex
    void setFadeDuration(int) -> setFadeDuration
    int getFadeDuration() -> getFadeDuration
    void setActualImageFocusPoint(android.graphics.PointF) -> setActualImageFocusPoint
    void setActualImageScaleType(com.facebook.drawee.drawable.ScalingUtils$ScaleType) -> setActualImageScaleType
    com.facebook.drawee.drawable.ScalingUtils$ScaleType getActualImageScaleType() -> getActualImageScaleType
    void setActualImageColorFilter(android.graphics.ColorFilter) -> setActualImageColorFilter
    void getActualImageBounds(android.graphics.RectF) -> getActualImageBounds
    void setPlaceholderImage(android.graphics.drawable.Drawable) -> setPlaceholderImage
    void setPlaceholderImage(android.graphics.drawable.Drawable,com.facebook.drawee.drawable.ScalingUtils$ScaleType) -> setPlaceholderImage
    boolean hasPlaceholderImage() -> hasPlaceholderImage
    void setPlaceholderImageFocusPoint(android.graphics.PointF) -> setPlaceholderImageFocusPoint
    void setPlaceholderImage(int) -> setPlaceholderImage
    void setPlaceholderImage(int,com.facebook.drawee.drawable.ScalingUtils$ScaleType) -> setPlaceholderImage
    void setFailureImage(android.graphics.drawable.Drawable) -> setFailureImage
    void setFailureImage(android.graphics.drawable.Drawable,com.facebook.drawee.drawable.ScalingUtils$ScaleType) -> setFailureImage
    void setFailureImage(int) -> setFailureImage
    void setFailureImage(int,com.facebook.drawee.drawable.ScalingUtils$ScaleType) -> setFailureImage
    void setRetryImage(android.graphics.drawable.Drawable) -> setRetryImage
    void setRetryImage(android.graphics.drawable.Drawable,com.facebook.drawee.drawable.ScalingUtils$ScaleType) -> setRetryImage
    void setRetryImage(int) -> setRetryImage
    void setRetryImage(int,com.facebook.drawee.drawable.ScalingUtils$ScaleType) -> setRetryImage
    void setProgressBarImage(android.graphics.drawable.Drawable) -> setProgressBarImage
    void setProgressBarImage(android.graphics.drawable.Drawable,com.facebook.drawee.drawable.ScalingUtils$ScaleType) -> setProgressBarImage
    void setProgressBarImage(int) -> setProgressBarImage
    void setProgressBarImage(int,com.facebook.drawee.drawable.ScalingUtils$ScaleType) -> setProgressBarImage
    void setBackgroundImage(android.graphics.drawable.Drawable) -> setBackgroundImage
    void setOverlayImage(int,android.graphics.drawable.Drawable) -> setOverlayImage
    void setOverlayImage(android.graphics.drawable.Drawable) -> setOverlayImage
    void setRoundingParams(com.facebook.drawee.generic.RoundingParams) -> setRoundingParams
    com.facebook.drawee.generic.RoundingParams getRoundingParams() -> getRoundingParams
    void setPressedStateOverlayImage(android.graphics.drawable.Drawable) -> setPressedStateOverlayImage
com.facebook.drawee.generic.GenericDraweeHierarchyBuilder -> com.facebook.drawee.generic.GenericDraweeHierarchyBuilder:
    int DEFAULT_FADE_DURATION -> DEFAULT_FADE_DURATION
    com.facebook.drawee.drawable.ScalingUtils$ScaleType DEFAULT_SCALE_TYPE -> DEFAULT_SCALE_TYPE
    com.facebook.drawee.drawable.ScalingUtils$ScaleType DEFAULT_ACTUAL_IMAGE_SCALE_TYPE -> DEFAULT_ACTUAL_IMAGE_SCALE_TYPE
    android.content.res.Resources mResources -> mResources
    int mFadeDuration -> mFadeDuration
    float mDesiredAspectRatio -> mDesiredAspectRatio
    android.graphics.drawable.Drawable mPlaceholderImage -> mPlaceholderImage
    com.facebook.drawee.drawable.ScalingUtils$ScaleType mPlaceholderImageScaleType -> mPlaceholderImageScaleType
    android.graphics.drawable.Drawable mRetryImage -> mRetryImage
    com.facebook.drawee.drawable.ScalingUtils$ScaleType mRetryImageScaleType -> mRetryImageScaleType
    android.graphics.drawable.Drawable mFailureImage -> mFailureImage
    com.facebook.drawee.drawable.ScalingUtils$ScaleType mFailureImageScaleType -> mFailureImageScaleType
    android.graphics.drawable.Drawable mProgressBarImage -> mProgressBarImage
    com.facebook.drawee.drawable.ScalingUtils$ScaleType mProgressBarImageScaleType -> mProgressBarImageScaleType
    com.facebook.drawee.drawable.ScalingUtils$ScaleType mActualImageScaleType -> mActualImageScaleType
    android.graphics.Matrix mActualImageMatrix -> mActualImageMatrix
    android.graphics.PointF mActualImageFocusPoint -> mActualImageFocusPoint
    android.graphics.ColorFilter mActualImageColorFilter -> mActualImageColorFilter
    android.graphics.drawable.Drawable mBackground -> mBackground
    java.util.List mOverlays -> mOverlays
    android.graphics.drawable.Drawable mPressedStateOverlay -> mPressedStateOverlay
    com.facebook.drawee.generic.RoundingParams mRoundingParams -> mRoundingParams
    void <init>(android.content.res.Resources) -> <init>
    com.facebook.drawee.generic.GenericDraweeHierarchyBuilder newInstance(android.content.res.Resources) -> newInstance
    void init() -> init
    com.facebook.drawee.generic.GenericDraweeHierarchyBuilder reset() -> reset
    android.content.res.Resources getResources() -> getResources
    com.facebook.drawee.generic.GenericDraweeHierarchyBuilder setFadeDuration(int) -> setFadeDuration
    int getFadeDuration() -> getFadeDuration
    com.facebook.drawee.generic.GenericDraweeHierarchyBuilder setDesiredAspectRatio(float) -> setDesiredAspectRatio
    float getDesiredAspectRatio() -> getDesiredAspectRatio
    com.facebook.drawee.generic.GenericDraweeHierarchyBuilder setPlaceholderImage(android.graphics.drawable.Drawable) -> setPlaceholderImage
    com.facebook.drawee.generic.GenericDraweeHierarchyBuilder setPlaceholderImage(int) -> setPlaceholderImage
    android.graphics.drawable.Drawable getPlaceholderImage() -> getPlaceholderImage
    com.facebook.drawee.generic.GenericDraweeHierarchyBuilder setPlaceholderImageScaleType(com.facebook.drawee.drawable.ScalingUtils$ScaleType) -> setPlaceholderImageScaleType
    com.facebook.drawee.drawable.ScalingUtils$ScaleType getPlaceholderImageScaleType() -> getPlaceholderImageScaleType
    com.facebook.drawee.generic.GenericDraweeHierarchyBuilder setPlaceholderImage(android.graphics.drawable.Drawable,com.facebook.drawee.drawable.ScalingUtils$ScaleType) -> setPlaceholderImage
    com.facebook.drawee.generic.GenericDraweeHierarchyBuilder setPlaceholderImage(int,com.facebook.drawee.drawable.ScalingUtils$ScaleType) -> setPlaceholderImage
    com.facebook.drawee.generic.GenericDraweeHierarchyBuilder setRetryImage(android.graphics.drawable.Drawable) -> setRetryImage
    com.facebook.drawee.generic.GenericDraweeHierarchyBuilder setRetryImage(int) -> setRetryImage
    android.graphics.drawable.Drawable getRetryImage() -> getRetryImage
    com.facebook.drawee.generic.GenericDraweeHierarchyBuilder setRetryImageScaleType(com.facebook.drawee.drawable.ScalingUtils$ScaleType) -> setRetryImageScaleType
    com.facebook.drawee.drawable.ScalingUtils$ScaleType getRetryImageScaleType() -> getRetryImageScaleType
    com.facebook.drawee.generic.GenericDraweeHierarchyBuilder setRetryImage(android.graphics.drawable.Drawable,com.facebook.drawee.drawable.ScalingUtils$ScaleType) -> setRetryImage
    com.facebook.drawee.generic.GenericDraweeHierarchyBuilder setRetryImage(int,com.facebook.drawee.drawable.ScalingUtils$ScaleType) -> setRetryImage
    com.facebook.drawee.generic.GenericDraweeHierarchyBuilder setFailureImage(android.graphics.drawable.Drawable) -> setFailureImage
    com.facebook.drawee.generic.GenericDraweeHierarchyBuilder setFailureImage(int) -> setFailureImage
    android.graphics.drawable.Drawable getFailureImage() -> getFailureImage
    com.facebook.drawee.generic.GenericDraweeHierarchyBuilder setFailureImageScaleType(com.facebook.drawee.drawable.ScalingUtils$ScaleType) -> setFailureImageScaleType
    com.facebook.drawee.drawable.ScalingUtils$ScaleType getFailureImageScaleType() -> getFailureImageScaleType
    com.facebook.drawee.generic.GenericDraweeHierarchyBuilder setFailureImage(android.graphics.drawable.Drawable,com.facebook.drawee.drawable.ScalingUtils$ScaleType) -> setFailureImage
    com.facebook.drawee.generic.GenericDraweeHierarchyBuilder setFailureImage(int,com.facebook.drawee.drawable.ScalingUtils$ScaleType) -> setFailureImage
    com.facebook.drawee.generic.GenericDraweeHierarchyBuilder setProgressBarImage(android.graphics.drawable.Drawable) -> setProgressBarImage
    com.facebook.drawee.generic.GenericDraweeHierarchyBuilder setProgressBarImage(int) -> setProgressBarImage
    android.graphics.drawable.Drawable getProgressBarImage() -> getProgressBarImage
    com.facebook.drawee.generic.GenericDraweeHierarchyBuilder setProgressBarImageScaleType(com.facebook.drawee.drawable.ScalingUtils$ScaleType) -> setProgressBarImageScaleType
    com.facebook.drawee.drawable.ScalingUtils$ScaleType getProgressBarImageScaleType() -> getProgressBarImageScaleType
    com.facebook.drawee.generic.GenericDraweeHierarchyBuilder setProgressBarImage(android.graphics.drawable.Drawable,com.facebook.drawee.drawable.ScalingUtils$ScaleType) -> setProgressBarImage
    com.facebook.drawee.generic.GenericDraweeHierarchyBuilder setProgressBarImage(int,com.facebook.drawee.drawable.ScalingUtils$ScaleType) -> setProgressBarImage
    com.facebook.drawee.generic.GenericDraweeHierarchyBuilder setActualImageScaleType(com.facebook.drawee.drawable.ScalingUtils$ScaleType) -> setActualImageScaleType
    com.facebook.drawee.drawable.ScalingUtils$ScaleType getActualImageScaleType() -> getActualImageScaleType
    com.facebook.drawee.generic.GenericDraweeHierarchyBuilder setActualImageMatrix(android.graphics.Matrix) -> setActualImageMatrix
    android.graphics.Matrix getActualImageMatrix() -> getActualImageMatrix
    com.facebook.drawee.generic.GenericDraweeHierarchyBuilder setActualImageFocusPoint(android.graphics.PointF) -> setActualImageFocusPoint
    android.graphics.PointF getActualImageFocusPoint() -> getActualImageFocusPoint
    com.facebook.drawee.generic.GenericDraweeHierarchyBuilder setActualImageColorFilter(android.graphics.ColorFilter) -> setActualImageColorFilter
    android.graphics.ColorFilter getActualImageColorFilter() -> getActualImageColorFilter
    com.facebook.drawee.generic.GenericDraweeHierarchyBuilder setBackground(android.graphics.drawable.Drawable) -> setBackground
    android.graphics.drawable.Drawable getBackground() -> getBackground
    com.facebook.drawee.generic.GenericDraweeHierarchyBuilder setOverlays(java.util.List) -> setOverlays
    com.facebook.drawee.generic.GenericDraweeHierarchyBuilder setOverlay(android.graphics.drawable.Drawable) -> setOverlay
    java.util.List getOverlays() -> getOverlays
    com.facebook.drawee.generic.GenericDraweeHierarchyBuilder setPressedStateOverlay(android.graphics.drawable.Drawable) -> setPressedStateOverlay
    android.graphics.drawable.Drawable getPressedStateOverlay() -> getPressedStateOverlay
    com.facebook.drawee.generic.GenericDraweeHierarchyBuilder setRoundingParams(com.facebook.drawee.generic.RoundingParams) -> setRoundingParams
    com.facebook.drawee.generic.RoundingParams getRoundingParams() -> getRoundingParams
    void validate() -> validate
    com.facebook.drawee.generic.GenericDraweeHierarchy build() -> build
    void <clinit>() -> <clinit>
com.facebook.drawee.generic.GenericDraweeHierarchyInflater -> com.facebook.drawee.generic.GenericDraweeHierarchyInflater:
    void <init>() -> <init>
    com.facebook.drawee.generic.GenericDraweeHierarchy inflateHierarchy(android.content.Context,android.util.AttributeSet) -> inflateHierarchy
    com.facebook.drawee.generic.GenericDraweeHierarchyBuilder inflateBuilder(android.content.Context,android.util.AttributeSet) -> inflateBuilder
    com.facebook.drawee.generic.GenericDraweeHierarchyBuilder updateBuilder(com.facebook.drawee.generic.GenericDraweeHierarchyBuilder,android.content.Context,android.util.AttributeSet) -> updateBuilder
    com.facebook.drawee.generic.RoundingParams getRoundingParams(com.facebook.drawee.generic.GenericDraweeHierarchyBuilder) -> getRoundingParams
    android.graphics.drawable.Drawable getDrawable(android.content.Context,android.content.res.TypedArray,int) -> getDrawable
    com.facebook.drawee.drawable.ScalingUtils$ScaleType getScaleTypeFromXml(android.content.res.TypedArray,int) -> getScaleTypeFromXml
com.facebook.drawee.generic.RootDrawable -> com.facebook.drawee.generic.RootDrawable:
    android.graphics.drawable.Drawable mControllerOverlay -> mControllerOverlay
    com.facebook.drawee.drawable.VisibilityCallback mVisibilityCallback -> mVisibilityCallback
    void <init>(android.graphics.drawable.Drawable) -> <init>
    int getIntrinsicWidth() -> getIntrinsicWidth
    int getIntrinsicHeight() -> getIntrinsicHeight
    void setVisibilityCallback(com.facebook.drawee.drawable.VisibilityCallback) -> setVisibilityCallback
    boolean setVisible(boolean,boolean) -> setVisible
    void draw(android.graphics.Canvas) -> draw
    void setControllerOverlay(android.graphics.drawable.Drawable) -> setControllerOverlay
com.facebook.drawee.generic.RoundingParams -> com.facebook.drawee.generic.RoundingParams:
    com.facebook.drawee.generic.RoundingParams$RoundingMethod mRoundingMethod -> mRoundingMethod
    boolean mRoundAsCircle -> mRoundAsCircle
    float[] mCornersRadii -> mCornersRadii
    int mOverlayColor -> mOverlayColor
    float mBorderWidth -> mBorderWidth
    int mBorderColor -> mBorderColor
    float mPadding -> mPadding
    void <init>() -> <init>
    com.facebook.drawee.generic.RoundingParams setRoundAsCircle(boolean) -> setRoundAsCircle
    boolean getRoundAsCircle() -> getRoundAsCircle
    com.facebook.drawee.generic.RoundingParams setCornersRadius(float) -> setCornersRadius
    com.facebook.drawee.generic.RoundingParams setCornersRadii(float,float,float,float) -> setCornersRadii
    com.facebook.drawee.generic.RoundingParams setCornersRadii(float[]) -> setCornersRadii
    float[] getCornersRadii() -> getCornersRadii
    com.facebook.drawee.generic.RoundingParams setRoundingMethod(com.facebook.drawee.generic.RoundingParams$RoundingMethod) -> setRoundingMethod
    com.facebook.drawee.generic.RoundingParams$RoundingMethod getRoundingMethod() -> getRoundingMethod
    com.facebook.drawee.generic.RoundingParams setOverlayColor(int) -> setOverlayColor
    int getOverlayColor() -> getOverlayColor
    float[] getOrCreateRoundedCornersRadii() -> getOrCreateRoundedCornersRadii
    com.facebook.drawee.generic.RoundingParams asCircle() -> asCircle
    com.facebook.drawee.generic.RoundingParams fromCornersRadius(float) -> fromCornersRadius
    com.facebook.drawee.generic.RoundingParams fromCornersRadii(float,float,float,float) -> fromCornersRadii
    com.facebook.drawee.generic.RoundingParams fromCornersRadii(float[]) -> fromCornersRadii
    com.facebook.drawee.generic.RoundingParams setBorderWidth(float) -> setBorderWidth
    float getBorderWidth() -> getBorderWidth
    com.facebook.drawee.generic.RoundingParams setBorderColor(int) -> setBorderColor
    int getBorderColor() -> getBorderColor
    com.facebook.drawee.generic.RoundingParams setBorder(int,float) -> setBorder
    com.facebook.drawee.generic.RoundingParams setPadding(float) -> setPadding
    float getPadding() -> getPadding
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
com.facebook.drawee.generic.RoundingParams$RoundingMethod -> com.facebook.drawee.generic.RoundingParams$RoundingMethod:
    com.facebook.drawee.generic.RoundingParams$RoundingMethod OVERLAY_COLOR -> OVERLAY_COLOR
    com.facebook.drawee.generic.RoundingParams$RoundingMethod BITMAP_ONLY -> BITMAP_ONLY
    com.facebook.drawee.generic.RoundingParams$RoundingMethod[] $VALUES -> $VALUES
    com.facebook.drawee.generic.RoundingParams$RoundingMethod[] values() -> values
    com.facebook.drawee.generic.RoundingParams$RoundingMethod valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.facebook.drawee.generic.WrappingUtils -> com.facebook.drawee.generic.WrappingUtils:
    android.graphics.drawable.Drawable sEmptyDrawable -> sEmptyDrawable
    void <init>() -> <init>
    android.graphics.drawable.Drawable maybeWrapWithScaleType(android.graphics.drawable.Drawable,com.facebook.drawee.drawable.ScalingUtils$ScaleType) -> maybeWrapWithScaleType
    android.graphics.drawable.Drawable maybeWrapWithScaleType(android.graphics.drawable.Drawable,com.facebook.drawee.drawable.ScalingUtils$ScaleType,android.graphics.PointF) -> maybeWrapWithScaleType
    android.graphics.drawable.Drawable maybeWrapWithMatrix(android.graphics.drawable.Drawable,android.graphics.Matrix) -> maybeWrapWithMatrix
    com.facebook.drawee.drawable.ScaleTypeDrawable wrapChildWithScaleType(com.facebook.drawee.drawable.DrawableParent,com.facebook.drawee.drawable.ScalingUtils$ScaleType) -> wrapChildWithScaleType
    void updateOverlayColorRounding(com.facebook.drawee.drawable.DrawableParent,com.facebook.drawee.generic.RoundingParams) -> updateOverlayColorRounding
    void updateLeafRounding(com.facebook.drawee.drawable.DrawableParent,com.facebook.drawee.generic.RoundingParams,android.content.res.Resources) -> updateLeafRounding
    android.graphics.drawable.Drawable maybeWrapWithRoundedOverlayColor(android.graphics.drawable.Drawable,com.facebook.drawee.generic.RoundingParams) -> maybeWrapWithRoundedOverlayColor
    android.graphics.drawable.Drawable maybeApplyLeafRounding(android.graphics.drawable.Drawable,com.facebook.drawee.generic.RoundingParams,android.content.res.Resources) -> maybeApplyLeafRounding
    android.graphics.drawable.Drawable applyLeafRounding(android.graphics.drawable.Drawable,com.facebook.drawee.generic.RoundingParams,android.content.res.Resources) -> applyLeafRounding
    void applyRoundingParams(com.facebook.drawee.drawable.Rounded,com.facebook.drawee.generic.RoundingParams) -> applyRoundingParams
    void resetRoundingParams(com.facebook.drawee.drawable.Rounded) -> resetRoundingParams
    com.facebook.drawee.drawable.DrawableParent findDrawableParentForLeaf(com.facebook.drawee.drawable.DrawableParent) -> findDrawableParentForLeaf
    void <clinit>() -> <clinit>
com.facebook.drawee.gestures.GestureDetector -> com.facebook.drawee.gestures.GestureDetector:
    com.facebook.drawee.gestures.GestureDetector$ClickListener mClickListener -> mClickListener
    float mSingleTapSlopPx -> mSingleTapSlopPx
    boolean mIsCapturingGesture -> mIsCapturingGesture
    boolean mIsClickCandidate -> mIsClickCandidate
    long mActionDownTime -> mActionDownTime
    float mActionDownX -> mActionDownX
    float mActionDownY -> mActionDownY
    void <init>(android.content.Context) -> <init>
    com.facebook.drawee.gestures.GestureDetector newInstance(android.content.Context) -> newInstance
    void init() -> init
    void reset() -> reset
    void setClickListener(com.facebook.drawee.gestures.GestureDetector$ClickListener) -> setClickListener
    boolean isCapturingGesture() -> isCapturingGesture
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
com.facebook.drawee.gestures.GestureDetector$ClickListener -> com.facebook.drawee.gestures.GestureDetector$ClickListener:
    boolean onClick() -> onClick
com.facebook.drawee.interfaces.DraweeController -> com.facebook.drawee.interfaces.DraweeController:
    com.facebook.drawee.interfaces.DraweeHierarchy getHierarchy() -> getHierarchy
    void setHierarchy(com.facebook.drawee.interfaces.DraweeHierarchy) -> setHierarchy
    void onAttach() -> onAttach
    void onDetach() -> onDetach
    void onViewportVisibilityHint(boolean) -> onViewportVisibilityHint
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    android.graphics.drawable.Animatable getAnimatable() -> getAnimatable
    void setContentDescription(java.lang.String) -> setContentDescription
    java.lang.String getContentDescription() -> getContentDescription
com.facebook.drawee.interfaces.DraweeHierarchy -> com.facebook.drawee.interfaces.DraweeHierarchy:
    android.graphics.drawable.Drawable getTopLevelDrawable() -> getTopLevelDrawable
com.facebook.drawee.interfaces.SettableDraweeHierarchy -> com.facebook.drawee.interfaces.SettableDraweeHierarchy:
    void reset() -> reset
    void setImage(android.graphics.drawable.Drawable,float,boolean) -> setImage
    void setProgress(float,boolean) -> setProgress
    void setFailure(java.lang.Throwable) -> setFailure
    void setRetry(java.lang.Throwable) -> setRetry
    void setControllerOverlay(android.graphics.drawable.Drawable) -> setControllerOverlay
com.facebook.drawee.interfaces.SimpleDraweeControllerBuilder -> com.facebook.drawee.interfaces.SimpleDraweeControllerBuilder:
    com.facebook.drawee.interfaces.SimpleDraweeControllerBuilder setCallerContext(java.lang.Object) -> setCallerContext
    com.facebook.drawee.interfaces.SimpleDraweeControllerBuilder setUri(android.net.Uri) -> setUri
    com.facebook.drawee.interfaces.SimpleDraweeControllerBuilder setUri(java.lang.String) -> setUri
    com.facebook.drawee.interfaces.SimpleDraweeControllerBuilder setOldController(com.facebook.drawee.interfaces.DraweeController) -> setOldController
    com.facebook.drawee.interfaces.SimpleDraweeControllerBuilder setCallerViewContext(android.content.Context) -> setCallerViewContext
    com.facebook.drawee.interfaces.DraweeController build() -> build
com.facebook.drawee.view.AspectRatioMeasure -> com.facebook.drawee.view.AspectRatioMeasure:
    void <init>() -> <init>
    void updateMeasureSpec(com.facebook.drawee.view.AspectRatioMeasure$Spec,float,android.view.ViewGroup$LayoutParams,int,int) -> updateMeasureSpec
    boolean shouldAdjust(int) -> shouldAdjust
com.facebook.drawee.view.AspectRatioMeasure$Spec -> com.facebook.drawee.view.AspectRatioMeasure$Spec:
    int width -> width
    int height -> height
    void <init>() -> <init>
com.facebook.drawee.view.DraweeHolder -> com.facebook.drawee.view.DraweeHolder:
    boolean mIsControllerAttached -> mIsControllerAttached
    boolean mIsHolderAttached -> mIsHolderAttached
    boolean mIsVisible -> mIsVisible
    com.facebook.drawee.interfaces.DraweeHierarchy mHierarchy -> mHierarchy
    com.facebook.drawee.interfaces.DraweeController mController -> mController
    com.facebook.drawee.components.DraweeEventTracker mEventTracker -> mEventTracker
    com.facebook.drawee.view.DraweeHolder create(com.facebook.drawee.interfaces.DraweeHierarchy,android.content.Context) -> create
    void registerWithContext(android.content.Context) -> registerWithContext
    void <init>(com.facebook.drawee.interfaces.DraweeHierarchy) -> <init>
    void onAttach() -> onAttach
    boolean isAttached() -> isAttached
    void onDetach() -> onDetach
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    void onVisibilityChange(boolean) -> onVisibilityChange
    void onDraw() -> onDraw
    void setVisibilityCallback(com.facebook.drawee.drawable.VisibilityCallback) -> setVisibilityCallback
    void setController(com.facebook.drawee.interfaces.DraweeController) -> setController
    com.facebook.drawee.interfaces.DraweeController getController() -> getController
    void setHierarchy(com.facebook.drawee.interfaces.DraweeHierarchy) -> setHierarchy
    com.facebook.drawee.interfaces.DraweeHierarchy getHierarchy() -> getHierarchy
    boolean hasHierarchy() -> hasHierarchy
    android.graphics.drawable.Drawable getTopLevelDrawable() -> getTopLevelDrawable
    com.facebook.drawee.components.DraweeEventTracker getDraweeEventTracker() -> getDraweeEventTracker
    void attachController() -> attachController
    void detachController() -> detachController
    void attachOrDetachController() -> attachOrDetachController
    java.lang.String toString() -> toString
    boolean isControllerValid() -> isControllerValid
com.facebook.drawee.view.DraweeTransition -> com.facebook.drawee.view.DraweeTransition:
    java.lang.String PROPNAME_BOUNDS -> PROPNAME_BOUNDS
    com.facebook.drawee.drawable.ScalingUtils$ScaleType mFromScale -> mFromScale
    com.facebook.drawee.drawable.ScalingUtils$ScaleType mToScale -> mToScale
    android.transition.TransitionSet createTransitionSet(com.facebook.drawee.drawable.ScalingUtils$ScaleType,com.facebook.drawee.drawable.ScalingUtils$ScaleType) -> createTransitionSet
    void <init>(com.facebook.drawee.drawable.ScalingUtils$ScaleType,com.facebook.drawee.drawable.ScalingUtils$ScaleType) -> <init>
    void captureStartValues(android.transition.TransitionValues) -> captureStartValues
    void captureEndValues(android.transition.TransitionValues) -> captureEndValues
    android.animation.Animator createAnimator(android.view.ViewGroup,android.transition.TransitionValues,android.transition.TransitionValues) -> createAnimator
    void captureValues(android.transition.TransitionValues) -> captureValues
    com.facebook.drawee.drawable.ScalingUtils$ScaleType access$000(com.facebook.drawee.view.DraweeTransition) -> access$000
com.facebook.drawee.view.DraweeTransition$1 -> com.facebook.drawee.view.DraweeTransition$1:
    com.facebook.drawee.drawable.ScalingUtils$InterpolatingScaleType val$scaleType -> val$scaleType
    com.facebook.drawee.view.DraweeTransition this$0 -> this$0
    void <init>(com.facebook.drawee.view.DraweeTransition,com.facebook.drawee.drawable.ScalingUtils$InterpolatingScaleType) -> <init>
    void onAnimationUpdate(android.animation.ValueAnimator) -> onAnimationUpdate
com.facebook.drawee.view.DraweeTransition$2 -> com.facebook.drawee.view.DraweeTransition$2:
    com.facebook.drawee.view.GenericDraweeView val$draweeView -> val$draweeView
    com.facebook.drawee.view.DraweeTransition this$0 -> this$0
    void <init>(com.facebook.drawee.view.DraweeTransition,com.facebook.drawee.view.GenericDraweeView) -> <init>
    void onAnimationEnd(android.animation.Animator) -> onAnimationEnd
com.facebook.drawee.view.DraweeView -> com.facebook.drawee.view.DraweeView:
    com.facebook.drawee.view.AspectRatioMeasure$Spec mMeasureSpec -> mMeasureSpec
    float mAspectRatio -> mAspectRatio
    com.facebook.drawee.view.DraweeHolder mDraweeHolder -> mDraweeHolder
    boolean mInitialised -> mInitialised
    void <init>(android.content.Context) -> <init>
    void <init>(android.content.Context,android.util.AttributeSet) -> <init>
    void <init>(android.content.Context,android.util.AttributeSet,int) -> <init>
    void <init>(android.content.Context,android.util.AttributeSet,int,int) -> <init>
    void init(android.content.Context) -> init
    void setHierarchy(com.facebook.drawee.interfaces.DraweeHierarchy) -> setHierarchy
    com.facebook.drawee.interfaces.DraweeHierarchy getHierarchy() -> getHierarchy
    boolean hasHierarchy() -> hasHierarchy
    android.graphics.drawable.Drawable getTopLevelDrawable() -> getTopLevelDrawable
    void setController(com.facebook.drawee.interfaces.DraweeController) -> setController
    com.facebook.drawee.interfaces.DraweeController getController() -> getController
    boolean hasController() -> hasController
    void onAttachedToWindow() -> onAttachedToWindow
    void onDetachedFromWindow() -> onDetachedFromWindow
    void onStartTemporaryDetach() -> onStartTemporaryDetach
    void onFinishTemporaryDetach() -> onFinishTemporaryDetach
    void onAttach() -> onAttach
    void onDetach() -> onDetach
    void doAttach() -> doAttach
    void doDetach() -> doDetach
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    void setImageDrawable(android.graphics.drawable.Drawable) -> setImageDrawable
    void setImageBitmap(android.graphics.Bitmap) -> setImageBitmap
    void setImageResource(int) -> setImageResource
    void setImageURI(android.net.Uri) -> setImageURI
    void setAspectRatio(float) -> setAspectRatio
    float getAspectRatio() -> getAspectRatio
    void onMeasure(int,int) -> onMeasure
    java.lang.String toString() -> toString
com.facebook.drawee.view.GenericDraweeView -> com.facebook.drawee.view.GenericDraweeView:
    void <init>(android.content.Context,com.facebook.drawee.generic.GenericDraweeHierarchy) -> <init>
    void <init>(android.content.Context) -> <init>
    void <init>(android.content.Context,android.util.AttributeSet) -> <init>
    void <init>(android.content.Context,android.util.AttributeSet,int) -> <init>
    void <init>(android.content.Context,android.util.AttributeSet,int,int) -> <init>
    void inflateHierarchy(android.content.Context,android.util.AttributeSet) -> inflateHierarchy
com.facebook.drawee.view.MultiDraweeHolder -> com.facebook.drawee.view.MultiDraweeHolder:
    boolean mIsAttached -> mIsAttached
    java.util.ArrayList mHolders -> mHolders
    void <init>() -> <init>
    void onAttach() -> onAttach
    void onDetach() -> onDetach
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    void clear() -> clear
    void add(com.facebook.drawee.view.DraweeHolder) -> add
    void add(int,com.facebook.drawee.view.DraweeHolder) -> add
    void remove(int) -> remove
    com.facebook.drawee.view.DraweeHolder get(int) -> get
    int size() -> size
    void draw(android.graphics.Canvas) -> draw
    boolean verifyDrawable(android.graphics.drawable.Drawable) -> verifyDrawable
com.facebook.drawee.view.SimpleDraweeView -> com.facebook.drawee.view.SimpleDraweeView:
    com.facebook.common.internal.Supplier sDraweeControllerBuilderSupplier -> sDraweeControllerBuilderSupplier
    java.util.Map mAttirbuteHelper -> mAttirbuteHelper
    com.facebook.drawee.interfaces.SimpleDraweeControllerBuilder mSimpleDraweeControllerBuilder -> mSimpleDraweeControllerBuilder
    java.lang.String mPluginPackageName -> mPluginPackageName
    void initialize(com.facebook.common.internal.Supplier) -> initialize
    void shutDown() -> shutDown
    void <init>(android.content.Context,com.facebook.drawee.generic.GenericDraweeHierarchy) -> <init>
    void <init>(android.content.Context) -> <init>
    void <init>(android.content.Context,android.util.AttributeSet) -> <init>
    void <init>(android.content.Context,android.util.AttributeSet,int) -> <init>
    void <init>(android.content.Context,android.util.AttributeSet,int,int) -> <init>
    void init(android.content.Context,android.util.AttributeSet) -> init
    com.facebook.drawee.interfaces.SimpleDraweeControllerBuilder getControllerBuilder() -> getControllerBuilder
    void setImageURI(android.net.Uri) -> setImageURI
    void setImageURI(java.lang.String) -> setImageURI
    void setImageURI(android.net.Uri,java.lang.Object) -> setImageURI
    void setImageURI(java.lang.String,java.lang.Object) -> setImageURI
    void setActualImageResource(int) -> setActualImageResource
    void setActualImageResource(int,java.lang.Object) -> setActualImageResource
    void setImageResource(int) -> setImageResource
    android.content.Context getCallerViewContext() -> getCallerViewContext
    com.facebook.drawee.view.SimpleDraweeView$AttributeHelper getAtrributeHelper(android.content.Context,java.lang.String) -> getAtrributeHelper
    void <clinit>() -> <clinit>
com.facebook.drawee.view.SimpleDraweeView$AttributeHelper -> com.facebook.drawee.view.SimpleDraweeView$AttributeHelper:
    java.util.Map mStyleablesMap -> mStyleablesMap
    java.util.Map mStyleableMap -> mStyleableMap
    org.qiyi.pluginlibrary.utils.ResourcesToolForPlugin rtfp -> rtfp
    void <init>(android.content.Context,java.lang.String) -> <init>
    int[] getStyleables(java.lang.String) -> getStyleables
    int getStyleable(java.lang.String) -> getStyleable
com.facebook.imageformat.DefaultImageFormatChecker -> com.facebook.imageformat.DefaultImageFormatChecker:
    int MAX_HEADER_LENGTH -> MAX_HEADER_LENGTH
    int SIMPLE_WEBP_HEADER_LENGTH -> SIMPLE_WEBP_HEADER_LENGTH
    int EXTENDED_WEBP_HEADER_LENGTH -> EXTENDED_WEBP_HEADER_LENGTH
    byte[] JPEG_HEADER -> JPEG_HEADER
    int JPEG_HEADER_LENGTH -> JPEG_HEADER_LENGTH
    byte[] PNG_HEADER -> PNG_HEADER
    int PNG_HEADER_LENGTH -> PNG_HEADER_LENGTH
    byte[] GIF_HEADER_87A -> GIF_HEADER_87A
    byte[] GIF_HEADER_89A -> GIF_HEADER_89A
    int GIF_HEADER_LENGTH -> GIF_HEADER_LENGTH
    byte[] BMP_HEADER -> BMP_HEADER
    int BMP_HEADER_LENGTH -> BMP_HEADER_LENGTH
    void <init>() -> <init>
    int getHeaderSize() -> getHeaderSize
    com.facebook.imageformat.ImageFormat determineFormat(byte[],int) -> determineFormat
    com.facebook.imageformat.ImageFormat getWebpFormat(byte[],int) -> getWebpFormat
    boolean isJpegHeader(byte[],int) -> isJpegHeader
    boolean isPngHeader(byte[],int) -> isPngHeader
    boolean isGifHeader(byte[],int) -> isGifHeader
    boolean isBmpHeader(byte[],int) -> isBmpHeader
    void <clinit>() -> <clinit>
com.facebook.imageformat.DefaultImageFormats -> com.facebook.imageformat.DefaultImageFormats:
    com.facebook.imageformat.ImageFormat JPEG -> JPEG
    com.facebook.imageformat.ImageFormat PNG -> PNG
    com.facebook.imageformat.ImageFormat GIF -> GIF
    com.facebook.imageformat.ImageFormat BMP -> BMP
    com.facebook.imageformat.ImageFormat WEBP_SIMPLE -> WEBP_SIMPLE
    com.facebook.imageformat.ImageFormat WEBP_LOSSLESS -> WEBP_LOSSLESS
    com.facebook.imageformat.ImageFormat WEBP_EXTENDED -> WEBP_EXTENDED
    com.facebook.imageformat.ImageFormat WEBP_EXTENDED_WITH_ALPHA -> WEBP_EXTENDED_WITH_ALPHA
    com.facebook.imageformat.ImageFormat WEBP_ANIMATED -> WEBP_ANIMATED
    com.facebook.common.internal.ImmutableList sAllDefaultFormats -> sAllDefaultFormats
    boolean isWebpFormat(com.facebook.imageformat.ImageFormat) -> isWebpFormat
    boolean isStaticWebpFormat(com.facebook.imageformat.ImageFormat) -> isStaticWebpFormat
    java.util.List getDefaultFormats() -> getDefaultFormats
    void <init>() -> <init>
    void <clinit>() -> <clinit>
com.facebook.imageformat.ImageFormat -> com.facebook.imageformat.ImageFormat:
    com.facebook.imageformat.ImageFormat UNKNOWN -> UNKNOWN
    java.lang.String mFileExtension -> mFileExtension
    java.lang.String mName -> mName
    void <init>(java.lang.String,java.lang.String) -> <init>
    java.lang.String getFileExtension() -> getFileExtension
    java.lang.String toString() -> toString
    java.lang.String getName() -> getName
    void <clinit>() -> <clinit>
com.facebook.imageformat.ImageFormat$FormatChecker -> com.facebook.imageformat.ImageFormat$FormatChecker:
    int getHeaderSize() -> getHeaderSize
    com.facebook.imageformat.ImageFormat determineFormat(byte[],int) -> determineFormat
com.facebook.imageformat.ImageFormatChecker -> com.facebook.imageformat.ImageFormatChecker:
    com.facebook.imageformat.ImageFormatChecker sInstance -> sInstance
    int mMaxHeaderLength -> mMaxHeaderLength
    java.util.List mCustomImageFormatCheckers -> mCustomImageFormatCheckers
    com.facebook.imageformat.ImageFormat$FormatChecker mDefaultFormatChecker -> mDefaultFormatChecker
    void <init>() -> <init>
    void setCustomImageFormatCheckers(java.util.List) -> setCustomImageFormatCheckers
    com.facebook.imageformat.ImageFormat determineImageFormat(java.io.InputStream) -> determineImageFormat
    void updateMaxHeaderLength() -> updateMaxHeaderLength
    int readHeaderFromStream(int,java.io.InputStream,byte[]) -> readHeaderFromStream
    com.facebook.imageformat.ImageFormatChecker getInstance() -> getInstance
    com.facebook.imageformat.ImageFormat getImageFormat(java.io.InputStream) -> getImageFormat
    com.facebook.imageformat.ImageFormat getImageFormat_WrapIOException(java.io.InputStream) -> getImageFormat_WrapIOException
    com.facebook.imageformat.ImageFormat getImageFormat(java.lang.String) -> getImageFormat
com.facebook.imageformat.ImageFormatCheckerUtils -> com.facebook.imageformat.ImageFormatCheckerUtils:
    byte[] asciiBytes(java.lang.String) -> asciiBytes
    boolean startsWithPattern(byte[],byte[]) -> startsWithPattern
    void <init>() -> <init>
com.facebook.imagepipeline.animated.base.AbstractAnimatedDrawable -> com.facebook.imagepipeline.animated.base.AbstractAnimatedDrawable:
    java.lang.Class TAG -> TAG
    long WATCH_DOG_TIMER_POLL_INTERVAL_MS -> WATCH_DOG_TIMER_POLL_INTERVAL_MS
    long WATCH_DOG_TIMER_MIN_TIMEOUT_MS -> WATCH_DOG_TIMER_MIN_TIMEOUT_MS
    int POLL_FOR_RENDERED_FRAME_MS -> POLL_FOR_RENDERED_FRAME_MS
    int NO_FRAME -> NO_FRAME
    java.util.concurrent.ScheduledExecutorService mScheduledExecutorServiceForUiThread -> mScheduledExecutorServiceForUiThread
    com.facebook.imagepipeline.animated.base.AnimatedDrawableDiagnostics mAnimatedDrawableDiagnostics -> mAnimatedDrawableDiagnostics
    com.facebook.common.time.MonotonicClock mMonotonicClock -> mMonotonicClock
    int mDurationMs -> mDurationMs
    int mFrameCount -> mFrameCount
    int mLoopCount -> mLoopCount
    android.graphics.Paint mPaint -> mPaint
    android.graphics.Rect mDstRect -> mDstRect
    android.graphics.Paint mTransparentPaint -> mTransparentPaint
    java.lang.String mLogId -> mLogId
    com.facebook.imagepipeline.animated.base.AnimatedDrawableCachingBackend mAnimatedDrawableBackend -> mAnimatedDrawableBackend
    long mStartTimeMs -> mStartTimeMs
    int mScheduledFrameNumber -> mScheduledFrameNumber
    int mScheduledFrameMonotonicNumber -> mScheduledFrameMonotonicNumber
    int mPendingRenderedFrameNumber -> mPendingRenderedFrameNumber
    int mPendingRenderedFrameMonotonicNumber -> mPendingRenderedFrameMonotonicNumber
    int mLastDrawnFrameNumber -> mLastDrawnFrameNumber
    int mLastDrawnFrameMonotonicNumber -> mLastDrawnFrameMonotonicNumber
    com.facebook.common.references.CloseableReference mLastDrawnFrame -> mLastDrawnFrame
    boolean mWaitingForDraw -> mWaitingForDraw
    long mLastInvalidateTimeMs -> mLastInvalidateTimeMs
    boolean mIsRunning -> mIsRunning
    boolean mHaveWatchdogScheduled -> mHaveWatchdogScheduled
    float mSx -> mSx
    float mSy -> mSy
    boolean mApplyTransformation -> mApplyTransformation
    boolean mInvalidateTaskScheduled -> mInvalidateTaskScheduled
    long mNextFrameTaskMs -> mNextFrameTaskMs
    boolean mIsPaused -> mIsPaused
    java.lang.Runnable mStartTask -> mStartTask
    java.lang.Runnable mNextFrameTask -> mNextFrameTask
    java.lang.Runnable mInvalidateTask -> mInvalidateTask
    java.lang.Runnable mWatchdogTask -> mWatchdogTask
    void <init>(java.util.concurrent.ScheduledExecutorService,com.facebook.imagepipeline.animated.base.AnimatedDrawableCachingBackend,com.facebook.imagepipeline.animated.base.AnimatedDrawableDiagnostics,com.facebook.common.time.MonotonicClock) -> <init>
    void resetToPreviewFrame() -> resetToPreviewFrame
    void finalize() -> finalize
    void setLogId(java.lang.String) -> setLogId
    int getIntrinsicWidth() -> getIntrinsicWidth
    int getIntrinsicHeight() -> getIntrinsicHeight
    void setAlpha(int) -> setAlpha
    void setColorFilter(android.graphics.ColorFilter) -> setColorFilter
    int getOpacity() -> getOpacity
    void onBoundsChange(android.graphics.Rect) -> onBoundsChange
    void onStart() -> onStart
    void onNextFrame() -> onNextFrame
    void computeAndScheduleNextFrame(boolean) -> computeAndScheduleNextFrame
    void draw(android.graphics.Canvas) -> draw
    void scheduleInvalidatePoll() -> scheduleInvalidatePoll
    boolean didLastDrawRender() -> didLastDrawRender
    boolean renderFrame(android.graphics.Canvas,int,int) -> renderFrame
    void doWatchdogCheck() -> doWatchdogCheck
    void doInvalidateSelf() -> doInvalidateSelf
    boolean isWaitingForDraw() -> isWaitingForDraw
    boolean isWaitingForNextFrame() -> isWaitingForNextFrame
    int getScheduledFrameNumber() -> getScheduledFrameNumber
    void start() -> start
    void stop() -> stop
    void pause() -> pause
    boolean isRunning() -> isRunning
    boolean onLevelChange(int) -> onLevelChange
    void dropCaches() -> dropCaches
    int getDuration() -> getDuration
    int getFrameCount() -> getFrameCount
    int getLoopCount() -> getLoopCount
    com.facebook.imagepipeline.animated.base.AnimatedDrawableCachingBackend getAnimatedDrawableBackend() -> getAnimatedDrawableBackend
    void access$000(com.facebook.imagepipeline.animated.base.AbstractAnimatedDrawable) -> access$000
    java.lang.Class access$100() -> access$100
    java.lang.String access$200(com.facebook.imagepipeline.animated.base.AbstractAnimatedDrawable) -> access$200
    void access$300(com.facebook.imagepipeline.animated.base.AbstractAnimatedDrawable) -> access$300
    boolean access$402(com.facebook.imagepipeline.animated.base.AbstractAnimatedDrawable,boolean) -> access$402
    void access$500(com.facebook.imagepipeline.animated.base.AbstractAnimatedDrawable) -> access$500
    void access$600(com.facebook.imagepipeline.animated.base.AbstractAnimatedDrawable) -> access$600
    void <clinit>() -> <clinit>
com.facebook.imagepipeline.animated.base.AbstractAnimatedDrawable$1 -> com.facebook.imagepipeline.animated.base.AbstractAnimatedDrawable$1:
    com.facebook.imagepipeline.animated.base.AbstractAnimatedDrawable this$0 -> this$0
    void <init>(com.facebook.imagepipeline.animated.base.AbstractAnimatedDrawable) -> <init>
    void run() -> run
com.facebook.imagepipeline.animated.base.AbstractAnimatedDrawable$2 -> com.facebook.imagepipeline.animated.base.AbstractAnimatedDrawable$2:
    com.facebook.imagepipeline.animated.base.AbstractAnimatedDrawable this$0 -> this$0
    void <init>(com.facebook.imagepipeline.animated.base.AbstractAnimatedDrawable) -> <init>
    void run() -> run
com.facebook.imagepipeline.animated.base.AbstractAnimatedDrawable$3 -> com.facebook.imagepipeline.animated.base.AbstractAnimatedDrawable$3:
    com.facebook.imagepipeline.animated.base.AbstractAnimatedDrawable this$0 -> this$0
    void <init>(com.facebook.imagepipeline.animated.base.AbstractAnimatedDrawable) -> <init>
    void run() -> run
com.facebook.imagepipeline.animated.base.AbstractAnimatedDrawable$4 -> com.facebook.imagepipeline.animated.base.AbstractAnimatedDrawable$4:
    com.facebook.imagepipeline.animated.base.AbstractAnimatedDrawable this$0 -> this$0
    void <init>(com.facebook.imagepipeline.animated.base.AbstractAnimatedDrawable) -> <init>
    void run() -> run
com.facebook.imagepipeline.animated.base.AnimatableDrawable -> com.facebook.imagepipeline.animated.base.AnimatableDrawable:
    android.animation.ValueAnimator createValueAnimator() -> createValueAnimator
    android.animation.ValueAnimator createValueAnimator(int) -> createValueAnimator
    android.animation.ValueAnimator$AnimatorUpdateListener createAnimatorUpdateListener() -> createAnimatorUpdateListener
com.facebook.imagepipeline.animated.base.AnimatedDrawable -> com.facebook.imagepipeline.animated.base.AnimatedDrawable:
    void <init>(java.util.concurrent.ScheduledExecutorService,com.facebook.imagepipeline.animated.base.AnimatedDrawableCachingBackend,com.facebook.imagepipeline.animated.base.AnimatedDrawableDiagnostics,com.facebook.common.time.MonotonicClock) -> <init>
    android.animation.ValueAnimator createValueAnimator(int) -> createValueAnimator
    android.animation.ValueAnimator createValueAnimator() -> createValueAnimator
    android.animation.ValueAnimator$AnimatorUpdateListener createAnimatorUpdateListener() -> createAnimatorUpdateListener
com.facebook.imagepipeline.animated.base.AnimatedDrawable$1 -> com.facebook.imagepipeline.animated.base.AnimatedDrawable$1:
    com.facebook.imagepipeline.animated.base.AnimatedDrawable this$0 -> this$0
    void <init>(com.facebook.imagepipeline.animated.base.AnimatedDrawable) -> <init>
    void onAnimationUpdate(android.animation.ValueAnimator) -> onAnimationUpdate
com.facebook.imagepipeline.animated.base.AnimatedDrawableBackend -> com.facebook.imagepipeline.animated.base.AnimatedDrawableBackend:
    com.facebook.imagepipeline.animated.base.AnimatedImageResult getAnimatedImageResult() -> getAnimatedImageResult
    int getDurationMs() -> getDurationMs
    int getFrameCount() -> getFrameCount
    int getLoopCount() -> getLoopCount
    int getWidth() -> getWidth
    int getHeight() -> getHeight
    int getRenderedWidth() -> getRenderedWidth
    int getRenderedHeight() -> getRenderedHeight
    com.facebook.imagepipeline.animated.base.AnimatedDrawableFrameInfo getFrameInfo(int) -> getFrameInfo
    void renderFrame(int,android.graphics.Canvas) -> renderFrame
    int getFrameForTimestampMs(int) -> getFrameForTimestampMs
    int getTimestampMsForFrame(int) -> getTimestampMsForFrame
    int getDurationMsForFrame(int) -> getDurationMsForFrame
    int getFrameForPreview() -> getFrameForPreview
    com.facebook.imagepipeline.animated.base.AnimatedDrawableBackend forNewBounds(android.graphics.Rect) -> forNewBounds
    int getMemoryUsage() -> getMemoryUsage
    com.facebook.common.references.CloseableReference getPreDecodedFrame(int) -> getPreDecodedFrame
    boolean hasPreDecodedFrame(int) -> hasPreDecodedFrame
    void dropCaches() -> dropCaches
com.facebook.imagepipeline.animated.base.AnimatedDrawableCachingBackend -> com.facebook.imagepipeline.animated.base.AnimatedDrawableCachingBackend:
    com.facebook.common.references.CloseableReference getBitmapForFrame(int) -> getBitmapForFrame
    com.facebook.common.references.CloseableReference getPreviewBitmap() -> getPreviewBitmap
    void appendDebugOptionString(java.lang.StringBuilder) -> appendDebugOptionString
    com.facebook.imagepipeline.animated.base.AnimatedDrawableCachingBackend forNewBounds(android.graphics.Rect) -> forNewBounds
com.facebook.imagepipeline.animated.base.AnimatedDrawableDiagnostics -> com.facebook.imagepipeline.animated.base.AnimatedDrawableDiagnostics:
    void setBackend(com.facebook.imagepipeline.animated.base.AnimatedDrawableCachingBackend) -> setBackend
    void onStartMethodBegin() -> onStartMethodBegin
    void onStartMethodEnd() -> onStartMethodEnd
    void onNextFrameMethodBegin() -> onNextFrameMethodBegin
    void onNextFrameMethodEnd() -> onNextFrameMethodEnd
    void incrementDroppedFrames(int) -> incrementDroppedFrames
    void incrementDrawnFrames(int) -> incrementDrawnFrames
    void onDrawMethodBegin() -> onDrawMethodBegin
    void onDrawMethodEnd() -> onDrawMethodEnd
    void drawDebugOverlay(android.graphics.Canvas,android.graphics.Rect) -> drawDebugOverlay
com.facebook.imagepipeline.animated.base.AnimatedDrawableFrameInfo -> com.facebook.imagepipeline.animated.base.AnimatedDrawableFrameInfo:
    int frameNumber -> frameNumber
    int xOffset -> xOffset
    int yOffset -> yOffset
    int width -> width
    int height -> height
    com.facebook.imagepipeline.animated.base.AnimatedDrawableFrameInfo$BlendOperation blendOperation -> blendOperation
    com.facebook.imagepipeline.animated.base.AnimatedDrawableFrameInfo$DisposalMethod disposalMethod -> disposalMethod
    void <init>(int,int,int,int,int,com.facebook.imagepipeline.animated.base.AnimatedDrawableFrameInfo$BlendOperation,com.facebook.imagepipeline.animated.base.AnimatedDrawableFrameInfo$DisposalMethod) -> <init>
com.facebook.imagepipeline.animated.base.AnimatedDrawableFrameInfo$BlendOperation -> com.facebook.imagepipeline.animated.base.AnimatedDrawableFrameInfo$BlendOperation:
    com.facebook.imagepipeline.animated.base.AnimatedDrawableFrameInfo$BlendOperation BLEND_WITH_PREVIOUS -> BLEND_WITH_PREVIOUS
    com.facebook.imagepipeline.animated.base.AnimatedDrawableFrameInfo$BlendOperation NO_BLEND -> NO_BLEND
    com.facebook.imagepipeline.animated.base.AnimatedDrawableFrameInfo$BlendOperation[] $VALUES -> $VALUES
    com.facebook.imagepipeline.animated.base.AnimatedDrawableFrameInfo$BlendOperation[] values() -> values
    com.facebook.imagepipeline.animated.base.AnimatedDrawableFrameInfo$BlendOperation valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.facebook.imagepipeline.animated.base.AnimatedDrawableFrameInfo$DisposalMethod -> com.facebook.imagepipeline.animated.base.AnimatedDrawableFrameInfo$DisposalMethod:
    com.facebook.imagepipeline.animated.base.AnimatedDrawableFrameInfo$DisposalMethod DISPOSE_DO_NOT -> DISPOSE_DO_NOT
    com.facebook.imagepipeline.animated.base.AnimatedDrawableFrameInfo$DisposalMethod DISPOSE_TO_BACKGROUND -> DISPOSE_TO_BACKGROUND
    com.facebook.imagepipeline.animated.base.AnimatedDrawableFrameInfo$DisposalMethod DISPOSE_TO_PREVIOUS -> DISPOSE_TO_PREVIOUS
    com.facebook.imagepipeline.animated.base.AnimatedDrawableFrameInfo$DisposalMethod[] $VALUES -> $VALUES
    com.facebook.imagepipeline.animated.base.AnimatedDrawableFrameInfo$DisposalMethod[] values() -> values
    com.facebook.imagepipeline.animated.base.AnimatedDrawableFrameInfo$DisposalMethod valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.facebook.imagepipeline.animated.base.AnimatedDrawableOptions -> com.facebook.imagepipeline.animated.base.AnimatedDrawableOptions:
    com.facebook.imagepipeline.animated.base.AnimatedDrawableOptions DEFAULTS -> DEFAULTS
    boolean forceKeepAllFramesInMemory -> forceKeepAllFramesInMemory
    boolean allowPrefetching -> allowPrefetching
    int maximumBytes -> maximumBytes
    boolean enableDebugging -> enableDebugging
    void <init>(com.facebook.imagepipeline.animated.base.AnimatedDrawableOptionsBuilder) -> <init>
    com.facebook.imagepipeline.animated.base.AnimatedDrawableOptionsBuilder newBuilder() -> newBuilder
    void <clinit>() -> <clinit>
com.facebook.imagepipeline.animated.base.AnimatedDrawableOptionsBuilder -> com.facebook.imagepipeline.animated.base.AnimatedDrawableOptionsBuilder:
    boolean mForceKeepAllFramesInMemory -> mForceKeepAllFramesInMemory
    boolean mAllowPrefetching -> mAllowPrefetching
    int mMaximumBytes -> mMaximumBytes
    boolean mEnableDebugging -> mEnableDebugging
    void <init>() -> <init>
    boolean getForceKeepAllFramesInMemory() -> getForceKeepAllFramesInMemory
    com.facebook.imagepipeline.animated.base.AnimatedDrawableOptionsBuilder setForceKeepAllFramesInMemory(boolean) -> setForceKeepAllFramesInMemory
    boolean getAllowPrefetching() -> getAllowPrefetching
    com.facebook.imagepipeline.animated.base.AnimatedDrawableOptionsBuilder setAllowPrefetching(boolean) -> setAllowPrefetching
    int getMaximumBytes() -> getMaximumBytes
    com.facebook.imagepipeline.animated.base.AnimatedDrawableOptionsBuilder setMaximumBytes(int) -> setMaximumBytes
    boolean getEnableDebugging() -> getEnableDebugging
    com.facebook.imagepipeline.animated.base.AnimatedDrawableOptionsBuilder setEnableDebugging(boolean) -> setEnableDebugging
    com.facebook.imagepipeline.animated.base.AnimatedDrawableOptions build() -> build
com.facebook.imagepipeline.animated.base.AnimatedImage -> com.facebook.imagepipeline.animated.base.AnimatedImage:
    int LOOP_COUNT_INFINITE -> LOOP_COUNT_INFINITE
    void dispose() -> dispose
    int getWidth() -> getWidth
    int getHeight() -> getHeight
    int getFrameCount() -> getFrameCount
    int getDuration() -> getDuration
    int[] getFrameDurations() -> getFrameDurations
    int getLoopCount() -> getLoopCount
    com.facebook.imagepipeline.animated.base.AnimatedImageFrame getFrame(int) -> getFrame
    boolean doesRenderSupportScaling() -> doesRenderSupportScaling
    int getSizeInBytes() -> getSizeInBytes
    com.facebook.imagepipeline.animated.base.AnimatedDrawableFrameInfo getFrameInfo(int) -> getFrameInfo
com.facebook.imagepipeline.animated.base.AnimatedImageFrame -> com.facebook.imagepipeline.animated.base.AnimatedImageFrame:
    void dispose() -> dispose
    void renderFrame(int,int,android.graphics.Bitmap) -> renderFrame
    int getDurationMs() -> getDurationMs
    int getWidth() -> getWidth
    int getHeight() -> getHeight
    int getXOffset() -> getXOffset
    int getYOffset() -> getYOffset
com.facebook.imagepipeline.animated.base.AnimatedImageResult -> com.facebook.imagepipeline.animated.base.AnimatedImageResult:
    com.facebook.imagepipeline.animated.base.AnimatedImage mImage -> mImage
    int mFrameForPreview -> mFrameForPreview
    com.facebook.common.references.CloseableReference mPreviewBitmap -> mPreviewBitmap
    java.util.List mDecodedFrames -> mDecodedFrames
    void <init>(com.facebook.imagepipeline.animated.base.AnimatedImageResultBuilder) -> <init>
    void <init>(com.facebook.imagepipeline.animated.base.AnimatedImage) -> <init>
    com.facebook.imagepipeline.animated.base.AnimatedImageResult forAnimatedImage(com.facebook.imagepipeline.animated.base.AnimatedImage) -> forAnimatedImage
    com.facebook.imagepipeline.animated.base.AnimatedImageResultBuilder newBuilder(com.facebook.imagepipeline.animated.base.AnimatedImage) -> newBuilder
    com.facebook.imagepipeline.animated.base.AnimatedImage getImage() -> getImage
    int getFrameForPreview() -> getFrameForPreview
    com.facebook.common.references.CloseableReference getDecodedFrame(int) -> getDecodedFrame
    boolean hasDecodedFrame(int) -> hasDecodedFrame
    com.facebook.common.references.CloseableReference getPreviewBitmap() -> getPreviewBitmap
    void dispose() -> dispose
com.facebook.imagepipeline.animated.base.AnimatedImageResultBuilder -> com.facebook.imagepipeline.animated.base.AnimatedImageResultBuilder:
    com.facebook.imagepipeline.animated.base.AnimatedImage mImage -> mImage
    com.facebook.common.references.CloseableReference mPreviewBitmap -> mPreviewBitmap
    java.util.List mDecodedFrames -> mDecodedFrames
    int mFrameForPreview -> mFrameForPreview
    void <init>(com.facebook.imagepipeline.animated.base.AnimatedImage) -> <init>
    com.facebook.imagepipeline.animated.base.AnimatedImage getImage() -> getImage
    com.facebook.common.references.CloseableReference getPreviewBitmap() -> getPreviewBitmap
    com.facebook.imagepipeline.animated.base.AnimatedImageResultBuilder setPreviewBitmap(com.facebook.common.references.CloseableReference) -> setPreviewBitmap
    int getFrameForPreview() -> getFrameForPreview
    com.facebook.imagepipeline.animated.base.AnimatedImageResultBuilder setFrameForPreview(int) -> setFrameForPreview
    java.util.List getDecodedFrames() -> getDecodedFrames
    com.facebook.imagepipeline.animated.base.AnimatedImageResultBuilder setDecodedFrames(java.util.List) -> setDecodedFrames
    com.facebook.imagepipeline.animated.base.AnimatedImageResult build() -> build
com.facebook.imagepipeline.animated.base.DelegatingAnimatedDrawableBackend -> com.facebook.imagepipeline.animated.base.DelegatingAnimatedDrawableBackend:
    com.facebook.imagepipeline.animated.base.AnimatedDrawableBackend mAnimatedDrawableBackend -> mAnimatedDrawableBackend
    void <init>(com.facebook.imagepipeline.animated.base.AnimatedDrawableBackend) -> <init>
    com.facebook.imagepipeline.animated.base.AnimatedDrawableBackend getDelegate() -> getDelegate
    com.facebook.imagepipeline.animated.base.AnimatedImageResult getAnimatedImageResult() -> getAnimatedImageResult
    int getDurationMs() -> getDurationMs
    int getFrameCount() -> getFrameCount
    int getLoopCount() -> getLoopCount
    int getWidth() -> getWidth
    int getHeight() -> getHeight
    int getRenderedWidth() -> getRenderedWidth
    int getRenderedHeight() -> getRenderedHeight
    com.facebook.imagepipeline.animated.base.AnimatedDrawableFrameInfo getFrameInfo(int) -> getFrameInfo
    void renderFrame(int,android.graphics.Canvas) -> renderFrame
    int getFrameForTimestampMs(int) -> getFrameForTimestampMs
    int getTimestampMsForFrame(int) -> getTimestampMsForFrame
    int getDurationMsForFrame(int) -> getDurationMsForFrame
    int getFrameForPreview() -> getFrameForPreview
    int getMemoryUsage() -> getMemoryUsage
    com.facebook.common.references.CloseableReference getPreDecodedFrame(int) -> getPreDecodedFrame
    boolean hasPreDecodedFrame(int) -> hasPreDecodedFrame
    void dropCaches() -> dropCaches
com.facebook.imagepipeline.animated.factory.AnimatedDrawableFactory -> com.facebook.imagepipeline.animated.factory.AnimatedDrawableFactory:
    android.graphics.drawable.Drawable create(com.facebook.imagepipeline.image.CloseableImage) -> create
com.facebook.imagepipeline.animated.factory.AnimatedDrawableFactoryImpl -> com.facebook.imagepipeline.animated.factory.AnimatedDrawableFactoryImpl:
    com.facebook.imagepipeline.animated.impl.AnimatedDrawableBackendProvider mAnimatedDrawableBackendProvider -> mAnimatedDrawableBackendProvider
    com.facebook.imagepipeline.animated.impl.AnimatedDrawableCachingBackendImplProvider mAnimatedDrawableCachingBackendProvider -> mAnimatedDrawableCachingBackendProvider
    com.facebook.imagepipeline.animated.util.AnimatedDrawableUtil mAnimatedDrawableUtil -> mAnimatedDrawableUtil
    java.util.concurrent.ScheduledExecutorService mScheduledExecutorServiceForUiThread -> mScheduledExecutorServiceForUiThread
    com.facebook.common.time.MonotonicClock mMonotonicClock -> mMonotonicClock
    android.content.res.Resources mResources -> mResources
    void <init>(com.facebook.imagepipeline.animated.impl.AnimatedDrawableBackendProvider,com.facebook.imagepipeline.animated.impl.AnimatedDrawableCachingBackendImplProvider,com.facebook.imagepipeline.animated.util.AnimatedDrawableUtil,java.util.concurrent.ScheduledExecutorService,android.content.res.Resources) -> <init>
    android.graphics.drawable.Drawable create(com.facebook.imagepipeline.image.CloseableImage) -> create
    com.facebook.imagepipeline.animated.base.AnimatedDrawable create(com.facebook.imagepipeline.animated.base.AnimatedImageResult,com.facebook.imagepipeline.animated.base.AnimatedDrawableOptions) -> create
    com.facebook.imagepipeline.animated.base.AnimatedImageResult getImageIfCloseableAnimatedImage(com.facebook.imagepipeline.image.CloseableImage) -> getImageIfCloseableAnimatedImage
    com.facebook.imagepipeline.animated.base.AnimatedDrawable createAnimatedDrawable(com.facebook.imagepipeline.animated.base.AnimatedDrawableOptions,com.facebook.imagepipeline.animated.base.AnimatedDrawableBackend) -> createAnimatedDrawable
com.facebook.imagepipeline.animated.factory.AnimatedDrawableFactoryImpl$1 -> com.facebook.imagepipeline.animated.factory.AnimatedDrawableFactoryImpl$1:
    com.facebook.imagepipeline.animated.factory.AnimatedDrawableFactoryImpl this$0 -> this$0
    void <init>(com.facebook.imagepipeline.animated.factory.AnimatedDrawableFactoryImpl) -> <init>
    long now() -> now
com.facebook.imagepipeline.animated.factory.AnimatedFactory -> com.facebook.imagepipeline.animated.factory.AnimatedFactory:
    com.facebook.imagepipeline.animated.factory.AnimatedDrawableFactory getAnimatedDrawableFactory(android.content.Context) -> getAnimatedDrawableFactory
    com.facebook.imagepipeline.animated.factory.AnimatedImageFactory getAnimatedImageFactory() -> getAnimatedImageFactory
com.facebook.imagepipeline.animated.factory.AnimatedFactoryImpl -> com.facebook.imagepipeline.animated.factory.AnimatedFactoryImpl:
    com.facebook.imagepipeline.animated.impl.AnimatedDrawableBackendProvider mAnimatedDrawableBackendProvider -> mAnimatedDrawableBackendProvider
    com.facebook.imagepipeline.animated.util.AnimatedDrawableUtil mAnimatedDrawableUtil -> mAnimatedDrawableUtil
    com.facebook.imagepipeline.animated.factory.AnimatedDrawableFactory mAnimatedDrawableFactory -> mAnimatedDrawableFactory
    com.facebook.imagepipeline.animated.factory.AnimatedImageFactory mAnimatedImageFactory -> mAnimatedImageFactory
    com.facebook.imagepipeline.core.ExecutorSupplier mExecutorSupplier -> mExecutorSupplier
    com.facebook.imagepipeline.bitmaps.PlatformBitmapFactory mPlatformBitmapFactory -> mPlatformBitmapFactory
    void <init>(com.facebook.imagepipeline.bitmaps.PlatformBitmapFactory,com.facebook.imagepipeline.core.ExecutorSupplier) -> <init>
    com.facebook.imagepipeline.animated.factory.AnimatedDrawableFactory buildAnimatedDrawableFactory(com.facebook.common.executors.SerialExecutorService,android.app.ActivityManager,com.facebook.imagepipeline.animated.util.AnimatedDrawableUtil,com.facebook.imagepipeline.animated.impl.AnimatedDrawableBackendProvider,java.util.concurrent.ScheduledExecutorService,com.facebook.common.time.MonotonicClock,android.content.res.Resources) -> buildAnimatedDrawableFactory
    com.facebook.imagepipeline.animated.impl.AnimatedDrawableBackendProvider getAnimatedDrawableBackendProvider() -> getAnimatedDrawableBackendProvider
    com.facebook.imagepipeline.animated.factory.AnimatedDrawableFactory getAnimatedDrawableFactory(android.content.Context) -> getAnimatedDrawableFactory
    com.facebook.imagepipeline.animated.util.AnimatedDrawableUtil getAnimatedDrawableUtil() -> getAnimatedDrawableUtil
    com.facebook.imagepipeline.animated.factory.AnimatedImageFactory buildAnimatedImageFactory() -> buildAnimatedImageFactory
    com.facebook.imagepipeline.animated.factory.AnimatedImageFactory getAnimatedImageFactory() -> getAnimatedImageFactory
    com.facebook.imagepipeline.animated.factory.AnimatedDrawableFactory createAnimatedDrawableFactory(com.facebook.imagepipeline.animated.impl.AnimatedDrawableBackendProvider,com.facebook.imagepipeline.animated.impl.AnimatedDrawableCachingBackendImplProvider,com.facebook.imagepipeline.animated.util.AnimatedDrawableUtil,java.util.concurrent.ScheduledExecutorService,android.content.res.Resources) -> createAnimatedDrawableFactory
    com.facebook.imagepipeline.animated.util.AnimatedDrawableUtil access$000(com.facebook.imagepipeline.animated.factory.AnimatedFactoryImpl) -> access$000
com.facebook.imagepipeline.animated.factory.AnimatedFactoryImpl$1 -> com.facebook.imagepipeline.animated.factory.AnimatedFactoryImpl$1:
    com.facebook.common.executors.SerialExecutorService val$serialExecutorService -> val$serialExecutorService
    android.app.ActivityManager val$activityManager -> val$activityManager
    com.facebook.imagepipeline.animated.util.AnimatedDrawableUtil val$animatedDrawableUtil -> val$animatedDrawableUtil
    com.facebook.common.time.MonotonicClock val$monotonicClock -> val$monotonicClock
    com.facebook.imagepipeline.animated.factory.AnimatedFactoryImpl this$0 -> this$0
    void <init>(com.facebook.imagepipeline.animated.factory.AnimatedFactoryImpl,com.facebook.common.executors.SerialExecutorService,android.app.ActivityManager,com.facebook.imagepipeline.animated.util.AnimatedDrawableUtil,com.facebook.common.time.MonotonicClock) -> <init>
    com.facebook.imagepipeline.animated.impl.AnimatedDrawableCachingBackendImpl get(com.facebook.imagepipeline.animated.base.AnimatedDrawableBackend,com.facebook.imagepipeline.animated.base.AnimatedDrawableOptions) -> get
com.facebook.imagepipeline.animated.factory.AnimatedFactoryImpl$2 -> com.facebook.imagepipeline.animated.factory.AnimatedFactoryImpl$2:
    com.facebook.imagepipeline.animated.factory.AnimatedFactoryImpl this$0 -> this$0
    void <init>(com.facebook.imagepipeline.animated.factory.AnimatedFactoryImpl) -> <init>
    com.facebook.imagepipeline.animated.base.AnimatedDrawableBackend get(com.facebook.imagepipeline.animated.base.AnimatedImageResult,android.graphics.Rect) -> get
com.facebook.imagepipeline.animated.factory.AnimatedFactoryImpl$3 -> com.facebook.imagepipeline.animated.factory.AnimatedFactoryImpl$3:
    com.facebook.imagepipeline.animated.factory.AnimatedFactoryImpl this$0 -> this$0
    void <init>(com.facebook.imagepipeline.animated.factory.AnimatedFactoryImpl) -> <init>
    com.facebook.imagepipeline.animated.base.AnimatedDrawableBackend get(com.facebook.imagepipeline.animated.base.AnimatedImageResult,android.graphics.Rect) -> get
com.facebook.imagepipeline.animated.factory.AnimatedFactoryProvider -> com.facebook.imagepipeline.animated.factory.AnimatedFactoryProvider:
    boolean sImplLoaded -> sImplLoaded
    com.facebook.imagepipeline.animated.factory.AnimatedFactory sImpl -> sImpl
    void <init>() -> <init>
    com.facebook.imagepipeline.animated.factory.AnimatedFactory getAnimatedFactory(com.facebook.imagepipeline.bitmaps.PlatformBitmapFactory,com.facebook.imagepipeline.core.ExecutorSupplier) -> getAnimatedFactory
    void <clinit>() -> <clinit>
com.facebook.imagepipeline.animated.factory.AnimatedImageDecoder -> com.facebook.imagepipeline.animated.factory.AnimatedImageDecoder:
    com.facebook.imagepipeline.animated.base.AnimatedImage decode(long,int) -> decode
com.facebook.imagepipeline.animated.factory.AnimatedImageFactory -> com.facebook.imagepipeline.animated.factory.AnimatedImageFactory:
    com.facebook.imagepipeline.image.CloseableImage decodeGif(com.facebook.imagepipeline.image.EncodedImage,com.facebook.imagepipeline.common.ImageDecodeOptions,android.graphics.Bitmap$Config) -> decodeGif
    com.facebook.imagepipeline.image.CloseableImage decodeWebP(com.facebook.imagepipeline.image.EncodedImage,com.facebook.imagepipeline.common.ImageDecodeOptions,android.graphics.Bitmap$Config) -> decodeWebP
com.facebook.imagepipeline.animated.factory.AnimatedImageFactoryImpl -> com.facebook.imagepipeline.animated.factory.AnimatedImageFactoryImpl:
    com.facebook.imagepipeline.animated.impl.AnimatedDrawableBackendProvider mAnimatedDrawableBackendProvider -> mAnimatedDrawableBackendProvider
    com.facebook.imagepipeline.bitmaps.PlatformBitmapFactory mBitmapFactory -> mBitmapFactory
    com.facebook.imagepipeline.animated.factory.AnimatedImageDecoder sGifAnimatedImageDecoder -> sGifAnimatedImageDecoder
    com.facebook.imagepipeline.animated.factory.AnimatedImageDecoder sWebpAnimatedImageDecoder -> sWebpAnimatedImageDecoder
    com.facebook.imagepipeline.animated.factory.AnimatedImageDecoder loadIfPresent(java.lang.String) -> loadIfPresent
    void <init>(com.facebook.imagepipeline.animated.impl.AnimatedDrawableBackendProvider,com.facebook.imagepipeline.bitmaps.PlatformBitmapFactory) -> <init>
    com.facebook.imagepipeline.image.CloseableImage decodeGif(com.facebook.imagepipeline.image.EncodedImage,com.facebook.imagepipeline.common.ImageDecodeOptions,android.graphics.Bitmap$Config) -> decodeGif
    com.facebook.imagepipeline.image.CloseableImage decodeWebP(com.facebook.imagepipeline.image.EncodedImage,com.facebook.imagepipeline.common.ImageDecodeOptions,android.graphics.Bitmap$Config) -> decodeWebP
    com.facebook.imagepipeline.image.CloseableImage getCloseableImage(com.facebook.imagepipeline.common.ImageDecodeOptions,com.facebook.imagepipeline.animated.base.AnimatedImage,android.graphics.Bitmap$Config) -> getCloseableImage
    com.facebook.common.references.CloseableReference createPreviewBitmap(com.facebook.imagepipeline.animated.base.AnimatedImage,android.graphics.Bitmap$Config,int) -> createPreviewBitmap
    java.util.List decodeAllFrames(com.facebook.imagepipeline.animated.base.AnimatedImage,android.graphics.Bitmap$Config) -> decodeAllFrames
    com.facebook.common.references.CloseableReference createBitmap(int,int,android.graphics.Bitmap$Config) -> createBitmap
    void <clinit>() -> <clinit>
com.facebook.imagepipeline.animated.factory.AnimatedImageFactoryImpl$1 -> com.facebook.imagepipeline.animated.factory.AnimatedImageFactoryImpl$1:
    com.facebook.imagepipeline.animated.factory.AnimatedImageFactoryImpl this$0 -> this$0
    void <init>(com.facebook.imagepipeline.animated.factory.AnimatedImageFactoryImpl) -> <init>
    void onIntermediateResult(int,android.graphics.Bitmap) -> onIntermediateResult
    com.facebook.common.references.CloseableReference getCachedBitmap(int) -> getCachedBitmap
com.facebook.imagepipeline.animated.factory.AnimatedImageFactoryImpl$2 -> com.facebook.imagepipeline.animated.factory.AnimatedImageFactoryImpl$2:
    java.util.List val$bitmaps -> val$bitmaps
    com.facebook.imagepipeline.animated.factory.AnimatedImageFactoryImpl this$0 -> this$0
    void <init>(com.facebook.imagepipeline.animated.factory.AnimatedImageFactoryImpl,java.util.List) -> <init>
    void onIntermediateResult(int,android.graphics.Bitmap) -> onIntermediateResult
    com.facebook.common.references.CloseableReference getCachedBitmap(int) -> getCachedBitmap
com.facebook.imagepipeline.animated.impl.AnimatedDrawableBackendImpl -> com.facebook.imagepipeline.animated.impl.AnimatedDrawableBackendImpl:
    com.facebook.imagepipeline.animated.util.AnimatedDrawableUtil mAnimatedDrawableUtil -> mAnimatedDrawableUtil
    com.facebook.imagepipeline.animated.base.AnimatedImageResult mAnimatedImageResult -> mAnimatedImageResult
    com.facebook.imagepipeline.animated.base.AnimatedImage mAnimatedImage -> mAnimatedImage
    android.graphics.Rect mRenderedBounds -> mRenderedBounds
    int[] mFrameDurationsMs -> mFrameDurationsMs
    int[] mFrameTimestampsMs -> mFrameTimestampsMs
    int mDurationMs -> mDurationMs
    com.facebook.imagepipeline.animated.base.AnimatedDrawableFrameInfo[] mFrameInfos -> mFrameInfos
    android.graphics.Bitmap mTempBitmap -> mTempBitmap
    void <init>(com.facebook.imagepipeline.animated.util.AnimatedDrawableUtil,com.facebook.imagepipeline.animated.base.AnimatedImageResult,android.graphics.Rect) -> <init>
    android.graphics.Rect getBoundsToUse(com.facebook.imagepipeline.animated.base.AnimatedImage,android.graphics.Rect) -> getBoundsToUse
    com.facebook.imagepipeline.animated.base.AnimatedImageResult getAnimatedImageResult() -> getAnimatedImageResult
    int getDurationMs() -> getDurationMs
    int getFrameCount() -> getFrameCount
    int getLoopCount() -> getLoopCount
    int getWidth() -> getWidth
    int getHeight() -> getHeight
    int getRenderedWidth() -> getRenderedWidth
    int getRenderedHeight() -> getRenderedHeight
    com.facebook.imagepipeline.animated.base.AnimatedDrawableFrameInfo getFrameInfo(int) -> getFrameInfo
    int getFrameForTimestampMs(int) -> getFrameForTimestampMs
    int getTimestampMsForFrame(int) -> getTimestampMsForFrame
    int getDurationMsForFrame(int) -> getDurationMsForFrame
    int getFrameForPreview() -> getFrameForPreview
    com.facebook.imagepipeline.animated.base.AnimatedDrawableBackend forNewBounds(android.graphics.Rect) -> forNewBounds
    int getMemoryUsage() -> getMemoryUsage
    com.facebook.common.references.CloseableReference getPreDecodedFrame(int) -> getPreDecodedFrame
    boolean hasPreDecodedFrame(int) -> hasPreDecodedFrame
    void renderFrame(int,android.graphics.Canvas) -> renderFrame
    void renderImageSupportsScaling(android.graphics.Canvas,com.facebook.imagepipeline.animated.base.AnimatedImageFrame) -> renderImageSupportsScaling
    void renderImageDoesNotSupportScaling(android.graphics.Canvas,com.facebook.imagepipeline.animated.base.AnimatedImageFrame) -> renderImageDoesNotSupportScaling
    void dropCaches() -> dropCaches
com.facebook.imagepipeline.animated.impl.AnimatedDrawableBackendProvider -> com.facebook.imagepipeline.animated.impl.AnimatedDrawableBackendProvider:
    com.facebook.imagepipeline.animated.base.AnimatedDrawableBackend get(com.facebook.imagepipeline.animated.base.AnimatedImageResult,android.graphics.Rect) -> get
com.facebook.imagepipeline.animated.impl.AnimatedDrawableCachingBackendImpl -> com.facebook.imagepipeline.animated.impl.AnimatedDrawableCachingBackendImpl:
    java.lang.Class TAG -> TAG
    java.util.concurrent.atomic.AtomicInteger sTotalBitmaps -> sTotalBitmaps
    int PREFETCH_FRAMES -> PREFETCH_FRAMES
    com.facebook.common.executors.SerialExecutorService mExecutorService -> mExecutorService
    com.facebook.imagepipeline.animated.util.AnimatedDrawableUtil mAnimatedDrawableUtil -> mAnimatedDrawableUtil
    android.app.ActivityManager mActivityManager -> mActivityManager
    com.facebook.common.time.MonotonicClock mMonotonicClock -> mMonotonicClock
    com.facebook.imagepipeline.animated.base.AnimatedDrawableBackend mAnimatedDrawableBackend -> mAnimatedDrawableBackend
    com.facebook.imagepipeline.animated.base.AnimatedDrawableOptions mAnimatedDrawableOptions -> mAnimatedDrawableOptions
    com.facebook.imagepipeline.animated.impl.AnimatedImageCompositor mAnimatedImageCompositor -> mAnimatedImageCompositor
    com.facebook.common.references.ResourceReleaser mResourceReleaserForBitmaps -> mResourceReleaserForBitmaps
    double mMaximumKiloBytes -> mMaximumKiloBytes
    double mApproxKiloBytesToHoldAllFrames -> mApproxKiloBytesToHoldAllFrames
    java.util.List mFreeBitmaps -> mFreeBitmaps
    android.support.v4.util.SparseArrayCompat mDecodesInFlight -> mDecodesInFlight
    android.support.v4.util.SparseArrayCompat mCachedBitmaps -> mCachedBitmaps
    com.facebook.imagepipeline.animated.impl.WhatToKeepCachedArray mBitmapsToKeepCached -> mBitmapsToKeepCached
    int mCurrentFrameIndex -> mCurrentFrameIndex
    void <init>(com.facebook.common.executors.SerialExecutorService,android.app.ActivityManager,com.facebook.imagepipeline.animated.util.AnimatedDrawableUtil,com.facebook.common.time.MonotonicClock,com.facebook.imagepipeline.animated.base.AnimatedDrawableBackend,com.facebook.imagepipeline.animated.base.AnimatedDrawableOptions) -> <init>
    void finalize() -> finalize
    android.graphics.Bitmap createNewBitmap() -> createNewBitmap
    void renderFrame(int,android.graphics.Canvas) -> renderFrame
    com.facebook.common.references.CloseableReference getBitmapForFrame(int) -> getBitmapForFrame
    com.facebook.common.references.CloseableReference getPreviewBitmap() -> getPreviewBitmap
    com.facebook.common.references.CloseableReference getBitmapForFrameBlocking(int) -> getBitmapForFrameBlocking
    com.facebook.imagepipeline.animated.base.AnimatedDrawableCachingBackend forNewBounds(android.graphics.Rect) -> forNewBounds
    void dropCaches() -> dropCaches
    int getMemoryUsage() -> getMemoryUsage
    void appendDebugOptionString(java.lang.StringBuilder) -> appendDebugOptionString
    com.facebook.common.references.CloseableReference getBitmapForFrameInternal(int,boolean) -> getBitmapForFrameInternal
    void maybeCacheBitmapDuringRender(int,android.graphics.Bitmap) -> maybeCacheBitmapDuringRender
    void copyAndCacheBitmapDuringRendering(int,android.graphics.Bitmap) -> copyAndCacheBitmapDuringRendering
    com.facebook.common.references.CloseableReference obtainBitmapInternal() -> obtainBitmapInternal
    void releaseBitmapInternal(android.graphics.Bitmap) -> releaseBitmapInternal
    void schedulePrefetches() -> schedulePrefetches
    int getDefaultMaxBytes(android.app.ActivityManager) -> getDefaultMaxBytes
    boolean shouldKeepAllFramesInMemory() -> shouldKeepAllFramesInMemory
    void doPrefetch(int,int) -> doPrefetch
    void runPrefetch(int) -> runPrefetch
    void onFutureFinished(bolts.Task,int) -> onFutureFinished
    void cancelFuturesOutsideOfRange(int,int) -> cancelFuturesOutsideOfRange
    void dropBitmapsThatShouldNotBeCached() -> dropBitmapsThatShouldNotBeCached
    void maybeCacheRenderedBitmap(int,com.facebook.common.references.CloseableReference) -> maybeCacheRenderedBitmap
    com.facebook.common.references.CloseableReference getCachedOrPredecodedFrame(int) -> getCachedOrPredecodedFrame
    boolean hasCachedOrPredecodedFrame(int) -> hasCachedOrPredecodedFrame
    java.util.Map getDecodesInFlight() -> getDecodesInFlight
    java.util.Set getFramesCached() -> getFramesCached
    com.facebook.imagepipeline.animated.base.AnimatedDrawableBackend forNewBounds(android.graphics.Rect) -> forNewBounds
    void access$000(com.facebook.imagepipeline.animated.impl.AnimatedDrawableCachingBackendImpl,int,android.graphics.Bitmap) -> access$000
    com.facebook.common.references.CloseableReference access$100(com.facebook.imagepipeline.animated.impl.AnimatedDrawableCachingBackendImpl,int) -> access$100
    void access$200(com.facebook.imagepipeline.animated.impl.AnimatedDrawableCachingBackendImpl,int) -> access$200
    void access$300(com.facebook.imagepipeline.animated.impl.AnimatedDrawableCachingBackendImpl,bolts.Task,int) -> access$300
    void <clinit>() -> <clinit>
com.facebook.imagepipeline.animated.impl.AnimatedDrawableCachingBackendImpl$1 -> com.facebook.imagepipeline.animated.impl.AnimatedDrawableCachingBackendImpl$1:
    com.facebook.imagepipeline.animated.impl.AnimatedDrawableCachingBackendImpl this$0 -> this$0
    void <init>(com.facebook.imagepipeline.animated.impl.AnimatedDrawableCachingBackendImpl) -> <init>
    void onIntermediateResult(int,android.graphics.Bitmap) -> onIntermediateResult
    com.facebook.common.references.CloseableReference getCachedBitmap(int) -> getCachedBitmap
com.facebook.imagepipeline.animated.impl.AnimatedDrawableCachingBackendImpl$2 -> com.facebook.imagepipeline.animated.impl.AnimatedDrawableCachingBackendImpl$2:
    com.facebook.imagepipeline.animated.impl.AnimatedDrawableCachingBackendImpl this$0 -> this$0
    void <init>(com.facebook.imagepipeline.animated.impl.AnimatedDrawableCachingBackendImpl) -> <init>
    void release(android.graphics.Bitmap) -> release
    void release(java.lang.Object) -> release
com.facebook.imagepipeline.animated.impl.AnimatedDrawableCachingBackendImpl$3 -> com.facebook.imagepipeline.animated.impl.AnimatedDrawableCachingBackendImpl$3:
    int val$frameNumber -> val$frameNumber
    com.facebook.imagepipeline.animated.impl.AnimatedDrawableCachingBackendImpl this$0 -> this$0
    void <init>(com.facebook.imagepipeline.animated.impl.AnimatedDrawableCachingBackendImpl,int) -> <init>
    java.lang.Object call() -> call
com.facebook.imagepipeline.animated.impl.AnimatedDrawableCachingBackendImpl$4 -> com.facebook.imagepipeline.animated.impl.AnimatedDrawableCachingBackendImpl$4:
    bolts.Task val$newFuture -> val$newFuture
    int val$frameNumber -> val$frameNumber
    com.facebook.imagepipeline.animated.impl.AnimatedDrawableCachingBackendImpl this$0 -> this$0
    void <init>(com.facebook.imagepipeline.animated.impl.AnimatedDrawableCachingBackendImpl,bolts.Task,int) -> <init>
    java.lang.Object then(bolts.Task) -> then
com.facebook.imagepipeline.animated.impl.AnimatedDrawableCachingBackendImplProvider -> com.facebook.imagepipeline.animated.impl.AnimatedDrawableCachingBackendImplProvider:
    com.facebook.imagepipeline.animated.impl.AnimatedDrawableCachingBackendImpl get(com.facebook.imagepipeline.animated.base.AnimatedDrawableBackend,com.facebook.imagepipeline.animated.base.AnimatedDrawableOptions) -> get
com.facebook.imagepipeline.animated.impl.AnimatedDrawableDiagnosticsImpl -> com.facebook.imagepipeline.animated.impl.AnimatedDrawableDiagnosticsImpl:
    java.lang.Class TAG -> TAG
    com.facebook.imagepipeline.animated.util.AnimatedDrawableUtil mAnimatedDrawableUtil -> mAnimatedDrawableUtil
    android.util.DisplayMetrics mDisplayMetrics -> mDisplayMetrics
    android.text.TextPaint mDebugTextPaint -> mDebugTextPaint
    java.lang.StringBuilder sbTemp -> sbTemp
    com.facebook.imagepipeline.animated.impl.RollingStat mDroppedFramesStat -> mDroppedFramesStat
    com.facebook.imagepipeline.animated.impl.RollingStat mDrawnFrames -> mDrawnFrames
    com.facebook.imagepipeline.animated.base.AnimatedDrawableCachingBackend mAnimatedDrawableBackend -> mAnimatedDrawableBackend
    long mLastTimeStamp -> mLastTimeStamp
    void <init>(com.facebook.imagepipeline.animated.util.AnimatedDrawableUtil,android.util.DisplayMetrics) -> <init>
    void setBackend(com.facebook.imagepipeline.animated.base.AnimatedDrawableCachingBackend) -> setBackend
    void onStartMethodBegin() -> onStartMethodBegin
    void onStartMethodEnd() -> onStartMethodEnd
    void onNextFrameMethodBegin() -> onNextFrameMethodBegin
    void onNextFrameMethodEnd() -> onNextFrameMethodEnd
    void incrementDroppedFrames(int) -> incrementDroppedFrames
    void incrementDrawnFrames(int) -> incrementDrawnFrames
    void onDrawMethodBegin() -> onDrawMethodBegin
    void onDrawMethodEnd() -> onDrawMethodEnd
    void drawDebugOverlay(android.graphics.Canvas,android.graphics.Rect) -> drawDebugOverlay
    int convertDpToPx(int) -> convertDpToPx
    void <clinit>() -> <clinit>
com.facebook.imagepipeline.animated.impl.AnimatedDrawableDiagnosticsNoop -> com.facebook.imagepipeline.animated.impl.AnimatedDrawableDiagnosticsNoop:
    com.facebook.imagepipeline.animated.impl.AnimatedDrawableDiagnosticsNoop sInstance -> sInstance
    void <init>() -> <init>
    com.facebook.imagepipeline.animated.impl.AnimatedDrawableDiagnosticsNoop getInstance() -> getInstance
    void setBackend(com.facebook.imagepipeline.animated.base.AnimatedDrawableCachingBackend) -> setBackend
    void onStartMethodBegin() -> onStartMethodBegin
    void onStartMethodEnd() -> onStartMethodEnd
    void onNextFrameMethodBegin() -> onNextFrameMethodBegin
    void onNextFrameMethodEnd() -> onNextFrameMethodEnd
    void incrementDroppedFrames(int) -> incrementDroppedFrames
    void incrementDrawnFrames(int) -> incrementDrawnFrames
    void onDrawMethodBegin() -> onDrawMethodBegin
    void onDrawMethodEnd() -> onDrawMethodEnd
    void drawDebugOverlay(android.graphics.Canvas,android.graphics.Rect) -> drawDebugOverlay
    void <clinit>() -> <clinit>
com.facebook.imagepipeline.animated.impl.AnimatedFrameCache -> com.facebook.imagepipeline.animated.impl.AnimatedFrameCache:
    com.facebook.cache.common.CacheKey mImageCacheKey -> mImageCacheKey
    com.facebook.imagepipeline.cache.CountingMemoryCache mBackingCache -> mBackingCache
    com.facebook.imagepipeline.cache.CountingMemoryCache$EntryStateObserver mEntryStateObserver -> mEntryStateObserver
    java.util.LinkedHashSet mFreeItemsPool -> mFreeItemsPool
    void <init>(com.facebook.cache.common.CacheKey,com.facebook.imagepipeline.cache.CountingMemoryCache) -> <init>
    void onReusabilityChange(com.facebook.cache.common.CacheKey,boolean) -> onReusabilityChange
    com.facebook.common.references.CloseableReference cache(int,com.facebook.common.references.CloseableReference) -> cache
    com.facebook.common.references.CloseableReference get(int) -> get
    com.facebook.common.references.CloseableReference getForReuse() -> getForReuse
    com.facebook.cache.common.CacheKey popFirstFreeItemKey() -> popFirstFreeItemKey
    com.facebook.imagepipeline.animated.impl.AnimatedFrameCache$FrameKey keyFor(int) -> keyFor
com.facebook.imagepipeline.animated.impl.AnimatedFrameCache$1 -> com.facebook.imagepipeline.animated.impl.AnimatedFrameCache$1:
    com.facebook.imagepipeline.animated.impl.AnimatedFrameCache this$0 -> this$0
    void <init>(com.facebook.imagepipeline.animated.impl.AnimatedFrameCache) -> <init>
    void onExclusivityChanged(com.facebook.cache.common.CacheKey,boolean) -> onExclusivityChanged
    void onExclusivityChanged(java.lang.Object,boolean) -> onExclusivityChanged
com.facebook.imagepipeline.animated.impl.AnimatedFrameCache$FrameKey -> com.facebook.imagepipeline.animated.impl.AnimatedFrameCache$FrameKey:
    com.facebook.cache.common.CacheKey mImageCacheKey -> mImageCacheKey
    int mFrameIndex -> mFrameIndex
    void <init>(com.facebook.cache.common.CacheKey,int) -> <init>
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    boolean containsUri(android.net.Uri) -> containsUri
    java.lang.String getUriString() -> getUriString
com.facebook.imagepipeline.animated.impl.AnimatedImageCompositor -> com.facebook.imagepipeline.animated.impl.AnimatedImageCompositor:
    com.facebook.imagepipeline.animated.base.AnimatedDrawableBackend mAnimatedDrawableBackend -> mAnimatedDrawableBackend
    com.facebook.imagepipeline.animated.impl.AnimatedImageCompositor$Callback mCallback -> mCallback
    android.graphics.Paint mTransparentFillPaint -> mTransparentFillPaint
    void <init>(com.facebook.imagepipeline.animated.base.AnimatedDrawableBackend,com.facebook.imagepipeline.animated.impl.AnimatedImageCompositor$Callback) -> <init>
    void renderFrame(int,android.graphics.Bitmap) -> renderFrame
    int prepareCanvasWithClosestCachedFrame(int,android.graphics.Canvas) -> prepareCanvasWithClosestCachedFrame
    void disposeToBackground(android.graphics.Canvas,com.facebook.imagepipeline.animated.base.AnimatedDrawableFrameInfo) -> disposeToBackground
    com.facebook.imagepipeline.animated.impl.AnimatedImageCompositor$FrameNeededResult isFrameNeededForRendering(int) -> isFrameNeededForRendering
    boolean isKeyFrame(int) -> isKeyFrame
    boolean isFullFrame(com.facebook.imagepipeline.animated.base.AnimatedDrawableFrameInfo) -> isFullFrame
com.facebook.imagepipeline.animated.impl.AnimatedImageCompositor$1 -> com.facebook.imagepipeline.animated.impl.AnimatedImageCompositor$1:
    int[] $SwitchMap$com$facebook$imagepipeline$animated$impl$AnimatedImageCompositor$FrameNeededResult -> $SwitchMap$com$facebook$imagepipeline$animated$impl$AnimatedImageCompositor$FrameNeededResult
    void <clinit>() -> <clinit>
com.facebook.imagepipeline.animated.impl.AnimatedImageCompositor$Callback -> com.facebook.imagepipeline.animated.impl.AnimatedImageCompositor$Callback:
    void onIntermediateResult(int,android.graphics.Bitmap) -> onIntermediateResult
    com.facebook.common.references.CloseableReference getCachedBitmap(int) -> getCachedBitmap
com.facebook.imagepipeline.animated.impl.AnimatedImageCompositor$FrameNeededResult -> com.facebook.imagepipeline.animated.impl.AnimatedImageCompositor$FrameNeededResult:
    com.facebook.imagepipeline.animated.impl.AnimatedImageCompositor$FrameNeededResult REQUIRED -> REQUIRED
    com.facebook.imagepipeline.animated.impl.AnimatedImageCompositor$FrameNeededResult NOT_REQUIRED -> NOT_REQUIRED
    com.facebook.imagepipeline.animated.impl.AnimatedImageCompositor$FrameNeededResult SKIP -> SKIP
    com.facebook.imagepipeline.animated.impl.AnimatedImageCompositor$FrameNeededResult ABORT -> ABORT
    com.facebook.imagepipeline.animated.impl.AnimatedImageCompositor$FrameNeededResult[] $VALUES -> $VALUES
    com.facebook.imagepipeline.animated.impl.AnimatedImageCompositor$FrameNeededResult[] values() -> values
    com.facebook.imagepipeline.animated.impl.AnimatedImageCompositor$FrameNeededResult valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.facebook.imagepipeline.animated.impl.RollingStat -> com.facebook.imagepipeline.animated.impl.RollingStat:
    int WINDOWS -> WINDOWS
    short[] mStat -> mStat
    void <init>() -> <init>
    void incrementStats(int) -> incrementStats
    int getSum(int) -> getSum
com.facebook.imagepipeline.animated.impl.WhatToKeepCachedArray -> com.facebook.imagepipeline.animated.impl.WhatToKeepCachedArray:
    boolean[] mData -> mData
    void <init>(int) -> <init>
    boolean get(int) -> get
    void setAll(boolean) -> setAll
    void removeOutsideRange(int,int) -> removeOutsideRange
    void set(int,boolean) -> set
com.facebook.imagepipeline.animated.util.AnimatedDrawableUtil -> com.facebook.imagepipeline.animated.util.AnimatedDrawableUtil:
    int MIN_FRAME_DURATION_MS -> MIN_FRAME_DURATION_MS
    int FRAME_DURATION_MS_FOR_MIN -> FRAME_DURATION_MS_FOR_MIN
    void <init>() -> <init>
    void appendMemoryString(java.lang.StringBuilder,int) -> appendMemoryString
    void fixFrameDurations(int[]) -> fixFrameDurations
    int getTotalDurationFromFrameDurations(int[]) -> getTotalDurationFromFrameDurations
    int[] getFrameTimeStampsFromDurations(int[]) -> getFrameTimeStampsFromDurations
    int getFrameForTimestampMs(int[],int) -> getFrameForTimestampMs
    int getSizeOfBitmap(android.graphics.Bitmap) -> getSizeOfBitmap
    boolean isOutsideRange(int,int,int) -> isOutsideRange
com.facebook.imagepipeline.backends.okhttp3.OkHttpImagePipelineConfigFactory -> com.facebook.imagepipeline.backends.okhttp3.OkHttpImagePipelineConfigFactory:
    void <init>() -> <init>
    com.facebook.imagepipeline.core.ImagePipelineConfig$Builder newBuilder(android.content.Context,okhttp3.OkHttpClient) -> newBuilder
com.facebook.imagepipeline.backends.okhttp3.OkHttpNetworkFetcher -> com.facebook.imagepipeline.backends.okhttp3.OkHttpNetworkFetcher:
    java.lang.String TAG -> TAG
    java.lang.String QUEUE_TIME -> QUEUE_TIME
    java.lang.String FETCH_TIME -> FETCH_TIME
    java.lang.String TOTAL_TIME -> TOTAL_TIME
    java.lang.String IMAGE_SIZE -> IMAGE_SIZE
    okhttp3.Call$Factory mCallFactory -> mCallFactory
    java.util.concurrent.Executor mCancellationExecutor -> mCancellationExecutor
    void <init>(okhttp3.OkHttpClient) -> <init>
    void <init>(okhttp3.Call$Factory,java.util.concurrent.Executor) -> <init>
    com.facebook.imagepipeline.backends.okhttp3.OkHttpNetworkFetcher$OkHttpNetworkFetchState createFetchState(com.facebook.imagepipeline.producers.Consumer,com.facebook.imagepipeline.producers.ProducerContext) -> createFetchState
    void fetch(com.facebook.imagepipeline.backends.okhttp3.OkHttpNetworkFetcher$OkHttpNetworkFetchState,com.facebook.imagepipeline.producers.NetworkFetcher$Callback) -> fetch
    void onFetchCompletion(com.facebook.imagepipeline.backends.okhttp3.OkHttpNetworkFetcher$OkHttpNetworkFetchState,int) -> onFetchCompletion
    java.util.Map getExtraMap(com.facebook.imagepipeline.backends.okhttp3.OkHttpNetworkFetcher$OkHttpNetworkFetchState,int) -> getExtraMap
    void fetchWithRequest(com.facebook.imagepipeline.backends.okhttp3.OkHttpNetworkFetcher$OkHttpNetworkFetchState,com.facebook.imagepipeline.producers.NetworkFetcher$Callback,okhttp3.Request) -> fetchWithRequest
    void handleException(okhttp3.Call,java.lang.Exception,com.facebook.imagepipeline.producers.NetworkFetcher$Callback) -> handleException
    java.util.Map getExtraMap(com.facebook.imagepipeline.producers.FetchState,int) -> getExtraMap
    void onFetchCompletion(com.facebook.imagepipeline.producers.FetchState,int) -> onFetchCompletion
    void fetch(com.facebook.imagepipeline.producers.FetchState,com.facebook.imagepipeline.producers.NetworkFetcher$Callback) -> fetch
    com.facebook.imagepipeline.producers.FetchState createFetchState(com.facebook.imagepipeline.producers.Consumer,com.facebook.imagepipeline.producers.ProducerContext) -> createFetchState
    java.util.concurrent.Executor access$000(com.facebook.imagepipeline.backends.okhttp3.OkHttpNetworkFetcher) -> access$000
    void access$100(com.facebook.imagepipeline.backends.okhttp3.OkHttpNetworkFetcher,okhttp3.Call,java.lang.Exception,com.facebook.imagepipeline.producers.NetworkFetcher$Callback) -> access$100
com.facebook.imagepipeline.backends.okhttp3.OkHttpNetworkFetcher$1 -> com.facebook.imagepipeline.backends.okhttp3.OkHttpNetworkFetcher$1:
    okhttp3.Call val$call -> val$call
    com.facebook.imagepipeline.backends.okhttp3.OkHttpNetworkFetcher this$0 -> this$0
    void <init>(com.facebook.imagepipeline.backends.okhttp3.OkHttpNetworkFetcher,okhttp3.Call) -> <init>
    void onCancellationRequested() -> onCancellationRequested
com.facebook.imagepipeline.backends.okhttp3.OkHttpNetworkFetcher$1$1 -> com.facebook.imagepipeline.backends.okhttp3.OkHttpNetworkFetcher$1$1:
    com.facebook.imagepipeline.backends.okhttp3.OkHttpNetworkFetcher$1 this$1 -> this$1
    void <init>(com.facebook.imagepipeline.backends.okhttp3.OkHttpNetworkFetcher$1) -> <init>
    void run() -> run
com.facebook.imagepipeline.backends.okhttp3.OkHttpNetworkFetcher$2 -> com.facebook.imagepipeline.backends.okhttp3.OkHttpNetworkFetcher$2:
    com.facebook.imagepipeline.backends.okhttp3.OkHttpNetworkFetcher$OkHttpNetworkFetchState val$fetchState -> val$fetchState
    com.facebook.imagepipeline.producers.NetworkFetcher$Callback val$callback -> val$callback
    com.facebook.imagepipeline.backends.okhttp3.OkHttpNetworkFetcher this$0 -> this$0
    void <init>(com.facebook.imagepipeline.backends.okhttp3.OkHttpNetworkFetcher,com.facebook.imagepipeline.backends.okhttp3.OkHttpNetworkFetcher$OkHttpNetworkFetchState,com.facebook.imagepipeline.producers.NetworkFetcher$Callback) -> <init>
    void onResponse(okhttp3.Call,okhttp3.Response) -> onResponse
    void onFailure(okhttp3.Call,java.io.IOException) -> onFailure
com.facebook.imagepipeline.backends.okhttp3.OkHttpNetworkFetcher$OkHttpNetworkFetchState -> com.facebook.imagepipeline.backends.okhttp3.OkHttpNetworkFetcher$OkHttpNetworkFetchState:
    long submitTime -> submitTime
    long responseTime -> responseTime
    long fetchCompleteTime -> fetchCompleteTime
    void <init>(com.facebook.imagepipeline.producers.Consumer,com.facebook.imagepipeline.producers.ProducerContext) -> <init>
com.facebook.imagepipeline.bitmaps.ArtBitmapFactory -> com.facebook.imagepipeline.bitmaps.ArtBitmapFactory:
    com.facebook.imagepipeline.memory.BitmapPool mBitmapPool -> mBitmapPool
    void <init>(com.facebook.imagepipeline.memory.BitmapPool) -> <init>
    com.facebook.common.references.CloseableReference createBitmapInternal(int,int,android.graphics.Bitmap$Config) -> createBitmapInternal
com.facebook.imagepipeline.bitmaps.EmptyJpegGenerator -> com.facebook.imagepipeline.bitmaps.EmptyJpegGenerator:
    byte[] EMPTY_JPEG_PREFIX -> EMPTY_JPEG_PREFIX
    byte[] EMPTY_JPEG_SUFFIX -> EMPTY_JPEG_SUFFIX
    com.facebook.common.memory.PooledByteBufferFactory mPooledByteBufferFactory -> mPooledByteBufferFactory
    void <init>(com.facebook.common.memory.PooledByteBufferFactory) -> <init>
    com.facebook.common.references.CloseableReference generate(short,short) -> generate
    void <clinit>() -> <clinit>
com.facebook.imagepipeline.bitmaps.GingerbreadBitmapFactory -> com.facebook.imagepipeline.bitmaps.GingerbreadBitmapFactory:
    void <init>() -> <init>
    com.facebook.common.references.CloseableReference createBitmapInternal(int,int,android.graphics.Bitmap$Config) -> createBitmapInternal
com.facebook.imagepipeline.bitmaps.HoneycombBitmapCreator -> com.facebook.imagepipeline.bitmaps.HoneycombBitmapCreator:
    com.facebook.imagepipeline.bitmaps.EmptyJpegGenerator mJpegGenerator -> mJpegGenerator
    com.facebook.imagepipeline.memory.FlexByteArrayPool mFlexByteArrayPool -> mFlexByteArrayPool
    void <init>(com.facebook.imagepipeline.memory.PoolFactory) -> <init>
    android.graphics.Bitmap createNakedBitmap(int,int,android.graphics.Bitmap$Config) -> createNakedBitmap
    android.graphics.BitmapFactory$Options getBitmapFactoryOptions(int,android.graphics.Bitmap$Config) -> getBitmapFactoryOptions
com.facebook.imagepipeline.bitmaps.HoneycombBitmapFactory -> com.facebook.imagepipeline.bitmaps.HoneycombBitmapFactory:
    com.facebook.imagepipeline.bitmaps.EmptyJpegGenerator mJpegGenerator -> mJpegGenerator
    com.facebook.imagepipeline.platform.PlatformDecoder mPurgeableDecoder -> mPurgeableDecoder
    void <init>(com.facebook.imagepipeline.bitmaps.EmptyJpegGenerator,com.facebook.imagepipeline.platform.PlatformDecoder) -> <init>
    com.facebook.common.references.CloseableReference createBitmapInternal(int,int,android.graphics.Bitmap$Config) -> createBitmapInternal
com.facebook.imagepipeline.bitmaps.PlatformBitmapFactory -> com.facebook.imagepipeline.bitmaps.PlatformBitmapFactory:
    com.facebook.imagepipeline.bitmaps.PlatformBitmapFactory$BitmapCreationObserver sBitmapCreationObserver -> sBitmapCreationObserver
    void <init>() -> <init>
    com.facebook.common.references.CloseableReference createBitmap(int,int,android.graphics.Bitmap$Config) -> createBitmap
    com.facebook.common.references.CloseableReference createBitmap(int,int) -> createBitmap
    com.facebook.common.references.CloseableReference createBitmap(int,int,android.graphics.Bitmap$Config,java.lang.Object) -> createBitmap
    com.facebook.common.references.CloseableReference createBitmap(int,int,java.lang.Object) -> createBitmap
    com.facebook.common.references.CloseableReference createBitmap(android.graphics.Bitmap) -> createBitmap
    com.facebook.common.references.CloseableReference createBitmap(android.graphics.Bitmap,java.lang.Object) -> createBitmap
    com.facebook.common.references.CloseableReference createBitmap(android.graphics.Bitmap,int,int,int,int) -> createBitmap
    com.facebook.common.references.CloseableReference createBitmap(android.graphics.Bitmap,int,int,int,int,java.lang.Object) -> createBitmap
    com.facebook.common.references.CloseableReference createBitmap(android.graphics.Bitmap,int,int,int,int,android.graphics.Matrix,boolean) -> createBitmap
    com.facebook.common.references.CloseableReference createScaledBitmap(android.graphics.Bitmap,int,int,boolean) -> createScaledBitmap
    com.facebook.common.references.CloseableReference createScaledBitmap(android.graphics.Bitmap,int,int,boolean,java.lang.Object) -> createScaledBitmap
    com.facebook.common.references.CloseableReference createBitmap(android.graphics.Bitmap,int,int,int,int,android.graphics.Matrix,boolean,java.lang.Object) -> createBitmap
    com.facebook.common.references.CloseableReference createBitmap(android.util.DisplayMetrics,int,int,android.graphics.Bitmap$Config) -> createBitmap
    com.facebook.common.references.CloseableReference createBitmap(android.util.DisplayMetrics,int,int,android.graphics.Bitmap$Config,java.lang.Object) -> createBitmap
    com.facebook.common.references.CloseableReference createBitmap(int,int,android.graphics.Bitmap$Config,boolean) -> createBitmap
    com.facebook.common.references.CloseableReference createBitmap(int,int,android.graphics.Bitmap$Config,boolean,java.lang.Object) -> createBitmap
    com.facebook.common.references.CloseableReference createBitmap(android.util.DisplayMetrics,int,int,android.graphics.Bitmap$Config,boolean) -> createBitmap
    com.facebook.common.references.CloseableReference createBitmap(android.util.DisplayMetrics,int,int,android.graphics.Bitmap$Config,boolean,java.lang.Object) -> createBitmap
    com.facebook.common.references.CloseableReference createBitmap(int[],int,int,android.graphics.Bitmap$Config) -> createBitmap
    com.facebook.common.references.CloseableReference createBitmap(int[],int,int,android.graphics.Bitmap$Config,java.lang.Object) -> createBitmap
    com.facebook.common.references.CloseableReference createBitmap(android.util.DisplayMetrics,int[],int,int,android.graphics.Bitmap$Config) -> createBitmap
    com.facebook.common.references.CloseableReference createBitmap(android.util.DisplayMetrics,int[],int,int,android.graphics.Bitmap$Config,java.lang.Object) -> createBitmap
    com.facebook.common.references.CloseableReference createBitmap(android.util.DisplayMetrics,int[],int,int,int,int,android.graphics.Bitmap$Config) -> createBitmap
    com.facebook.common.references.CloseableReference createBitmap(android.util.DisplayMetrics,int[],int,int,int,int,android.graphics.Bitmap$Config,java.lang.Object) -> createBitmap
    android.graphics.Bitmap$Config getSuitableBitmapConfig(android.graphics.Bitmap) -> getSuitableBitmapConfig
    void checkWidthHeight(int,int) -> checkWidthHeight
    void checkXYSign(int,int) -> checkXYSign
    void checkFinalImageBounds(android.graphics.Bitmap,int,int,int,int) -> checkFinalImageBounds
    com.facebook.common.references.CloseableReference createBitmapInternal(int,int,android.graphics.Bitmap$Config) -> createBitmapInternal
    void setCreationListener(com.facebook.imagepipeline.bitmaps.PlatformBitmapFactory$BitmapCreationObserver) -> setCreationListener
    void addBitmapReference(android.graphics.Bitmap,java.lang.Object) -> addBitmapReference
com.facebook.imagepipeline.bitmaps.PlatformBitmapFactory$1 -> com.facebook.imagepipeline.bitmaps.PlatformBitmapFactory$1:
    int[] $SwitchMap$android$graphics$Bitmap$Config -> $SwitchMap$android$graphics$Bitmap$Config
    void <clinit>() -> <clinit>
com.facebook.imagepipeline.bitmaps.PlatformBitmapFactory$BitmapCreationObserver -> com.facebook.imagepipeline.bitmaps.PlatformBitmapFactory$BitmapCreationObserver:
    void onBitmapCreated(android.graphics.Bitmap,java.lang.Object) -> onBitmapCreated
com.facebook.imagepipeline.bitmaps.SimpleBitmapReleaser -> com.facebook.imagepipeline.bitmaps.SimpleBitmapReleaser:
    com.facebook.imagepipeline.bitmaps.SimpleBitmapReleaser sInstance -> sInstance
    com.facebook.imagepipeline.bitmaps.SimpleBitmapReleaser getInstance() -> getInstance
    void <init>() -> <init>
    void release(android.graphics.Bitmap) -> release
    void release(java.lang.Object) -> release
com.facebook.imagepipeline.cache.BitmapCountingMemoryCacheFactory -> com.facebook.imagepipeline.cache.BitmapCountingMemoryCacheFactory:
    void <init>() -> <init>
    com.facebook.imagepipeline.cache.CountingMemoryCache get(com.facebook.common.internal.Supplier,com.facebook.common.memory.MemoryTrimmableRegistry,com.facebook.imagepipeline.bitmaps.PlatformBitmapFactory,boolean) -> get
com.facebook.imagepipeline.cache.BitmapCountingMemoryCacheFactory$1 -> com.facebook.imagepipeline.cache.BitmapCountingMemoryCacheFactory$1:
    void <init>() -> <init>
    int getSizeInBytes(com.facebook.imagepipeline.image.CloseableImage) -> getSizeInBytes
    int getSizeInBytes(java.lang.Object) -> getSizeInBytes
com.facebook.imagepipeline.cache.BitmapMemoryCacheFactory -> com.facebook.imagepipeline.cache.BitmapMemoryCacheFactory:
    void <init>() -> <init>
    com.facebook.imagepipeline.cache.MemoryCache get(com.facebook.imagepipeline.cache.CountingMemoryCache,com.facebook.imagepipeline.cache.ImageCacheStatsTracker) -> get
com.facebook.imagepipeline.cache.BitmapMemoryCacheFactory$1 -> com.facebook.imagepipeline.cache.BitmapMemoryCacheFactory$1:
    com.facebook.imagepipeline.cache.ImageCacheStatsTracker val$imageCacheStatsTracker -> val$imageCacheStatsTracker
    void <init>(com.facebook.imagepipeline.cache.ImageCacheStatsTracker) -> <init>
    void onCacheHit(com.facebook.cache.common.CacheKey) -> onCacheHit
    void onCacheMiss() -> onCacheMiss
    void onCachePut() -> onCachePut
    void onCacheHit(java.lang.Object) -> onCacheHit
com.facebook.imagepipeline.cache.BitmapMemoryCacheKey -> com.facebook.imagepipeline.cache.BitmapMemoryCacheKey:
    java.lang.Class TAG -> TAG
    java.lang.String mSourceString -> mSourceString
    com.facebook.imagepipeline.common.ResizeOptions mResizeOptions -> mResizeOptions
    com.facebook.imagepipeline.common.RotationOptions mRotationOptions -> mRotationOptions
    com.facebook.imagepipeline.common.ImageDecodeOptions mImageDecodeOptions -> mImageDecodeOptions
    com.facebook.cache.common.CacheKey mPostprocessorCacheKey -> mPostprocessorCacheKey
    java.lang.String mPostprocessorName -> mPostprocessorName
    int mHash -> mHash
    java.lang.Object mCallerContext -> mCallerContext
    long mCacheTime -> mCacheTime
    void <init>(java.lang.String,com.facebook.imagepipeline.common.ResizeOptions,com.facebook.imagepipeline.common.RotationOptions,com.facebook.imagepipeline.common.ImageDecodeOptions,com.facebook.cache.common.CacheKey,java.lang.String,java.lang.Object) -> <init>
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    boolean containsUri(android.net.Uri) -> containsUri
    java.lang.String getUriString() -> getUriString
    java.lang.String getPostprocessorName() -> getPostprocessorName
    java.lang.String toString() -> toString
    java.lang.Object getCallerContext() -> getCallerContext
    long getInBitmapCacheSince() -> getInBitmapCacheSince
    void <clinit>() -> <clinit>
com.facebook.imagepipeline.cache.BitmapMemoryCacheTrimStrategy -> com.facebook.imagepipeline.cache.BitmapMemoryCacheTrimStrategy:
    java.lang.String TAG -> TAG
    void <init>() -> <init>
    double getTrimRatio(com.facebook.common.memory.MemoryTrimType) -> getTrimRatio
com.facebook.imagepipeline.cache.BitmapMemoryCacheTrimStrategy$1 -> com.facebook.imagepipeline.cache.BitmapMemoryCacheTrimStrategy$1:
    int[] $SwitchMap$com$facebook$common$memory$MemoryTrimType -> $SwitchMap$com$facebook$common$memory$MemoryTrimType
    void <clinit>() -> <clinit>
com.facebook.imagepipeline.cache.BufferedDiskCache -> com.facebook.imagepipeline.cache.BufferedDiskCache:
    java.lang.Class TAG -> TAG
    com.facebook.cache.disk.FileCache mFileCache -> mFileCache
    com.facebook.common.memory.PooledByteBufferFactory mPooledByteBufferFactory -> mPooledByteBufferFactory
    com.facebook.common.memory.PooledByteStreams mPooledByteStreams -> mPooledByteStreams
    java.util.concurrent.Executor mReadExecutor -> mReadExecutor
    java.util.concurrent.Executor mWriteExecutor -> mWriteExecutor
    com.facebook.imagepipeline.cache.StagingArea mStagingArea -> mStagingArea
    com.facebook.imagepipeline.cache.ImageCacheStatsTracker mImageCacheStatsTracker -> mImageCacheStatsTracker
    void <init>(com.facebook.cache.disk.FileCache,com.facebook.common.memory.PooledByteBufferFactory,com.facebook.common.memory.PooledByteStreams,java.util.concurrent.Executor,java.util.concurrent.Executor,com.facebook.imagepipeline.cache.ImageCacheStatsTracker) -> <init>
    boolean containsSync(com.facebook.cache.common.CacheKey) -> containsSync
    bolts.Task contains(com.facebook.cache.common.CacheKey) -> contains
    bolts.Task containsAsync(com.facebook.cache.common.CacheKey) -> containsAsync
    boolean diskCheckSync(com.facebook.cache.common.CacheKey) -> diskCheckSync
    bolts.Task get(com.facebook.cache.common.CacheKey,java.util.concurrent.atomic.AtomicBoolean) -> get
    boolean checkInStagingAreaAndFileCache(com.facebook.cache.common.CacheKey) -> checkInStagingAreaAndFileCache
    bolts.Task getAsync(com.facebook.cache.common.CacheKey,java.util.concurrent.atomic.AtomicBoolean) -> getAsync
    void put(com.facebook.cache.common.CacheKey,com.facebook.imagepipeline.image.EncodedImage) -> put
    bolts.Task remove(com.facebook.cache.common.CacheKey) -> remove
    bolts.Task clearAll() -> clearAll
    bolts.Task foundPinnedImage(com.facebook.cache.common.CacheKey,com.facebook.imagepipeline.image.EncodedImage) -> foundPinnedImage
    com.facebook.common.memory.PooledByteBuffer readFromDiskCache(com.facebook.cache.common.CacheKey) -> readFromDiskCache
    void writeToDiskCache(com.facebook.cache.common.CacheKey,com.facebook.imagepipeline.image.EncodedImage) -> writeToDiskCache
    boolean access$000(com.facebook.imagepipeline.cache.BufferedDiskCache,com.facebook.cache.common.CacheKey) -> access$000
    com.facebook.imagepipeline.cache.StagingArea access$100(com.facebook.imagepipeline.cache.BufferedDiskCache) -> access$100
    java.lang.Class access$200() -> access$200
    com.facebook.imagepipeline.cache.ImageCacheStatsTracker access$300(com.facebook.imagepipeline.cache.BufferedDiskCache) -> access$300
    com.facebook.common.memory.PooledByteBuffer access$400(com.facebook.imagepipeline.cache.BufferedDiskCache,com.facebook.cache.common.CacheKey) -> access$400
    void access$500(com.facebook.imagepipeline.cache.BufferedDiskCache,com.facebook.cache.common.CacheKey,com.facebook.imagepipeline.image.EncodedImage) -> access$500
    com.facebook.cache.disk.FileCache access$600(com.facebook.imagepipeline.cache.BufferedDiskCache) -> access$600
    com.facebook.common.memory.PooledByteStreams access$700(com.facebook.imagepipeline.cache.BufferedDiskCache) -> access$700
    void <clinit>() -> <clinit>
com.facebook.imagepipeline.cache.BufferedDiskCache$1 -> com.facebook.imagepipeline.cache.BufferedDiskCache$1:
    com.facebook.cache.common.CacheKey val$key -> val$key
    com.facebook.imagepipeline.cache.BufferedDiskCache this$0 -> this$0
    void <init>(com.facebook.imagepipeline.cache.BufferedDiskCache,com.facebook.cache.common.CacheKey) -> <init>
    java.lang.Boolean call() -> call
    java.lang.Object call() -> call
com.facebook.imagepipeline.cache.BufferedDiskCache$2 -> com.facebook.imagepipeline.cache.BufferedDiskCache$2:
    java.util.concurrent.atomic.AtomicBoolean val$isCancelled -> val$isCancelled
    com.facebook.cache.common.CacheKey val$key -> val$key
    com.facebook.imagepipeline.cache.BufferedDiskCache this$0 -> this$0
    void <init>(com.facebook.imagepipeline.cache.BufferedDiskCache,java.util.concurrent.atomic.AtomicBoolean,com.facebook.cache.common.CacheKey) -> <init>
    com.facebook.imagepipeline.image.EncodedImage call() -> call
    java.lang.Object call() -> call
com.facebook.imagepipeline.cache.BufferedDiskCache$3 -> com.facebook.imagepipeline.cache.BufferedDiskCache$3:
    com.facebook.cache.common.CacheKey val$key -> val$key
    com.facebook.imagepipeline.image.EncodedImage val$finalEncodedImage -> val$finalEncodedImage
    com.facebook.imagepipeline.cache.BufferedDiskCache this$0 -> this$0
    void <init>(com.facebook.imagepipeline.cache.BufferedDiskCache,com.facebook.cache.common.CacheKey,com.facebook.imagepipeline.image.EncodedImage) -> <init>
    void run() -> run
com.facebook.imagepipeline.cache.BufferedDiskCache$4 -> com.facebook.imagepipeline.cache.BufferedDiskCache$4:
    com.facebook.cache.common.CacheKey val$key -> val$key
    com.facebook.imagepipeline.cache.BufferedDiskCache this$0 -> this$0
    void <init>(com.facebook.imagepipeline.cache.BufferedDiskCache,com.facebook.cache.common.CacheKey) -> <init>
    java.lang.Void call() -> call
    java.lang.Object call() -> call
com.facebook.imagepipeline.cache.BufferedDiskCache$5 -> com.facebook.imagepipeline.cache.BufferedDiskCache$5:
    com.facebook.imagepipeline.cache.BufferedDiskCache this$0 -> this$0
    void <init>(com.facebook.imagepipeline.cache.BufferedDiskCache) -> <init>
    java.lang.Void call() -> call
    java.lang.Object call() -> call
com.facebook.imagepipeline.cache.BufferedDiskCache$6 -> com.facebook.imagepipeline.cache.BufferedDiskCache$6:
    com.facebook.imagepipeline.image.EncodedImage val$encodedImage -> val$encodedImage
    com.facebook.imagepipeline.cache.BufferedDiskCache this$0 -> this$0
    void <init>(com.facebook.imagepipeline.cache.BufferedDiskCache,com.facebook.imagepipeline.image.EncodedImage) -> <init>
    void write(java.io.OutputStream) -> write
com.facebook.imagepipeline.cache.CacheKeyFactory -> com.facebook.imagepipeline.cache.CacheKeyFactory:
    com.facebook.cache.common.CacheKey getBitmapCacheKey(com.facebook.imagepipeline.request.ImageRequest,java.lang.Object) -> getBitmapCacheKey
    com.facebook.cache.common.CacheKey getPostprocessedBitmapCacheKey(com.facebook.imagepipeline.request.ImageRequest,java.lang.Object) -> getPostprocessedBitmapCacheKey
    com.facebook.cache.common.CacheKey getEncodedCacheKey(com.facebook.imagepipeline.request.ImageRequest,java.lang.Object) -> getEncodedCacheKey
    com.facebook.cache.common.CacheKey getEncodedCacheKey(com.facebook.imagepipeline.request.ImageRequest,android.net.Uri,java.lang.Object) -> getEncodedCacheKey
com.facebook.imagepipeline.cache.CountingLruMap -> com.facebook.imagepipeline.cache.CountingLruMap:
    com.facebook.imagepipeline.cache.ValueDescriptor mValueDescriptor -> mValueDescriptor
    java.util.LinkedHashMap mMap -> mMap
    int mSizeInBytes -> mSizeInBytes
    void <init>(com.facebook.imagepipeline.cache.ValueDescriptor) -> <init>
    java.util.ArrayList getKeys() -> getKeys
    java.util.ArrayList getValues() -> getValues
    int getCount() -> getCount
    int getSizeInBytes() -> getSizeInBytes
    java.lang.Object getFirstKey() -> getFirstKey
    java.util.ArrayList getMatchingEntries(com.android.internal.util.Predicate) -> getMatchingEntries
    boolean contains(java.lang.Object) -> contains
    java.lang.Object get(java.lang.Object) -> get
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    java.lang.Object remove(java.lang.Object) -> remove
    java.util.ArrayList removeAll(com.android.internal.util.Predicate) -> removeAll
    java.util.ArrayList clear() -> clear
    int getValueSizeInBytes(java.lang.Object) -> getValueSizeInBytes
com.facebook.imagepipeline.cache.CountingMemoryCache -> com.facebook.imagepipeline.cache.CountingMemoryCache:
    long PARAMS_INTERCHECK_INTERVAL_MS -> PARAMS_INTERCHECK_INTERVAL_MS
    com.facebook.imagepipeline.cache.CountingLruMap mExclusiveEntries -> mExclusiveEntries
    com.facebook.imagepipeline.cache.CountingLruMap mCachedEntries -> mCachedEntries
    java.util.Map mOtherEntries -> mOtherEntries
    com.facebook.imagepipeline.cache.ValueDescriptor mValueDescriptor -> mValueDescriptor
    com.facebook.imagepipeline.cache.CountingMemoryCache$CacheTrimStrategy mCacheTrimStrategy -> mCacheTrimStrategy
    com.facebook.common.internal.Supplier mMemoryCacheParamsSupplier -> mMemoryCacheParamsSupplier
    com.facebook.imagepipeline.cache.MemoryCacheParams mMemoryCacheParams -> mMemoryCacheParams
    long mLastCacheParamsCheck -> mLastCacheParamsCheck
    void <init>(com.facebook.imagepipeline.cache.ValueDescriptor,com.facebook.imagepipeline.cache.CountingMemoryCache$CacheTrimStrategy,com.facebook.common.internal.Supplier,com.facebook.imagepipeline.bitmaps.PlatformBitmapFactory,boolean) -> <init>
    com.facebook.imagepipeline.cache.ValueDescriptor wrapValueDescriptor(com.facebook.imagepipeline.cache.ValueDescriptor) -> wrapValueDescriptor
    com.facebook.common.references.CloseableReference cache(java.lang.Object,com.facebook.common.references.CloseableReference) -> cache
    com.facebook.common.references.CloseableReference cache(java.lang.Object,com.facebook.common.references.CloseableReference,com.facebook.imagepipeline.cache.CountingMemoryCache$EntryStateObserver) -> cache
    boolean canCacheNewValue(java.lang.Object) -> canCacheNewValue
    com.facebook.common.references.CloseableReference get(java.lang.Object) -> get
    com.facebook.common.references.CloseableReference newClientReference(com.facebook.imagepipeline.cache.CountingMemoryCache$Entry) -> newClientReference
    void releaseClientReference(com.facebook.imagepipeline.cache.CountingMemoryCache$Entry) -> releaseClientReference
    boolean maybeAddToExclusives(com.facebook.imagepipeline.cache.CountingMemoryCache$Entry) -> maybeAddToExclusives
    com.facebook.common.references.CloseableReference reuse(java.lang.Object) -> reuse
    int removeAll(com.android.internal.util.Predicate) -> removeAll
    void clear() -> clear
    boolean contains(com.android.internal.util.Predicate) -> contains
    void trim(com.facebook.common.memory.MemoryTrimType) -> trim
    void maybeUpdateCacheParams() -> maybeUpdateCacheParams
    void maybeEvictEntries() -> maybeEvictEntries
    java.util.ArrayList trimExclusivelyOwnedEntries(int,int) -> trimExclusivelyOwnedEntries
    void maybeClose(java.util.ArrayList) -> maybeClose
    void maybeNotifyExclusiveEntryRemoval(java.util.ArrayList) -> maybeNotifyExclusiveEntryRemoval
    void maybeNotifyExclusiveEntryRemoval(com.facebook.imagepipeline.cache.CountingMemoryCache$Entry) -> maybeNotifyExclusiveEntryRemoval
    void maybeNotifyExclusiveEntryInsertion(com.facebook.imagepipeline.cache.CountingMemoryCache$Entry) -> maybeNotifyExclusiveEntryInsertion
    void makeOrphans(java.util.ArrayList) -> makeOrphans
    void makeOrphan(com.facebook.imagepipeline.cache.CountingMemoryCache$Entry) -> makeOrphan
    void increaseClientCount(com.facebook.imagepipeline.cache.CountingMemoryCache$Entry) -> increaseClientCount
    void decreaseClientCount(com.facebook.imagepipeline.cache.CountingMemoryCache$Entry) -> decreaseClientCount
    com.facebook.common.references.CloseableReference referenceToClose(com.facebook.imagepipeline.cache.CountingMemoryCache$Entry) -> referenceToClose
    int getCount() -> getCount
    int getSizeInBytes() -> getSizeInBytes
    int getInUseCount() -> getInUseCount
    int getInUseSizeInBytes() -> getInUseSizeInBytes
    int getEvictionQueueCount() -> getEvictionQueueCount
    int getEvictionQueueSizeInBytes() -> getEvictionQueueSizeInBytes
    void access$000(com.facebook.imagepipeline.cache.CountingMemoryCache,com.facebook.imagepipeline.cache.CountingMemoryCache$Entry) -> access$000
    void <clinit>() -> <clinit>
com.facebook.imagepipeline.cache.CountingMemoryCache$1 -> com.facebook.imagepipeline.cache.CountingMemoryCache$1:
    com.facebook.imagepipeline.cache.CountingMemoryCache this$0 -> this$0
    void <init>(com.facebook.imagepipeline.cache.CountingMemoryCache) -> <init>
    void onBitmapCreated(android.graphics.Bitmap,java.lang.Object) -> onBitmapCreated
com.facebook.imagepipeline.cache.CountingMemoryCache$2 -> com.facebook.imagepipeline.cache.CountingMemoryCache$2:
    com.facebook.imagepipeline.cache.ValueDescriptor val$evictableValueDescriptor -> val$evictableValueDescriptor
    com.facebook.imagepipeline.cache.CountingMemoryCache this$0 -> this$0
    void <init>(com.facebook.imagepipeline.cache.CountingMemoryCache,com.facebook.imagepipeline.cache.ValueDescriptor) -> <init>
    int getSizeInBytes(com.facebook.imagepipeline.cache.CountingMemoryCache$Entry) -> getSizeInBytes
    int getSizeInBytes(java.lang.Object) -> getSizeInBytes
com.facebook.imagepipeline.cache.CountingMemoryCache$3 -> com.facebook.imagepipeline.cache.CountingMemoryCache$3:
    com.facebook.imagepipeline.cache.CountingMemoryCache$Entry val$entry -> val$entry
    com.facebook.imagepipeline.cache.CountingMemoryCache this$0 -> this$0
    void <init>(com.facebook.imagepipeline.cache.CountingMemoryCache,com.facebook.imagepipeline.cache.CountingMemoryCache$Entry) -> <init>
    void release(java.lang.Object) -> release
com.facebook.imagepipeline.cache.CountingMemoryCache$CacheTrimStrategy -> com.facebook.imagepipeline.cache.CountingMemoryCache$CacheTrimStrategy:
    double getTrimRatio(com.facebook.common.memory.MemoryTrimType) -> getTrimRatio
com.facebook.imagepipeline.cache.CountingMemoryCache$Entry -> com.facebook.imagepipeline.cache.CountingMemoryCache$Entry:
    java.lang.Object key -> key
    com.facebook.common.references.CloseableReference valueRef -> valueRef
    int clientCount -> clientCount
    boolean isOrphan -> isOrphan
    com.facebook.imagepipeline.cache.CountingMemoryCache$EntryStateObserver observer -> observer
    void <init>(java.lang.Object,com.facebook.common.references.CloseableReference,com.facebook.imagepipeline.cache.CountingMemoryCache$EntryStateObserver) -> <init>
    com.facebook.imagepipeline.cache.CountingMemoryCache$Entry of(java.lang.Object,com.facebook.common.references.CloseableReference,com.facebook.imagepipeline.cache.CountingMemoryCache$EntryStateObserver) -> of
com.facebook.imagepipeline.cache.CountingMemoryCache$EntryStateObserver -> com.facebook.imagepipeline.cache.CountingMemoryCache$EntryStateObserver:
    void onExclusivityChanged(java.lang.Object,boolean) -> onExclusivityChanged
com.facebook.imagepipeline.cache.DefaultBitmapMemoryCacheParamsSupplier -> com.facebook.imagepipeline.cache.DefaultBitmapMemoryCacheParamsSupplier:
    int MAX_CACHE_ENTRIES -> MAX_CACHE_ENTRIES
    int MAX_EVICTION_QUEUE_SIZE -> MAX_EVICTION_QUEUE_SIZE
    int MAX_EVICTION_QUEUE_ENTRIES -> MAX_EVICTION_QUEUE_ENTRIES
    int MAX_CACHE_ENTRY_SIZE -> MAX_CACHE_ENTRY_SIZE
    android.app.ActivityManager mActivityManager -> mActivityManager
    void <init>(android.app.ActivityManager) -> <init>
    com.facebook.imagepipeline.cache.MemoryCacheParams get() -> get
    int getMaxCacheSize() -> getMaxCacheSize
    java.lang.Object get() -> get
com.facebook.imagepipeline.cache.DefaultCacheKeyFactory -> com.facebook.imagepipeline.cache.DefaultCacheKeyFactory:
    com.facebook.imagepipeline.cache.DefaultCacheKeyFactory sInstance -> sInstance
    void <init>() -> <init>
    com.facebook.imagepipeline.cache.DefaultCacheKeyFactory getInstance() -> getInstance
    com.facebook.cache.common.CacheKey getBitmapCacheKey(com.facebook.imagepipeline.request.ImageRequest,java.lang.Object) -> getBitmapCacheKey
    com.facebook.cache.common.CacheKey getPostprocessedBitmapCacheKey(com.facebook.imagepipeline.request.ImageRequest,java.lang.Object) -> getPostprocessedBitmapCacheKey
    com.facebook.cache.common.CacheKey getEncodedCacheKey(com.facebook.imagepipeline.request.ImageRequest,java.lang.Object) -> getEncodedCacheKey
    com.facebook.cache.common.CacheKey getEncodedCacheKey(com.facebook.imagepipeline.request.ImageRequest,android.net.Uri,java.lang.Object) -> getEncodedCacheKey
    java.lang.String getCacheKeyWithPackageName(com.facebook.imagepipeline.request.ImageRequest) -> getCacheKeyWithPackageName
    android.net.Uri getCacheKeySourceUri(android.net.Uri) -> getCacheKeySourceUri
    void <clinit>() -> <clinit>
com.facebook.imagepipeline.cache.DefaultEncodedMemoryCacheParamsSupplier -> com.facebook.imagepipeline.cache.DefaultEncodedMemoryCacheParamsSupplier:
    int MAX_CACHE_ENTRIES -> MAX_CACHE_ENTRIES
    int MAX_EVICTION_QUEUE_ENTRIES -> MAX_EVICTION_QUEUE_ENTRIES
    void <init>() -> <init>
    com.facebook.imagepipeline.cache.MemoryCacheParams get() -> get
    int getMaxCacheSize() -> getMaxCacheSize
    java.lang.Object get() -> get
com.facebook.imagepipeline.cache.DiskCachePolicy -> com.facebook.imagepipeline.cache.DiskCachePolicy:
    bolts.Task createAndStartCacheReadTask(com.facebook.imagepipeline.request.ImageRequest,java.lang.Object,java.util.concurrent.atomic.AtomicBoolean) -> createAndStartCacheReadTask
    void writeToCache(com.facebook.imagepipeline.image.EncodedImage,com.facebook.imagepipeline.request.ImageRequest,java.lang.Object) -> writeToCache
    com.facebook.imagepipeline.request.ImageRequest$CacheChoice getCacheChoiceForResult(com.facebook.imagepipeline.request.ImageRequest,com.facebook.imagepipeline.image.EncodedImage) -> getCacheChoiceForResult
com.facebook.imagepipeline.cache.EncodedCountingMemoryCacheFactory -> com.facebook.imagepipeline.cache.EncodedCountingMemoryCacheFactory:
    void <init>() -> <init>
    com.facebook.imagepipeline.cache.CountingMemoryCache get(com.facebook.common.internal.Supplier,com.facebook.common.memory.MemoryTrimmableRegistry,com.facebook.imagepipeline.bitmaps.PlatformBitmapFactory) -> get
com.facebook.imagepipeline.cache.EncodedCountingMemoryCacheFactory$1 -> com.facebook.imagepipeline.cache.EncodedCountingMemoryCacheFactory$1:
    void <init>() -> <init>
    int getSizeInBytes(com.facebook.common.memory.PooledByteBuffer) -> getSizeInBytes
    int getSizeInBytes(java.lang.Object) -> getSizeInBytes
com.facebook.imagepipeline.cache.EncodedMemoryCacheFactory -> com.facebook.imagepipeline.cache.EncodedMemoryCacheFactory:
    void <init>() -> <init>
    com.facebook.imagepipeline.cache.MemoryCache get(com.facebook.imagepipeline.cache.CountingMemoryCache,com.facebook.imagepipeline.cache.ImageCacheStatsTracker) -> get
com.facebook.imagepipeline.cache.EncodedMemoryCacheFactory$1 -> com.facebook.imagepipeline.cache.EncodedMemoryCacheFactory$1:
    com.facebook.imagepipeline.cache.ImageCacheStatsTracker val$imageCacheStatsTracker -> val$imageCacheStatsTracker
    void <init>(com.facebook.imagepipeline.cache.ImageCacheStatsTracker) -> <init>
    void onCacheHit(com.facebook.cache.common.CacheKey) -> onCacheHit
    void onCacheMiss() -> onCacheMiss
    void onCachePut() -> onCachePut
    void onCacheHit(java.lang.Object) -> onCacheHit
com.facebook.imagepipeline.cache.ImageCacheStatsTracker -> com.facebook.imagepipeline.cache.ImageCacheStatsTracker:
    void onBitmapCachePut() -> onBitmapCachePut
    void onBitmapCacheHit(com.facebook.cache.common.CacheKey) -> onBitmapCacheHit
    void onBitmapCacheMiss() -> onBitmapCacheMiss
    void onMemoryCachePut() -> onMemoryCachePut
    void onMemoryCacheHit(com.facebook.cache.common.CacheKey) -> onMemoryCacheHit
    void onMemoryCacheMiss() -> onMemoryCacheMiss
    void onStagingAreaHit(com.facebook.cache.common.CacheKey) -> onStagingAreaHit
    void onStagingAreaMiss() -> onStagingAreaMiss
    void onDiskCacheHit() -> onDiskCacheHit
    void onDiskCacheMiss() -> onDiskCacheMiss
    void onDiskCacheGetFail() -> onDiskCacheGetFail
    void registerBitmapMemoryCache(com.facebook.imagepipeline.cache.CountingMemoryCache) -> registerBitmapMemoryCache
    void registerEncodedMemoryCache(com.facebook.imagepipeline.cache.CountingMemoryCache) -> registerEncodedMemoryCache
com.facebook.imagepipeline.cache.InstrumentedMemoryCache -> com.facebook.imagepipeline.cache.InstrumentedMemoryCache:
    com.facebook.imagepipeline.cache.MemoryCache mDelegate -> mDelegate
    com.facebook.imagepipeline.cache.MemoryCacheTracker mTracker -> mTracker
    void <init>(com.facebook.imagepipeline.cache.MemoryCache,com.facebook.imagepipeline.cache.MemoryCacheTracker) -> <init>
    com.facebook.common.references.CloseableReference get(java.lang.Object) -> get
    com.facebook.common.references.CloseableReference cache(java.lang.Object,com.facebook.common.references.CloseableReference) -> cache
    int removeAll(com.android.internal.util.Predicate) -> removeAll
    boolean contains(com.android.internal.util.Predicate) -> contains
com.facebook.imagepipeline.cache.MediaIdExtractor -> com.facebook.imagepipeline.cache.MediaIdExtractor:
    java.lang.String getMediaIdFrom(android.net.Uri) -> getMediaIdFrom
com.facebook.imagepipeline.cache.MediaVariationsIndex -> com.facebook.imagepipeline.cache.MediaVariationsIndex:
    bolts.Task getCachedVariants(java.lang.String,com.facebook.imagepipeline.request.MediaVariations$Builder) -> getCachedVariants
    void saveCachedVariant(java.lang.String,com.facebook.imagepipeline.request.ImageRequest$CacheChoice,com.facebook.cache.common.CacheKey,com.facebook.imagepipeline.image.EncodedImage) -> saveCachedVariant
com.facebook.imagepipeline.cache.MediaVariationsIndexDatabase -> com.facebook.imagepipeline.cache.MediaVariationsIndexDatabase:
    java.lang.String TAG -> TAG
    java.lang.String[] PROJECTION -> PROJECTION
    java.lang.String SQL_DELETE_ENTRIES -> SQL_DELETE_ENTRIES
    com.facebook.imagepipeline.cache.MediaVariationsIndexDatabase$LazyIndexDbOpenHelper mDbHelper -> mDbHelper
    java.util.concurrent.Executor mReadExecutor -> mReadExecutor
    java.util.concurrent.Executor mWriteExecutor -> mWriteExecutor
    void <init>(android.content.Context,java.util.concurrent.Executor,java.util.concurrent.Executor) -> <init>
    bolts.Task getCachedVariants(java.lang.String,com.facebook.imagepipeline.request.MediaVariations$Builder) -> getCachedVariants
    com.facebook.imagepipeline.request.MediaVariations getCachedVariantsSync(java.lang.String,com.facebook.imagepipeline.request.MediaVariations$Builder) -> getCachedVariantsSync
    void saveCachedVariant(java.lang.String,com.facebook.imagepipeline.request.ImageRequest$CacheChoice,com.facebook.cache.common.CacheKey,com.facebook.imagepipeline.image.EncodedImage) -> saveCachedVariant
    void saveCachedVariantSync(java.lang.String,com.facebook.imagepipeline.request.ImageRequest$CacheChoice,com.facebook.cache.common.CacheKey,com.facebook.imagepipeline.image.EncodedImage) -> saveCachedVariantSync
    void <clinit>() -> <clinit>
com.facebook.imagepipeline.cache.MediaVariationsIndexDatabase$1 -> com.facebook.imagepipeline.cache.MediaVariationsIndexDatabase$1:
    java.lang.String val$mediaId -> val$mediaId
    com.facebook.imagepipeline.request.MediaVariations$Builder val$mediaVariationsBuilder -> val$mediaVariationsBuilder
    com.facebook.imagepipeline.cache.MediaVariationsIndexDatabase this$0 -> this$0
    void <init>(com.facebook.imagepipeline.cache.MediaVariationsIndexDatabase,java.lang.String,com.facebook.imagepipeline.request.MediaVariations$Builder) -> <init>
    com.facebook.imagepipeline.request.MediaVariations call() -> call
    java.lang.Object call() -> call
com.facebook.imagepipeline.cache.MediaVariationsIndexDatabase$2 -> com.facebook.imagepipeline.cache.MediaVariationsIndexDatabase$2:
    java.lang.String val$mediaId -> val$mediaId
    com.facebook.imagepipeline.request.ImageRequest$CacheChoice val$cacheChoice -> val$cacheChoice
    com.facebook.cache.common.CacheKey val$cacheKey -> val$cacheKey
    com.facebook.imagepipeline.image.EncodedImage val$encodedImage -> val$encodedImage
    com.facebook.imagepipeline.cache.MediaVariationsIndexDatabase this$0 -> this$0
    void <init>(com.facebook.imagepipeline.cache.MediaVariationsIndexDatabase,java.lang.String,com.facebook.imagepipeline.request.ImageRequest$CacheChoice,com.facebook.cache.common.CacheKey,com.facebook.imagepipeline.image.EncodedImage) -> <init>
    void run() -> run
com.facebook.imagepipeline.cache.MediaVariationsIndexDatabase$IndexDbOpenHelper -> com.facebook.imagepipeline.cache.MediaVariationsIndexDatabase$IndexDbOpenHelper:
    int DATABASE_VERSION -> DATABASE_VERSION
    java.lang.String DATABASE_NAME -> DATABASE_NAME
    java.lang.String TEXT_TYPE -> TEXT_TYPE
    java.lang.String INTEGER_TYPE -> INTEGER_TYPE
    java.lang.String SQL_CREATE_ENTRIES -> SQL_CREATE_ENTRIES
    java.lang.String SQL_CREATE_INDEX -> SQL_CREATE_INDEX
    void <init>(android.content.Context) -> <init>
    void onCreate(android.database.sqlite.SQLiteDatabase) -> onCreate
    void onUpgrade(android.database.sqlite.SQLiteDatabase,int,int) -> onUpgrade
    void onDowngrade(android.database.sqlite.SQLiteDatabase,int,int) -> onDowngrade
com.facebook.imagepipeline.cache.MediaVariationsIndexDatabase$IndexEntry -> com.facebook.imagepipeline.cache.MediaVariationsIndexDatabase$IndexEntry:
    java.lang.String TABLE_NAME -> TABLE_NAME
    java.lang.String COLUMN_NAME_MEDIA_ID -> COLUMN_NAME_MEDIA_ID
    java.lang.String COLUMN_NAME_WIDTH -> COLUMN_NAME_WIDTH
    java.lang.String COLUMN_NAME_HEIGHT -> COLUMN_NAME_HEIGHT
    java.lang.String COLUMN_NAME_CACHE_CHOICE -> COLUMN_NAME_CACHE_CHOICE
    java.lang.String COLUMN_NAME_CACHE_KEY -> COLUMN_NAME_CACHE_KEY
    java.lang.String COLUMN_NAME_RESOURCE_ID -> COLUMN_NAME_RESOURCE_ID
    void <init>() -> <init>
com.facebook.imagepipeline.cache.MediaVariationsIndexDatabase$LazyIndexDbOpenHelper -> com.facebook.imagepipeline.cache.MediaVariationsIndexDatabase$LazyIndexDbOpenHelper:
    android.content.Context mContext -> mContext
    com.facebook.imagepipeline.cache.MediaVariationsIndexDatabase$IndexDbOpenHelper mIndexDbOpenHelper -> mIndexDbOpenHelper
    void <init>(android.content.Context) -> <init>
    android.database.sqlite.SQLiteDatabase getWritableDatabase() -> getWritableDatabase
    void <init>(android.content.Context,com.facebook.imagepipeline.cache.MediaVariationsIndexDatabase$1) -> <init>
com.facebook.imagepipeline.cache.MemoryCache -> com.facebook.imagepipeline.cache.MemoryCache:
    com.facebook.common.references.CloseableReference cache(java.lang.Object,com.facebook.common.references.CloseableReference) -> cache
    com.facebook.common.references.CloseableReference get(java.lang.Object) -> get
    int removeAll(com.android.internal.util.Predicate) -> removeAll
    boolean contains(com.android.internal.util.Predicate) -> contains
com.facebook.imagepipeline.cache.MemoryCacheParams -> com.facebook.imagepipeline.cache.MemoryCacheParams:
    int maxCacheSize -> maxCacheSize
    int maxCacheEntries -> maxCacheEntries
    int maxEvictionQueueSize -> maxEvictionQueueSize
    int maxEvictionQueueEntries -> maxEvictionQueueEntries
    int maxCacheEntrySize -> maxCacheEntrySize
    void <init>(int,int,int,int,int) -> <init>
com.facebook.imagepipeline.cache.MemoryCacheTracker -> com.facebook.imagepipeline.cache.MemoryCacheTracker:
    void onCacheHit(java.lang.Object) -> onCacheHit
    void onCacheMiss() -> onCacheMiss
    void onCachePut() -> onCachePut
com.facebook.imagepipeline.cache.NativeMemoryCacheTrimStrategy -> com.facebook.imagepipeline.cache.NativeMemoryCacheTrimStrategy:
    java.lang.String TAG -> TAG
    void <init>() -> <init>
    double getTrimRatio(com.facebook.common.memory.MemoryTrimType) -> getTrimRatio
com.facebook.imagepipeline.cache.NativeMemoryCacheTrimStrategy$1 -> com.facebook.imagepipeline.cache.NativeMemoryCacheTrimStrategy$1:
    int[] $SwitchMap$com$facebook$common$memory$MemoryTrimType -> $SwitchMap$com$facebook$common$memory$MemoryTrimType
    void <clinit>() -> <clinit>
com.facebook.imagepipeline.cache.NoOpImageCacheStatsTracker -> com.facebook.imagepipeline.cache.NoOpImageCacheStatsTracker:
    com.facebook.imagepipeline.cache.NoOpImageCacheStatsTracker sInstance -> sInstance
    void <init>() -> <init>
    com.facebook.imagepipeline.cache.NoOpImageCacheStatsTracker getInstance() -> getInstance
    void onBitmapCachePut() -> onBitmapCachePut
    void onBitmapCacheHit(com.facebook.cache.common.CacheKey) -> onBitmapCacheHit
    void onBitmapCacheMiss() -> onBitmapCacheMiss
    void onMemoryCachePut() -> onMemoryCachePut
    void onMemoryCacheHit(com.facebook.cache.common.CacheKey) -> onMemoryCacheHit
    void onMemoryCacheMiss() -> onMemoryCacheMiss
    void onStagingAreaHit(com.facebook.cache.common.CacheKey) -> onStagingAreaHit
    void onStagingAreaMiss() -> onStagingAreaMiss
    void onDiskCacheHit() -> onDiskCacheHit
    void onDiskCacheMiss() -> onDiskCacheMiss
    void onDiskCacheGetFail() -> onDiskCacheGetFail
    void registerBitmapMemoryCache(com.facebook.imagepipeline.cache.CountingMemoryCache) -> registerBitmapMemoryCache
    void registerEncodedMemoryCache(com.facebook.imagepipeline.cache.CountingMemoryCache) -> registerEncodedMemoryCache
    void <clinit>() -> <clinit>
com.facebook.imagepipeline.cache.NoOpMediaVariationsIndex -> com.facebook.imagepipeline.cache.NoOpMediaVariationsIndex:
    void <init>() -> <init>
    bolts.Task getCachedVariants(java.lang.String,com.facebook.imagepipeline.request.MediaVariations$Builder) -> getCachedVariants
    void saveCachedVariant(java.lang.String,com.facebook.imagepipeline.request.ImageRequest$CacheChoice,com.facebook.cache.common.CacheKey,com.facebook.imagepipeline.image.EncodedImage) -> saveCachedVariant
com.facebook.imagepipeline.cache.SmallCacheIfRequestedDiskCachePolicy -> com.facebook.imagepipeline.cache.SmallCacheIfRequestedDiskCachePolicy:
    com.facebook.imagepipeline.cache.BufferedDiskCache mDefaultBufferedDiskCache -> mDefaultBufferedDiskCache
    com.facebook.imagepipeline.cache.BufferedDiskCache mSmallImageBufferedDiskCache -> mSmallImageBufferedDiskCache
    com.facebook.imagepipeline.cache.CacheKeyFactory mCacheKeyFactory -> mCacheKeyFactory
    void <init>(com.facebook.imagepipeline.cache.BufferedDiskCache,com.facebook.imagepipeline.cache.BufferedDiskCache,com.facebook.imagepipeline.cache.CacheKeyFactory) -> <init>
    bolts.Task createAndStartCacheReadTask(com.facebook.imagepipeline.request.ImageRequest,java.lang.Object,java.util.concurrent.atomic.AtomicBoolean) -> createAndStartCacheReadTask
    void writeToCache(com.facebook.imagepipeline.image.EncodedImage,com.facebook.imagepipeline.request.ImageRequest,java.lang.Object) -> writeToCache
    com.facebook.imagepipeline.request.ImageRequest$CacheChoice getCacheChoiceForResult(com.facebook.imagepipeline.request.ImageRequest,com.facebook.imagepipeline.image.EncodedImage) -> getCacheChoiceForResult
com.facebook.imagepipeline.cache.SplitCachesByImageSizeDiskCachePolicy -> com.facebook.imagepipeline.cache.SplitCachesByImageSizeDiskCachePolicy:
    com.facebook.imagepipeline.cache.BufferedDiskCache mDefaultBufferedDiskCache -> mDefaultBufferedDiskCache
    com.facebook.imagepipeline.cache.BufferedDiskCache mSmallImageBufferedDiskCache -> mSmallImageBufferedDiskCache
    com.facebook.imagepipeline.cache.CacheKeyFactory mCacheKeyFactory -> mCacheKeyFactory
    int mForceSmallCacheThresholdBytes -> mForceSmallCacheThresholdBytes
    void <init>(com.facebook.imagepipeline.cache.BufferedDiskCache,com.facebook.imagepipeline.cache.BufferedDiskCache,com.facebook.imagepipeline.cache.CacheKeyFactory,int) -> <init>
    bolts.Task createAndStartCacheReadTask(com.facebook.imagepipeline.request.ImageRequest,java.lang.Object,java.util.concurrent.atomic.AtomicBoolean) -> createAndStartCacheReadTask
    void writeToCache(com.facebook.imagepipeline.image.EncodedImage,com.facebook.imagepipeline.request.ImageRequest,java.lang.Object) -> writeToCache
    com.facebook.imagepipeline.request.ImageRequest$CacheChoice getCacheChoiceForResult(com.facebook.imagepipeline.request.ImageRequest,com.facebook.imagepipeline.image.EncodedImage) -> getCacheChoiceForResult
    boolean isTaskCancelled(bolts.Task) -> isTaskCancelled
    boolean access$000(bolts.Task) -> access$000
com.facebook.imagepipeline.cache.SplitCachesByImageSizeDiskCachePolicy$1 -> com.facebook.imagepipeline.cache.SplitCachesByImageSizeDiskCachePolicy$1:
    com.facebook.imagepipeline.cache.BufferedDiskCache val$secondCache -> val$secondCache
    com.facebook.cache.common.CacheKey val$cacheKey -> val$cacheKey
    java.util.concurrent.atomic.AtomicBoolean val$isCancelled -> val$isCancelled
    com.facebook.imagepipeline.cache.SplitCachesByImageSizeDiskCachePolicy this$0 -> this$0
    void <init>(com.facebook.imagepipeline.cache.SplitCachesByImageSizeDiskCachePolicy,com.facebook.imagepipeline.cache.BufferedDiskCache,com.facebook.cache.common.CacheKey,java.util.concurrent.atomic.AtomicBoolean) -> <init>
    bolts.Task then(bolts.Task) -> then
    java.lang.Object then(bolts.Task) -> then
com.facebook.imagepipeline.cache.SplitCachesByImageSizeDiskCachePolicy$2 -> com.facebook.imagepipeline.cache.SplitCachesByImageSizeDiskCachePolicy$2:
    int[] $SwitchMap$com$facebook$imagepipeline$request$ImageRequest$CacheChoice -> $SwitchMap$com$facebook$imagepipeline$request$ImageRequest$CacheChoice
    void <clinit>() -> <clinit>
com.facebook.imagepipeline.cache.StagingArea -> com.facebook.imagepipeline.cache.StagingArea:
    java.lang.Class TAG -> TAG
    java.util.Map mMap -> mMap
    void <init>() -> <init>
    com.facebook.imagepipeline.cache.StagingArea getInstance() -> getInstance
    void put(com.facebook.cache.common.CacheKey,com.facebook.imagepipeline.image.EncodedImage) -> put
    void clearAll() -> clearAll
    boolean remove(com.facebook.cache.common.CacheKey) -> remove
    boolean remove(com.facebook.cache.common.CacheKey,com.facebook.imagepipeline.image.EncodedImage) -> remove
    com.facebook.imagepipeline.image.EncodedImage get(com.facebook.cache.common.CacheKey) -> get
    boolean containsKey(com.facebook.cache.common.CacheKey) -> containsKey
    void logStats() -> logStats
    void <clinit>() -> <clinit>
com.facebook.imagepipeline.cache.ValueDescriptor -> com.facebook.imagepipeline.cache.ValueDescriptor:
    int getSizeInBytes(java.lang.Object) -> getSizeInBytes
com.facebook.imagepipeline.common.ImageDecodeOptions -> com.facebook.imagepipeline.common.ImageDecodeOptions:
    com.facebook.imagepipeline.common.ImageDecodeOptions DEFAULTS -> DEFAULTS
    int minDecodeIntervalMs -> minDecodeIntervalMs
    boolean decodePreviewFrame -> decodePreviewFrame
    boolean useLastFrameForPreview -> useLastFrameForPreview
    boolean decodeAllFrames -> decodeAllFrames
    boolean forceStaticImage -> forceStaticImage
    android.graphics.Bitmap$Config bitmapConfig -> bitmapConfig
    com.facebook.imagepipeline.decoder.ImageDecoder customImageDecoder -> customImageDecoder
    void <init>(com.facebook.imagepipeline.common.ImageDecodeOptionsBuilder) -> <init>
    com.facebook.imagepipeline.common.ImageDecodeOptions defaults() -> defaults
    com.facebook.imagepipeline.common.ImageDecodeOptionsBuilder newBuilder() -> newBuilder
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void <clinit>() -> <clinit>
com.facebook.imagepipeline.common.ImageDecodeOptionsBuilder -> com.facebook.imagepipeline.common.ImageDecodeOptionsBuilder:
    int mMinDecodeIntervalMs -> mMinDecodeIntervalMs
    boolean mDecodePreviewFrame -> mDecodePreviewFrame
    boolean mUseLastFrameForPreview -> mUseLastFrameForPreview
    boolean mDecodeAllFrames -> mDecodeAllFrames
    boolean mForceStaticImage -> mForceStaticImage
    android.graphics.Bitmap$Config mBitmapConfig -> mBitmapConfig
    com.facebook.imagepipeline.decoder.ImageDecoder mCustomImageDecoder -> mCustomImageDecoder
    void <init>() -> <init>
    com.facebook.imagepipeline.common.ImageDecodeOptionsBuilder setFrom(com.facebook.imagepipeline.common.ImageDecodeOptions) -> setFrom
    com.facebook.imagepipeline.common.ImageDecodeOptionsBuilder setMinDecodeIntervalMs(int) -> setMinDecodeIntervalMs
    int getMinDecodeIntervalMs() -> getMinDecodeIntervalMs
    com.facebook.imagepipeline.common.ImageDecodeOptionsBuilder setDecodePreviewFrame(boolean) -> setDecodePreviewFrame
    boolean getDecodePreviewFrame() -> getDecodePreviewFrame
    boolean getUseLastFrameForPreview() -> getUseLastFrameForPreview
    com.facebook.imagepipeline.common.ImageDecodeOptionsBuilder setUseLastFrameForPreview(boolean) -> setUseLastFrameForPreview
    boolean getDecodeAllFrames() -> getDecodeAllFrames
    com.facebook.imagepipeline.common.ImageDecodeOptionsBuilder setDecodeAllFrames(boolean) -> setDecodeAllFrames
    com.facebook.imagepipeline.common.ImageDecodeOptionsBuilder setForceStaticImage(boolean) -> setForceStaticImage
    com.facebook.imagepipeline.common.ImageDecodeOptionsBuilder setCustomImageDecoder(com.facebook.imagepipeline.decoder.ImageDecoder) -> setCustomImageDecoder
    com.facebook.imagepipeline.decoder.ImageDecoder getCustomImageDecoder() -> getCustomImageDecoder
    boolean getForceStaticImage() -> getForceStaticImage
    android.graphics.Bitmap$Config getBitmapConfig() -> getBitmapConfig
    void setBitmapConfig(android.graphics.Bitmap$Config) -> setBitmapConfig
    com.facebook.imagepipeline.common.ImageDecodeOptions build() -> build
com.facebook.imagepipeline.common.Priority -> com.facebook.imagepipeline.common.Priority:
    com.facebook.imagepipeline.common.Priority LOW -> LOW
    com.facebook.imagepipeline.common.Priority MEDIUM -> MEDIUM
    com.facebook.imagepipeline.common.Priority HIGH -> HIGH
    com.facebook.imagepipeline.common.Priority[] $VALUES -> $VALUES
    com.facebook.imagepipeline.common.Priority[] values() -> values
    com.facebook.imagepipeline.common.Priority valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    com.facebook.imagepipeline.common.Priority getHigherPriority(com.facebook.imagepipeline.common.Priority,com.facebook.imagepipeline.common.Priority) -> getHigherPriority
    void <clinit>() -> <clinit>
com.facebook.imagepipeline.common.ResizeOptions -> com.facebook.imagepipeline.common.ResizeOptions:
    float DEFAULT_ROUNDUP_FRACTION -> DEFAULT_ROUNDUP_FRACTION
    int width -> width
    int height -> height
    float maxBitmapSize -> maxBitmapSize
    float roundUpFraction -> roundUpFraction
    com.facebook.imagepipeline.common.ResizeOptions forDimensions(int,int) -> forDimensions
    com.facebook.imagepipeline.common.ResizeOptions forSquareSize(int) -> forSquareSize
    void <init>(int,int) -> <init>
    void <init>(int,int,float) -> <init>
    void <init>(int,int,float,float) -> <init>
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
com.facebook.imagepipeline.common.RotationOptions -> com.facebook.imagepipeline.common.RotationOptions:
    int NO_ROTATION -> NO_ROTATION
    int ROTATE_90 -> ROTATE_90
    int ROTATE_180 -> ROTATE_180
    int ROTATE_270 -> ROTATE_270
    int USE_EXIF_ROTATION_ANGLE -> USE_EXIF_ROTATION_ANGLE
    int DISABLE_ROTATION -> DISABLE_ROTATION
    int mRotation -> mRotation
    boolean mDeferUntilRendered -> mDeferUntilRendered
    com.facebook.imagepipeline.common.RotationOptions ROTATION_OPTIONS_AUTO_ROTATE -> ROTATION_OPTIONS_AUTO_ROTATE
    com.facebook.imagepipeline.common.RotationOptions ROTATION_OPTIONS_DISABLE_ROTATION -> ROTATION_OPTIONS_DISABLE_ROTATION
    com.facebook.imagepipeline.common.RotationOptions ROTATION_OPTIONS_ROTATE_AT_RENDER_TIME -> ROTATION_OPTIONS_ROTATE_AT_RENDER_TIME
    com.facebook.imagepipeline.common.RotationOptions autoRotate() -> autoRotate
    com.facebook.imagepipeline.common.RotationOptions disableRotation() -> disableRotation
    com.facebook.imagepipeline.common.RotationOptions autoRotateAtRenderTime() -> autoRotateAtRenderTime
    com.facebook.imagepipeline.common.RotationOptions forceRotation(int) -> forceRotation
    void <init>(int,boolean) -> <init>
    boolean useImageMetadata() -> useImageMetadata
    boolean rotationEnabled() -> rotationEnabled
    int getForcedAngle() -> getForcedAngle
    boolean canDeferUntilRendered() -> canDeferUntilRendered
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
    void <clinit>() -> <clinit>
com.facebook.imagepipeline.common.RotationOptions$Rotation -> com.facebook.imagepipeline.common.RotationOptions$Rotation:
com.facebook.imagepipeline.common.RotationOptions$RotationAngle -> com.facebook.imagepipeline.common.RotationOptions$RotationAngle:
com.facebook.imagepipeline.common.SourceUriType -> com.facebook.imagepipeline.common.SourceUriType:
    int SOURCE_TYPE_UNKNOWN -> SOURCE_TYPE_UNKNOWN
    int SOURCE_TYPE_NETWORK -> SOURCE_TYPE_NETWORK
    int SOURCE_TYPE_LOCAL_FILE -> SOURCE_TYPE_LOCAL_FILE
    int SOURCE_TYPE_LOCAL_VIDEO_FILE -> SOURCE_TYPE_LOCAL_VIDEO_FILE
    int SOURCE_TYPE_LOCAL_IMAGE_FILE -> SOURCE_TYPE_LOCAL_IMAGE_FILE
    int SOURCE_TYPE_LOCAL_CONTENT -> SOURCE_TYPE_LOCAL_CONTENT
    int SOURCE_TYPE_LOCAL_ASSET -> SOURCE_TYPE_LOCAL_ASSET
    int SOURCE_TYPE_LOCAL_RESOURCE -> SOURCE_TYPE_LOCAL_RESOURCE
    int SOURCE_TYPE_DATA -> SOURCE_TYPE_DATA
com.facebook.imagepipeline.common.TooManyBitmapsException -> com.facebook.imagepipeline.common.TooManyBitmapsException:
    void <init>() -> <init>
com.facebook.imagepipeline.core.DefaultExecutorSupplier -> com.facebook.imagepipeline.core.DefaultExecutorSupplier:
    int NUM_IO_BOUND_THREADS -> NUM_IO_BOUND_THREADS
    int NUM_LIGHTWEIGHT_BACKGROUND_THREADS -> NUM_LIGHTWEIGHT_BACKGROUND_THREADS
    java.util.concurrent.Executor mIoBoundExecutor -> mIoBoundExecutor
    java.util.concurrent.Executor mDecodeExecutor -> mDecodeExecutor
    java.util.concurrent.Executor mBackgroundExecutor -> mBackgroundExecutor
    java.util.concurrent.Executor mLightWeightBackgroundExecutor -> mLightWeightBackgroundExecutor
    void <init>(int) -> <init>
    java.util.concurrent.Executor forLocalStorageRead() -> forLocalStorageRead
    java.util.concurrent.Executor forLocalStorageWrite() -> forLocalStorageWrite
    java.util.concurrent.Executor forDecode() -> forDecode
    java.util.concurrent.Executor forBackgroundTasks() -> forBackgroundTasks
    java.util.concurrent.Executor forLightweightBackgroundTasks() -> forLightweightBackgroundTasks
com.facebook.imagepipeline.core.DiskStorageCacheFactory -> com.facebook.imagepipeline.core.DiskStorageCacheFactory:
    com.facebook.imagepipeline.core.DiskStorageFactory mDiskStorageFactory -> mDiskStorageFactory
    void <init>(com.facebook.imagepipeline.core.DiskStorageFactory) -> <init>
    com.facebook.cache.disk.DiskStorageCache buildDiskStorageCache(com.facebook.cache.disk.DiskCacheConfig,com.facebook.cache.disk.DiskStorage) -> buildDiskStorageCache
    com.facebook.cache.disk.DiskStorageCache buildDiskStorageCache(com.facebook.cache.disk.DiskCacheConfig,com.facebook.cache.disk.DiskStorage,java.util.concurrent.Executor) -> buildDiskStorageCache
    com.facebook.cache.disk.FileCache get(com.facebook.cache.disk.DiskCacheConfig) -> get
com.facebook.imagepipeline.core.DiskStorageFactory -> com.facebook.imagepipeline.core.DiskStorageFactory:
    com.facebook.cache.disk.DiskStorage get(com.facebook.cache.disk.DiskCacheConfig) -> get
com.facebook.imagepipeline.core.DynamicDefaultDiskStorageFactory -> com.facebook.imagepipeline.core.DynamicDefaultDiskStorageFactory:
    void <init>() -> <init>
    com.facebook.cache.disk.DiskStorage get(com.facebook.cache.disk.DiskCacheConfig) -> get
com.facebook.imagepipeline.core.ExecutorSupplier -> com.facebook.imagepipeline.core.ExecutorSupplier:
    java.util.concurrent.Executor forLocalStorageRead() -> forLocalStorageRead
    java.util.concurrent.Executor forLocalStorageWrite() -> forLocalStorageWrite
    java.util.concurrent.Executor forDecode() -> forDecode
    java.util.concurrent.Executor forBackgroundTasks() -> forBackgroundTasks
    java.util.concurrent.Executor forLightweightBackgroundTasks() -> forLightweightBackgroundTasks
com.facebook.imagepipeline.core.FileCacheFactory -> com.facebook.imagepipeline.core.FileCacheFactory:
    com.facebook.cache.disk.FileCache get(com.facebook.cache.disk.DiskCacheConfig) -> get
com.facebook.imagepipeline.core.ImagePipeline -> com.facebook.imagepipeline.core.ImagePipeline:
    java.util.concurrent.CancellationException PREFETCH_EXCEPTION -> PREFETCH_EXCEPTION
    com.facebook.imagepipeline.core.ProducerSequenceFactory mProducerSequenceFactory -> mProducerSequenceFactory
    com.facebook.imagepipeline.listener.RequestListener mRequestListener -> mRequestListener
    com.facebook.common.internal.Supplier mIsPrefetchEnabledSupplier -> mIsPrefetchEnabledSupplier
    com.facebook.imagepipeline.cache.MemoryCache mBitmapMemoryCache -> mBitmapMemoryCache
    com.facebook.imagepipeline.cache.MemoryCache mEncodedMemoryCache -> mEncodedMemoryCache
    com.facebook.imagepipeline.cache.BufferedDiskCache mMainBufferedDiskCache -> mMainBufferedDiskCache
    com.facebook.imagepipeline.cache.BufferedDiskCache mSmallImageBufferedDiskCache -> mSmallImageBufferedDiskCache
    com.facebook.imagepipeline.cache.CacheKeyFactory mCacheKeyFactory -> mCacheKeyFactory
    com.facebook.imagepipeline.producers.ThreadHandoffProducerQueue mThreadHandoffProducerQueue -> mThreadHandoffProducerQueue
    com.facebook.common.internal.Supplier mSuppressBitmapPrefetchingSupplier -> mSuppressBitmapPrefetchingSupplier
    java.util.concurrent.atomic.AtomicLong mIdCounter -> mIdCounter
    void <init>(com.facebook.imagepipeline.core.ProducerSequenceFactory,java.util.Set,com.facebook.common.internal.Supplier,com.facebook.imagepipeline.cache.MemoryCache,com.facebook.imagepipeline.cache.MemoryCache,com.facebook.imagepipeline.cache.BufferedDiskCache,com.facebook.imagepipeline.cache.BufferedDiskCache,com.facebook.imagepipeline.cache.CacheKeyFactory,com.facebook.imagepipeline.producers.ThreadHandoffProducerQueue,com.facebook.common.internal.Supplier) -> <init>
    java.lang.String generateUniqueFutureId() -> generateUniqueFutureId
    com.facebook.common.internal.Supplier getDataSourceSupplier(com.facebook.imagepipeline.request.ImageRequest,java.lang.Object,boolean) -> getDataSourceSupplier
    com.facebook.common.internal.Supplier getDataSourceSupplier(com.facebook.imagepipeline.request.ImageRequest,java.lang.Object,com.facebook.imagepipeline.request.ImageRequest$RequestLevel) -> getDataSourceSupplier
    com.facebook.common.internal.Supplier getEncodedImageDataSourceSupplier(com.facebook.imagepipeline.request.ImageRequest,java.lang.Object) -> getEncodedImageDataSourceSupplier
    com.facebook.datasource.DataSource fetchImageFromBitmapCache(com.facebook.imagepipeline.request.ImageRequest,java.lang.Object) -> fetchImageFromBitmapCache
    com.facebook.datasource.DataSource fetchDecodedImage(com.facebook.imagepipeline.request.ImageRequest,java.lang.Object) -> fetchDecodedImage
    com.facebook.datasource.DataSource fetchDecodedImage(com.facebook.imagepipeline.request.ImageRequest,java.lang.Object,com.facebook.imagepipeline.request.ImageRequest$RequestLevel) -> fetchDecodedImage
    com.facebook.datasource.DataSource fetchEncodedImage(com.facebook.imagepipeline.request.ImageRequest,java.lang.Object) -> fetchEncodedImage
    com.facebook.datasource.DataSource prefetchToBitmapCache(com.facebook.imagepipeline.request.ImageRequest,java.lang.Object) -> prefetchToBitmapCache
    com.facebook.datasource.DataSource prefetchToDiskCache(com.facebook.imagepipeline.request.ImageRequest,java.lang.Object) -> prefetchToDiskCache
    com.facebook.datasource.DataSource prefetchToDiskCache(com.facebook.imagepipeline.request.ImageRequest,java.lang.Object,com.facebook.imagepipeline.common.Priority) -> prefetchToDiskCache
    void evictFromMemoryCache(android.net.Uri) -> evictFromMemoryCache
    void evictFromDiskCache(android.net.Uri) -> evictFromDiskCache
    void evictFromDiskCache(com.facebook.imagepipeline.request.ImageRequest) -> evictFromDiskCache
    void evictFromCache(android.net.Uri) -> evictFromCache
    void clearMemoryCaches() -> clearMemoryCaches
    void clearDiskCaches() -> clearDiskCaches
    void clearCaches() -> clearCaches
    boolean isInBitmapMemoryCache(android.net.Uri) -> isInBitmapMemoryCache
    com.facebook.imagepipeline.cache.MemoryCache getBitmapMemoryCache() -> getBitmapMemoryCache
    boolean isInBitmapMemoryCache(com.facebook.imagepipeline.request.ImageRequest) -> isInBitmapMemoryCache
    boolean isInDiskCacheSync(android.net.Uri) -> isInDiskCacheSync
    boolean isInDiskCacheSync(android.net.Uri,com.facebook.imagepipeline.request.ImageRequest$CacheChoice) -> isInDiskCacheSync
    boolean isInDiskCacheSync(com.facebook.imagepipeline.request.ImageRequest) -> isInDiskCacheSync
    com.facebook.datasource.DataSource isInDiskCache(android.net.Uri) -> isInDiskCache
    com.facebook.datasource.DataSource isInDiskCache(com.facebook.imagepipeline.request.ImageRequest) -> isInDiskCache
    com.facebook.datasource.DataSource submitFetchRequest(com.facebook.imagepipeline.producers.Producer,com.facebook.imagepipeline.request.ImageRequest,com.facebook.imagepipeline.request.ImageRequest$RequestLevel,java.lang.Object) -> submitFetchRequest
    com.facebook.datasource.DataSource submitPrefetchRequest(com.facebook.imagepipeline.producers.Producer,com.facebook.imagepipeline.request.ImageRequest,com.facebook.imagepipeline.request.ImageRequest$RequestLevel,java.lang.Object,com.facebook.imagepipeline.common.Priority) -> submitPrefetchRequest
    com.facebook.imagepipeline.listener.RequestListener getRequestListenerForRequest(com.facebook.imagepipeline.request.ImageRequest) -> getRequestListenerForRequest
    com.android.internal.util.Predicate predicateForUri(android.net.Uri) -> predicateForUri
    void pause() -> pause
    void resume() -> resume
    boolean isPaused() -> isPaused
    com.facebook.imagepipeline.cache.CacheKeyFactory getCacheKeyFactory() -> getCacheKeyFactory
    com.facebook.imagepipeline.cache.BufferedDiskCache access$000(com.facebook.imagepipeline.core.ImagePipeline) -> access$000
    void <clinit>() -> <clinit>
com.facebook.imagepipeline.core.ImagePipeline$1 -> com.facebook.imagepipeline.core.ImagePipeline$1:
    com.facebook.imagepipeline.request.ImageRequest val$imageRequest -> val$imageRequest
    java.lang.Object val$callerContext -> val$callerContext
    com.facebook.imagepipeline.request.ImageRequest$RequestLevel val$requestLevel -> val$requestLevel
    com.facebook.imagepipeline.core.ImagePipeline this$0 -> this$0
    void <init>(com.facebook.imagepipeline.core.ImagePipeline,com.facebook.imagepipeline.request.ImageRequest,java.lang.Object,com.facebook.imagepipeline.request.ImageRequest$RequestLevel) -> <init>
    com.facebook.datasource.DataSource get() -> get
    java.lang.String toString() -> toString
    java.lang.Object get() -> get
com.facebook.imagepipeline.core.ImagePipeline$2 -> com.facebook.imagepipeline.core.ImagePipeline$2:
    com.facebook.imagepipeline.request.ImageRequest val$imageRequest -> val$imageRequest
    java.lang.Object val$callerContext -> val$callerContext
    com.facebook.imagepipeline.core.ImagePipeline this$0 -> this$0
    void <init>(com.facebook.imagepipeline.core.ImagePipeline,com.facebook.imagepipeline.request.ImageRequest,java.lang.Object) -> <init>
    com.facebook.datasource.DataSource get() -> get
    java.lang.String toString() -> toString
    java.lang.Object get() -> get
com.facebook.imagepipeline.core.ImagePipeline$3 -> com.facebook.imagepipeline.core.ImagePipeline$3:
    com.facebook.imagepipeline.core.ImagePipeline this$0 -> this$0
    void <init>(com.facebook.imagepipeline.core.ImagePipeline) -> <init>
    boolean apply(com.facebook.cache.common.CacheKey) -> apply
    boolean apply(java.lang.Object) -> apply
com.facebook.imagepipeline.core.ImagePipeline$4 -> com.facebook.imagepipeline.core.ImagePipeline$4:
    com.facebook.datasource.SimpleDataSource val$dataSource -> val$dataSource
    com.facebook.imagepipeline.core.ImagePipeline this$0 -> this$0
    void <init>(com.facebook.imagepipeline.core.ImagePipeline,com.facebook.datasource.SimpleDataSource) -> <init>
    java.lang.Void then(bolts.Task) -> then
    java.lang.Object then(bolts.Task) -> then
com.facebook.imagepipeline.core.ImagePipeline$5 -> com.facebook.imagepipeline.core.ImagePipeline$5:
    com.facebook.cache.common.CacheKey val$cacheKey -> val$cacheKey
    com.facebook.imagepipeline.core.ImagePipeline this$0 -> this$0
    void <init>(com.facebook.imagepipeline.core.ImagePipeline,com.facebook.cache.common.CacheKey) -> <init>
    bolts.Task then(bolts.Task) -> then
    java.lang.Object then(bolts.Task) -> then
com.facebook.imagepipeline.core.ImagePipeline$6 -> com.facebook.imagepipeline.core.ImagePipeline$6:
    android.net.Uri val$uri -> val$uri
    com.facebook.imagepipeline.core.ImagePipeline this$0 -> this$0
    void <init>(com.facebook.imagepipeline.core.ImagePipeline,android.net.Uri) -> <init>
    boolean apply(com.facebook.cache.common.CacheKey) -> apply
    boolean apply(java.lang.Object) -> apply
com.facebook.imagepipeline.core.ImagePipeline$7 -> com.facebook.imagepipeline.core.ImagePipeline$7:
    int[] $SwitchMap$com$facebook$imagepipeline$request$ImageRequest$CacheChoice -> $SwitchMap$com$facebook$imagepipeline$request$ImageRequest$CacheChoice
    void <clinit>() -> <clinit>
com.facebook.imagepipeline.core.ImagePipelineConfig -> com.facebook.imagepipeline.core.ImagePipelineConfig:
    com.facebook.imagepipeline.animated.factory.AnimatedImageFactory mAnimatedImageFactory -> mAnimatedImageFactory
    android.graphics.Bitmap$Config mBitmapConfig -> mBitmapConfig
    com.facebook.common.internal.Supplier mBitmapMemoryCacheParamsSupplier -> mBitmapMemoryCacheParamsSupplier
    com.facebook.imagepipeline.cache.CacheKeyFactory mCacheKeyFactory -> mCacheKeyFactory
    android.content.Context mContext -> mContext
    boolean mDownsampleEnabled -> mDownsampleEnabled
    com.facebook.imagepipeline.core.FileCacheFactory mFileCacheFactory -> mFileCacheFactory
    com.facebook.common.internal.Supplier mEncodedMemoryCacheParamsSupplier -> mEncodedMemoryCacheParamsSupplier
    com.facebook.imagepipeline.core.ExecutorSupplier mExecutorSupplier -> mExecutorSupplier
    com.facebook.imagepipeline.cache.ImageCacheStatsTracker mImageCacheStatsTracker -> mImageCacheStatsTracker
    com.facebook.imagepipeline.decoder.ImageDecoder mImageDecoder -> mImageDecoder
    com.facebook.common.internal.Supplier mIsPrefetchEnabledSupplier -> mIsPrefetchEnabledSupplier
    com.facebook.cache.disk.DiskCacheConfig mMainDiskCacheConfig -> mMainDiskCacheConfig
    com.facebook.common.memory.MemoryTrimmableRegistry mMemoryTrimmableRegistry -> mMemoryTrimmableRegistry
    com.facebook.imagepipeline.producers.NetworkFetcher mNetworkFetcher -> mNetworkFetcher
    com.facebook.imagepipeline.bitmaps.PlatformBitmapFactory mPlatformBitmapFactory -> mPlatformBitmapFactory
    com.facebook.imagepipeline.memory.PoolFactory mPoolFactory -> mPoolFactory
    com.facebook.imagepipeline.decoder.ProgressiveJpegConfig mProgressiveJpegConfig -> mProgressiveJpegConfig
    java.util.Set mRequestListeners -> mRequestListeners
    boolean mResizeAndRotateEnabledForNetwork -> mResizeAndRotateEnabledForNetwork
    com.facebook.cache.disk.DiskCacheConfig mSmallImageDiskCacheConfig -> mSmallImageDiskCacheConfig
    com.facebook.imagepipeline.decoder.ImageDecoderConfig mImageDecoderConfig -> mImageDecoderConfig
    com.facebook.imagepipeline.core.ImagePipelineExperiments mImagePipelineExperiments -> mImagePipelineExperiments
    com.facebook.imagepipeline.core.ImagePipelineConfig$DefaultImageRequestConfig sDefaultImageRequestConfig -> sDefaultImageRequestConfig
    void <init>(com.facebook.imagepipeline.core.ImagePipelineConfig$Builder) -> <init>
    void setWebpBitmapFactory(com.facebook.common.webp.WebpBitmapFactory,com.facebook.imagepipeline.core.ImagePipelineExperiments,com.facebook.common.webp.BitmapCreator) -> setWebpBitmapFactory
    com.facebook.cache.disk.DiskCacheConfig getDefaultMainDiskCacheConfig(android.content.Context) -> getDefaultMainDiskCacheConfig
    void resetDefaultRequestConfig() -> resetDefaultRequestConfig
    com.facebook.imagepipeline.animated.factory.AnimatedImageFactory getAnimatedImageFactory() -> getAnimatedImageFactory
    android.graphics.Bitmap$Config getBitmapConfig() -> getBitmapConfig
    com.facebook.common.internal.Supplier getBitmapMemoryCacheParamsSupplier() -> getBitmapMemoryCacheParamsSupplier
    com.facebook.imagepipeline.cache.CacheKeyFactory getCacheKeyFactory() -> getCacheKeyFactory
    android.content.Context getContext() -> getContext
    com.facebook.imagepipeline.core.ImagePipelineConfig$DefaultImageRequestConfig getDefaultImageRequestConfig() -> getDefaultImageRequestConfig
    com.facebook.imagepipeline.core.FileCacheFactory getFileCacheFactory() -> getFileCacheFactory
    boolean isDownsampleEnabled() -> isDownsampleEnabled
    com.facebook.common.internal.Supplier getEncodedMemoryCacheParamsSupplier() -> getEncodedMemoryCacheParamsSupplier
    com.facebook.imagepipeline.core.ExecutorSupplier getExecutorSupplier() -> getExecutorSupplier
    com.facebook.imagepipeline.cache.ImageCacheStatsTracker getImageCacheStatsTracker() -> getImageCacheStatsTracker
    com.facebook.imagepipeline.decoder.ImageDecoder getImageDecoder() -> getImageDecoder
    com.facebook.common.internal.Supplier getIsPrefetchEnabledSupplier() -> getIsPrefetchEnabledSupplier
    com.facebook.cache.disk.DiskCacheConfig getMainDiskCacheConfig() -> getMainDiskCacheConfig
    com.facebook.common.memory.MemoryTrimmableRegistry getMemoryTrimmableRegistry() -> getMemoryTrimmableRegistry
    com.facebook.imagepipeline.producers.NetworkFetcher getNetworkFetcher() -> getNetworkFetcher
    com.facebook.imagepipeline.bitmaps.PlatformBitmapFactory getPlatformBitmapFactory() -> getPlatformBitmapFactory
    com.facebook.imagepipeline.memory.PoolFactory getPoolFactory() -> getPoolFactory
    com.facebook.imagepipeline.decoder.ProgressiveJpegConfig getProgressiveJpegConfig() -> getProgressiveJpegConfig
    java.util.Set getRequestListeners() -> getRequestListeners
    boolean isResizeAndRotateEnabledForNetwork() -> isResizeAndRotateEnabledForNetwork
    com.facebook.cache.disk.DiskCacheConfig getSmallImageDiskCacheConfig() -> getSmallImageDiskCacheConfig
    com.facebook.imagepipeline.decoder.ImageDecoderConfig getImageDecoderConfig() -> getImageDecoderConfig
    com.facebook.imagepipeline.core.ImagePipelineExperiments getExperiments() -> getExperiments
    com.facebook.imagepipeline.core.ImagePipelineConfig$Builder newBuilder(android.content.Context) -> newBuilder
    void <init>(com.facebook.imagepipeline.core.ImagePipelineConfig$Builder,com.facebook.imagepipeline.core.ImagePipelineConfig$1) -> <init>
    void <clinit>() -> <clinit>
com.facebook.imagepipeline.core.ImagePipelineConfig$1 -> com.facebook.imagepipeline.core.ImagePipelineConfig$1:
    com.facebook.imagepipeline.core.ImagePipelineConfig this$0 -> this$0
    void <init>(com.facebook.imagepipeline.core.ImagePipelineConfig) -> <init>
    java.lang.Boolean get() -> get
    java.lang.Object get() -> get
com.facebook.imagepipeline.core.ImagePipelineConfig$Builder -> com.facebook.imagepipeline.core.ImagePipelineConfig$Builder:
    com.facebook.imagepipeline.animated.factory.AnimatedImageFactory mAnimatedImageFactory -> mAnimatedImageFactory
    android.graphics.Bitmap$Config mBitmapConfig -> mBitmapConfig
    com.facebook.common.internal.Supplier mBitmapMemoryCacheParamsSupplier -> mBitmapMemoryCacheParamsSupplier
    com.facebook.imagepipeline.cache.CacheKeyFactory mCacheKeyFactory -> mCacheKeyFactory
    android.content.Context mContext -> mContext
    boolean mDownsampleEnabled -> mDownsampleEnabled
    com.facebook.common.internal.Supplier mEncodedMemoryCacheParamsSupplier -> mEncodedMemoryCacheParamsSupplier
    com.facebook.imagepipeline.core.ExecutorSupplier mExecutorSupplier -> mExecutorSupplier
    com.facebook.imagepipeline.cache.ImageCacheStatsTracker mImageCacheStatsTracker -> mImageCacheStatsTracker
    com.facebook.imagepipeline.decoder.ImageDecoder mImageDecoder -> mImageDecoder
    com.facebook.common.internal.Supplier mIsPrefetchEnabledSupplier -> mIsPrefetchEnabledSupplier
    com.facebook.cache.disk.DiskCacheConfig mMainDiskCacheConfig -> mMainDiskCacheConfig
    com.facebook.common.memory.MemoryTrimmableRegistry mMemoryTrimmableRegistry -> mMemoryTrimmableRegistry
    com.facebook.imagepipeline.producers.NetworkFetcher mNetworkFetcher -> mNetworkFetcher
    com.facebook.imagepipeline.bitmaps.PlatformBitmapFactory mPlatformBitmapFactory -> mPlatformBitmapFactory
    com.facebook.imagepipeline.memory.PoolFactory mPoolFactory -> mPoolFactory
    com.facebook.imagepipeline.decoder.ProgressiveJpegConfig mProgressiveJpegConfig -> mProgressiveJpegConfig
    java.util.Set mRequestListeners -> mRequestListeners
    boolean mResizeAndRotateEnabledForNetwork -> mResizeAndRotateEnabledForNetwork
    com.facebook.cache.disk.DiskCacheConfig mSmallImageDiskCacheConfig -> mSmallImageDiskCacheConfig
    com.facebook.imagepipeline.core.FileCacheFactory mFileCacheFactory -> mFileCacheFactory
    com.facebook.imagepipeline.decoder.ImageDecoderConfig mImageDecoderConfig -> mImageDecoderConfig
    com.facebook.imagepipeline.core.ImagePipelineExperiments$Builder mExperimentsBuilder -> mExperimentsBuilder
    void <init>(android.content.Context) -> <init>
    com.facebook.imagepipeline.core.ImagePipelineConfig$Builder setAnimatedImageFactory(com.facebook.imagepipeline.animated.factory.AnimatedImageFactory) -> setAnimatedImageFactory
    com.facebook.imagepipeline.core.ImagePipelineConfig$Builder setBitmapsConfig(android.graphics.Bitmap$Config) -> setBitmapsConfig
    com.facebook.imagepipeline.core.ImagePipelineConfig$Builder setBitmapMemoryCacheParamsSupplier(com.facebook.common.internal.Supplier) -> setBitmapMemoryCacheParamsSupplier
    com.facebook.imagepipeline.core.ImagePipelineConfig$Builder setCacheKeyFactory(com.facebook.imagepipeline.cache.CacheKeyFactory) -> setCacheKeyFactory
    com.facebook.imagepipeline.core.ImagePipelineConfig$Builder setFileCacheFactory(com.facebook.imagepipeline.core.FileCacheFactory) -> setFileCacheFactory
    boolean isDownsampleEnabled() -> isDownsampleEnabled
    com.facebook.imagepipeline.core.ImagePipelineConfig$Builder setDownsampleEnabled(boolean) -> setDownsampleEnabled
    com.facebook.imagepipeline.core.ImagePipelineConfig$Builder setEncodedMemoryCacheParamsSupplier(com.facebook.common.internal.Supplier) -> setEncodedMemoryCacheParamsSupplier
    com.facebook.imagepipeline.core.ImagePipelineConfig$Builder setExecutorSupplier(com.facebook.imagepipeline.core.ExecutorSupplier) -> setExecutorSupplier
    com.facebook.imagepipeline.core.ImagePipelineConfig$Builder setImageCacheStatsTracker(com.facebook.imagepipeline.cache.ImageCacheStatsTracker) -> setImageCacheStatsTracker
    com.facebook.imagepipeline.core.ImagePipelineConfig$Builder setImageDecoder(com.facebook.imagepipeline.decoder.ImageDecoder) -> setImageDecoder
    com.facebook.imagepipeline.core.ImagePipelineConfig$Builder setIsPrefetchEnabledSupplier(com.facebook.common.internal.Supplier) -> setIsPrefetchEnabledSupplier
    com.facebook.imagepipeline.core.ImagePipelineConfig$Builder setMainDiskCacheConfig(com.facebook.cache.disk.DiskCacheConfig) -> setMainDiskCacheConfig
    com.facebook.imagepipeline.core.ImagePipelineConfig$Builder setMemoryTrimmableRegistry(com.facebook.common.memory.MemoryTrimmableRegistry) -> setMemoryTrimmableRegistry
    com.facebook.imagepipeline.core.ImagePipelineConfig$Builder setNetworkFetcher(com.facebook.imagepipeline.producers.NetworkFetcher) -> setNetworkFetcher
    com.facebook.imagepipeline.core.ImagePipelineConfig$Builder setPlatformBitmapFactory(com.facebook.imagepipeline.bitmaps.PlatformBitmapFactory) -> setPlatformBitmapFactory
    com.facebook.imagepipeline.core.ImagePipelineConfig$Builder setPoolFactory(com.facebook.imagepipeline.memory.PoolFactory) -> setPoolFactory
    com.facebook.imagepipeline.core.ImagePipelineConfig$Builder setProgressiveJpegConfig(com.facebook.imagepipeline.decoder.ProgressiveJpegConfig) -> setProgressiveJpegConfig
    com.facebook.imagepipeline.core.ImagePipelineConfig$Builder setRequestListeners(java.util.Set) -> setRequestListeners
    com.facebook.imagepipeline.core.ImagePipelineConfig$Builder setResizeAndRotateEnabledForNetwork(boolean) -> setResizeAndRotateEnabledForNetwork
    com.facebook.imagepipeline.core.ImagePipelineConfig$Builder setSmallImageDiskCacheConfig(com.facebook.cache.disk.DiskCacheConfig) -> setSmallImageDiskCacheConfig
    com.facebook.imagepipeline.core.ImagePipelineConfig$Builder setImageDecoderConfig(com.facebook.imagepipeline.decoder.ImageDecoderConfig) -> setImageDecoderConfig
    com.facebook.imagepipeline.core.ImagePipelineExperiments$Builder experiment() -> experiment
    com.facebook.imagepipeline.core.ImagePipelineConfig build() -> build
    com.facebook.imagepipeline.core.ImagePipelineExperiments$Builder access$100(com.facebook.imagepipeline.core.ImagePipelineConfig$Builder) -> access$100
    com.facebook.imagepipeline.animated.factory.AnimatedImageFactory access$200(com.facebook.imagepipeline.core.ImagePipelineConfig$Builder) -> access$200
    com.facebook.common.internal.Supplier access$300(com.facebook.imagepipeline.core.ImagePipelineConfig$Builder) -> access$300
    android.content.Context access$400(com.facebook.imagepipeline.core.ImagePipelineConfig$Builder) -> access$400
    android.graphics.Bitmap$Config access$500(com.facebook.imagepipeline.core.ImagePipelineConfig$Builder) -> access$500
    com.facebook.imagepipeline.cache.CacheKeyFactory access$600(com.facebook.imagepipeline.core.ImagePipelineConfig$Builder) -> access$600
    com.facebook.imagepipeline.core.FileCacheFactory access$700(com.facebook.imagepipeline.core.ImagePipelineConfig$Builder) -> access$700
    boolean access$800(com.facebook.imagepipeline.core.ImagePipelineConfig$Builder) -> access$800
    com.facebook.common.internal.Supplier access$900(com.facebook.imagepipeline.core.ImagePipelineConfig$Builder) -> access$900
    com.facebook.imagepipeline.cache.ImageCacheStatsTracker access$1000(com.facebook.imagepipeline.core.ImagePipelineConfig$Builder) -> access$1000
    com.facebook.imagepipeline.decoder.ImageDecoder access$1100(com.facebook.imagepipeline.core.ImagePipelineConfig$Builder) -> access$1100
    com.facebook.common.internal.Supplier access$1200(com.facebook.imagepipeline.core.ImagePipelineConfig$Builder) -> access$1200
    com.facebook.cache.disk.DiskCacheConfig access$1300(com.facebook.imagepipeline.core.ImagePipelineConfig$Builder) -> access$1300
    com.facebook.common.memory.MemoryTrimmableRegistry access$1400(com.facebook.imagepipeline.core.ImagePipelineConfig$Builder) -> access$1400
    com.facebook.imagepipeline.producers.NetworkFetcher access$1500(com.facebook.imagepipeline.core.ImagePipelineConfig$Builder) -> access$1500
    com.facebook.imagepipeline.bitmaps.PlatformBitmapFactory access$1600(com.facebook.imagepipeline.core.ImagePipelineConfig$Builder) -> access$1600
    com.facebook.imagepipeline.memory.PoolFactory access$1700(com.facebook.imagepipeline.core.ImagePipelineConfig$Builder) -> access$1700
    com.facebook.imagepipeline.decoder.ProgressiveJpegConfig access$1800(com.facebook.imagepipeline.core.ImagePipelineConfig$Builder) -> access$1800
    java.util.Set access$1900(com.facebook.imagepipeline.core.ImagePipelineConfig$Builder) -> access$1900
    boolean access$2000(com.facebook.imagepipeline.core.ImagePipelineConfig$Builder) -> access$2000
    com.facebook.cache.disk.DiskCacheConfig access$2100(com.facebook.imagepipeline.core.ImagePipelineConfig$Builder) -> access$2100
    com.facebook.imagepipeline.decoder.ImageDecoderConfig access$2200(com.facebook.imagepipeline.core.ImagePipelineConfig$Builder) -> access$2200
    com.facebook.imagepipeline.core.ExecutorSupplier access$2300(com.facebook.imagepipeline.core.ImagePipelineConfig$Builder) -> access$2300
    void <init>(android.content.Context,com.facebook.imagepipeline.core.ImagePipelineConfig$1) -> <init>
com.facebook.imagepipeline.core.ImagePipelineConfig$DefaultImageRequestConfig -> com.facebook.imagepipeline.core.ImagePipelineConfig$DefaultImageRequestConfig:
    boolean mProgressiveRenderingEnabled -> mProgressiveRenderingEnabled
    void <init>() -> <init>
    void setProgressiveRenderingEnabled(boolean) -> setProgressiveRenderingEnabled
    boolean isProgressiveRenderingEnabled() -> isProgressiveRenderingEnabled
    void <init>(com.facebook.imagepipeline.core.ImagePipelineConfig$1) -> <init>
com.facebook.imagepipeline.core.ImagePipelineExperiments -> com.facebook.imagepipeline.core.ImagePipelineExperiments:
    int mForceSmallCacheThresholdBytes -> mForceSmallCacheThresholdBytes
    boolean mWebpSupportEnabled -> mWebpSupportEnabled
    boolean mExternalCreatedBitmapLogEnabled -> mExternalCreatedBitmapLogEnabled
    com.facebook.common.internal.Supplier mMediaVariationsIndexEnabled -> mMediaVariationsIndexEnabled
    com.facebook.imagepipeline.cache.MediaIdExtractor mMediaIdExtractor -> mMediaIdExtractor
    com.facebook.common.webp.WebpBitmapFactory$WebpErrorLogger mWebpErrorLogger -> mWebpErrorLogger
    boolean mDecodeCancellationEnabled -> mDecodeCancellationEnabled
    com.facebook.common.webp.WebpBitmapFactory mWebpBitmapFactory -> mWebpBitmapFactory
    boolean mSuppressBitmapPrefetching -> mSuppressBitmapPrefetching
    boolean mUseDownsamplingRatioForResizing -> mUseDownsamplingRatioForResizing
    void <init>(com.facebook.imagepipeline.core.ImagePipelineExperiments$Builder,com.facebook.imagepipeline.core.ImagePipelineConfig$Builder) -> <init>
    boolean isExternalCreatedBitmapLogEnabled() -> isExternalCreatedBitmapLogEnabled
    int getForceSmallCacheThresholdBytes() -> getForceSmallCacheThresholdBytes
    boolean getMediaVariationsIndexEnabled() -> getMediaVariationsIndexEnabled
    com.facebook.imagepipeline.cache.MediaIdExtractor getMediaIdExtractor() -> getMediaIdExtractor
    boolean getUseDownsamplingRatioForResizing() -> getUseDownsamplingRatioForResizing
    boolean isWebpSupportEnabled() -> isWebpSupportEnabled
    boolean isDecodeCancellationEnabled() -> isDecodeCancellationEnabled
    com.facebook.common.webp.WebpBitmapFactory$WebpErrorLogger getWebpErrorLogger() -> getWebpErrorLogger
    com.facebook.common.webp.WebpBitmapFactory getWebpBitmapFactory() -> getWebpBitmapFactory
    com.facebook.imagepipeline.core.ImagePipelineExperiments$Builder newBuilder(com.facebook.imagepipeline.core.ImagePipelineConfig$Builder) -> newBuilder
    void <init>(com.facebook.imagepipeline.core.ImagePipelineExperiments$Builder,com.facebook.imagepipeline.core.ImagePipelineConfig$Builder,com.facebook.imagepipeline.core.ImagePipelineExperiments$1) -> <init>
com.facebook.imagepipeline.core.ImagePipelineExperiments$1 -> com.facebook.imagepipeline.core.ImagePipelineExperiments$1:
    com.facebook.imagepipeline.core.ImagePipelineExperiments this$0 -> this$0
    void <init>(com.facebook.imagepipeline.core.ImagePipelineExperiments) -> <init>
    java.lang.Boolean get() -> get
    java.lang.Object get() -> get
com.facebook.imagepipeline.core.ImagePipelineExperiments$Builder -> com.facebook.imagepipeline.core.ImagePipelineExperiments$Builder:
    com.facebook.imagepipeline.core.ImagePipelineConfig$Builder mConfigBuilder -> mConfigBuilder
    int mForceSmallCacheThresholdBytes -> mForceSmallCacheThresholdBytes
    boolean mWebpSupportEnabled -> mWebpSupportEnabled
    boolean mExternalCreatedBitmapLogEnabled -> mExternalCreatedBitmapLogEnabled
    com.facebook.common.internal.Supplier mMediaVariationsIndexEnabled -> mMediaVariationsIndexEnabled
    com.facebook.imagepipeline.cache.MediaIdExtractor mMediaIdExtractor -> mMediaIdExtractor
    com.facebook.common.webp.WebpBitmapFactory$WebpErrorLogger mWebpErrorLogger -> mWebpErrorLogger
    boolean mDecodeCancellationEnabled -> mDecodeCancellationEnabled
    com.facebook.common.webp.WebpBitmapFactory mWebpBitmapFactory -> mWebpBitmapFactory
    boolean mSuppressBitmapPrefetching -> mSuppressBitmapPrefetching
    boolean mUseDownsamplingRatioForResizing -> mUseDownsamplingRatioForResizing
    void <init>(com.facebook.imagepipeline.core.ImagePipelineConfig$Builder) -> <init>
    com.facebook.imagepipeline.core.ImagePipelineConfig$Builder setExternalCreatedBitmapLogEnabled(boolean) -> setExternalCreatedBitmapLogEnabled
    com.facebook.imagepipeline.core.ImagePipelineConfig$Builder setForceSmallCacheThresholdBytes(int) -> setForceSmallCacheThresholdBytes
    com.facebook.imagepipeline.core.ImagePipelineConfig$Builder setMediaVariationsIndexEnabled(com.facebook.common.internal.Supplier) -> setMediaVariationsIndexEnabled
    com.facebook.imagepipeline.core.ImagePipelineConfig$Builder setMediaIdExtractor(com.facebook.imagepipeline.cache.MediaIdExtractor) -> setMediaIdExtractor
    com.facebook.imagepipeline.core.ImagePipelineConfig$Builder setWebpSupportEnabled(boolean) -> setWebpSupportEnabled
    com.facebook.imagepipeline.core.ImagePipelineConfig$Builder setUseDownsampligRatioForResizing(boolean) -> setUseDownsampligRatioForResizing
    com.facebook.imagepipeline.core.ImagePipelineConfig$Builder setDecodeCancellationEnabled(boolean) -> setDecodeCancellationEnabled
    com.facebook.imagepipeline.core.ImagePipelineConfig$Builder setWebpErrorLogger(com.facebook.common.webp.WebpBitmapFactory$WebpErrorLogger) -> setWebpErrorLogger
    com.facebook.imagepipeline.core.ImagePipelineConfig$Builder setWebpBitmapFactory(com.facebook.common.webp.WebpBitmapFactory) -> setWebpBitmapFactory
    com.facebook.imagepipeline.core.ImagePipelineConfig$Builder setSuppressBitmapPrefetching(boolean) -> setSuppressBitmapPrefetching
    com.facebook.imagepipeline.core.ImagePipelineExperiments build() -> build
    int access$000(com.facebook.imagepipeline.core.ImagePipelineExperiments$Builder) -> access$000
    boolean access$100(com.facebook.imagepipeline.core.ImagePipelineExperiments$Builder) -> access$100
    boolean access$200(com.facebook.imagepipeline.core.ImagePipelineExperiments$Builder) -> access$200
    com.facebook.common.internal.Supplier access$300(com.facebook.imagepipeline.core.ImagePipelineExperiments$Builder) -> access$300
    com.facebook.imagepipeline.cache.MediaIdExtractor access$400(com.facebook.imagepipeline.core.ImagePipelineExperiments$Builder) -> access$400
    com.facebook.common.webp.WebpBitmapFactory$WebpErrorLogger access$500(com.facebook.imagepipeline.core.ImagePipelineExperiments$Builder) -> access$500
    boolean access$600(com.facebook.imagepipeline.core.ImagePipelineExperiments$Builder) -> access$600
    com.facebook.common.webp.WebpBitmapFactory access$700(com.facebook.imagepipeline.core.ImagePipelineExperiments$Builder) -> access$700
    boolean access$800(com.facebook.imagepipeline.core.ImagePipelineExperiments$Builder) -> access$800
    boolean access$900(com.facebook.imagepipeline.core.ImagePipelineExperiments$Builder) -> access$900
com.facebook.imagepipeline.core.ImagePipelineFactory -> com.facebook.imagepipeline.core.ImagePipelineFactory:
    com.facebook.imagepipeline.core.ImagePipelineFactory sInstance -> sInstance
    com.facebook.imagepipeline.producers.ThreadHandoffProducerQueue mThreadHandoffProducerQueue -> mThreadHandoffProducerQueue
    com.facebook.imagepipeline.core.ImagePipelineConfig mConfig -> mConfig
    com.facebook.imagepipeline.cache.CountingMemoryCache mBitmapCountingMemoryCache -> mBitmapCountingMemoryCache
    com.facebook.imagepipeline.cache.MemoryCache mBitmapMemoryCache -> mBitmapMemoryCache
    com.facebook.imagepipeline.cache.CountingMemoryCache mEncodedCountingMemoryCache -> mEncodedCountingMemoryCache
    com.facebook.imagepipeline.cache.MemoryCache mEncodedMemoryCache -> mEncodedMemoryCache
    com.facebook.imagepipeline.cache.BufferedDiskCache mMainBufferedDiskCache -> mMainBufferedDiskCache
    com.facebook.cache.disk.FileCache mMainFileCache -> mMainFileCache
    com.facebook.imagepipeline.decoder.ImageDecoder mImageDecoder -> mImageDecoder
    com.facebook.imagepipeline.core.ImagePipeline mImagePipeline -> mImagePipeline
    com.facebook.imagepipeline.core.ProducerFactory mProducerFactory -> mProducerFactory
    com.facebook.imagepipeline.core.ProducerSequenceFactory mProducerSequenceFactory -> mProducerSequenceFactory
    com.facebook.imagepipeline.cache.BufferedDiskCache mSmallImageBufferedDiskCache -> mSmallImageBufferedDiskCache
    com.facebook.cache.disk.FileCache mSmallImageFileCache -> mSmallImageFileCache
    com.facebook.imagepipeline.cache.MediaVariationsIndex mMediaVariationsIndex -> mMediaVariationsIndex
    com.facebook.imagepipeline.bitmaps.PlatformBitmapFactory mPlatformBitmapFactory -> mPlatformBitmapFactory
    com.facebook.imagepipeline.platform.PlatformDecoder mPlatformDecoder -> mPlatformDecoder
    com.facebook.imagepipeline.animated.factory.AnimatedFactory mAnimatedFactory -> mAnimatedFactory
    com.facebook.imagepipeline.core.ImagePipelineFactory getInstance() -> getInstance
    void initialize(android.content.Context) -> initialize
    void initialize(com.facebook.imagepipeline.core.ImagePipelineConfig) -> initialize
    void shutDown() -> shutDown
    void <init>(com.facebook.imagepipeline.core.ImagePipelineConfig) -> <init>
    com.facebook.imagepipeline.animated.factory.AnimatedFactory getAnimatedFactory() -> getAnimatedFactory
    com.facebook.imagepipeline.cache.CountingMemoryCache getBitmapCountingMemoryCache() -> getBitmapCountingMemoryCache
    com.facebook.imagepipeline.cache.MemoryCache getBitmapMemoryCache() -> getBitmapMemoryCache
    com.facebook.imagepipeline.cache.CountingMemoryCache getEncodedCountingMemoryCache() -> getEncodedCountingMemoryCache
    com.facebook.imagepipeline.cache.MemoryCache getEncodedMemoryCache() -> getEncodedMemoryCache
    com.facebook.imagepipeline.decoder.ImageDecoder getImageDecoder() -> getImageDecoder
    com.facebook.imagepipeline.cache.BufferedDiskCache getMainBufferedDiskCache() -> getMainBufferedDiskCache
    com.facebook.cache.disk.FileCache getMainFileCache() -> getMainFileCache
    com.facebook.imagepipeline.core.ImagePipeline getImagePipeline() -> getImagePipeline
    com.facebook.imagepipeline.bitmaps.PlatformBitmapFactory buildPlatformBitmapFactory(com.facebook.imagepipeline.memory.PoolFactory,com.facebook.imagepipeline.platform.PlatformDecoder) -> buildPlatformBitmapFactory
    com.facebook.imagepipeline.bitmaps.PlatformBitmapFactory getPlatformBitmapFactory() -> getPlatformBitmapFactory
    com.facebook.imagepipeline.platform.PlatformDecoder buildPlatformDecoder(com.facebook.imagepipeline.memory.PoolFactory,boolean) -> buildPlatformDecoder
    com.facebook.imagepipeline.platform.PlatformDecoder getPlatformDecoder() -> getPlatformDecoder
    com.facebook.imagepipeline.core.ProducerFactory getProducerFactory() -> getProducerFactory
    com.facebook.imagepipeline.core.ProducerSequenceFactory getProducerSequenceFactory() -> getProducerSequenceFactory
    com.facebook.cache.disk.FileCache getSmallImageFileCache() -> getSmallImageFileCache
    com.facebook.imagepipeline.cache.BufferedDiskCache getSmallImageBufferedDiskCache() -> getSmallImageBufferedDiskCache
    com.facebook.imagepipeline.cache.MediaVariationsIndex getMediaVariationsIndex() -> getMediaVariationsIndex
    void <clinit>() -> <clinit>
com.facebook.imagepipeline.core.PriorityThreadFactory -> com.facebook.imagepipeline.core.PriorityThreadFactory:
    int mThreadPriority -> mThreadPriority
    void <init>(int) -> <init>
    java.lang.Thread newThread(java.lang.Runnable) -> newThread
    int access$000(com.facebook.imagepipeline.core.PriorityThreadFactory) -> access$000
com.facebook.imagepipeline.core.PriorityThreadFactory$1 -> com.facebook.imagepipeline.core.PriorityThreadFactory$1:
    java.lang.Runnable val$runnable -> val$runnable
    com.facebook.imagepipeline.core.PriorityThreadFactory this$0 -> this$0
    void <init>(com.facebook.imagepipeline.core.PriorityThreadFactory,java.lang.Runnable) -> <init>
    void run() -> run
com.facebook.imagepipeline.core.ProducerFactory -> com.facebook.imagepipeline.core.ProducerFactory:
    int MAX_SIMULTANEOUS_REQUESTS -> MAX_SIMULTANEOUS_REQUESTS
    android.content.ContentResolver mContentResolver -> mContentResolver
    android.content.res.Resources mResources -> mResources
    android.content.res.AssetManager mAssetManager -> mAssetManager
    com.facebook.common.memory.ByteArrayPool mByteArrayPool -> mByteArrayPool
    com.facebook.imagepipeline.decoder.ImageDecoder mImageDecoder -> mImageDecoder
    com.facebook.imagepipeline.decoder.ProgressiveJpegConfig mProgressiveJpegConfig -> mProgressiveJpegConfig
    boolean mDownsampleEnabled -> mDownsampleEnabled
    boolean mResizeAndRotateEnabledForNetwork -> mResizeAndRotateEnabledForNetwork
    boolean mDecodeCancellationEnabled -> mDecodeCancellationEnabled
    com.facebook.imagepipeline.core.ExecutorSupplier mExecutorSupplier -> mExecutorSupplier
    com.facebook.common.memory.PooledByteBufferFactory mPooledByteBufferFactory -> mPooledByteBufferFactory
    com.facebook.imagepipeline.cache.BufferedDiskCache mDefaultBufferedDiskCache -> mDefaultBufferedDiskCache
    com.facebook.imagepipeline.cache.BufferedDiskCache mSmallImageBufferedDiskCache -> mSmallImageBufferedDiskCache
    com.facebook.imagepipeline.cache.DiskCachePolicy mMainDiskCachePolicy -> mMainDiskCachePolicy
    com.facebook.imagepipeline.cache.MemoryCache mEncodedMemoryCache -> mEncodedMemoryCache
    com.facebook.imagepipeline.cache.MemoryCache mBitmapMemoryCache -> mBitmapMemoryCache
    com.facebook.imagepipeline.cache.CacheKeyFactory mCacheKeyFactory -> mCacheKeyFactory
    com.facebook.imagepipeline.cache.MediaVariationsIndex mMediaVariationsIndex -> mMediaVariationsIndex
    com.facebook.imagepipeline.cache.MediaIdExtractor mMediaIdExtractor -> mMediaIdExtractor
    com.facebook.imagepipeline.bitmaps.PlatformBitmapFactory mPlatformBitmapFactory -> mPlatformBitmapFactory
    void <init>(android.content.Context,com.facebook.common.memory.ByteArrayPool,com.facebook.imagepipeline.decoder.ImageDecoder,com.facebook.imagepipeline.decoder.ProgressiveJpegConfig,boolean,boolean,boolean,com.facebook.imagepipeline.core.ExecutorSupplier,com.facebook.common.memory.PooledByteBufferFactory,com.facebook.imagepipeline.cache.MemoryCache,com.facebook.imagepipeline.cache.MemoryCache,com.facebook.imagepipeline.cache.BufferedDiskCache,com.facebook.imagepipeline.cache.BufferedDiskCache,com.facebook.imagepipeline.cache.MediaVariationsIndex,com.facebook.imagepipeline.cache.MediaIdExtractor,com.facebook.imagepipeline.cache.CacheKeyFactory,com.facebook.imagepipeline.bitmaps.PlatformBitmapFactory,int) -> <init>
    com.facebook.imagepipeline.producers.AddImageTransformMetaDataProducer newAddImageTransformMetaDataProducer(com.facebook.imagepipeline.producers.Producer) -> newAddImageTransformMetaDataProducer
    com.facebook.imagepipeline.producers.BitmapMemoryCacheGetProducer newBitmapMemoryCacheGetProducer(com.facebook.imagepipeline.producers.Producer) -> newBitmapMemoryCacheGetProducer
    com.facebook.imagepipeline.producers.BitmapMemoryCacheKeyMultiplexProducer newBitmapMemoryCacheKeyMultiplexProducer(com.facebook.imagepipeline.producers.Producer) -> newBitmapMemoryCacheKeyMultiplexProducer
    com.facebook.imagepipeline.producers.BitmapMemoryCacheProducer newBitmapMemoryCacheProducer(com.facebook.imagepipeline.producers.Producer) -> newBitmapMemoryCacheProducer
    com.facebook.imagepipeline.producers.BranchOnSeparateImagesProducer newBranchOnSeparateImagesProducer(com.facebook.imagepipeline.producers.Producer,com.facebook.imagepipeline.producers.Producer) -> newBranchOnSeparateImagesProducer
    com.facebook.imagepipeline.producers.DataFetchProducer newDataFetchProducer() -> newDataFetchProducer
    com.facebook.imagepipeline.producers.DecodeProducer newDecodeProducer(com.facebook.imagepipeline.producers.Producer) -> newDecodeProducer
    com.facebook.imagepipeline.producers.DiskCacheReadProducer newDiskCacheReadProducer(com.facebook.imagepipeline.producers.Producer) -> newDiskCacheReadProducer
    com.facebook.imagepipeline.producers.DiskCacheWriteProducer newDiskCacheWriteProducer(com.facebook.imagepipeline.producers.Producer) -> newDiskCacheWriteProducer
    com.facebook.imagepipeline.producers.MediaVariationsFallbackProducer newMediaVariationsProducer(com.facebook.imagepipeline.producers.Producer) -> newMediaVariationsProducer
    com.facebook.imagepipeline.producers.EncodedCacheKeyMultiplexProducer newEncodedCacheKeyMultiplexProducer(com.facebook.imagepipeline.producers.Producer) -> newEncodedCacheKeyMultiplexProducer
    com.facebook.imagepipeline.producers.EncodedMemoryCacheProducer newEncodedMemoryCacheProducer(com.facebook.imagepipeline.producers.Producer) -> newEncodedMemoryCacheProducer
    com.facebook.imagepipeline.producers.LocalAssetFetchProducer newLocalAssetFetchProducer() -> newLocalAssetFetchProducer
    com.facebook.imagepipeline.producers.LocalContentUriFetchProducer newLocalContentUriFetchProducer() -> newLocalContentUriFetchProducer
    com.facebook.imagepipeline.producers.LocalContentUriThumbnailFetchProducer newLocalContentUriThumbnailFetchProducer() -> newLocalContentUriThumbnailFetchProducer
    com.facebook.imagepipeline.producers.LocalExifThumbnailProducer newLocalExifThumbnailProducer() -> newLocalExifThumbnailProducer
    com.facebook.imagepipeline.producers.ThumbnailBranchProducer newThumbnailBranchProducer(com.facebook.imagepipeline.producers.ThumbnailProducer[]) -> newThumbnailBranchProducer
    com.facebook.imagepipeline.producers.LocalFileFetchProducer newLocalFileFetchProducer() -> newLocalFileFetchProducer
    com.facebook.imagepipeline.producers.LocalResourceFetchProducer newLocalResourceFetchProducer() -> newLocalResourceFetchProducer
    com.facebook.imagepipeline.producers.LocalVideoThumbnailProducer newLocalVideoThumbnailProducer() -> newLocalVideoThumbnailProducer
    com.facebook.imagepipeline.producers.NetworkFetchProducer newNetworkFetchProducer(com.facebook.imagepipeline.producers.NetworkFetcher) -> newNetworkFetchProducer
    com.facebook.imagepipeline.producers.NullProducer newNullProducer() -> newNullProducer
    com.facebook.imagepipeline.producers.PostprocessedBitmapMemoryCacheProducer newPostprocessorBitmapMemoryCacheProducer(com.facebook.imagepipeline.producers.Producer) -> newPostprocessorBitmapMemoryCacheProducer
    com.facebook.imagepipeline.producers.PostprocessorProducer newPostprocessorProducer(com.facebook.imagepipeline.producers.Producer) -> newPostprocessorProducer
    com.facebook.imagepipeline.producers.ResizeAndRotateProducer newResizeAndRotateProducer(com.facebook.imagepipeline.producers.Producer,boolean,boolean) -> newResizeAndRotateProducer
    com.facebook.imagepipeline.producers.SwallowResultProducer newSwallowResultProducer(com.facebook.imagepipeline.producers.Producer) -> newSwallowResultProducer
    com.facebook.imagepipeline.producers.ThreadHandoffProducer newBackgroundThreadHandoffProducer(com.facebook.imagepipeline.producers.Producer,com.facebook.imagepipeline.producers.ThreadHandoffProducerQueue) -> newBackgroundThreadHandoffProducer
    com.facebook.imagepipeline.producers.ThrottlingProducer newThrottlingProducer(com.facebook.imagepipeline.producers.Producer) -> newThrottlingProducer
    com.facebook.imagepipeline.producers.WebpTranscodeProducer newWebpTranscodeProducer(com.facebook.imagepipeline.producers.Producer) -> newWebpTranscodeProducer
com.facebook.imagepipeline.core.ProducerSequenceFactory -> com.facebook.imagepipeline.core.ProducerSequenceFactory:
    com.facebook.imagepipeline.core.ProducerFactory mProducerFactory -> mProducerFactory
    com.facebook.imagepipeline.producers.NetworkFetcher mNetworkFetcher -> mNetworkFetcher
    boolean mResizeAndRotateEnabledForNetwork -> mResizeAndRotateEnabledForNetwork
    boolean mWebpSupportEnabled -> mWebpSupportEnabled
    com.facebook.imagepipeline.producers.ThreadHandoffProducerQueue mThreadHandoffProducerQueue -> mThreadHandoffProducerQueue
    boolean mUseDownsamplingRatio -> mUseDownsamplingRatio
    com.facebook.imagepipeline.producers.Producer mNetworkFetchSequence -> mNetworkFetchSequence
    com.facebook.imagepipeline.producers.Producer mBackgroundLocalFileFetchToEncodedMemorySequence -> mBackgroundLocalFileFetchToEncodedMemorySequence
    com.facebook.imagepipeline.producers.Producer mBackgroundNetworkFetchToEncodedMemorySequence -> mBackgroundNetworkFetchToEncodedMemorySequence
    com.facebook.imagepipeline.producers.Producer mLocalFileEncodedImageProducerSequence -> mLocalFileEncodedImageProducerSequence
    com.facebook.imagepipeline.producers.Producer mNetworkEncodedImageProducerSequence -> mNetworkEncodedImageProducerSequence
    com.facebook.imagepipeline.producers.Producer mLocalFileFetchToEncodedMemoryPrefetchSequence -> mLocalFileFetchToEncodedMemoryPrefetchSequence
    com.facebook.imagepipeline.producers.Producer mNetworkFetchToEncodedMemoryPrefetchSequence -> mNetworkFetchToEncodedMemoryPrefetchSequence
    com.facebook.imagepipeline.producers.Producer mCommonNetworkFetchToEncodedMemorySequence -> mCommonNetworkFetchToEncodedMemorySequence
    com.facebook.imagepipeline.producers.Producer mLocalImageFileFetchSequence -> mLocalImageFileFetchSequence
    com.facebook.imagepipeline.producers.Producer mLocalVideoFileFetchSequence -> mLocalVideoFileFetchSequence
    com.facebook.imagepipeline.producers.Producer mLocalContentUriFetchSequence -> mLocalContentUriFetchSequence
    com.facebook.imagepipeline.producers.Producer mLocalResourceFetchSequence -> mLocalResourceFetchSequence
    com.facebook.imagepipeline.producers.Producer mLocalAssetFetchSequence -> mLocalAssetFetchSequence
    com.facebook.imagepipeline.producers.Producer mDataFetchSequence -> mDataFetchSequence
    java.util.Map mPostprocessorSequences -> mPostprocessorSequences
    java.util.Map mCloseableImagePrefetchSequences -> mCloseableImagePrefetchSequences
    void <init>(com.facebook.imagepipeline.core.ProducerFactory,com.facebook.imagepipeline.producers.NetworkFetcher,boolean,boolean,com.facebook.imagepipeline.producers.ThreadHandoffProducerQueue,boolean) -> <init>
    com.facebook.imagepipeline.producers.Producer getEncodedImageProducerSequence(com.facebook.imagepipeline.request.ImageRequest) -> getEncodedImageProducerSequence
    com.facebook.imagepipeline.producers.Producer getNetworkFetchEncodedImageProducerSequence() -> getNetworkFetchEncodedImageProducerSequence
    com.facebook.imagepipeline.producers.Producer getLocalFileFetchEncodedImageProducerSequence() -> getLocalFileFetchEncodedImageProducerSequence
    com.facebook.imagepipeline.producers.Producer getEncodedImagePrefetchProducerSequence(com.facebook.imagepipeline.request.ImageRequest) -> getEncodedImagePrefetchProducerSequence
    void validateEncodedImageRequest(com.facebook.imagepipeline.request.ImageRequest) -> validateEncodedImageRequest
    com.facebook.imagepipeline.producers.Producer getDecodedImageProducerSequence(com.facebook.imagepipeline.request.ImageRequest) -> getDecodedImageProducerSequence
    com.facebook.imagepipeline.producers.Producer getDecodedImagePrefetchProducerSequence(com.facebook.imagepipeline.request.ImageRequest) -> getDecodedImagePrefetchProducerSequence
    com.facebook.imagepipeline.producers.Producer getBasicDecodedImageSequence(com.facebook.imagepipeline.request.ImageRequest) -> getBasicDecodedImageSequence
    com.facebook.imagepipeline.producers.Producer getNetworkFetchSequence() -> getNetworkFetchSequence
    com.facebook.imagepipeline.producers.Producer getBackgroundNetworkFetchToEncodedMemorySequence() -> getBackgroundNetworkFetchToEncodedMemorySequence
    com.facebook.imagepipeline.producers.Producer getNetworkFetchToEncodedMemoryPrefetchSequence() -> getNetworkFetchToEncodedMemoryPrefetchSequence
    com.facebook.imagepipeline.producers.Producer getCommonNetworkFetchToEncodedMemorySequence() -> getCommonNetworkFetchToEncodedMemorySequence
    com.facebook.imagepipeline.producers.Producer getLocalFileFetchToEncodedMemoryPrefetchSequence() -> getLocalFileFetchToEncodedMemoryPrefetchSequence
    com.facebook.imagepipeline.producers.Producer getBackgroundLocalFileFetchToEncodeMemorySequence() -> getBackgroundLocalFileFetchToEncodeMemorySequence
    com.facebook.imagepipeline.producers.Producer getLocalImageFileFetchSequence() -> getLocalImageFileFetchSequence
    com.facebook.imagepipeline.producers.Producer getLocalVideoFileFetchSequence() -> getLocalVideoFileFetchSequence
    com.facebook.imagepipeline.producers.Producer getLocalContentUriFetchSequence() -> getLocalContentUriFetchSequence
    com.facebook.imagepipeline.producers.Producer getLocalResourceFetchSequence() -> getLocalResourceFetchSequence
    com.facebook.imagepipeline.producers.Producer getLocalAssetFetchSequence() -> getLocalAssetFetchSequence
    com.facebook.imagepipeline.producers.Producer getDataFetchSequence() -> getDataFetchSequence
    com.facebook.imagepipeline.producers.Producer newBitmapCacheGetToLocalTransformSequence(com.facebook.imagepipeline.producers.Producer) -> newBitmapCacheGetToLocalTransformSequence
    com.facebook.imagepipeline.producers.Producer newBitmapCacheGetToLocalTransformSequence(com.facebook.imagepipeline.producers.Producer,com.facebook.imagepipeline.producers.ThumbnailProducer[]) -> newBitmapCacheGetToLocalTransformSequence
    com.facebook.imagepipeline.producers.Producer newBitmapCacheGetToDecodeSequence(com.facebook.imagepipeline.producers.Producer) -> newBitmapCacheGetToDecodeSequence
    com.facebook.imagepipeline.producers.Producer newEncodedCacheMultiplexToTranscodeSequence(com.facebook.imagepipeline.producers.Producer) -> newEncodedCacheMultiplexToTranscodeSequence
    com.facebook.imagepipeline.producers.Producer newDiskCacheSequence(com.facebook.imagepipeline.producers.Producer) -> newDiskCacheSequence
    com.facebook.imagepipeline.producers.Producer newBitmapCacheGetToBitmapCacheSequence(com.facebook.imagepipeline.producers.Producer) -> newBitmapCacheGetToBitmapCacheSequence
    com.facebook.imagepipeline.producers.Producer newLocalTransformationsSequence(com.facebook.imagepipeline.producers.Producer,com.facebook.imagepipeline.producers.ThumbnailProducer[]) -> newLocalTransformationsSequence
    com.facebook.imagepipeline.producers.Producer newLocalThumbnailProducer(com.facebook.imagepipeline.producers.ThumbnailProducer[]) -> newLocalThumbnailProducer
    com.facebook.imagepipeline.producers.Producer getPostprocessorSequence(com.facebook.imagepipeline.producers.Producer) -> getPostprocessorSequence
    com.facebook.imagepipeline.producers.Producer getDecodedImagePrefetchSequence(com.facebook.imagepipeline.producers.Producer) -> getDecodedImagePrefetchSequence
    java.lang.String getShortenedUriString(android.net.Uri) -> getShortenedUriString
com.facebook.imagepipeline.datasource.AbstractProducerToDataSourceAdapter -> com.facebook.imagepipeline.datasource.AbstractProducerToDataSourceAdapter:
    com.facebook.imagepipeline.producers.SettableProducerContext mSettableProducerContext -> mSettableProducerContext
    com.facebook.imagepipeline.listener.RequestListener mRequestListener -> mRequestListener
    void <init>(com.facebook.imagepipeline.producers.Producer,com.facebook.imagepipeline.producers.SettableProducerContext,com.facebook.imagepipeline.listener.RequestListener) -> <init>
    com.facebook.imagepipeline.producers.Consumer createConsumer() -> createConsumer
    void onNewResultImpl(java.lang.Object,boolean) -> onNewResultImpl
    void onFailureImpl(java.lang.Throwable) -> onFailureImpl
    void onCancellationImpl() -> onCancellationImpl
    boolean close() -> close
    void access$000(com.facebook.imagepipeline.datasource.AbstractProducerToDataSourceAdapter,java.lang.Throwable) -> access$000
    void access$100(com.facebook.imagepipeline.datasource.AbstractProducerToDataSourceAdapter) -> access$100
    boolean access$200(com.facebook.imagepipeline.datasource.AbstractProducerToDataSourceAdapter,float) -> access$200
com.facebook.imagepipeline.datasource.AbstractProducerToDataSourceAdapter$1 -> com.facebook.imagepipeline.datasource.AbstractProducerToDataSourceAdapter$1:
    com.facebook.imagepipeline.datasource.AbstractProducerToDataSourceAdapter this$0 -> this$0
    void <init>(com.facebook.imagepipeline.datasource.AbstractProducerToDataSourceAdapter) -> <init>
    void onNewResultImpl(java.lang.Object,boolean) -> onNewResultImpl
    void onFailureImpl(java.lang.Throwable) -> onFailureImpl
    void onCancellationImpl() -> onCancellationImpl
    void onProgressUpdateImpl(float) -> onProgressUpdateImpl
com.facebook.imagepipeline.datasource.BaseBitmapDataSubscriber -> com.facebook.imagepipeline.datasource.BaseBitmapDataSubscriber:
    void <init>() -> <init>
    void onNewResultImpl(com.facebook.datasource.DataSource) -> onNewResultImpl
    void onNewResultImpl(android.graphics.Bitmap) -> onNewResultImpl
com.facebook.imagepipeline.datasource.BaseListBitmapDataSubscriber -> com.facebook.imagepipeline.datasource.BaseListBitmapDataSubscriber:
    void <init>() -> <init>
    void onNewResultImpl(com.facebook.datasource.DataSource) -> onNewResultImpl
    void onNewResultListImpl(java.util.List) -> onNewResultListImpl
com.facebook.imagepipeline.datasource.CloseableProducerToDataSourceAdapter -> com.facebook.imagepipeline.datasource.CloseableProducerToDataSourceAdapter:
    com.facebook.datasource.DataSource create(com.facebook.imagepipeline.producers.Producer,com.facebook.imagepipeline.producers.SettableProducerContext,com.facebook.imagepipeline.listener.RequestListener) -> create
    void <init>(com.facebook.imagepipeline.producers.Producer,com.facebook.imagepipeline.producers.SettableProducerContext,com.facebook.imagepipeline.listener.RequestListener) -> <init>
    com.facebook.common.references.CloseableReference getResult() -> getResult
    void closeResult(com.facebook.common.references.CloseableReference) -> closeResult
    void onNewResultImpl(com.facebook.common.references.CloseableReference,boolean) -> onNewResultImpl
    void onNewResultImpl(java.lang.Object,boolean) -> onNewResultImpl
    void closeResult(java.lang.Object) -> closeResult
    java.lang.Object getResult() -> getResult
com.facebook.imagepipeline.datasource.ListDataSource -> com.facebook.imagepipeline.datasource.ListDataSource:
    com.facebook.datasource.DataSource[] mDataSources -> mDataSources
    int mFinishedDataSources -> mFinishedDataSources
    void <init>(com.facebook.datasource.DataSource[]) -> <init>
    com.facebook.imagepipeline.datasource.ListDataSource create(com.facebook.datasource.DataSource[]) -> create
    java.util.List getResult() -> getResult
    boolean hasResult() -> hasResult
    boolean close() -> close
    void onDataSourceFinished() -> onDataSourceFinished
    boolean increaseAndCheckIfLast() -> increaseAndCheckIfLast
    void onDataSourceFailed(com.facebook.datasource.DataSource) -> onDataSourceFailed
    void onDataSourceCancelled() -> onDataSourceCancelled
    void onDataSourceProgress() -> onDataSourceProgress
    java.lang.Object getResult() -> getResult
    void access$100(com.facebook.imagepipeline.datasource.ListDataSource,com.facebook.datasource.DataSource) -> access$100
    void access$200(com.facebook.imagepipeline.datasource.ListDataSource) -> access$200
    void access$300(com.facebook.imagepipeline.datasource.ListDataSource) -> access$300
    void access$400(com.facebook.imagepipeline.datasource.ListDataSource) -> access$400
com.facebook.imagepipeline.datasource.ListDataSource$1 -> com.facebook.imagepipeline.datasource.ListDataSource$1:
com.facebook.imagepipeline.datasource.ListDataSource$InternalDataSubscriber -> com.facebook.imagepipeline.datasource.ListDataSource$InternalDataSubscriber:
    boolean mFinished -> mFinished
    com.facebook.imagepipeline.datasource.ListDataSource this$0 -> this$0
    void <init>(com.facebook.imagepipeline.datasource.ListDataSource) -> <init>
    boolean tryFinish() -> tryFinish
    void onFailure(com.facebook.datasource.DataSource) -> onFailure
    void onCancellation(com.facebook.datasource.DataSource) -> onCancellation
    void onNewResult(com.facebook.datasource.DataSource) -> onNewResult
    void onProgressUpdate(com.facebook.datasource.DataSource) -> onProgressUpdate
    void <init>(com.facebook.imagepipeline.datasource.ListDataSource,com.facebook.imagepipeline.datasource.ListDataSource$1) -> <init>
com.facebook.imagepipeline.datasource.ProducerToDataSourceAdapter -> com.facebook.imagepipeline.datasource.ProducerToDataSourceAdapter:
    com.facebook.datasource.DataSource create(com.facebook.imagepipeline.producers.Producer,com.facebook.imagepipeline.producers.SettableProducerContext,com.facebook.imagepipeline.listener.RequestListener) -> create
    void <init>(com.facebook.imagepipeline.producers.Producer,com.facebook.imagepipeline.producers.SettableProducerContext,com.facebook.imagepipeline.listener.RequestListener) -> <init>
com.facebook.imagepipeline.datasource.SettableDataSource -> com.facebook.imagepipeline.datasource.SettableDataSource:
    com.facebook.imagepipeline.datasource.SettableDataSource create() -> create
    void <init>() -> <init>
    boolean set(com.facebook.common.references.CloseableReference) -> set
    boolean setException(java.lang.Throwable) -> setException
    boolean setProgress(float) -> setProgress
    com.facebook.common.references.CloseableReference getResult() -> getResult
    void closeResult(com.facebook.common.references.CloseableReference) -> closeResult
    void closeResult(java.lang.Object) -> closeResult
    java.lang.Object getResult() -> getResult
com.facebook.imagepipeline.decoder.DecodeException -> com.facebook.imagepipeline.decoder.DecodeException:
    void <init>(java.lang.String) -> <init>
    void <init>(java.lang.String,java.lang.Throwable) -> <init>
com.facebook.imagepipeline.decoder.DefaultImageDecoder -> com.facebook.imagepipeline.decoder.DefaultImageDecoder:
    com.facebook.imagepipeline.animated.factory.AnimatedImageFactory mAnimatedImageFactory -> mAnimatedImageFactory
    android.graphics.Bitmap$Config mBitmapConfig -> mBitmapConfig
    com.facebook.imagepipeline.platform.PlatformDecoder mPlatformDecoder -> mPlatformDecoder
    com.facebook.imagepipeline.decoder.ImageDecoder mDefaultDecoder -> mDefaultDecoder
    java.util.Map mCustomDecoders -> mCustomDecoders
    void <init>(com.facebook.imagepipeline.animated.factory.AnimatedImageFactory,com.facebook.imagepipeline.platform.PlatformDecoder,android.graphics.Bitmap$Config) -> <init>
    void <init>(com.facebook.imagepipeline.animated.factory.AnimatedImageFactory,com.facebook.imagepipeline.platform.PlatformDecoder,android.graphics.Bitmap$Config,java.util.Map) -> <init>
    com.facebook.imagepipeline.image.CloseableImage decode(com.facebook.imagepipeline.image.EncodedImage,int,com.facebook.imagepipeline.image.QualityInfo,com.facebook.imagepipeline.common.ImageDecodeOptions) -> decode
    com.facebook.imagepipeline.image.CloseableImage decodeGif(com.facebook.imagepipeline.image.EncodedImage,com.facebook.imagepipeline.common.ImageDecodeOptions) -> decodeGif
    com.facebook.imagepipeline.image.CloseableStaticBitmap decodeStaticImage(com.facebook.imagepipeline.image.EncodedImage,com.facebook.imagepipeline.common.ImageDecodeOptions) -> decodeStaticImage
    com.facebook.imagepipeline.image.CloseableStaticBitmap decodeJpeg(com.facebook.imagepipeline.image.EncodedImage,int,com.facebook.imagepipeline.image.QualityInfo,com.facebook.imagepipeline.common.ImageDecodeOptions) -> decodeJpeg
    com.facebook.imagepipeline.image.CloseableImage decodeAnimatedWebp(com.facebook.imagepipeline.image.EncodedImage,com.facebook.imagepipeline.common.ImageDecodeOptions) -> decodeAnimatedWebp
com.facebook.imagepipeline.decoder.DefaultImageDecoder$1 -> com.facebook.imagepipeline.decoder.DefaultImageDecoder$1:
    com.facebook.imagepipeline.decoder.DefaultImageDecoder this$0 -> this$0
    void <init>(com.facebook.imagepipeline.decoder.DefaultImageDecoder) -> <init>
    com.facebook.imagepipeline.image.CloseableImage decode(com.facebook.imagepipeline.image.EncodedImage,int,com.facebook.imagepipeline.image.QualityInfo,com.facebook.imagepipeline.common.ImageDecodeOptions) -> decode
com.facebook.imagepipeline.decoder.ImageDecoder -> com.facebook.imagepipeline.decoder.ImageDecoder:
    com.facebook.imagepipeline.image.CloseableImage decode(com.facebook.imagepipeline.image.EncodedImage,int,com.facebook.imagepipeline.image.QualityInfo,com.facebook.imagepipeline.common.ImageDecodeOptions) -> decode
com.facebook.imagepipeline.decoder.ImageDecoderConfig -> com.facebook.imagepipeline.decoder.ImageDecoderConfig:
    java.util.Map mCustomImageDecoders -> mCustomImageDecoders
    java.util.List mCustomImageFormats -> mCustomImageFormats
    void <init>(com.facebook.imagepipeline.decoder.ImageDecoderConfig$Builder) -> <init>
    java.util.Map getCustomImageDecoders() -> getCustomImageDecoders
    java.util.List getCustomImageFormats() -> getCustomImageFormats
    com.facebook.imagepipeline.decoder.ImageDecoderConfig$Builder newBuilder() -> newBuilder
    void <init>(com.facebook.imagepipeline.decoder.ImageDecoderConfig$Builder,com.facebook.imagepipeline.decoder.ImageDecoderConfig$1) -> <init>
com.facebook.imagepipeline.decoder.ImageDecoderConfig$1 -> com.facebook.imagepipeline.decoder.ImageDecoderConfig$1:
com.facebook.imagepipeline.decoder.ImageDecoderConfig$Builder -> com.facebook.imagepipeline.decoder.ImageDecoderConfig$Builder:
    java.util.Map mCustomImageDecoders -> mCustomImageDecoders
    java.util.List mCustomImageFormats -> mCustomImageFormats
    void <init>() -> <init>
    com.facebook.imagepipeline.decoder.ImageDecoderConfig$Builder addDecodingCapability(com.facebook.imageformat.ImageFormat,com.facebook.imageformat.ImageFormat$FormatChecker,com.facebook.imagepipeline.decoder.ImageDecoder) -> addDecodingCapability
    com.facebook.imagepipeline.decoder.ImageDecoderConfig$Builder overrideDecoder(com.facebook.imageformat.ImageFormat,com.facebook.imagepipeline.decoder.ImageDecoder) -> overrideDecoder
    com.facebook.imagepipeline.decoder.ImageDecoderConfig build() -> build
    java.util.Map access$000(com.facebook.imagepipeline.decoder.ImageDecoderConfig$Builder) -> access$000
    java.util.List access$100(com.facebook.imagepipeline.decoder.ImageDecoderConfig$Builder) -> access$100
com.facebook.imagepipeline.decoder.ProgressiveJpegConfig -> com.facebook.imagepipeline.decoder.ProgressiveJpegConfig:
    int getNextScanNumberToDecode(int) -> getNextScanNumberToDecode
    com.facebook.imagepipeline.image.QualityInfo getQualityInfo(int) -> getQualityInfo
com.facebook.imagepipeline.decoder.ProgressiveJpegParser -> com.facebook.imagepipeline.decoder.ProgressiveJpegParser:
    int READ_FIRST_JPEG_BYTE -> READ_FIRST_JPEG_BYTE
    int READ_SECOND_JPEG_BYTE -> READ_SECOND_JPEG_BYTE
    int READ_MARKER_FIRST_BYTE_OR_ENTROPY_DATA -> READ_MARKER_FIRST_BYTE_OR_ENTROPY_DATA
    int READ_MARKER_SECOND_BYTE -> READ_MARKER_SECOND_BYTE
    int READ_SIZE_FIRST_BYTE -> READ_SIZE_FIRST_BYTE
    int READ_SIZE_SECOND_BYTE -> READ_SIZE_SECOND_BYTE
    int NOT_A_JPEG -> NOT_A_JPEG
    int BUFFER_SIZE -> BUFFER_SIZE
    int mParserState -> mParserState
    int mLastByteRead -> mLastByteRead
    int mBytesParsed -> mBytesParsed
    int mNextFullScanNumber -> mNextFullScanNumber
    int mBestScanNumber -> mBestScanNumber
    int mBestScanEndOffset -> mBestScanEndOffset
    com.facebook.common.memory.ByteArrayPool mByteArrayPool -> mByteArrayPool
    void <init>(com.facebook.common.memory.ByteArrayPool) -> <init>
    boolean parseMoreData(com.facebook.imagepipeline.image.EncodedImage) -> parseMoreData
    boolean doParseMoreData(java.io.InputStream) -> doParseMoreData
    boolean doesMarkerStartSegment(int) -> doesMarkerStartSegment
    void newScanOrImageEndFound(int) -> newScanOrImageEndFound
    boolean isJpeg() -> isJpeg
    int getBestScanEndOffset() -> getBestScanEndOffset
    int getBestScanNumber() -> getBestScanNumber
com.facebook.imagepipeline.decoder.SimpleProgressiveJpegConfig -> com.facebook.imagepipeline.decoder.SimpleProgressiveJpegConfig:
    com.facebook.imagepipeline.decoder.SimpleProgressiveJpegConfig$DynamicValueConfig mDynamicValueConfig -> mDynamicValueConfig
    void <init>() -> <init>
    void <init>(com.facebook.imagepipeline.decoder.SimpleProgressiveJpegConfig$DynamicValueConfig) -> <init>
    int getNextScanNumberToDecode(int) -> getNextScanNumberToDecode
    com.facebook.imagepipeline.image.QualityInfo getQualityInfo(int) -> getQualityInfo
com.facebook.imagepipeline.decoder.SimpleProgressiveJpegConfig$1 -> com.facebook.imagepipeline.decoder.SimpleProgressiveJpegConfig$1:
com.facebook.imagepipeline.decoder.SimpleProgressiveJpegConfig$DefaultDynamicValueConfig -> com.facebook.imagepipeline.decoder.SimpleProgressiveJpegConfig$DefaultDynamicValueConfig:
    void <init>() -> <init>
    java.util.List getScansToDecode() -> getScansToDecode
    int getGoodEnoughScanNumber() -> getGoodEnoughScanNumber
    void <init>(com.facebook.imagepipeline.decoder.SimpleProgressiveJpegConfig$1) -> <init>
com.facebook.imagepipeline.decoder.SimpleProgressiveJpegConfig$DynamicValueConfig -> com.facebook.imagepipeline.decoder.SimpleProgressiveJpegConfig$DynamicValueConfig:
    java.util.List getScansToDecode() -> getScansToDecode
    int getGoodEnoughScanNumber() -> getGoodEnoughScanNumber
com.facebook.imagepipeline.image.CloseableAnimatedBitmap -> com.facebook.imagepipeline.image.CloseableAnimatedBitmap:
    java.util.List mBitmapReferences -> mBitmapReferences
    java.util.List mBitmaps -> mBitmaps
    java.util.List mDurations -> mDurations
    void <init>(java.util.List,java.util.List) -> <init>
    void <init>(java.util.List,java.util.List,com.facebook.common.references.ResourceReleaser) -> <init>
    void close() -> close
    boolean isClosed() -> isClosed
    java.util.List getBitmaps() -> getBitmaps
    java.util.List getDurations() -> getDurations
    android.graphics.Bitmap getUnderlyingBitmap() -> getUnderlyingBitmap
    int getSizeInBytes() -> getSizeInBytes
    int getWidth() -> getWidth
    int getHeight() -> getHeight
com.facebook.imagepipeline.image.CloseableAnimatedImage -> com.facebook.imagepipeline.image.CloseableAnimatedImage:
    com.facebook.imagepipeline.animated.base.AnimatedImageResult mImageResult -> mImageResult
    void <init>(com.facebook.imagepipeline.animated.base.AnimatedImageResult) -> <init>
    int getWidth() -> getWidth
    int getHeight() -> getHeight
    void close() -> close
    boolean isClosed() -> isClosed
    int getSizeInBytes() -> getSizeInBytes
    boolean isStateful() -> isStateful
    com.facebook.imagepipeline.animated.base.AnimatedImageResult getImageResult() -> getImageResult
    com.facebook.imagepipeline.animated.base.AnimatedImage getImage() -> getImage
com.facebook.imagepipeline.image.CloseableBitmap -> com.facebook.imagepipeline.image.CloseableBitmap:
    void <init>() -> <init>
    android.graphics.Bitmap getUnderlyingBitmap() -> getUnderlyingBitmap
com.facebook.imagepipeline.image.CloseableImage -> com.facebook.imagepipeline.image.CloseableImage:
    java.lang.String TAG -> TAG
    void <init>() -> <init>
    int getSizeInBytes() -> getSizeInBytes
    void close() -> close
    boolean isClosed() -> isClosed
    com.facebook.imagepipeline.image.QualityInfo getQualityInfo() -> getQualityInfo
    boolean isStateful() -> isStateful
    void finalize() -> finalize
com.facebook.imagepipeline.image.CloseableStaticBitmap -> com.facebook.imagepipeline.image.CloseableStaticBitmap:
    com.facebook.common.references.CloseableReference mBitmapReference -> mBitmapReference
    android.graphics.Bitmap mBitmap -> mBitmap
    com.facebook.imagepipeline.image.QualityInfo mQualityInfo -> mQualityInfo
    int mRotationAngle -> mRotationAngle
    void <init>(android.graphics.Bitmap,com.facebook.common.references.ResourceReleaser,com.facebook.imagepipeline.image.QualityInfo,int) -> <init>
    void <init>(com.facebook.common.references.CloseableReference,com.facebook.imagepipeline.image.QualityInfo,int) -> <init>
    void close() -> close
    com.facebook.common.references.CloseableReference detachBitmapReference() -> detachBitmapReference
    com.facebook.common.references.CloseableReference convertToBitmapReference() -> convertToBitmapReference
    boolean isClosed() -> isClosed
    android.graphics.Bitmap getUnderlyingBitmap() -> getUnderlyingBitmap
    int getSizeInBytes() -> getSizeInBytes
    int getWidth() -> getWidth
    int getHeight() -> getHeight
    int getBitmapWidth(android.graphics.Bitmap) -> getBitmapWidth
    int getBitmapHeight(android.graphics.Bitmap) -> getBitmapHeight
    int getRotationAngle() -> getRotationAngle
    com.facebook.imagepipeline.image.QualityInfo getQualityInfo() -> getQualityInfo
com.facebook.imagepipeline.image.EncodedImage -> com.facebook.imagepipeline.image.EncodedImage:
    int UNKNOWN_ROTATION_ANGLE -> UNKNOWN_ROTATION_ANGLE
    int UNKNOWN_WIDTH -> UNKNOWN_WIDTH
    int UNKNOWN_HEIGHT -> UNKNOWN_HEIGHT
    int UNKNOWN_STREAM_SIZE -> UNKNOWN_STREAM_SIZE
    int DEFAULT_SAMPLE_SIZE -> DEFAULT_SAMPLE_SIZE
    com.facebook.common.references.CloseableReference mPooledByteBufferRef -> mPooledByteBufferRef
    com.facebook.common.internal.Supplier mInputStreamSupplier -> mInputStreamSupplier
    com.facebook.imageformat.ImageFormat mImageFormat -> mImageFormat
    int mRotationAngle -> mRotationAngle
    int mWidth -> mWidth
    int mHeight -> mHeight
    int mSampleSize -> mSampleSize
    int mStreamSize -> mStreamSize
    com.facebook.cache.common.CacheKey mEncodedCacheKey -> mEncodedCacheKey
    void <init>(com.facebook.common.references.CloseableReference) -> <init>
    void <init>(com.facebook.common.internal.Supplier) -> <init>
    void <init>(com.facebook.common.internal.Supplier,int) -> <init>
    com.facebook.imagepipeline.image.EncodedImage cloneOrNull(com.facebook.imagepipeline.image.EncodedImage) -> cloneOrNull
    com.facebook.imagepipeline.image.EncodedImage cloneOrNull() -> cloneOrNull
    void close() -> close
    boolean isValid() -> isValid
    com.facebook.common.references.CloseableReference getByteBufferRef() -> getByteBufferRef
    java.io.InputStream getInputStream() -> getInputStream
    void setImageFormat(com.facebook.imageformat.ImageFormat) -> setImageFormat
    void setHeight(int) -> setHeight
    void setWidth(int) -> setWidth
    void setRotationAngle(int) -> setRotationAngle
    void setSampleSize(int) -> setSampleSize
    void setStreamSize(int) -> setStreamSize
    void setEncodedCacheKey(com.facebook.cache.common.CacheKey) -> setEncodedCacheKey
    com.facebook.imageformat.ImageFormat getImageFormat() -> getImageFormat
    int getRotationAngle() -> getRotationAngle
    int getWidth() -> getWidth
    int getHeight() -> getHeight
    int getSampleSize() -> getSampleSize
    com.facebook.cache.common.CacheKey getEncodedCacheKey() -> getEncodedCacheKey
    boolean isCompleteAt(int) -> isCompleteAt
    int getSize() -> getSize
    void parseMetaData() -> parseMetaData
    android.util.Pair readWebPImageSize() -> readWebPImageSize
    android.util.Pair readImageSize() -> readImageSize
    void copyMetaDataFrom(com.facebook.imagepipeline.image.EncodedImage) -> copyMetaDataFrom
    boolean isMetaDataAvailable(com.facebook.imagepipeline.image.EncodedImage) -> isMetaDataAvailable
    void closeSafely(com.facebook.imagepipeline.image.EncodedImage) -> closeSafely
    boolean isValid(com.facebook.imagepipeline.image.EncodedImage) -> isValid
    com.facebook.common.references.SharedReference getUnderlyingReferenceTestOnly() -> getUnderlyingReferenceTestOnly
com.facebook.imagepipeline.image.ImageInfo -> com.facebook.imagepipeline.image.ImageInfo:
    int getWidth() -> getWidth
    int getHeight() -> getHeight
    com.facebook.imagepipeline.image.QualityInfo getQualityInfo() -> getQualityInfo
com.facebook.imagepipeline.image.ImmutableQualityInfo -> com.facebook.imagepipeline.image.ImmutableQualityInfo:
    com.facebook.imagepipeline.image.QualityInfo FULL_QUALITY -> FULL_QUALITY
    int mQuality -> mQuality
    boolean mIsOfGoodEnoughQuality -> mIsOfGoodEnoughQuality
    boolean mIsOfFullQuality -> mIsOfFullQuality
    void <init>(int,boolean,boolean) -> <init>
    int getQuality() -> getQuality
    boolean isOfGoodEnoughQuality() -> isOfGoodEnoughQuality
    boolean isOfFullQuality() -> isOfFullQuality
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    com.facebook.imagepipeline.image.QualityInfo of(int,boolean,boolean) -> of
    void <clinit>() -> <clinit>
com.facebook.imagepipeline.image.QualityInfo -> com.facebook.imagepipeline.image.QualityInfo:
    int getQuality() -> getQuality
    boolean isOfGoodEnoughQuality() -> isOfGoodEnoughQuality
    boolean isOfFullQuality() -> isOfFullQuality
com.facebook.imagepipeline.listener.BaseRequestListener -> com.facebook.imagepipeline.listener.BaseRequestListener:
    void <init>() -> <init>
    void onRequestStart(com.facebook.imagepipeline.request.ImageRequest,java.lang.Object,java.lang.String,boolean) -> onRequestStart
    void onRequestSuccess(com.facebook.imagepipeline.request.ImageRequest,java.lang.String,boolean) -> onRequestSuccess
    void onRequestFailure(com.facebook.imagepipeline.request.ImageRequest,java.lang.String,java.lang.Throwable,boolean) -> onRequestFailure
    void onRequestCancellation(java.lang.String) -> onRequestCancellation
    void onProducerStart(java.lang.String,java.lang.String) -> onProducerStart
    void onProducerEvent(java.lang.String,java.lang.String,java.lang.String) -> onProducerEvent
    void onProducerFinishWithSuccess(java.lang.String,java.lang.String,java.util.Map) -> onProducerFinishWithSuccess
    void onProducerFinishWithFailure(java.lang.String,java.lang.String,java.lang.Throwable,java.util.Map) -> onProducerFinishWithFailure
    void onProducerFinishWithCancellation(java.lang.String,java.lang.String,java.util.Map) -> onProducerFinishWithCancellation
    boolean requiresExtraMap(java.lang.String) -> requiresExtraMap
com.facebook.imagepipeline.listener.ForwardingRequestListener -> com.facebook.imagepipeline.listener.ForwardingRequestListener:
    java.lang.String TAG -> TAG
    java.util.List mRequestListeners -> mRequestListeners
    void <init>(java.util.Set) -> <init>
    void <init>(com.facebook.imagepipeline.listener.RequestListener[]) -> <init>
    void onRequestStart(com.facebook.imagepipeline.request.ImageRequest,java.lang.Object,java.lang.String,boolean) -> onRequestStart
    void onProducerStart(java.lang.String,java.lang.String) -> onProducerStart
    void onProducerFinishWithSuccess(java.lang.String,java.lang.String,java.util.Map) -> onProducerFinishWithSuccess
    void onProducerFinishWithFailure(java.lang.String,java.lang.String,java.lang.Throwable,java.util.Map) -> onProducerFinishWithFailure
    void onProducerFinishWithCancellation(java.lang.String,java.lang.String,java.util.Map) -> onProducerFinishWithCancellation
    void onProducerEvent(java.lang.String,java.lang.String,java.lang.String) -> onProducerEvent
    void onRequestSuccess(com.facebook.imagepipeline.request.ImageRequest,java.lang.String,boolean) -> onRequestSuccess
    void onRequestFailure(com.facebook.imagepipeline.request.ImageRequest,java.lang.String,java.lang.Throwable,boolean) -> onRequestFailure
    void onRequestCancellation(java.lang.String) -> onRequestCancellation
    boolean requiresExtraMap(java.lang.String) -> requiresExtraMap
    void onException(java.lang.String,java.lang.Throwable) -> onException
com.facebook.imagepipeline.listener.RequestListener -> com.facebook.imagepipeline.listener.RequestListener:
    void onRequestStart(com.facebook.imagepipeline.request.ImageRequest,java.lang.Object,java.lang.String,boolean) -> onRequestStart
    void onRequestSuccess(com.facebook.imagepipeline.request.ImageRequest,java.lang.String,boolean) -> onRequestSuccess
    void onRequestFailure(com.facebook.imagepipeline.request.ImageRequest,java.lang.String,java.lang.Throwable,boolean) -> onRequestFailure
    void onRequestCancellation(java.lang.String) -> onRequestCancellation
com.facebook.imagepipeline.listener.RequestLoggingListener -> com.facebook.imagepipeline.listener.RequestLoggingListener:
    java.lang.String TAG -> TAG
    java.util.Map mProducerStartTimeMap -> mProducerStartTimeMap
    java.util.Map mRequestStartTimeMap -> mRequestStartTimeMap
    void <init>() -> <init>
    void onRequestStart(com.facebook.imagepipeline.request.ImageRequest,java.lang.Object,java.lang.String,boolean) -> onRequestStart
    void onProducerStart(java.lang.String,java.lang.String) -> onProducerStart
    void onProducerFinishWithSuccess(java.lang.String,java.lang.String,java.util.Map) -> onProducerFinishWithSuccess
    void onProducerFinishWithFailure(java.lang.String,java.lang.String,java.lang.Throwable,java.util.Map) -> onProducerFinishWithFailure
    void onProducerFinishWithCancellation(java.lang.String,java.lang.String,java.util.Map) -> onProducerFinishWithCancellation
    void onProducerEvent(java.lang.String,java.lang.String,java.lang.String) -> onProducerEvent
    void onRequestSuccess(com.facebook.imagepipeline.request.ImageRequest,java.lang.String,boolean) -> onRequestSuccess
    void onRequestFailure(com.facebook.imagepipeline.request.ImageRequest,java.lang.String,java.lang.Throwable,boolean) -> onRequestFailure
    void onRequestCancellation(java.lang.String) -> onRequestCancellation
    boolean requiresExtraMap(java.lang.String) -> requiresExtraMap
    long getElapsedTime(java.lang.Long,long) -> getElapsedTime
    long getTime() -> getTime
com.facebook.imagepipeline.memory.BasePool -> com.facebook.imagepipeline.memory.BasePool:
    java.lang.Class TAG -> TAG
    com.facebook.common.memory.MemoryTrimmableRegistry mMemoryTrimmableRegistry -> mMemoryTrimmableRegistry
    com.facebook.imagepipeline.memory.PoolParams mPoolParams -> mPoolParams
    android.util.SparseArray mBuckets -> mBuckets
    java.util.Set mInUseValues -> mInUseValues
    boolean mAllowNewBuckets -> mAllowNewBuckets
    com.facebook.imagepipeline.memory.BasePool$Counter mUsed -> mUsed
    com.facebook.imagepipeline.memory.BasePool$Counter mFree -> mFree
    com.facebook.imagepipeline.memory.PoolStatsTracker mPoolStatsTracker -> mPoolStatsTracker
    void <init>(com.facebook.common.memory.MemoryTrimmableRegistry,com.facebook.imagepipeline.memory.PoolParams,com.facebook.imagepipeline.memory.PoolStatsTracker) -> <init>
    void initialize() -> initialize
    java.lang.Object get(int) -> get
    void release(java.lang.Object) -> release
    void trim(com.facebook.common.memory.MemoryTrimType) -> trim
    java.lang.Object alloc(int) -> alloc
    void free(java.lang.Object) -> free
    int getBucketedSize(int) -> getBucketedSize
    int getBucketedSizeForValue(java.lang.Object) -> getBucketedSizeForValue
    int getSizeInBytes(int) -> getSizeInBytes
    void onParamsChanged() -> onParamsChanged
    boolean isReusable(java.lang.Object) -> isReusable
    void ensurePoolSizeInvariant() -> ensurePoolSizeInvariant
    void initBuckets(android.util.SparseIntArray) -> initBuckets
    void trimToNothing() -> trimToNothing
    void trimToSoftCap() -> trimToSoftCap
    void trimToSize(int) -> trimToSize
    com.facebook.imagepipeline.memory.Bucket getBucket(int) -> getBucket
    com.facebook.imagepipeline.memory.Bucket newBucket(int) -> newBucket
    boolean isMaxSizeSoftCapExceeded() -> isMaxSizeSoftCapExceeded
    boolean canAllocate(int) -> canAllocate
    void logStats() -> logStats
    java.util.Map getStats() -> getStats
com.facebook.imagepipeline.memory.BasePool$Counter -> com.facebook.imagepipeline.memory.BasePool$Counter:
    java.lang.String TAG -> TAG
    int mCount -> mCount
    int mNumBytes -> mNumBytes
    void <init>() -> <init>
    void increment(int) -> increment
    void decrement(int) -> decrement
    void reset() -> reset
com.facebook.imagepipeline.memory.BasePool$InvalidSizeException -> com.facebook.imagepipeline.memory.BasePool$InvalidSizeException:
    void <init>(java.lang.Object) -> <init>
com.facebook.imagepipeline.memory.BasePool$InvalidValueException -> com.facebook.imagepipeline.memory.BasePool$InvalidValueException:
    void <init>(java.lang.Object) -> <init>
com.facebook.imagepipeline.memory.BasePool$PoolSizeViolationException -> com.facebook.imagepipeline.memory.BasePool$PoolSizeViolationException:
    void <init>(int,int,int,int) -> <init>
com.facebook.imagepipeline.memory.BasePool$SizeTooLargeException -> com.facebook.imagepipeline.memory.BasePool$SizeTooLargeException:
    void <init>(java.lang.Object) -> <init>
com.facebook.imagepipeline.memory.BitmapCounter -> com.facebook.imagepipeline.memory.BitmapCounter:
    int mCount -> mCount
    long mSize -> mSize
    int mMaxCount -> mMaxCount
    int mMaxSize -> mMaxSize
    com.facebook.common.references.ResourceReleaser mUnpooledBitmapsReleaser -> mUnpooledBitmapsReleaser
    void <init>(int,int) -> <init>
    boolean increase(android.graphics.Bitmap) -> increase
    void decrease(android.graphics.Bitmap) -> decrease
    int getCount() -> getCount
    long getSize() -> getSize
    com.facebook.common.references.ResourceReleaser getReleaser() -> getReleaser
    java.util.List associateBitmapsWithBitmapCounter(java.util.List) -> associateBitmapsWithBitmapCounter
com.facebook.imagepipeline.memory.BitmapCounter$1 -> com.facebook.imagepipeline.memory.BitmapCounter$1:
    com.facebook.imagepipeline.memory.BitmapCounter this$0 -> this$0
    void <init>(com.facebook.imagepipeline.memory.BitmapCounter) -> <init>
    void release(android.graphics.Bitmap) -> release
    void release(java.lang.Object) -> release
com.facebook.imagepipeline.memory.BitmapCounterProvider -> com.facebook.imagepipeline.memory.BitmapCounterProvider:
    long KB -> KB
    long MB -> MB
    int MAX_BITMAP_TOTAL_SIZE -> MAX_BITMAP_TOTAL_SIZE
    int MAX_BITMAP_COUNT -> MAX_BITMAP_COUNT
    com.facebook.imagepipeline.memory.BitmapCounter sBitmapCounter -> sBitmapCounter
    void <init>() -> <init>
    int getMaxSizeHardCap() -> getMaxSizeHardCap
    com.facebook.imagepipeline.memory.BitmapCounter get() -> get
    void <clinit>() -> <clinit>
com.facebook.imagepipeline.memory.BitmapPool -> com.facebook.imagepipeline.memory.BitmapPool:
    void <init>(com.facebook.common.memory.MemoryTrimmableRegistry,com.facebook.imagepipeline.memory.PoolParams,com.facebook.imagepipeline.memory.PoolStatsTracker) -> <init>
    android.graphics.Bitmap alloc(int) -> alloc
    void free(android.graphics.Bitmap) -> free
    int getBucketedSize(int) -> getBucketedSize
    int getBucketedSizeForValue(android.graphics.Bitmap) -> getBucketedSizeForValue
    int getSizeInBytes(int) -> getSizeInBytes
    boolean isReusable(android.graphics.Bitmap) -> isReusable
    boolean isReusable(java.lang.Object) -> isReusable
    int getBucketedSizeForValue(java.lang.Object) -> getBucketedSizeForValue
    void free(java.lang.Object) -> free
    java.lang.Object alloc(int) -> alloc
com.facebook.imagepipeline.memory.Bucket -> com.facebook.imagepipeline.memory.Bucket:
    int mItemSize -> mItemSize
    int mMaxLength -> mMaxLength
    java.util.Queue mFreeList -> mFreeList
    int mInUseLength -> mInUseLength
    void <init>(int,int,int) -> <init>
    boolean isMaxLengthExceeded() -> isMaxLengthExceeded
    int getFreeListSize() -> getFreeListSize
    java.lang.Object get() -> get
    java.lang.Object pop() -> pop
    void incrementInUseCount() -> incrementInUseCount
    void release(java.lang.Object) -> release
    void addToFreeList(java.lang.Object) -> addToFreeList
    void decrementInUseCount() -> decrementInUseCount
    int getInUseCount() -> getInUseCount
com.facebook.imagepipeline.memory.DefaultBitmapPoolParams -> com.facebook.imagepipeline.memory.DefaultBitmapPoolParams:
    int MAX_SIZE_SOFT_CAP -> MAX_SIZE_SOFT_CAP
    android.util.SparseIntArray DEFAULT_BUCKETS -> DEFAULT_BUCKETS
    void <init>() -> <init>
    int getMaxSizeHardCap() -> getMaxSizeHardCap
    com.facebook.imagepipeline.memory.PoolParams get() -> get
    void <clinit>() -> <clinit>
com.facebook.imagepipeline.memory.DefaultByteArrayPoolParams -> com.facebook.imagepipeline.memory.DefaultByteArrayPoolParams:
    int DEFAULT_IO_BUFFER_SIZE -> DEFAULT_IO_BUFFER_SIZE
    int DEFAULT_BUCKET_SIZE -> DEFAULT_BUCKET_SIZE
    int MAX_SIZE_SOFT_CAP -> MAX_SIZE_SOFT_CAP
    int MAX_SIZE_HARD_CAP -> MAX_SIZE_HARD_CAP
    void <init>() -> <init>
    com.facebook.imagepipeline.memory.PoolParams get() -> get
com.facebook.imagepipeline.memory.DefaultFlexByteArrayPoolParams -> com.facebook.imagepipeline.memory.DefaultFlexByteArrayPoolParams:
    int DEFAULT_MAX_BYTE_ARRAY_SIZE -> DEFAULT_MAX_BYTE_ARRAY_SIZE
    int DEFAULT_MIN_BYTE_ARRAY_SIZE -> DEFAULT_MIN_BYTE_ARRAY_SIZE
    int DEFAULT_MAX_NUM_THREADS -> DEFAULT_MAX_NUM_THREADS
    void <init>() -> <init>
    android.util.SparseIntArray generateBuckets(int,int,int) -> generateBuckets
    com.facebook.imagepipeline.memory.PoolParams get() -> get
    void <clinit>() -> <clinit>
com.facebook.imagepipeline.memory.DefaultNativeMemoryChunkPoolParams -> com.facebook.imagepipeline.memory.DefaultNativeMemoryChunkPoolParams:
    int SMALL_BUCKET_LENGTH -> SMALL_BUCKET_LENGTH
    int LARGE_BUCKET_LENGTH -> LARGE_BUCKET_LENGTH
    void <init>() -> <init>
    com.facebook.imagepipeline.memory.PoolParams get() -> get
    int getMaxSizeSoftCap() -> getMaxSizeSoftCap
    int getMaxSizeHardCap() -> getMaxSizeHardCap
com.facebook.imagepipeline.memory.FlexByteArrayPool -> com.facebook.imagepipeline.memory.FlexByteArrayPool:
    com.facebook.common.references.ResourceReleaser mResourceReleaser -> mResourceReleaser
    com.facebook.imagepipeline.memory.FlexByteArrayPool$SoftRefByteArrayPool mDelegatePool -> mDelegatePool
    void <init>(com.facebook.common.memory.MemoryTrimmableRegistry,com.facebook.imagepipeline.memory.PoolParams) -> <init>
    com.facebook.common.references.CloseableReference get(int) -> get
    void release(byte[]) -> release
    java.util.Map getStats() -> getStats
    int getMinBufferSize() -> getMinBufferSize
com.facebook.imagepipeline.memory.FlexByteArrayPool$1 -> com.facebook.imagepipeline.memory.FlexByteArrayPool$1:
    com.facebook.imagepipeline.memory.FlexByteArrayPool this$0 -> this$0
    void <init>(com.facebook.imagepipeline.memory.FlexByteArrayPool) -> <init>
    void release(byte[]) -> release
    void release(java.lang.Object) -> release
com.facebook.imagepipeline.memory.FlexByteArrayPool$SoftRefByteArrayPool -> com.facebook.imagepipeline.memory.FlexByteArrayPool$SoftRefByteArrayPool:
    void <init>(com.facebook.common.memory.MemoryTrimmableRegistry,com.facebook.imagepipeline.memory.PoolParams,com.facebook.imagepipeline.memory.PoolStatsTracker) -> <init>
    com.facebook.imagepipeline.memory.Bucket newBucket(int) -> newBucket
com.facebook.imagepipeline.memory.GenericByteArrayPool -> com.facebook.imagepipeline.memory.GenericByteArrayPool:
    int[] mBucketSizes -> mBucketSizes
    void <init>(com.facebook.common.memory.MemoryTrimmableRegistry,com.facebook.imagepipeline.memory.PoolParams,com.facebook.imagepipeline.memory.PoolStatsTracker) -> <init>
    int getMinBufferSize() -> getMinBufferSize
    byte[] alloc(int) -> alloc
    void free(byte[]) -> free
    int getSizeInBytes(int) -> getSizeInBytes
    int getBucketedSize(int) -> getBucketedSize
    int getBucketedSizeForValue(byte[]) -> getBucketedSizeForValue
    int getBucketedSizeForValue(java.lang.Object) -> getBucketedSizeForValue
    void free(java.lang.Object) -> free
    java.lang.Object alloc(int) -> alloc
com.facebook.imagepipeline.memory.NativeMemoryChunk -> com.facebook.imagepipeline.memory.NativeMemoryChunk:
    java.lang.String TAG -> TAG
    long mNativePtr -> mNativePtr
    int mSize -> mSize
    boolean mClosed -> mClosed
    void <init>(int) -> <init>
    void <init>() -> <init>
    void close() -> close
    boolean isClosed() -> isClosed
    int getSize() -> getSize
    int write(int,byte[],int,int) -> write
    int read(int,byte[],int,int) -> read
    byte read(int) -> read
    void copy(int,com.facebook.imagepipeline.memory.NativeMemoryChunk,int,int) -> copy
    long getNativePtr() -> getNativePtr
    void doCopy(int,com.facebook.imagepipeline.memory.NativeMemoryChunk,int,int) -> doCopy
    void finalize() -> finalize
    int adjustByteCount(int,int) -> adjustByteCount
    void checkBounds(int,int,int,int) -> checkBounds
    long nativeAllocate(int) -> nativeAllocate
    void nativeFree(long) -> nativeFree
    void nativeCopyToByteArray(long,byte[],int,int) -> nativeCopyToByteArray
    void nativeCopyFromByteArray(long,byte[],int,int) -> nativeCopyFromByteArray
    void nativeMemcpy(long,long,int) -> nativeMemcpy
    byte nativeReadByte(long) -> nativeReadByte
    void <clinit>() -> <clinit>
com.facebook.imagepipeline.memory.NativeMemoryChunkPool -> com.facebook.imagepipeline.memory.NativeMemoryChunkPool:
    int[] mBucketSizes -> mBucketSizes
    void <init>(com.facebook.common.memory.MemoryTrimmableRegistry,com.facebook.imagepipeline.memory.PoolParams,com.facebook.imagepipeline.memory.PoolStatsTracker) -> <init>
    int getMinBufferSize() -> getMinBufferSize
    com.facebook.imagepipeline.memory.NativeMemoryChunk alloc(int) -> alloc
    void free(com.facebook.imagepipeline.memory.NativeMemoryChunk) -> free
    int getSizeInBytes(int) -> getSizeInBytes
    int getBucketedSize(int) -> getBucketedSize
    int getBucketedSizeForValue(com.facebook.imagepipeline.memory.NativeMemoryChunk) -> getBucketedSizeForValue
    boolean isReusable(com.facebook.imagepipeline.memory.NativeMemoryChunk) -> isReusable
    boolean isReusable(java.lang.Object) -> isReusable
    int getBucketedSizeForValue(java.lang.Object) -> getBucketedSizeForValue
    void free(java.lang.Object) -> free
    java.lang.Object alloc(int) -> alloc
com.facebook.imagepipeline.memory.NativePooledByteBuffer -> com.facebook.imagepipeline.memory.NativePooledByteBuffer:
    int mSize -> mSize
    com.facebook.common.references.CloseableReference mBufRef -> mBufRef
    void <init>(com.facebook.common.references.CloseableReference,int) -> <init>
    int size() -> size
    byte read(int) -> read
    void read(int,byte[],int,int) -> read
    long getNativePtr() -> getNativePtr
    boolean isClosed() -> isClosed
    void close() -> close
    void ensureValid() -> ensureValid
com.facebook.imagepipeline.memory.NativePooledByteBufferFactory -> com.facebook.imagepipeline.memory.NativePooledByteBufferFactory:
    com.facebook.common.memory.PooledByteStreams mPooledByteStreams -> mPooledByteStreams
    com.facebook.imagepipeline.memory.NativeMemoryChunkPool mPool -> mPool
    void <init>(com.facebook.imagepipeline.memory.NativeMemoryChunkPool,com.facebook.common.memory.PooledByteStreams) -> <init>
    com.facebook.imagepipeline.memory.NativePooledByteBuffer newByteBuffer(int) -> newByteBuffer
    com.facebook.imagepipeline.memory.NativePooledByteBuffer newByteBuffer(java.io.InputStream) -> newByteBuffer
    com.facebook.imagepipeline.memory.NativePooledByteBuffer newByteBuffer(byte[]) -> newByteBuffer
    com.facebook.imagepipeline.memory.NativePooledByteBuffer newByteBuffer(java.io.InputStream,int) -> newByteBuffer
    com.facebook.imagepipeline.memory.NativePooledByteBuffer newByteBuf(java.io.InputStream,com.facebook.imagepipeline.memory.NativePooledByteBufferOutputStream) -> newByteBuf
    com.facebook.imagepipeline.memory.NativePooledByteBufferOutputStream newOutputStream() -> newOutputStream
    com.facebook.imagepipeline.memory.NativePooledByteBufferOutputStream newOutputStream(int) -> newOutputStream
    com.facebook.common.memory.PooledByteBufferOutputStream newOutputStream(int) -> newOutputStream
    com.facebook.common.memory.PooledByteBufferOutputStream newOutputStream() -> newOutputStream
    com.facebook.common.memory.PooledByteBuffer newByteBuffer(java.io.InputStream,int) -> newByteBuffer
    com.facebook.common.memory.PooledByteBuffer newByteBuffer(byte[]) -> newByteBuffer
    com.facebook.common.memory.PooledByteBuffer newByteBuffer(java.io.InputStream) -> newByteBuffer
    com.facebook.common.memory.PooledByteBuffer newByteBuffer(int) -> newByteBuffer
com.facebook.imagepipeline.memory.NativePooledByteBufferOutputStream -> com.facebook.imagepipeline.memory.NativePooledByteBufferOutputStream:
    com.facebook.imagepipeline.memory.NativeMemoryChunkPool mPool -> mPool
    com.facebook.common.references.CloseableReference mBufRef -> mBufRef
    int mCount -> mCount
    void <init>(com.facebook.imagepipeline.memory.NativeMemoryChunkPool) -> <init>
    void <init>(com.facebook.imagepipeline.memory.NativeMemoryChunkPool,int) -> <init>
    com.facebook.imagepipeline.memory.NativePooledByteBuffer toByteBuffer() -> toByteBuffer
    int size() -> size
    void write(int) -> write
    void write(byte[],int,int) -> write
    void close() -> close
    void realloc(int) -> realloc
    void ensureValid() -> ensureValid
    com.facebook.common.memory.PooledByteBuffer toByteBuffer() -> toByteBuffer
com.facebook.imagepipeline.memory.NativePooledByteBufferOutputStream$InvalidStreamException -> com.facebook.imagepipeline.memory.NativePooledByteBufferOutputStream$InvalidStreamException:
    void <init>() -> <init>
com.facebook.imagepipeline.memory.NoOpPoolStatsTracker -> com.facebook.imagepipeline.memory.NoOpPoolStatsTracker:
    com.facebook.imagepipeline.memory.NoOpPoolStatsTracker sInstance -> sInstance
    void <init>() -> <init>
    com.facebook.imagepipeline.memory.NoOpPoolStatsTracker getInstance() -> getInstance
    void setBasePool(com.facebook.imagepipeline.memory.BasePool) -> setBasePool
    void onValueReuse(int) -> onValueReuse
    void onSoftCapReached() -> onSoftCapReached
    void onHardCapReached() -> onHardCapReached
    void onAlloc(int) -> onAlloc
    void onFree(int) -> onFree
    void onValueRelease(int) -> onValueRelease
    void <clinit>() -> <clinit>
com.facebook.imagepipeline.memory.OOMSoftReferenceBucket -> com.facebook.imagepipeline.memory.OOMSoftReferenceBucket:
    java.util.LinkedList mSpareReferences -> mSpareReferences
    void <init>(int,int,int) -> <init>
    java.lang.Object pop() -> pop
    void addToFreeList(java.lang.Object) -> addToFreeList
com.facebook.imagepipeline.memory.PoolConfig -> com.facebook.imagepipeline.memory.PoolConfig:
    com.facebook.imagepipeline.memory.PoolParams mBitmapPoolParams -> mBitmapPoolParams
    com.facebook.imagepipeline.memory.PoolStatsTracker mBitmapPoolStatsTracker -> mBitmapPoolStatsTracker
    com.facebook.imagepipeline.memory.PoolParams mFlexByteArrayPoolParams -> mFlexByteArrayPoolParams
    com.facebook.common.memory.MemoryTrimmableRegistry mMemoryTrimmableRegistry -> mMemoryTrimmableRegistry
    com.facebook.imagepipeline.memory.PoolParams mNativeMemoryChunkPoolParams -> mNativeMemoryChunkPoolParams
    com.facebook.imagepipeline.memory.PoolStatsTracker mNativeMemoryChunkPoolStatsTracker -> mNativeMemoryChunkPoolStatsTracker
    com.facebook.imagepipeline.memory.PoolParams mSmallByteArrayPoolParams -> mSmallByteArrayPoolParams
    com.facebook.imagepipeline.memory.PoolStatsTracker mSmallByteArrayPoolStatsTracker -> mSmallByteArrayPoolStatsTracker
    void <init>(com.facebook.imagepipeline.memory.PoolConfig$Builder) -> <init>
    com.facebook.imagepipeline.memory.PoolParams getBitmapPoolParams() -> getBitmapPoolParams
    com.facebook.imagepipeline.memory.PoolStatsTracker getBitmapPoolStatsTracker() -> getBitmapPoolStatsTracker
    com.facebook.common.memory.MemoryTrimmableRegistry getMemoryTrimmableRegistry() -> getMemoryTrimmableRegistry
    com.facebook.imagepipeline.memory.PoolParams getNativeMemoryChunkPoolParams() -> getNativeMemoryChunkPoolParams
    com.facebook.imagepipeline.memory.PoolStatsTracker getNativeMemoryChunkPoolStatsTracker() -> getNativeMemoryChunkPoolStatsTracker
    com.facebook.imagepipeline.memory.PoolParams getFlexByteArrayPoolParams() -> getFlexByteArrayPoolParams
    com.facebook.imagepipeline.memory.PoolParams getSmallByteArrayPoolParams() -> getSmallByteArrayPoolParams
    com.facebook.imagepipeline.memory.PoolStatsTracker getSmallByteArrayPoolStatsTracker() -> getSmallByteArrayPoolStatsTracker
    com.facebook.imagepipeline.memory.PoolConfig$Builder newBuilder() -> newBuilder
    void <init>(com.facebook.imagepipeline.memory.PoolConfig$Builder,com.facebook.imagepipeline.memory.PoolConfig$1) -> <init>
com.facebook.imagepipeline.memory.PoolConfig$1 -> com.facebook.imagepipeline.memory.PoolConfig$1:
com.facebook.imagepipeline.memory.PoolConfig$Builder -> com.facebook.imagepipeline.memory.PoolConfig$Builder:
    com.facebook.imagepipeline.memory.PoolParams mBitmapPoolParams -> mBitmapPoolParams
    com.facebook.imagepipeline.memory.PoolStatsTracker mBitmapPoolStatsTracker -> mBitmapPoolStatsTracker
    com.facebook.imagepipeline.memory.PoolParams mFlexByteArrayPoolParams -> mFlexByteArrayPoolParams
    com.facebook.common.memory.MemoryTrimmableRegistry mMemoryTrimmableRegistry -> mMemoryTrimmableRegistry
    com.facebook.imagepipeline.memory.PoolParams mNativeMemoryChunkPoolParams -> mNativeMemoryChunkPoolParams
    com.facebook.imagepipeline.memory.PoolStatsTracker mNativeMemoryChunkPoolStatsTracker -> mNativeMemoryChunkPoolStatsTracker
    com.facebook.imagepipeline.memory.PoolParams mSmallByteArrayPoolParams -> mSmallByteArrayPoolParams
    com.facebook.imagepipeline.memory.PoolStatsTracker mSmallByteArrayPoolStatsTracker -> mSmallByteArrayPoolStatsTracker
    void <init>() -> <init>
    com.facebook.imagepipeline.memory.PoolConfig$Builder setBitmapPoolParams(com.facebook.imagepipeline.memory.PoolParams) -> setBitmapPoolParams
    com.facebook.imagepipeline.memory.PoolConfig$Builder setBitmapPoolStatsTracker(com.facebook.imagepipeline.memory.PoolStatsTracker) -> setBitmapPoolStatsTracker
    com.facebook.imagepipeline.memory.PoolConfig$Builder setFlexByteArrayPoolParams(com.facebook.imagepipeline.memory.PoolParams) -> setFlexByteArrayPoolParams
    com.facebook.imagepipeline.memory.PoolConfig$Builder setMemoryTrimmableRegistry(com.facebook.common.memory.MemoryTrimmableRegistry) -> setMemoryTrimmableRegistry
    com.facebook.imagepipeline.memory.PoolConfig$Builder setNativeMemoryChunkPoolParams(com.facebook.imagepipeline.memory.PoolParams) -> setNativeMemoryChunkPoolParams
    com.facebook.imagepipeline.memory.PoolConfig$Builder setNativeMemoryChunkPoolStatsTracker(com.facebook.imagepipeline.memory.PoolStatsTracker) -> setNativeMemoryChunkPoolStatsTracker
    com.facebook.imagepipeline.memory.PoolConfig$Builder setSmallByteArrayPoolParams(com.facebook.imagepipeline.memory.PoolParams) -> setSmallByteArrayPoolParams
    com.facebook.imagepipeline.memory.PoolConfig$Builder setSmallByteArrayPoolStatsTracker(com.facebook.imagepipeline.memory.PoolStatsTracker) -> setSmallByteArrayPoolStatsTracker
    com.facebook.imagepipeline.memory.PoolConfig build() -> build
    com.facebook.imagepipeline.memory.PoolParams access$000(com.facebook.imagepipeline.memory.PoolConfig$Builder) -> access$000
    com.facebook.imagepipeline.memory.PoolStatsTracker access$100(com.facebook.imagepipeline.memory.PoolConfig$Builder) -> access$100
    com.facebook.imagepipeline.memory.PoolParams access$200(com.facebook.imagepipeline.memory.PoolConfig$Builder) -> access$200
    com.facebook.common.memory.MemoryTrimmableRegistry access$300(com.facebook.imagepipeline.memory.PoolConfig$Builder) -> access$300
    com.facebook.imagepipeline.memory.PoolParams access$400(com.facebook.imagepipeline.memory.PoolConfig$Builder) -> access$400
    com.facebook.imagepipeline.memory.PoolStatsTracker access$500(com.facebook.imagepipeline.memory.PoolConfig$Builder) -> access$500
    com.facebook.imagepipeline.memory.PoolParams access$600(com.facebook.imagepipeline.memory.PoolConfig$Builder) -> access$600
    com.facebook.imagepipeline.memory.PoolStatsTracker access$700(com.facebook.imagepipeline.memory.PoolConfig$Builder) -> access$700
    void <init>(com.facebook.imagepipeline.memory.PoolConfig$1) -> <init>
com.facebook.imagepipeline.memory.PoolFactory -> com.facebook.imagepipeline.memory.PoolFactory:
    com.facebook.imagepipeline.memory.PoolConfig mConfig -> mConfig
    com.facebook.imagepipeline.memory.BitmapPool mBitmapPool -> mBitmapPool
    com.facebook.imagepipeline.memory.FlexByteArrayPool mFlexByteArrayPool -> mFlexByteArrayPool
    com.facebook.imagepipeline.memory.NativeMemoryChunkPool mNativeMemoryChunkPool -> mNativeMemoryChunkPool
    com.facebook.common.memory.PooledByteBufferFactory mPooledByteBufferFactory -> mPooledByteBufferFactory
    com.facebook.common.memory.PooledByteStreams mPooledByteStreams -> mPooledByteStreams
    com.facebook.imagepipeline.memory.SharedByteArray mSharedByteArray -> mSharedByteArray
    com.facebook.common.memory.ByteArrayPool mSmallByteArrayPool -> mSmallByteArrayPool
    void <init>(com.facebook.imagepipeline.memory.PoolConfig) -> <init>
    com.facebook.imagepipeline.memory.BitmapPool getBitmapPool() -> getBitmapPool
    com.facebook.imagepipeline.memory.FlexByteArrayPool getFlexByteArrayPool() -> getFlexByteArrayPool
    int getFlexByteArrayPoolMaxNumThreads() -> getFlexByteArrayPoolMaxNumThreads
    com.facebook.imagepipeline.memory.NativeMemoryChunkPool getNativeMemoryChunkPool() -> getNativeMemoryChunkPool
    com.facebook.common.memory.PooledByteBufferFactory getPooledByteBufferFactory() -> getPooledByteBufferFactory
    com.facebook.common.memory.PooledByteStreams getPooledByteStreams() -> getPooledByteStreams
    com.facebook.imagepipeline.memory.SharedByteArray getSharedByteArray() -> getSharedByteArray
    com.facebook.common.memory.ByteArrayPool getSmallByteArrayPool() -> getSmallByteArrayPool
com.facebook.imagepipeline.memory.PoolParams -> com.facebook.imagepipeline.memory.PoolParams:
    int IGNORE_THREADS -> IGNORE_THREADS
    int maxSizeHardCap -> maxSizeHardCap
    int maxSizeSoftCap -> maxSizeSoftCap
    android.util.SparseIntArray bucketSizes -> bucketSizes
    int minBucketSize -> minBucketSize
    int maxBucketSize -> maxBucketSize
    int maxNumThreads -> maxNumThreads
    void <init>(int,android.util.SparseIntArray) -> <init>
    void <init>(int,int,android.util.SparseIntArray) -> <init>
    void <init>(int,int,android.util.SparseIntArray,int,int,int) -> <init>
com.facebook.imagepipeline.memory.PoolStatsTracker -> com.facebook.imagepipeline.memory.PoolStatsTracker:
    java.lang.String BUCKETS_USED_PREFIX -> BUCKETS_USED_PREFIX
    java.lang.String USED_COUNT -> USED_COUNT
    java.lang.String USED_BYTES -> USED_BYTES
    java.lang.String FREE_COUNT -> FREE_COUNT
    java.lang.String FREE_BYTES -> FREE_BYTES
    java.lang.String SOFT_CAP -> SOFT_CAP
    java.lang.String HARD_CAP -> HARD_CAP
    void setBasePool(com.facebook.imagepipeline.memory.BasePool) -> setBasePool
    void onValueReuse(int) -> onValueReuse
    void onSoftCapReached() -> onSoftCapReached
    void onHardCapReached() -> onHardCapReached
    void onAlloc(int) -> onAlloc
    void onFree(int) -> onFree
    void onValueRelease(int) -> onValueRelease
com.facebook.imagepipeline.memory.SharedByteArray -> com.facebook.imagepipeline.memory.SharedByteArray:
    int mMinByteArraySize -> mMinByteArraySize
    int mMaxByteArraySize -> mMaxByteArraySize
    com.facebook.common.references.OOMSoftReference mByteArraySoftRef -> mByteArraySoftRef
    java.util.concurrent.Semaphore mSemaphore -> mSemaphore
    com.facebook.common.references.ResourceReleaser mResourceReleaser -> mResourceReleaser
    void <init>(com.facebook.common.memory.MemoryTrimmableRegistry,com.facebook.imagepipeline.memory.PoolParams) -> <init>
    com.facebook.common.references.CloseableReference get(int) -> get
    byte[] getByteArray(int) -> getByteArray
    void trim(com.facebook.common.memory.MemoryTrimType) -> trim
    int getBucketedSize(int) -> getBucketedSize
    byte[] allocateByteArray(int) -> allocateByteArray
com.facebook.imagepipeline.memory.SharedByteArray$1 -> com.facebook.imagepipeline.memory.SharedByteArray$1:
    com.facebook.imagepipeline.memory.SharedByteArray this$0 -> this$0
    void <init>(com.facebook.imagepipeline.memory.SharedByteArray) -> <init>
    void release(byte[]) -> release
    void release(java.lang.Object) -> release
com.facebook.imagepipeline.nativecode.Bitmaps -> com.facebook.imagepipeline.nativecode.Bitmaps:
    void <init>() -> <init>
    void pinBitmap(android.graphics.Bitmap) -> pinBitmap
    java.nio.ByteBuffer getByteBuffer(android.graphics.Bitmap,long,long) -> getByteBuffer
    void releaseByteBuffer(android.graphics.Bitmap) -> releaseByteBuffer
    void copyBitmap(android.graphics.Bitmap,android.graphics.Bitmap) -> copyBitmap
    void reconfigureBitmap(android.graphics.Bitmap,int,int,android.graphics.Bitmap$Config) -> reconfigureBitmap
    java.nio.ByteBuffer nativeGetByteBuffer(android.graphics.Bitmap,long,long) -> nativeGetByteBuffer
    void nativePinBitmap(android.graphics.Bitmap) -> nativePinBitmap
    void nativeReleaseByteBuffer(android.graphics.Bitmap) -> nativeReleaseByteBuffer
    void nativeCopyBitmap(android.graphics.Bitmap,int,android.graphics.Bitmap,int,int) -> nativeCopyBitmap
    void <clinit>() -> <clinit>
com.facebook.imagepipeline.nativecode.ImagePipelineNativeLoader -> com.facebook.imagepipeline.nativecode.ImagePipelineNativeLoader:
    java.lang.String DSO_NAME -> DSO_NAME
    java.util.List DEPENDENCIES -> DEPENDENCIES
    void <init>() -> <init>
    void load() -> load
    void <clinit>() -> <clinit>
com.facebook.imagepipeline.nativecode.JpegTranscoder -> com.facebook.imagepipeline.nativecode.JpegTranscoder:
    int MIN_QUALITY -> MIN_QUALITY
    int MAX_QUALITY -> MAX_QUALITY
    int MIN_SCALE_NUMERATOR -> MIN_SCALE_NUMERATOR
    int MAX_SCALE_NUMERATOR -> MAX_SCALE_NUMERATOR
    int SCALE_DENOMINATOR -> SCALE_DENOMINATOR
    void <init>() -> <init>
    boolean isRotationAngleAllowed(int) -> isRotationAngleAllowed
    void transcodeJpeg(java.io.InputStream,java.io.OutputStream,int,int,int) -> transcodeJpeg
    void nativeTranscodeJpeg(java.io.InputStream,java.io.OutputStream,int,int,int) -> nativeTranscodeJpeg
    void <clinit>() -> <clinit>
com.facebook.imagepipeline.nativecode.NativeBlurFilter -> com.facebook.imagepipeline.nativecode.NativeBlurFilter:
    void <init>() -> <init>
    void iterativeBoxBlur(android.graphics.Bitmap,int,int) -> iterativeBoxBlur
    void nativeIterativeBoxBlur(android.graphics.Bitmap,int,int) -> nativeIterativeBoxBlur
    void <clinit>() -> <clinit>
com.facebook.imagepipeline.nativecode.StaticWebpNativeLoader -> com.facebook.imagepipeline.nativecode.StaticWebpNativeLoader:
    boolean sInitialized -> sInitialized
    void <init>() -> <init>
    void ensure() -> ensure
com.facebook.imagepipeline.nativecode.WebpTranscoder -> com.facebook.imagepipeline.nativecode.WebpTranscoder:
    boolean isWebpNativelySupported(com.facebook.imageformat.ImageFormat) -> isWebpNativelySupported
    void transcodeWebpToJpeg(java.io.InputStream,java.io.OutputStream,int) -> transcodeWebpToJpeg
    void transcodeWebpToPng(java.io.InputStream,java.io.OutputStream) -> transcodeWebpToPng
com.facebook.imagepipeline.nativecode.WebpTranscoderFactory -> com.facebook.imagepipeline.nativecode.WebpTranscoderFactory:
    com.facebook.imagepipeline.nativecode.WebpTranscoder sWebpTranscoder -> sWebpTranscoder
    boolean sWebpTranscoderPresent -> sWebpTranscoderPresent
    void <init>() -> <init>
    com.facebook.imagepipeline.nativecode.WebpTranscoder getWebpTranscoder() -> getWebpTranscoder
    void <clinit>() -> <clinit>
com.facebook.imagepipeline.nativecode.WebpTranscoderImpl -> com.facebook.imagepipeline.nativecode.WebpTranscoderImpl:
    void <init>() -> <init>
    boolean isWebpNativelySupported(com.facebook.imageformat.ImageFormat) -> isWebpNativelySupported
    void transcodeWebpToJpeg(java.io.InputStream,java.io.OutputStream,int) -> transcodeWebpToJpeg
    void transcodeWebpToPng(java.io.InputStream,java.io.OutputStream) -> transcodeWebpToPng
    void nativeTranscodeWebpToJpeg(java.io.InputStream,java.io.OutputStream,int) -> nativeTranscodeWebpToJpeg
    void nativeTranscodeWebpToPng(java.io.InputStream,java.io.OutputStream) -> nativeTranscodeWebpToPng
com.facebook.imagepipeline.platform.ArtDecoder -> com.facebook.imagepipeline.platform.ArtDecoder:
    int DECODE_BUFFER_SIZE -> DECODE_BUFFER_SIZE
    com.facebook.imagepipeline.memory.BitmapPool mBitmapPool -> mBitmapPool
    android.support.v4.util.Pools$SynchronizedPool mDecodeBuffers -> mDecodeBuffers
    byte[] EOI_TAIL -> EOI_TAIL
    void <init>(com.facebook.imagepipeline.memory.BitmapPool,int,android.support.v4.util.Pools$SynchronizedPool) -> <init>
    com.facebook.common.references.CloseableReference decodeFromEncodedImage(com.facebook.imagepipeline.image.EncodedImage,android.graphics.Bitmap$Config) -> decodeFromEncodedImage
    com.facebook.common.references.CloseableReference decodeJPEGFromEncodedImage(com.facebook.imagepipeline.image.EncodedImage,android.graphics.Bitmap$Config,int) -> decodeJPEGFromEncodedImage
    com.facebook.common.references.CloseableReference decodeStaticImageFromStream(java.io.InputStream,android.graphics.BitmapFactory$Options) -> decodeStaticImageFromStream
    android.graphics.BitmapFactory$Options getDecodeOptionsForStream(com.facebook.imagepipeline.image.EncodedImage,android.graphics.Bitmap$Config) -> getDecodeOptionsForStream
    void <clinit>() -> <clinit>
com.facebook.imagepipeline.platform.DalvikPurgeableDecoder -> com.facebook.imagepipeline.platform.DalvikPurgeableDecoder:
    byte[] EOI -> EOI
    com.facebook.imagepipeline.memory.BitmapCounter mUnpooledBitmapsCounter -> mUnpooledBitmapsCounter
    void <init>() -> <init>
    com.facebook.common.references.CloseableReference decodeFromEncodedImage(com.facebook.imagepipeline.image.EncodedImage,android.graphics.Bitmap$Config) -> decodeFromEncodedImage
    com.facebook.common.references.CloseableReference decodeJPEGFromEncodedImage(com.facebook.imagepipeline.image.EncodedImage,android.graphics.Bitmap$Config,int) -> decodeJPEGFromEncodedImage
    android.graphics.Bitmap decodeByteArrayAsPurgeable(com.facebook.common.references.CloseableReference,android.graphics.BitmapFactory$Options) -> decodeByteArrayAsPurgeable
    android.graphics.Bitmap decodeJPEGByteArrayAsPurgeable(com.facebook.common.references.CloseableReference,int,android.graphics.BitmapFactory$Options) -> decodeJPEGByteArrayAsPurgeable
    android.graphics.BitmapFactory$Options getBitmapFactoryOptions(int,android.graphics.Bitmap$Config) -> getBitmapFactoryOptions
    boolean endsWithEOI(com.facebook.common.references.CloseableReference,int) -> endsWithEOI
    com.facebook.common.references.CloseableReference pinBitmap(android.graphics.Bitmap) -> pinBitmap
    void <clinit>() -> <clinit>
com.facebook.imagepipeline.platform.GingerbreadPurgeableDecoder -> com.facebook.imagepipeline.platform.GingerbreadPurgeableDecoder:
    java.lang.reflect.Method sGetFileDescriptorMethod -> sGetFileDescriptorMethod
    void <init>() -> <init>
    android.graphics.Bitmap decodeByteArrayAsPurgeable(com.facebook.common.references.CloseableReference,android.graphics.BitmapFactory$Options) -> decodeByteArrayAsPurgeable
    android.graphics.Bitmap decodeJPEGByteArrayAsPurgeable(com.facebook.common.references.CloseableReference,int,android.graphics.BitmapFactory$Options) -> decodeJPEGByteArrayAsPurgeable
    android.os.MemoryFile copyToMemoryFile(com.facebook.common.references.CloseableReference,int,byte[]) -> copyToMemoryFile
    java.lang.reflect.Method getFileDescriptorMethod() -> getFileDescriptorMethod
    java.io.FileDescriptor getMemoryFileDescriptor(android.os.MemoryFile) -> getMemoryFileDescriptor
    android.graphics.Bitmap decodeFileDescriptorAsPurgeable(com.facebook.common.references.CloseableReference,int,byte[],android.graphics.BitmapFactory$Options) -> decodeFileDescriptorAsPurgeable
    com.facebook.common.references.CloseableReference pinBitmap(android.graphics.Bitmap) -> pinBitmap
    com.facebook.common.references.CloseableReference decodeJPEGFromEncodedImage(com.facebook.imagepipeline.image.EncodedImage,android.graphics.Bitmap$Config,int) -> decodeJPEGFromEncodedImage
    com.facebook.common.references.CloseableReference decodeFromEncodedImage(com.facebook.imagepipeline.image.EncodedImage,android.graphics.Bitmap$Config) -> decodeFromEncodedImage
com.facebook.imagepipeline.platform.KitKatPurgeableDecoder -> com.facebook.imagepipeline.platform.KitKatPurgeableDecoder:
    com.facebook.imagepipeline.memory.FlexByteArrayPool mFlexByteArrayPool -> mFlexByteArrayPool
    void <init>(com.facebook.imagepipeline.memory.FlexByteArrayPool) -> <init>
    android.graphics.Bitmap decodeByteArrayAsPurgeable(com.facebook.common.references.CloseableReference,android.graphics.BitmapFactory$Options) -> decodeByteArrayAsPurgeable
    android.graphics.Bitmap decodeJPEGByteArrayAsPurgeable(com.facebook.common.references.CloseableReference,int,android.graphics.BitmapFactory$Options) -> decodeJPEGByteArrayAsPurgeable
    void putEOI(byte[],int) -> putEOI
    com.facebook.common.references.CloseableReference pinBitmap(android.graphics.Bitmap) -> pinBitmap
    com.facebook.common.references.CloseableReference decodeJPEGFromEncodedImage(com.facebook.imagepipeline.image.EncodedImage,android.graphics.Bitmap$Config,int) -> decodeJPEGFromEncodedImage
    com.facebook.common.references.CloseableReference decodeFromEncodedImage(com.facebook.imagepipeline.image.EncodedImage,android.graphics.Bitmap$Config) -> decodeFromEncodedImage
com.facebook.imagepipeline.platform.PlatformDecoder -> com.facebook.imagepipeline.platform.PlatformDecoder:
    com.facebook.common.references.CloseableReference decodeFromEncodedImage(com.facebook.imagepipeline.image.EncodedImage,android.graphics.Bitmap$Config) -> decodeFromEncodedImage
    com.facebook.common.references.CloseableReference decodeJPEGFromEncodedImage(com.facebook.imagepipeline.image.EncodedImage,android.graphics.Bitmap$Config,int) -> decodeJPEGFromEncodedImage
com.facebook.imagepipeline.postprocessors.IterativeBoxBlurPostProcessor -> com.facebook.imagepipeline.postprocessors.IterativeBoxBlurPostProcessor:
    int DEFAULT_ITERATIONS -> DEFAULT_ITERATIONS
    int mIterations -> mIterations
    int mBlurRadius -> mBlurRadius
    com.facebook.cache.common.CacheKey mCacheKey -> mCacheKey
    void <init>(int) -> <init>
    void <init>(int,int) -> <init>
    void process(android.graphics.Bitmap) -> process
    com.facebook.cache.common.CacheKey getPostprocessorCacheKey() -> getPostprocessorCacheKey
com.facebook.imagepipeline.producers.AddImageTransformMetaDataProducer -> com.facebook.imagepipeline.producers.AddImageTransformMetaDataProducer:
    com.facebook.imagepipeline.producers.Producer mInputProducer -> mInputProducer
    void <init>(com.facebook.imagepipeline.producers.Producer) -> <init>
    void produceResults(com.facebook.imagepipeline.producers.Consumer,com.facebook.imagepipeline.producers.ProducerContext) -> produceResults
com.facebook.imagepipeline.producers.AddImageTransformMetaDataProducer$1 -> com.facebook.imagepipeline.producers.AddImageTransformMetaDataProducer$1:
com.facebook.imagepipeline.producers.AddImageTransformMetaDataProducer$AddImageTransformMetaDataConsumer -> com.facebook.imagepipeline.producers.AddImageTransformMetaDataProducer$AddImageTransformMetaDataConsumer:
    void <init>(com.facebook.imagepipeline.producers.Consumer) -> <init>
    void onNewResultImpl(com.facebook.imagepipeline.image.EncodedImage,boolean) -> onNewResultImpl
    void onNewResultImpl(java.lang.Object,boolean) -> onNewResultImpl
    void <init>(com.facebook.imagepipeline.producers.Consumer,com.facebook.imagepipeline.producers.AddImageTransformMetaDataProducer$1) -> <init>
com.facebook.imagepipeline.producers.BaseConsumer -> com.facebook.imagepipeline.producers.BaseConsumer:
    boolean mIsFinished -> mIsFinished
    void <init>() -> <init>
    void onNewResult(java.lang.Object,boolean) -> onNewResult
    void onFailure(java.lang.Throwable) -> onFailure
    void onCancellation() -> onCancellation
    void onProgressUpdate(float) -> onProgressUpdate
    void onNewResultImpl(java.lang.Object,boolean) -> onNewResultImpl
    void onFailureImpl(java.lang.Throwable) -> onFailureImpl
    void onCancellationImpl() -> onCancellationImpl
    void onProgressUpdateImpl(float) -> onProgressUpdateImpl
    void onUnhandledException(java.lang.Exception) -> onUnhandledException
com.facebook.imagepipeline.producers.BaseNetworkFetcher -> com.facebook.imagepipeline.producers.BaseNetworkFetcher:
    void <init>() -> <init>
    boolean shouldPropagate(com.facebook.imagepipeline.producers.FetchState) -> shouldPropagate
    void onFetchCompletion(com.facebook.imagepipeline.producers.FetchState,int) -> onFetchCompletion
    java.util.Map getExtraMap(com.facebook.imagepipeline.producers.FetchState,int) -> getExtraMap
com.facebook.imagepipeline.producers.BaseProducerContext -> com.facebook.imagepipeline.producers.BaseProducerContext:
    com.facebook.imagepipeline.request.ImageRequest mImageRequest -> mImageRequest
    java.lang.String mId -> mId
    com.facebook.imagepipeline.producers.ProducerListener mProducerListener -> mProducerListener
    java.lang.Object mCallerContext -> mCallerContext
    com.facebook.imagepipeline.request.ImageRequest$RequestLevel mLowestPermittedRequestLevel -> mLowestPermittedRequestLevel
    boolean mIsPrefetch -> mIsPrefetch
    com.facebook.imagepipeline.common.Priority mPriority -> mPriority
    boolean mIsIntermediateResultExpected -> mIsIntermediateResultExpected
    boolean mIsCancelled -> mIsCancelled
    java.util.List mCallbacks -> mCallbacks
    void <init>(com.facebook.imagepipeline.request.ImageRequest,java.lang.String,com.facebook.imagepipeline.producers.ProducerListener,java.lang.Object,com.facebook.imagepipeline.request.ImageRequest$RequestLevel,boolean,boolean,com.facebook.imagepipeline.common.Priority) -> <init>
    com.facebook.imagepipeline.request.ImageRequest getImageRequest() -> getImageRequest
    java.lang.String getId() -> getId
    com.facebook.imagepipeline.producers.ProducerListener getListener() -> getListener
    java.lang.Object getCallerContext() -> getCallerContext
    com.facebook.imagepipeline.request.ImageRequest$RequestLevel getLowestPermittedRequestLevel() -> getLowestPermittedRequestLevel
    boolean isPrefetch() -> isPrefetch
    com.facebook.imagepipeline.common.Priority getPriority() -> getPriority
    boolean isIntermediateResultExpected() -> isIntermediateResultExpected
    boolean isCancelled() -> isCancelled
    void addCallbacks(com.facebook.imagepipeline.producers.ProducerContextCallbacks) -> addCallbacks
    void cancel() -> cancel
    java.util.List setIsPrefetchNoCallbacks(boolean) -> setIsPrefetchNoCallbacks
    java.util.List setPriorityNoCallbacks(com.facebook.imagepipeline.common.Priority) -> setPriorityNoCallbacks
    java.util.List setIsIntermediateResultExpectedNoCallbacks(boolean) -> setIsIntermediateResultExpectedNoCallbacks
    java.util.List cancelNoCallbacks() -> cancelNoCallbacks
    void callOnCancellationRequested(java.util.List) -> callOnCancellationRequested
    void callOnIsPrefetchChanged(java.util.List) -> callOnIsPrefetchChanged
    void callOnIsIntermediateResultExpectedChanged(java.util.List) -> callOnIsIntermediateResultExpectedChanged
    void callOnPriorityChanged(java.util.List) -> callOnPriorityChanged
com.facebook.imagepipeline.producers.BaseProducerContextCallbacks -> com.facebook.imagepipeline.producers.BaseProducerContextCallbacks:
    void <init>() -> <init>
    void onCancellationRequested() -> onCancellationRequested
    void onIsPrefetchChanged() -> onIsPrefetchChanged
    void onIsIntermediateResultExpectedChanged() -> onIsIntermediateResultExpectedChanged
    void onPriorityChanged() -> onPriorityChanged
com.facebook.imagepipeline.producers.BitmapMemoryCacheGetProducer -> com.facebook.imagepipeline.producers.BitmapMemoryCacheGetProducer:
    java.lang.String PRODUCER_NAME -> PRODUCER_NAME
    void <init>(com.facebook.imagepipeline.cache.MemoryCache,com.facebook.imagepipeline.cache.CacheKeyFactory,com.facebook.imagepipeline.producers.Producer) -> <init>
    com.facebook.imagepipeline.producers.Consumer wrapConsumer(com.facebook.imagepipeline.producers.Consumer,com.facebook.cache.common.CacheKey) -> wrapConsumer
    java.lang.String getProducerName() -> getProducerName
com.facebook.imagepipeline.producers.BitmapMemoryCacheKeyMultiplexProducer -> com.facebook.imagepipeline.producers.BitmapMemoryCacheKeyMultiplexProducer:
    com.facebook.imagepipeline.cache.CacheKeyFactory mCacheKeyFactory -> mCacheKeyFactory
    void <init>(com.facebook.imagepipeline.cache.CacheKeyFactory,com.facebook.imagepipeline.producers.Producer) -> <init>
    android.util.Pair getKey(com.facebook.imagepipeline.producers.ProducerContext) -> getKey
    com.facebook.common.references.CloseableReference cloneOrNull(com.facebook.common.references.CloseableReference) -> cloneOrNull
    java.io.Closeable cloneOrNull(java.io.Closeable) -> cloneOrNull
    java.lang.Object getKey(com.facebook.imagepipeline.producers.ProducerContext) -> getKey
com.facebook.imagepipeline.producers.BitmapMemoryCacheProducer -> com.facebook.imagepipeline.producers.BitmapMemoryCacheProducer:
    java.lang.String PRODUCER_NAME -> PRODUCER_NAME
    java.lang.String EXTRA_CACHED_VALUE_FOUND -> EXTRA_CACHED_VALUE_FOUND
    com.facebook.imagepipeline.cache.MemoryCache mMemoryCache -> mMemoryCache
    com.facebook.imagepipeline.cache.CacheKeyFactory mCacheKeyFactory -> mCacheKeyFactory
    com.facebook.imagepipeline.producers.Producer mInputProducer -> mInputProducer
    void <init>(com.facebook.imagepipeline.cache.MemoryCache,com.facebook.imagepipeline.cache.CacheKeyFactory,com.facebook.imagepipeline.producers.Producer) -> <init>
    void produceResults(com.facebook.imagepipeline.producers.Consumer,com.facebook.imagepipeline.producers.ProducerContext) -> produceResults
    com.facebook.imagepipeline.producers.Consumer wrapConsumer(com.facebook.imagepipeline.producers.Consumer,com.facebook.cache.common.CacheKey) -> wrapConsumer
    java.lang.String getProducerName() -> getProducerName
    com.facebook.imagepipeline.cache.MemoryCache access$000(com.facebook.imagepipeline.producers.BitmapMemoryCacheProducer) -> access$000
com.facebook.imagepipeline.producers.BitmapMemoryCacheProducer$1 -> com.facebook.imagepipeline.producers.BitmapMemoryCacheProducer$1:
    com.facebook.cache.common.CacheKey val$cacheKey -> val$cacheKey
    com.facebook.imagepipeline.producers.BitmapMemoryCacheProducer this$0 -> this$0
    void <init>(com.facebook.imagepipeline.producers.BitmapMemoryCacheProducer,com.facebook.imagepipeline.producers.Consumer,com.facebook.cache.common.CacheKey) -> <init>
    void onNewResultImpl(com.facebook.common.references.CloseableReference,boolean) -> onNewResultImpl
    void onNewResultImpl(java.lang.Object,boolean) -> onNewResultImpl
com.facebook.imagepipeline.producers.BranchOnSeparateImagesProducer -> com.facebook.imagepipeline.producers.BranchOnSeparateImagesProducer:
    com.facebook.imagepipeline.producers.Producer mInputProducer1 -> mInputProducer1
    com.facebook.imagepipeline.producers.Producer mInputProducer2 -> mInputProducer2
    void <init>(com.facebook.imagepipeline.producers.Producer,com.facebook.imagepipeline.producers.Producer) -> <init>
    void produceResults(com.facebook.imagepipeline.producers.Consumer,com.facebook.imagepipeline.producers.ProducerContext) -> produceResults
    com.facebook.imagepipeline.producers.Producer access$100(com.facebook.imagepipeline.producers.BranchOnSeparateImagesProducer) -> access$100
com.facebook.imagepipeline.producers.BranchOnSeparateImagesProducer$1 -> com.facebook.imagepipeline.producers.BranchOnSeparateImagesProducer$1:
com.facebook.imagepipeline.producers.BranchOnSeparateImagesProducer$OnFirstImageConsumer -> com.facebook.imagepipeline.producers.BranchOnSeparateImagesProducer$OnFirstImageConsumer:
    com.facebook.imagepipeline.producers.ProducerContext mProducerContext -> mProducerContext
    com.facebook.imagepipeline.producers.BranchOnSeparateImagesProducer this$0 -> this$0
    void <init>(com.facebook.imagepipeline.producers.BranchOnSeparateImagesProducer,com.facebook.imagepipeline.producers.Consumer,com.facebook.imagepipeline.producers.ProducerContext) -> <init>
    void onNewResultImpl(com.facebook.imagepipeline.image.EncodedImage,boolean) -> onNewResultImpl
    void onFailureImpl(java.lang.Throwable) -> onFailureImpl
    void onNewResultImpl(java.lang.Object,boolean) -> onNewResultImpl
    void <init>(com.facebook.imagepipeline.producers.BranchOnSeparateImagesProducer,com.facebook.imagepipeline.producers.Consumer,com.facebook.imagepipeline.producers.ProducerContext,com.facebook.imagepipeline.producers.BranchOnSeparateImagesProducer$1) -> <init>
com.facebook.imagepipeline.producers.Consumer -> com.facebook.imagepipeline.producers.Consumer:
    void onNewResult(java.lang.Object,boolean) -> onNewResult
    void onFailure(java.lang.Throwable) -> onFailure
    void onCancellation() -> onCancellation
    void onProgressUpdate(float) -> onProgressUpdate
com.facebook.imagepipeline.producers.DataFetchProducer -> com.facebook.imagepipeline.producers.DataFetchProducer:
    java.lang.String PRODUCER_NAME -> PRODUCER_NAME
    void <init>(com.facebook.common.memory.PooledByteBufferFactory) -> <init>
    com.facebook.imagepipeline.image.EncodedImage getEncodedImage(com.facebook.imagepipeline.request.ImageRequest) -> getEncodedImage
    java.lang.String getProducerName() -> getProducerName
    byte[] getData(java.lang.String) -> getData
    boolean isBase64(java.lang.String) -> isBase64
com.facebook.imagepipeline.producers.DecodeProducer -> com.facebook.imagepipeline.producers.DecodeProducer:
    java.lang.String PRODUCER_NAME -> PRODUCER_NAME
    java.lang.String EXTRA_BITMAP_SIZE -> EXTRA_BITMAP_SIZE
    java.lang.String EXTRA_HAS_GOOD_QUALITY -> EXTRA_HAS_GOOD_QUALITY
    java.lang.String EXTRA_IS_FINAL -> EXTRA_IS_FINAL
    java.lang.String EXTRA_IMAGE_FORMAT_NAME -> EXTRA_IMAGE_FORMAT_NAME
    java.lang.String ENCODED_IMAGE_SIZE -> ENCODED_IMAGE_SIZE
    java.lang.String REQUESTED_IMAGE_SIZE -> REQUESTED_IMAGE_SIZE
    java.lang.String SAMPLE_SIZE -> SAMPLE_SIZE
    com.facebook.common.memory.ByteArrayPool mByteArrayPool -> mByteArrayPool
    java.util.concurrent.Executor mExecutor -> mExecutor
    com.facebook.imagepipeline.decoder.ImageDecoder mImageDecoder -> mImageDecoder
    com.facebook.imagepipeline.decoder.ProgressiveJpegConfig mProgressiveJpegConfig -> mProgressiveJpegConfig
    com.facebook.imagepipeline.producers.Producer mInputProducer -> mInputProducer
    boolean mDownsampleEnabled -> mDownsampleEnabled
    boolean mDownsampleEnabledForNetwork -> mDownsampleEnabledForNetwork
    boolean mDecodeCancellationEnabled -> mDecodeCancellationEnabled
    void <init>(com.facebook.common.memory.ByteArrayPool,java.util.concurrent.Executor,com.facebook.imagepipeline.decoder.ImageDecoder,com.facebook.imagepipeline.decoder.ProgressiveJpegConfig,boolean,boolean,boolean,com.facebook.imagepipeline.producers.Producer) -> <init>
    void produceResults(com.facebook.imagepipeline.producers.Consumer,com.facebook.imagepipeline.producers.ProducerContext) -> produceResults
    boolean access$000(com.facebook.imagepipeline.producers.DecodeProducer) -> access$000
    boolean access$100(com.facebook.imagepipeline.producers.DecodeProducer) -> access$100
    java.util.concurrent.Executor access$300(com.facebook.imagepipeline.producers.DecodeProducer) -> access$300
    com.facebook.imagepipeline.decoder.ImageDecoder access$700(com.facebook.imagepipeline.producers.DecodeProducer) -> access$700
com.facebook.imagepipeline.producers.DecodeProducer$LocalImagesProgressiveDecoder -> com.facebook.imagepipeline.producers.DecodeProducer$LocalImagesProgressiveDecoder:
    com.facebook.imagepipeline.producers.DecodeProducer this$0 -> this$0
    void <init>(com.facebook.imagepipeline.producers.DecodeProducer,com.facebook.imagepipeline.producers.Consumer,com.facebook.imagepipeline.producers.ProducerContext,boolean) -> <init>
    boolean updateDecodeJob(com.facebook.imagepipeline.image.EncodedImage,boolean) -> updateDecodeJob
    int getIntermediateImageEndOffset(com.facebook.imagepipeline.image.EncodedImage) -> getIntermediateImageEndOffset
    com.facebook.imagepipeline.image.QualityInfo getQualityInfo() -> getQualityInfo
com.facebook.imagepipeline.producers.DecodeProducer$NetworkImagesProgressiveDecoder -> com.facebook.imagepipeline.producers.DecodeProducer$NetworkImagesProgressiveDecoder:
    com.facebook.imagepipeline.decoder.ProgressiveJpegParser mProgressiveJpegParser -> mProgressiveJpegParser
    com.facebook.imagepipeline.decoder.ProgressiveJpegConfig mProgressiveJpegConfig -> mProgressiveJpegConfig
    int mLastScheduledScanNumber -> mLastScheduledScanNumber
    com.facebook.imagepipeline.producers.DecodeProducer this$0 -> this$0
    void <init>(com.facebook.imagepipeline.producers.DecodeProducer,com.facebook.imagepipeline.producers.Consumer,com.facebook.imagepipeline.producers.ProducerContext,com.facebook.imagepipeline.decoder.ProgressiveJpegParser,com.facebook.imagepipeline.decoder.ProgressiveJpegConfig,boolean) -> <init>
    boolean updateDecodeJob(com.facebook.imagepipeline.image.EncodedImage,boolean) -> updateDecodeJob
    int getIntermediateImageEndOffset(com.facebook.imagepipeline.image.EncodedImage) -> getIntermediateImageEndOffset
    com.facebook.imagepipeline.image.QualityInfo getQualityInfo() -> getQualityInfo
com.facebook.imagepipeline.producers.DecodeProducer$ProgressiveDecoder -> com.facebook.imagepipeline.producers.DecodeProducer$ProgressiveDecoder:
    com.facebook.imagepipeline.producers.ProducerContext mProducerContext -> mProducerContext
    com.facebook.imagepipeline.producers.ProducerListener mProducerListener -> mProducerListener
    com.facebook.imagepipeline.common.ImageDecodeOptions mImageDecodeOptions -> mImageDecodeOptions
    boolean mIsFinished -> mIsFinished
    com.facebook.imagepipeline.producers.JobScheduler mJobScheduler -> mJobScheduler
    com.facebook.imagepipeline.producers.DecodeProducer this$0 -> this$0
    void <init>(com.facebook.imagepipeline.producers.DecodeProducer,com.facebook.imagepipeline.producers.Consumer,com.facebook.imagepipeline.producers.ProducerContext,boolean) -> <init>
    void onNewResultImpl(com.facebook.imagepipeline.image.EncodedImage,boolean) -> onNewResultImpl
    void onProgressUpdateImpl(float) -> onProgressUpdateImpl
    void onFailureImpl(java.lang.Throwable) -> onFailureImpl
    void onCancellationImpl() -> onCancellationImpl
    boolean updateDecodeJob(com.facebook.imagepipeline.image.EncodedImage,boolean) -> updateDecodeJob
    void doDecode(com.facebook.imagepipeline.image.EncodedImage,boolean) -> doDecode
    java.util.Map getExtraMap(com.facebook.imagepipeline.image.CloseableImage,long,com.facebook.imagepipeline.image.QualityInfo,boolean,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> getExtraMap
    boolean isFinished() -> isFinished
    void maybeFinish(boolean) -> maybeFinish
    void handleResult(com.facebook.imagepipeline.image.CloseableImage,boolean) -> handleResult
    void handleError(java.lang.Throwable) -> handleError
    void handleCancellation() -> handleCancellation
    int getIntermediateImageEndOffset(com.facebook.imagepipeline.image.EncodedImage) -> getIntermediateImageEndOffset
    com.facebook.imagepipeline.image.QualityInfo getQualityInfo() -> getQualityInfo
    void onNewResultImpl(java.lang.Object,boolean) -> onNewResultImpl
    void access$200(com.facebook.imagepipeline.producers.DecodeProducer$ProgressiveDecoder,com.facebook.imagepipeline.image.EncodedImage,boolean) -> access$200
    com.facebook.imagepipeline.producers.ProducerContext access$400(com.facebook.imagepipeline.producers.DecodeProducer$ProgressiveDecoder) -> access$400
    com.facebook.imagepipeline.producers.JobScheduler access$500(com.facebook.imagepipeline.producers.DecodeProducer$ProgressiveDecoder) -> access$500
    void access$600(com.facebook.imagepipeline.producers.DecodeProducer$ProgressiveDecoder) -> access$600
com.facebook.imagepipeline.producers.DecodeProducer$ProgressiveDecoder$1 -> com.facebook.imagepipeline.producers.DecodeProducer$ProgressiveDecoder$1:
    com.facebook.imagepipeline.producers.DecodeProducer val$this$0 -> val$this$0
    com.facebook.imagepipeline.producers.ProducerContext val$producerContext -> val$producerContext
    com.facebook.imagepipeline.producers.DecodeProducer$ProgressiveDecoder this$1 -> this$1
    void <init>(com.facebook.imagepipeline.producers.DecodeProducer$ProgressiveDecoder,com.facebook.imagepipeline.producers.DecodeProducer,com.facebook.imagepipeline.producers.ProducerContext) -> <init>
    void run(com.facebook.imagepipeline.image.EncodedImage,boolean) -> run
com.facebook.imagepipeline.producers.DecodeProducer$ProgressiveDecoder$2 -> com.facebook.imagepipeline.producers.DecodeProducer$ProgressiveDecoder$2:
    com.facebook.imagepipeline.producers.DecodeProducer val$this$0 -> val$this$0
    boolean val$decodeCancellationEnabled -> val$decodeCancellationEnabled
    com.facebook.imagepipeline.producers.DecodeProducer$ProgressiveDecoder this$1 -> this$1
    void <init>(com.facebook.imagepipeline.producers.DecodeProducer$ProgressiveDecoder,com.facebook.imagepipeline.producers.DecodeProducer,boolean) -> <init>
    void onIsIntermediateResultExpectedChanged() -> onIsIntermediateResultExpectedChanged
    void onCancellationRequested() -> onCancellationRequested
com.facebook.imagepipeline.producers.DelegatingConsumer -> com.facebook.imagepipeline.producers.DelegatingConsumer:
    com.facebook.imagepipeline.producers.Consumer mConsumer -> mConsumer
    void <init>(com.facebook.imagepipeline.producers.Consumer) -> <init>
    com.facebook.imagepipeline.producers.Consumer getConsumer() -> getConsumer
    void onFailureImpl(java.lang.Throwable) -> onFailureImpl
    void onCancellationImpl() -> onCancellationImpl
    void onProgressUpdateImpl(float) -> onProgressUpdateImpl
com.facebook.imagepipeline.producers.DiskCacheReadProducer -> com.facebook.imagepipeline.producers.DiskCacheReadProducer:
    java.lang.String PRODUCER_NAME -> PRODUCER_NAME
    java.lang.String EXTRA_CACHED_VALUE_FOUND -> EXTRA_CACHED_VALUE_FOUND
    java.lang.String ENCODED_IMAGE_SIZE -> ENCODED_IMAGE_SIZE
    com.facebook.imagepipeline.producers.Producer mInputProducer -> mInputProducer
    com.facebook.imagepipeline.cache.DiskCachePolicy mDiskCachePolicy -> mDiskCachePolicy
    void <init>(com.facebook.imagepipeline.producers.Producer,com.facebook.imagepipeline.cache.DiskCachePolicy) -> <init>
    void produceResults(com.facebook.imagepipeline.producers.Consumer,com.facebook.imagepipeline.producers.ProducerContext) -> produceResults
    bolts.Continuation onFinishDiskReads(com.facebook.imagepipeline.producers.Consumer,com.facebook.imagepipeline.producers.ProducerContext) -> onFinishDiskReads
    boolean isTaskCancelled(bolts.Task) -> isTaskCancelled
    void maybeStartInputProducer(com.facebook.imagepipeline.producers.Consumer,com.facebook.imagepipeline.producers.ProducerContext) -> maybeStartInputProducer
    java.util.Map getExtraMap(com.facebook.imagepipeline.producers.ProducerListener,java.lang.String,boolean,int) -> getExtraMap
    void subscribeTaskForRequestCancellation(java.util.concurrent.atomic.AtomicBoolean,com.facebook.imagepipeline.producers.ProducerContext) -> subscribeTaskForRequestCancellation
    boolean access$000(bolts.Task) -> access$000
    com.facebook.imagepipeline.producers.Producer access$100(com.facebook.imagepipeline.producers.DiskCacheReadProducer) -> access$100
com.facebook.imagepipeline.producers.DiskCacheReadProducer$1 -> com.facebook.imagepipeline.producers.DiskCacheReadProducer$1:
    com.facebook.imagepipeline.producers.ProducerListener val$listener -> val$listener
    java.lang.String val$requestId -> val$requestId
    com.facebook.imagepipeline.producers.Consumer val$consumer -> val$consumer
    com.facebook.imagepipeline.producers.ProducerContext val$producerContext -> val$producerContext
    com.facebook.imagepipeline.producers.DiskCacheReadProducer this$0 -> this$0
    void <init>(com.facebook.imagepipeline.producers.DiskCacheReadProducer,com.facebook.imagepipeline.producers.ProducerListener,java.lang.String,com.facebook.imagepipeline.producers.Consumer,com.facebook.imagepipeline.producers.ProducerContext) -> <init>
    java.lang.Void then(bolts.Task) -> then
    java.lang.Object then(bolts.Task) -> then
com.facebook.imagepipeline.producers.DiskCacheReadProducer$2 -> com.facebook.imagepipeline.producers.DiskCacheReadProducer$2:
    java.util.concurrent.atomic.AtomicBoolean val$isCancelled -> val$isCancelled
    com.facebook.imagepipeline.producers.DiskCacheReadProducer this$0 -> this$0
    void <init>(com.facebook.imagepipeline.producers.DiskCacheReadProducer,java.util.concurrent.atomic.AtomicBoolean) -> <init>
    void onCancellationRequested() -> onCancellationRequested
com.facebook.imagepipeline.producers.DiskCacheWriteProducer -> com.facebook.imagepipeline.producers.DiskCacheWriteProducer:
    com.facebook.imagepipeline.producers.Producer mInputProducer -> mInputProducer
    com.facebook.imagepipeline.cache.DiskCachePolicy mDiskCachePolicy -> mDiskCachePolicy
    void <init>(com.facebook.imagepipeline.producers.Producer,com.facebook.imagepipeline.cache.DiskCachePolicy) -> <init>
    void produceResults(com.facebook.imagepipeline.producers.Consumer,com.facebook.imagepipeline.producers.ProducerContext) -> produceResults
    void maybeStartInputProducer(com.facebook.imagepipeline.producers.Consumer,com.facebook.imagepipeline.producers.ProducerContext) -> maybeStartInputProducer
com.facebook.imagepipeline.producers.DiskCacheWriteProducer$1 -> com.facebook.imagepipeline.producers.DiskCacheWriteProducer$1:
com.facebook.imagepipeline.producers.DiskCacheWriteProducer$DiskCacheWriteConsumer -> com.facebook.imagepipeline.producers.DiskCacheWriteProducer$DiskCacheWriteConsumer:
    com.facebook.imagepipeline.producers.ProducerContext mProducerContext -> mProducerContext
    com.facebook.imagepipeline.cache.DiskCachePolicy mDiskCachePolicy -> mDiskCachePolicy
    void <init>(com.facebook.imagepipeline.producers.Consumer,com.facebook.imagepipeline.producers.ProducerContext,com.facebook.imagepipeline.cache.DiskCachePolicy) -> <init>
    void onNewResultImpl(com.facebook.imagepipeline.image.EncodedImage,boolean) -> onNewResultImpl
    void onNewResultImpl(java.lang.Object,boolean) -> onNewResultImpl
    void <init>(com.facebook.imagepipeline.producers.Consumer,com.facebook.imagepipeline.producers.ProducerContext,com.facebook.imagepipeline.cache.DiskCachePolicy,com.facebook.imagepipeline.producers.DiskCacheWriteProducer$1) -> <init>
com.facebook.imagepipeline.producers.DownsampleUtil -> com.facebook.imagepipeline.producers.DownsampleUtil:
    float INTERVAL_ROUNDING -> INTERVAL_ROUNDING
    int DEFAULT_SAMPLE_SIZE -> DEFAULT_SAMPLE_SIZE
    void <init>() -> <init>
    int determineSampleSize(com.facebook.imagepipeline.request.ImageRequest,com.facebook.imagepipeline.image.EncodedImage) -> determineSampleSize
    float determineDownsampleRatio(com.facebook.imagepipeline.request.ImageRequest,com.facebook.imagepipeline.image.EncodedImage) -> determineDownsampleRatio
    int ratioToSampleSize(float) -> ratioToSampleSize
    int ratioToSampleSizeJPEG(float) -> ratioToSampleSizeJPEG
    int getRotationAngle(com.facebook.imagepipeline.request.ImageRequest,com.facebook.imagepipeline.image.EncodedImage) -> getRotationAngle
    int roundToPowerOfTwo(int) -> roundToPowerOfTwo
com.facebook.imagepipeline.producers.EncodedCacheKeyMultiplexProducer -> com.facebook.imagepipeline.producers.EncodedCacheKeyMultiplexProducer:
    com.facebook.imagepipeline.cache.CacheKeyFactory mCacheKeyFactory -> mCacheKeyFactory
    void <init>(com.facebook.imagepipeline.cache.CacheKeyFactory,com.facebook.imagepipeline.producers.Producer) -> <init>
    android.util.Pair getKey(com.facebook.imagepipeline.producers.ProducerContext) -> getKey
    com.facebook.imagepipeline.image.EncodedImage cloneOrNull(com.facebook.imagepipeline.image.EncodedImage) -> cloneOrNull
    java.io.Closeable cloneOrNull(java.io.Closeable) -> cloneOrNull
    java.lang.Object getKey(com.facebook.imagepipeline.producers.ProducerContext) -> getKey
com.facebook.imagepipeline.producers.EncodedMemoryCacheProducer -> com.facebook.imagepipeline.producers.EncodedMemoryCacheProducer:
    java.lang.String PRODUCER_NAME -> PRODUCER_NAME
    java.lang.String EXTRA_CACHED_VALUE_FOUND -> EXTRA_CACHED_VALUE_FOUND
    com.facebook.imagepipeline.cache.MemoryCache mMemoryCache -> mMemoryCache
    com.facebook.imagepipeline.cache.CacheKeyFactory mCacheKeyFactory -> mCacheKeyFactory
    com.facebook.imagepipeline.producers.Producer mInputProducer -> mInputProducer
    void <init>(com.facebook.imagepipeline.cache.MemoryCache,com.facebook.imagepipeline.cache.CacheKeyFactory,com.facebook.imagepipeline.producers.Producer) -> <init>
    void produceResults(com.facebook.imagepipeline.producers.Consumer,com.facebook.imagepipeline.producers.ProducerContext) -> produceResults
com.facebook.imagepipeline.producers.EncodedMemoryCacheProducer$EncodedMemoryCacheConsumer -> com.facebook.imagepipeline.producers.EncodedMemoryCacheProducer$EncodedMemoryCacheConsumer:
    com.facebook.imagepipeline.cache.MemoryCache mMemoryCache -> mMemoryCache
    com.facebook.cache.common.CacheKey mRequestedCacheKey -> mRequestedCacheKey
    void <init>(com.facebook.imagepipeline.producers.Consumer,com.facebook.imagepipeline.cache.MemoryCache,com.facebook.cache.common.CacheKey) -> <init>
    void onNewResultImpl(com.facebook.imagepipeline.image.EncodedImage,boolean) -> onNewResultImpl
    void onNewResultImpl(java.lang.Object,boolean) -> onNewResultImpl
com.facebook.imagepipeline.producers.FetchState -> com.facebook.imagepipeline.producers.FetchState:
    com.facebook.imagepipeline.producers.Consumer mConsumer -> mConsumer
    com.facebook.imagepipeline.producers.ProducerContext mContext -> mContext
    long mLastIntermediateResultTimeMs -> mLastIntermediateResultTimeMs
    void <init>(com.facebook.imagepipeline.producers.Consumer,com.facebook.imagepipeline.producers.ProducerContext) -> <init>
    com.facebook.imagepipeline.producers.Consumer getConsumer() -> getConsumer
    com.facebook.imagepipeline.producers.ProducerContext getContext() -> getContext
    java.lang.String getId() -> getId
    com.facebook.imagepipeline.producers.ProducerListener getListener() -> getListener
    android.net.Uri getUri() -> getUri
    long getLastIntermediateResultTimeMs() -> getLastIntermediateResultTimeMs
    void setLastIntermediateResultTimeMs(long) -> setLastIntermediateResultTimeMs
com.facebook.imagepipeline.producers.HttpUrlConnectionNetworkFetcher -> com.facebook.imagepipeline.producers.HttpUrlConnectionNetworkFetcher:
    int NUM_NETWORK_THREADS -> NUM_NETWORK_THREADS
    int MAX_REDIRECTS -> MAX_REDIRECTS
    int HTTP_TEMPORARY_REDIRECT -> HTTP_TEMPORARY_REDIRECT
    int HTTP_PERMANENT_REDIRECT -> HTTP_PERMANENT_REDIRECT
    java.util.concurrent.ExecutorService mExecutorService -> mExecutorService
    void <init>() -> <init>
    void <init>(java.util.concurrent.ExecutorService) -> <init>
    com.facebook.imagepipeline.producers.FetchState createFetchState(com.facebook.imagepipeline.producers.Consumer,com.facebook.imagepipeline.producers.ProducerContext) -> createFetchState
    void fetch(com.facebook.imagepipeline.producers.FetchState,com.facebook.imagepipeline.producers.NetworkFetcher$Callback) -> fetch
    void fetchSync(com.facebook.imagepipeline.producers.FetchState,com.facebook.imagepipeline.producers.NetworkFetcher$Callback) -> fetchSync
    java.net.HttpURLConnection downloadFrom(android.net.Uri,int) -> downloadFrom
    java.net.HttpURLConnection openConnectionTo(android.net.Uri) -> openConnectionTo
    boolean isHttpSuccess(int) -> isHttpSuccess
    boolean isHttpRedirect(int) -> isHttpRedirect
    java.lang.String error(java.lang.String,java.lang.Object[]) -> error
com.facebook.imagepipeline.producers.HttpUrlConnectionNetworkFetcher$1 -> com.facebook.imagepipeline.producers.HttpUrlConnectionNetworkFetcher$1:
    com.facebook.imagepipeline.producers.FetchState val$fetchState -> val$fetchState
    com.facebook.imagepipeline.producers.NetworkFetcher$Callback val$callback -> val$callback
    com.facebook.imagepipeline.producers.HttpUrlConnectionNetworkFetcher this$0 -> this$0
    void <init>(com.facebook.imagepipeline.producers.HttpUrlConnectionNetworkFetcher,com.facebook.imagepipeline.producers.FetchState,com.facebook.imagepipeline.producers.NetworkFetcher$Callback) -> <init>
    void run() -> run
com.facebook.imagepipeline.producers.HttpUrlConnectionNetworkFetcher$2 -> com.facebook.imagepipeline.producers.HttpUrlConnectionNetworkFetcher$2:
    java.util.concurrent.Future val$future -> val$future
    com.facebook.imagepipeline.producers.NetworkFetcher$Callback val$callback -> val$callback
    com.facebook.imagepipeline.producers.HttpUrlConnectionNetworkFetcher this$0 -> this$0
    void <init>(com.facebook.imagepipeline.producers.HttpUrlConnectionNetworkFetcher,java.util.concurrent.Future,com.facebook.imagepipeline.producers.NetworkFetcher$Callback) -> <init>
    void onCancellationRequested() -> onCancellationRequested
com.facebook.imagepipeline.producers.JobScheduler -> com.facebook.imagepipeline.producers.JobScheduler:
    java.lang.String QUEUE_TIME_KEY -> QUEUE_TIME_KEY
    java.util.concurrent.Executor mExecutor -> mExecutor
    com.facebook.imagepipeline.producers.JobScheduler$JobRunnable mJobRunnable -> mJobRunnable
    java.lang.Runnable mDoJobRunnable -> mDoJobRunnable
    java.lang.Runnable mSubmitJobRunnable -> mSubmitJobRunnable
    int mMinimumJobIntervalMs -> mMinimumJobIntervalMs
    com.facebook.imagepipeline.image.EncodedImage mEncodedImage -> mEncodedImage
    boolean mIsLast -> mIsLast
    com.facebook.imagepipeline.producers.JobScheduler$JobState mJobState -> mJobState
    long mJobSubmitTime -> mJobSubmitTime
    long mJobStartTime -> mJobStartTime
    void <init>(java.util.concurrent.Executor,com.facebook.imagepipeline.producers.JobScheduler$JobRunnable,int) -> <init>
    void clearJob() -> clearJob
    boolean updateJob(com.facebook.imagepipeline.image.EncodedImage,boolean) -> updateJob
    boolean scheduleJob() -> scheduleJob
    void enqueueJob(long) -> enqueueJob
    void submitJob() -> submitJob
    void doJob() -> doJob
    void onJobFinished() -> onJobFinished
    boolean shouldProcess(com.facebook.imagepipeline.image.EncodedImage,boolean) -> shouldProcess
    long getQueuedTime() -> getQueuedTime
    void access$000(com.facebook.imagepipeline.producers.JobScheduler) -> access$000
    void access$100(com.facebook.imagepipeline.producers.JobScheduler) -> access$100
com.facebook.imagepipeline.producers.JobScheduler$1 -> com.facebook.imagepipeline.producers.JobScheduler$1:
    com.facebook.imagepipeline.producers.JobScheduler this$0 -> this$0
    void <init>(com.facebook.imagepipeline.producers.JobScheduler) -> <init>
    void run() -> run
com.facebook.imagepipeline.producers.JobScheduler$2 -> com.facebook.imagepipeline.producers.JobScheduler$2:
    com.facebook.imagepipeline.producers.JobScheduler this$0 -> this$0
    void <init>(com.facebook.imagepipeline.producers.JobScheduler) -> <init>
    void run() -> run
com.facebook.imagepipeline.producers.JobScheduler$3 -> com.facebook.imagepipeline.producers.JobScheduler$3:
    int[] $SwitchMap$com$facebook$imagepipeline$producers$JobScheduler$JobState -> $SwitchMap$com$facebook$imagepipeline$producers$JobScheduler$JobState
    void <clinit>() -> <clinit>
com.facebook.imagepipeline.producers.JobScheduler$JobRunnable -> com.facebook.imagepipeline.producers.JobScheduler$JobRunnable:
    void run(com.facebook.imagepipeline.image.EncodedImage,boolean) -> run
com.facebook.imagepipeline.producers.JobScheduler$JobStartExecutorSupplier -> com.facebook.imagepipeline.producers.JobScheduler$JobStartExecutorSupplier:
    java.util.concurrent.ScheduledExecutorService sJobStarterExecutor -> sJobStarterExecutor
    void <init>() -> <init>
    java.util.concurrent.ScheduledExecutorService get() -> get
com.facebook.imagepipeline.producers.JobScheduler$JobState -> com.facebook.imagepipeline.producers.JobScheduler$JobState:
    com.facebook.imagepipeline.producers.JobScheduler$JobState IDLE -> IDLE
    com.facebook.imagepipeline.producers.JobScheduler$JobState QUEUED -> QUEUED
    com.facebook.imagepipeline.producers.JobScheduler$JobState RUNNING -> RUNNING
    com.facebook.imagepipeline.producers.JobScheduler$JobState RUNNING_AND_PENDING -> RUNNING_AND_PENDING
    com.facebook.imagepipeline.producers.JobScheduler$JobState[] $VALUES -> $VALUES
    com.facebook.imagepipeline.producers.JobScheduler$JobState[] values() -> values
    com.facebook.imagepipeline.producers.JobScheduler$JobState valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.facebook.imagepipeline.producers.LocalAssetFetchProducer -> com.facebook.imagepipeline.producers.LocalAssetFetchProducer:
    java.lang.String PRODUCER_NAME -> PRODUCER_NAME
    android.content.res.AssetManager mAssetManager -> mAssetManager
    void <init>(java.util.concurrent.Executor,com.facebook.common.memory.PooledByteBufferFactory,android.content.res.AssetManager) -> <init>
    com.facebook.imagepipeline.image.EncodedImage getEncodedImage(com.facebook.imagepipeline.request.ImageRequest) -> getEncodedImage
    int getLength(com.facebook.imagepipeline.request.ImageRequest) -> getLength
    java.lang.String getProducerName() -> getProducerName
    java.lang.String getAssetName(com.facebook.imagepipeline.request.ImageRequest) -> getAssetName
com.facebook.imagepipeline.producers.LocalContentUriFetchProducer -> com.facebook.imagepipeline.producers.LocalContentUriFetchProducer:
    java.lang.String PRODUCER_NAME -> PRODUCER_NAME
    java.lang.String[] PROJECTION -> PROJECTION
    android.content.ContentResolver mContentResolver -> mContentResolver
    void <init>(java.util.concurrent.Executor,com.facebook.common.memory.PooledByteBufferFactory,android.content.ContentResolver) -> <init>
    com.facebook.imagepipeline.image.EncodedImage getEncodedImage(com.facebook.imagepipeline.request.ImageRequest) -> getEncodedImage
    com.facebook.imagepipeline.image.EncodedImage getCameraImage(android.net.Uri) -> getCameraImage
    int getLength(java.lang.String) -> getLength
    java.lang.String getProducerName() -> getProducerName
    void <clinit>() -> <clinit>
com.facebook.imagepipeline.producers.LocalContentUriThumbnailFetchProducer -> com.facebook.imagepipeline.producers.LocalContentUriThumbnailFetchProducer:
    java.lang.Class TAG -> TAG
    java.lang.String PRODUCER_NAME -> PRODUCER_NAME
    java.lang.String[] PROJECTION -> PROJECTION
    java.lang.String[] THUMBNAIL_PROJECTION -> THUMBNAIL_PROJECTION
    android.graphics.Rect MINI_THUMBNAIL_DIMENSIONS -> MINI_THUMBNAIL_DIMENSIONS
    android.graphics.Rect MICRO_THUMBNAIL_DIMENSIONS -> MICRO_THUMBNAIL_DIMENSIONS
    int NO_THUMBNAIL -> NO_THUMBNAIL
    android.content.ContentResolver mContentResolver -> mContentResolver
    void <init>(java.util.concurrent.Executor,com.facebook.common.memory.PooledByteBufferFactory,android.content.ContentResolver) -> <init>
    boolean canProvideImageForSize(com.facebook.imagepipeline.common.ResizeOptions) -> canProvideImageForSize
    com.facebook.imagepipeline.image.EncodedImage getEncodedImage(com.facebook.imagepipeline.request.ImageRequest) -> getEncodedImage
    com.facebook.imagepipeline.image.EncodedImage getCameraImage(android.net.Uri,com.facebook.imagepipeline.common.ResizeOptions) -> getCameraImage
    com.facebook.imagepipeline.image.EncodedImage getThumbnail(com.facebook.imagepipeline.common.ResizeOptions,int) -> getThumbnail
    int getThumbnailKind(com.facebook.imagepipeline.common.ResizeOptions) -> getThumbnailKind
    int getLength(java.lang.String) -> getLength
    java.lang.String getProducerName() -> getProducerName
    int getRotationAngle(java.lang.String) -> getRotationAngle
    void <clinit>() -> <clinit>
com.facebook.imagepipeline.producers.LocalExifThumbnailProducer -> com.facebook.imagepipeline.producers.LocalExifThumbnailProducer:
    int COMMON_EXIF_THUMBNAIL_MAX_DIMENSION -> COMMON_EXIF_THUMBNAIL_MAX_DIMENSION
    java.lang.String PRODUCER_NAME -> PRODUCER_NAME
    java.lang.String CREATED_THUMBNAIL -> CREATED_THUMBNAIL
    java.util.concurrent.Executor mExecutor -> mExecutor
    com.facebook.common.memory.PooledByteBufferFactory mPooledByteBufferFactory -> mPooledByteBufferFactory
    android.content.ContentResolver mContentResolver -> mContentResolver
    void <init>(java.util.concurrent.Executor,com.facebook.common.memory.PooledByteBufferFactory,android.content.ContentResolver) -> <init>
    boolean canProvideImageForSize(com.facebook.imagepipeline.common.ResizeOptions) -> canProvideImageForSize
    void produceResults(com.facebook.imagepipeline.producers.Consumer,com.facebook.imagepipeline.producers.ProducerContext) -> produceResults
    android.media.ExifInterface getExifInterface(android.net.Uri) -> getExifInterface
    com.facebook.imagepipeline.image.EncodedImage buildEncodedImage(com.facebook.common.memory.PooledByteBuffer,android.media.ExifInterface) -> buildEncodedImage
    int getRotationAngle(android.media.ExifInterface) -> getRotationAngle
    boolean canReadAsFile(java.lang.String) -> canReadAsFile
    com.facebook.common.memory.PooledByteBufferFactory access$000(com.facebook.imagepipeline.producers.LocalExifThumbnailProducer) -> access$000
    com.facebook.imagepipeline.image.EncodedImage access$100(com.facebook.imagepipeline.producers.LocalExifThumbnailProducer,com.facebook.common.memory.PooledByteBuffer,android.media.ExifInterface) -> access$100
com.facebook.imagepipeline.producers.LocalExifThumbnailProducer$1 -> com.facebook.imagepipeline.producers.LocalExifThumbnailProducer$1:
    com.facebook.imagepipeline.request.ImageRequest val$imageRequest -> val$imageRequest
    com.facebook.imagepipeline.producers.LocalExifThumbnailProducer this$0 -> this$0
    void <init>(com.facebook.imagepipeline.producers.LocalExifThumbnailProducer,com.facebook.imagepipeline.producers.Consumer,com.facebook.imagepipeline.producers.ProducerListener,java.lang.String,java.lang.String,com.facebook.imagepipeline.request.ImageRequest) -> <init>
    com.facebook.imagepipeline.image.EncodedImage getResult() -> getResult
    void disposeResult(com.facebook.imagepipeline.image.EncodedImage) -> disposeResult
    java.util.Map getExtraMapOnSuccess(com.facebook.imagepipeline.image.EncodedImage) -> getExtraMapOnSuccess
    void disposeResult(java.lang.Object) -> disposeResult
    java.util.Map getExtraMapOnSuccess(java.lang.Object) -> getExtraMapOnSuccess
    java.lang.Object getResult() -> getResult
com.facebook.imagepipeline.producers.LocalExifThumbnailProducer$2 -> com.facebook.imagepipeline.producers.LocalExifThumbnailProducer$2:
    com.facebook.imagepipeline.producers.StatefulProducerRunnable val$cancellableProducerRunnable -> val$cancellableProducerRunnable
    com.facebook.imagepipeline.producers.LocalExifThumbnailProducer this$0 -> this$0
    void <init>(com.facebook.imagepipeline.producers.LocalExifThumbnailProducer,com.facebook.imagepipeline.producers.StatefulProducerRunnable) -> <init>
    void onCancellationRequested() -> onCancellationRequested
com.facebook.imagepipeline.producers.LocalFetchProducer -> com.facebook.imagepipeline.producers.LocalFetchProducer:
    java.util.concurrent.Executor mExecutor -> mExecutor
    com.facebook.common.memory.PooledByteBufferFactory mPooledByteBufferFactory -> mPooledByteBufferFactory
    void <init>(java.util.concurrent.Executor,com.facebook.common.memory.PooledByteBufferFactory) -> <init>
    void produceResults(com.facebook.imagepipeline.producers.Consumer,com.facebook.imagepipeline.producers.ProducerContext) -> produceResults
    com.facebook.imagepipeline.image.EncodedImage getByteBufferBackedEncodedImage(java.io.InputStream,int) -> getByteBufferBackedEncodedImage
    com.facebook.imagepipeline.image.EncodedImage getEncodedImage(java.io.InputStream,int) -> getEncodedImage
    com.facebook.imagepipeline.image.EncodedImage getEncodedImage(com.facebook.imagepipeline.request.ImageRequest) -> getEncodedImage
    java.lang.String getProducerName() -> getProducerName
com.facebook.imagepipeline.producers.LocalFetchProducer$1 -> com.facebook.imagepipeline.producers.LocalFetchProducer$1:
    com.facebook.imagepipeline.request.ImageRequest val$imageRequest -> val$imageRequest
    com.facebook.imagepipeline.producers.LocalFetchProducer this$0 -> this$0
    void <init>(com.facebook.imagepipeline.producers.LocalFetchProducer,com.facebook.imagepipeline.producers.Consumer,com.facebook.imagepipeline.producers.ProducerListener,java.lang.String,java.lang.String,com.facebook.imagepipeline.request.ImageRequest) -> <init>
    com.facebook.imagepipeline.image.EncodedImage getResult() -> getResult
    void disposeResult(com.facebook.imagepipeline.image.EncodedImage) -> disposeResult
    void disposeResult(java.lang.Object) -> disposeResult
    java.lang.Object getResult() -> getResult
com.facebook.imagepipeline.producers.LocalFetchProducer$2 -> com.facebook.imagepipeline.producers.LocalFetchProducer$2:
    com.facebook.imagepipeline.producers.StatefulProducerRunnable val$cancellableProducerRunnable -> val$cancellableProducerRunnable
    com.facebook.imagepipeline.producers.LocalFetchProducer this$0 -> this$0
    void <init>(com.facebook.imagepipeline.producers.LocalFetchProducer,com.facebook.imagepipeline.producers.StatefulProducerRunnable) -> <init>
    void onCancellationRequested() -> onCancellationRequested
com.facebook.imagepipeline.producers.LocalFileFetchProducer -> com.facebook.imagepipeline.producers.LocalFileFetchProducer:
    java.lang.String PRODUCER_NAME -> PRODUCER_NAME
    void <init>(java.util.concurrent.Executor,com.facebook.common.memory.PooledByteBufferFactory) -> <init>
    com.facebook.imagepipeline.image.EncodedImage getEncodedImage(com.facebook.imagepipeline.request.ImageRequest) -> getEncodedImage
    java.lang.String getProducerName() -> getProducerName
com.facebook.imagepipeline.producers.LocalResourceFetchProducer -> com.facebook.imagepipeline.producers.LocalResourceFetchProducer:
    java.lang.String PRODUCER_NAME -> PRODUCER_NAME
    android.content.res.Resources mResources -> mResources
    void <init>(java.util.concurrent.Executor,com.facebook.common.memory.PooledByteBufferFactory,android.content.res.Resources) -> <init>
    com.facebook.imagepipeline.image.EncodedImage getEncodedImage(com.facebook.imagepipeline.request.ImageRequest) -> getEncodedImage
    int getLength(com.facebook.imagepipeline.request.ImageRequest) -> getLength
    java.lang.String getProducerName() -> getProducerName
    int getResourceId(com.facebook.imagepipeline.request.ImageRequest) -> getResourceId
com.facebook.imagepipeline.producers.LocalVideoThumbnailProducer -> com.facebook.imagepipeline.producers.LocalVideoThumbnailProducer:
    java.lang.String PRODUCER_NAME -> PRODUCER_NAME
    java.lang.String CREATED_THUMBNAIL -> CREATED_THUMBNAIL
    java.util.concurrent.Executor mExecutor -> mExecutor
    void <init>(java.util.concurrent.Executor) -> <init>
    void produceResults(com.facebook.imagepipeline.producers.Consumer,com.facebook.imagepipeline.producers.ProducerContext) -> produceResults
    int calculateKind(com.facebook.imagepipeline.request.ImageRequest) -> calculateKind
    int access$000(com.facebook.imagepipeline.request.ImageRequest) -> access$000
com.facebook.imagepipeline.producers.LocalVideoThumbnailProducer$1 -> com.facebook.imagepipeline.producers.LocalVideoThumbnailProducer$1:
    com.facebook.imagepipeline.request.ImageRequest val$imageRequest -> val$imageRequest
    com.facebook.imagepipeline.producers.LocalVideoThumbnailProducer this$0 -> this$0
    void <init>(com.facebook.imagepipeline.producers.LocalVideoThumbnailProducer,com.facebook.imagepipeline.producers.Consumer,com.facebook.imagepipeline.producers.ProducerListener,java.lang.String,java.lang.String,com.facebook.imagepipeline.request.ImageRequest) -> <init>
    com.facebook.common.references.CloseableReference getResult() -> getResult
    java.util.Map getExtraMapOnSuccess(com.facebook.common.references.CloseableReference) -> getExtraMapOnSuccess
    void disposeResult(com.facebook.common.references.CloseableReference) -> disposeResult
    void disposeResult(java.lang.Object) -> disposeResult
    java.util.Map getExtraMapOnSuccess(java.lang.Object) -> getExtraMapOnSuccess
    java.lang.Object getResult() -> getResult
com.facebook.imagepipeline.producers.LocalVideoThumbnailProducer$2 -> com.facebook.imagepipeline.producers.LocalVideoThumbnailProducer$2:
    com.facebook.imagepipeline.producers.StatefulProducerRunnable val$cancellableProducerRunnable -> val$cancellableProducerRunnable
    com.facebook.imagepipeline.producers.LocalVideoThumbnailProducer this$0 -> this$0
    void <init>(com.facebook.imagepipeline.producers.LocalVideoThumbnailProducer,com.facebook.imagepipeline.producers.StatefulProducerRunnable) -> <init>
    void onCancellationRequested() -> onCancellationRequested
com.facebook.imagepipeline.producers.MediaVariationsFallbackProducer -> com.facebook.imagepipeline.producers.MediaVariationsFallbackProducer:
    java.lang.String PRODUCER_NAME -> PRODUCER_NAME
    java.lang.String EXTRA_CACHED_VALUE_FOUND -> EXTRA_CACHED_VALUE_FOUND
    java.lang.String EXTRA_CACHED_VALUE_USED_AS_LAST -> EXTRA_CACHED_VALUE_USED_AS_LAST
    java.lang.String EXTRA_VARIANTS_COUNT -> EXTRA_VARIANTS_COUNT
    java.lang.String EXTRA_VARIANTS_SOURCE -> EXTRA_VARIANTS_SOURCE
    com.facebook.imagepipeline.cache.BufferedDiskCache mDefaultBufferedDiskCache -> mDefaultBufferedDiskCache
    com.facebook.imagepipeline.cache.BufferedDiskCache mSmallImageBufferedDiskCache -> mSmallImageBufferedDiskCache
    com.facebook.imagepipeline.cache.CacheKeyFactory mCacheKeyFactory -> mCacheKeyFactory
    com.facebook.imagepipeline.cache.MediaVariationsIndex mMediaVariationsIndex -> mMediaVariationsIndex
    com.facebook.imagepipeline.cache.MediaIdExtractor mMediaIdExtractor -> mMediaIdExtractor
    com.facebook.imagepipeline.cache.DiskCachePolicy mDiskCachePolicy -> mDiskCachePolicy
    com.facebook.imagepipeline.producers.Producer mInputProducer -> mInputProducer
    void <init>(com.facebook.imagepipeline.cache.BufferedDiskCache,com.facebook.imagepipeline.cache.BufferedDiskCache,com.facebook.imagepipeline.cache.CacheKeyFactory,com.facebook.imagepipeline.cache.MediaVariationsIndex,com.facebook.imagepipeline.cache.MediaIdExtractor,com.facebook.imagepipeline.cache.DiskCachePolicy,com.facebook.imagepipeline.producers.Producer) -> <init>
    void produceResults(com.facebook.imagepipeline.producers.Consumer,com.facebook.imagepipeline.producers.ProducerContext) -> produceResults
    bolts.Task chooseFromVariants(com.facebook.imagepipeline.producers.Consumer,com.facebook.imagepipeline.producers.ProducerContext,com.facebook.imagepipeline.request.ImageRequest,com.facebook.imagepipeline.request.MediaVariations,com.facebook.imagepipeline.common.ResizeOptions,java.util.concurrent.atomic.AtomicBoolean) -> chooseFromVariants
    bolts.Task attemptCacheReadForVariant(com.facebook.imagepipeline.producers.Consumer,com.facebook.imagepipeline.producers.ProducerContext,com.facebook.imagepipeline.request.ImageRequest,com.facebook.imagepipeline.request.MediaVariations,java.util.List,int,java.util.concurrent.atomic.AtomicBoolean) -> attemptCacheReadForVariant
    boolean isBigEnoughForRequestedSize(com.facebook.imagepipeline.request.MediaVariations$Variant,com.facebook.imagepipeline.common.ResizeOptions) -> isBigEnoughForRequestedSize
    bolts.Continuation onFinishDiskReads(com.facebook.imagepipeline.producers.Consumer,com.facebook.imagepipeline.producers.ProducerContext,com.facebook.imagepipeline.request.ImageRequest,com.facebook.imagepipeline.request.MediaVariations,java.util.List,int,java.util.concurrent.atomic.AtomicBoolean) -> onFinishDiskReads
    void startInputProducerWithExistingConsumer(com.facebook.imagepipeline.producers.Consumer,com.facebook.imagepipeline.producers.ProducerContext) -> startInputProducerWithExistingConsumer
    void startInputProducerWithWrappedConsumer(com.facebook.imagepipeline.producers.Consumer,com.facebook.imagepipeline.producers.ProducerContext,java.lang.String) -> startInputProducerWithWrappedConsumer
    boolean isTaskCancelled(bolts.Task) -> isTaskCancelled
    java.util.Map getExtraMap(com.facebook.imagepipeline.producers.ProducerListener,java.lang.String,boolean,int,java.lang.String,boolean) -> getExtraMap
    void subscribeTaskForRequestCancellation(java.util.concurrent.atomic.AtomicBoolean,com.facebook.imagepipeline.producers.ProducerContext) -> subscribeTaskForRequestCancellation
    void access$000(com.facebook.imagepipeline.producers.MediaVariationsFallbackProducer,com.facebook.imagepipeline.producers.Consumer,com.facebook.imagepipeline.producers.ProducerContext,java.lang.String) -> access$000
    bolts.Task access$100(com.facebook.imagepipeline.producers.MediaVariationsFallbackProducer,com.facebook.imagepipeline.producers.Consumer,com.facebook.imagepipeline.producers.ProducerContext,com.facebook.imagepipeline.request.ImageRequest,com.facebook.imagepipeline.request.MediaVariations,com.facebook.imagepipeline.common.ResizeOptions,java.util.concurrent.atomic.AtomicBoolean) -> access$100
    boolean access$200(bolts.Task) -> access$200
    boolean access$300(com.facebook.imagepipeline.request.MediaVariations$Variant,com.facebook.imagepipeline.common.ResizeOptions) -> access$300
    bolts.Task access$400(com.facebook.imagepipeline.producers.MediaVariationsFallbackProducer,com.facebook.imagepipeline.producers.Consumer,com.facebook.imagepipeline.producers.ProducerContext,com.facebook.imagepipeline.request.ImageRequest,com.facebook.imagepipeline.request.MediaVariations,java.util.List,int,java.util.concurrent.atomic.AtomicBoolean) -> access$400
    com.facebook.imagepipeline.cache.DiskCachePolicy access$500(com.facebook.imagepipeline.producers.MediaVariationsFallbackProducer) -> access$500
    com.facebook.imagepipeline.cache.CacheKeyFactory access$600(com.facebook.imagepipeline.producers.MediaVariationsFallbackProducer) -> access$600
    com.facebook.imagepipeline.cache.MediaVariationsIndex access$700(com.facebook.imagepipeline.producers.MediaVariationsFallbackProducer) -> access$700
com.facebook.imagepipeline.producers.MediaVariationsFallbackProducer$1 -> com.facebook.imagepipeline.producers.MediaVariationsFallbackProducer$1:
    com.facebook.imagepipeline.producers.Consumer val$consumer -> val$consumer
    com.facebook.imagepipeline.producers.ProducerContext val$producerContext -> val$producerContext
    java.lang.String val$mediaId -> val$mediaId
    com.facebook.imagepipeline.request.ImageRequest val$imageRequest -> val$imageRequest
    com.facebook.imagepipeline.common.ResizeOptions val$resizeOptions -> val$resizeOptions
    java.util.concurrent.atomic.AtomicBoolean val$isCancelled -> val$isCancelled
    com.facebook.imagepipeline.producers.MediaVariationsFallbackProducer this$0 -> this$0
    void <init>(com.facebook.imagepipeline.producers.MediaVariationsFallbackProducer,com.facebook.imagepipeline.producers.Consumer,com.facebook.imagepipeline.producers.ProducerContext,java.lang.String,com.facebook.imagepipeline.request.ImageRequest,com.facebook.imagepipeline.common.ResizeOptions,java.util.concurrent.atomic.AtomicBoolean) -> <init>
    java.lang.Object then(bolts.Task) -> then
com.facebook.imagepipeline.producers.MediaVariationsFallbackProducer$2 -> com.facebook.imagepipeline.producers.MediaVariationsFallbackProducer$2:
    com.facebook.imagepipeline.producers.ProducerListener val$listener -> val$listener
    java.lang.String val$requestId -> val$requestId
    com.facebook.imagepipeline.producers.Consumer val$consumer -> val$consumer
    com.facebook.imagepipeline.producers.ProducerContext val$producerContext -> val$producerContext
    com.facebook.imagepipeline.request.MediaVariations val$mediaVariations -> val$mediaVariations
    java.util.List val$sortedVariants -> val$sortedVariants
    int val$variantsIndex -> val$variantsIndex
    com.facebook.imagepipeline.request.ImageRequest val$imageRequest -> val$imageRequest
    java.util.concurrent.atomic.AtomicBoolean val$isCancelled -> val$isCancelled
    com.facebook.imagepipeline.producers.MediaVariationsFallbackProducer this$0 -> this$0
    void <init>(com.facebook.imagepipeline.producers.MediaVariationsFallbackProducer,com.facebook.imagepipeline.producers.ProducerListener,java.lang.String,com.facebook.imagepipeline.producers.Consumer,com.facebook.imagepipeline.producers.ProducerContext,com.facebook.imagepipeline.request.MediaVariations,java.util.List,int,com.facebook.imagepipeline.request.ImageRequest,java.util.concurrent.atomic.AtomicBoolean) -> <init>
    java.lang.Void then(bolts.Task) -> then
    java.lang.Object then(bolts.Task) -> then
com.facebook.imagepipeline.producers.MediaVariationsFallbackProducer$3 -> com.facebook.imagepipeline.producers.MediaVariationsFallbackProducer$3:
    java.util.concurrent.atomic.AtomicBoolean val$isCancelled -> val$isCancelled
    com.facebook.imagepipeline.producers.MediaVariationsFallbackProducer this$0 -> this$0
    void <init>(com.facebook.imagepipeline.producers.MediaVariationsFallbackProducer,java.util.concurrent.atomic.AtomicBoolean) -> <init>
    void onCancellationRequested() -> onCancellationRequested
com.facebook.imagepipeline.producers.MediaVariationsFallbackProducer$MediaVariationsConsumer -> com.facebook.imagepipeline.producers.MediaVariationsFallbackProducer$MediaVariationsConsumer:
    com.facebook.imagepipeline.producers.ProducerContext mProducerContext -> mProducerContext
    java.lang.String mMediaId -> mMediaId
    com.facebook.imagepipeline.producers.MediaVariationsFallbackProducer this$0 -> this$0
    void <init>(com.facebook.imagepipeline.producers.MediaVariationsFallbackProducer,com.facebook.imagepipeline.producers.Consumer,com.facebook.imagepipeline.producers.ProducerContext,java.lang.String) -> <init>
    void onNewResultImpl(com.facebook.imagepipeline.image.EncodedImage,boolean) -> onNewResultImpl
    void storeResultInDatabase(com.facebook.imagepipeline.image.EncodedImage) -> storeResultInDatabase
    void onNewResultImpl(java.lang.Object,boolean) -> onNewResultImpl
com.facebook.imagepipeline.producers.MediaVariationsFallbackProducer$VariantComparator -> com.facebook.imagepipeline.producers.MediaVariationsFallbackProducer$VariantComparator:
    com.facebook.imagepipeline.common.ResizeOptions mResizeOptions -> mResizeOptions
    void <init>(com.facebook.imagepipeline.common.ResizeOptions) -> <init>
    int compare(com.facebook.imagepipeline.request.MediaVariations$Variant,com.facebook.imagepipeline.request.MediaVariations$Variant) -> compare
    int compare(java.lang.Object,java.lang.Object) -> compare
com.facebook.imagepipeline.producers.MultiplexProducer -> com.facebook.imagepipeline.producers.MultiplexProducer:
    java.util.Map mMultiplexers -> mMultiplexers
    com.facebook.imagepipeline.producers.Producer mInputProducer -> mInputProducer
    void <init>(com.facebook.imagepipeline.producers.Producer) -> <init>
    void produceResults(com.facebook.imagepipeline.producers.Consumer,com.facebook.imagepipeline.producers.ProducerContext) -> produceResults
    com.facebook.imagepipeline.producers.MultiplexProducer$Multiplexer getExistingMultiplexer(java.lang.Object) -> getExistingMultiplexer
    com.facebook.imagepipeline.producers.MultiplexProducer$Multiplexer createAndPutNewMultiplexer(java.lang.Object) -> createAndPutNewMultiplexer
    void removeMultiplexer(java.lang.Object,com.facebook.imagepipeline.producers.MultiplexProducer$Multiplexer) -> removeMultiplexer
    java.lang.Object getKey(com.facebook.imagepipeline.producers.ProducerContext) -> getKey
    java.io.Closeable cloneOrNull(java.io.Closeable) -> cloneOrNull
    com.facebook.imagepipeline.producers.MultiplexProducer$Multiplexer access$100(com.facebook.imagepipeline.producers.MultiplexProducer,java.lang.Object) -> access$100
    void access$700(com.facebook.imagepipeline.producers.MultiplexProducer,java.lang.Object,com.facebook.imagepipeline.producers.MultiplexProducer$Multiplexer) -> access$700
    com.facebook.imagepipeline.producers.Producer access$900(com.facebook.imagepipeline.producers.MultiplexProducer) -> access$900
com.facebook.imagepipeline.producers.MultiplexProducer$1 -> com.facebook.imagepipeline.producers.MultiplexProducer$1:
com.facebook.imagepipeline.producers.MultiplexProducer$Multiplexer -> com.facebook.imagepipeline.producers.MultiplexProducer$Multiplexer:
    java.lang.Object mKey -> mKey
    java.util.concurrent.CopyOnWriteArraySet mConsumerContextPairs -> mConsumerContextPairs
    java.io.Closeable mLastIntermediateResult -> mLastIntermediateResult
    float mLastProgress -> mLastProgress
    com.facebook.imagepipeline.producers.BaseProducerContext mMultiplexProducerContext -> mMultiplexProducerContext
    com.facebook.imagepipeline.producers.MultiplexProducer$Multiplexer$ForwardingConsumer mForwardingConsumer -> mForwardingConsumer
    com.facebook.imagepipeline.producers.MultiplexProducer this$0 -> this$0
    void <init>(com.facebook.imagepipeline.producers.MultiplexProducer,java.lang.Object) -> <init>
    boolean addNewConsumer(com.facebook.imagepipeline.producers.Consumer,com.facebook.imagepipeline.producers.ProducerContext) -> addNewConsumer
    void addCallbacks(android.util.Pair,com.facebook.imagepipeline.producers.ProducerContext) -> addCallbacks
    void startInputProducerIfHasAttachedConsumers() -> startInputProducerIfHasAttachedConsumers
    java.util.List updateIsPrefetch() -> updateIsPrefetch
    boolean computeIsPrefetch() -> computeIsPrefetch
    java.util.List updateIsIntermediateResultExpected() -> updateIsIntermediateResultExpected
    boolean computeIsIntermediateResultExpected() -> computeIsIntermediateResultExpected
    java.util.List updatePriority() -> updatePriority
    com.facebook.imagepipeline.common.Priority computePriority() -> computePriority
    void onFailure(com.facebook.imagepipeline.producers.MultiplexProducer$Multiplexer$ForwardingConsumer,java.lang.Throwable) -> onFailure
    void onNextResult(com.facebook.imagepipeline.producers.MultiplexProducer$Multiplexer$ForwardingConsumer,java.io.Closeable,boolean) -> onNextResult
    void onCancelled(com.facebook.imagepipeline.producers.MultiplexProducer$Multiplexer$ForwardingConsumer) -> onCancelled
    void onProgressUpdate(com.facebook.imagepipeline.producers.MultiplexProducer$Multiplexer$ForwardingConsumer,float) -> onProgressUpdate
    void closeSafely(java.io.Closeable) -> closeSafely
    void access$000(com.facebook.imagepipeline.producers.MultiplexProducer$Multiplexer) -> access$000
    java.util.concurrent.CopyOnWriteArraySet access$200(com.facebook.imagepipeline.producers.MultiplexProducer$Multiplexer) -> access$200
    com.facebook.imagepipeline.producers.BaseProducerContext access$300(com.facebook.imagepipeline.producers.MultiplexProducer$Multiplexer) -> access$300
    java.util.List access$400(com.facebook.imagepipeline.producers.MultiplexProducer$Multiplexer) -> access$400
    java.util.List access$500(com.facebook.imagepipeline.producers.MultiplexProducer$Multiplexer) -> access$500
    java.util.List access$600(com.facebook.imagepipeline.producers.MultiplexProducer$Multiplexer) -> access$600
com.facebook.imagepipeline.producers.MultiplexProducer$Multiplexer$1 -> com.facebook.imagepipeline.producers.MultiplexProducer$Multiplexer$1:
    android.util.Pair val$consumerContextPair -> val$consumerContextPair
    com.facebook.imagepipeline.producers.MultiplexProducer$Multiplexer this$1 -> this$1
    void <init>(com.facebook.imagepipeline.producers.MultiplexProducer$Multiplexer,android.util.Pair) -> <init>
    void onCancellationRequested() -> onCancellationRequested
    void onIsPrefetchChanged() -> onIsPrefetchChanged
    void onIsIntermediateResultExpectedChanged() -> onIsIntermediateResultExpectedChanged
    void onPriorityChanged() -> onPriorityChanged
com.facebook.imagepipeline.producers.MultiplexProducer$Multiplexer$ForwardingConsumer -> com.facebook.imagepipeline.producers.MultiplexProducer$Multiplexer$ForwardingConsumer:
    com.facebook.imagepipeline.producers.MultiplexProducer$Multiplexer this$1 -> this$1
    void <init>(com.facebook.imagepipeline.producers.MultiplexProducer$Multiplexer) -> <init>
    void onNewResultImpl(java.io.Closeable,boolean) -> onNewResultImpl
    void onFailureImpl(java.lang.Throwable) -> onFailureImpl
    void onCancellationImpl() -> onCancellationImpl
    void onProgressUpdateImpl(float) -> onProgressUpdateImpl
    void onNewResultImpl(java.lang.Object,boolean) -> onNewResultImpl
    void <init>(com.facebook.imagepipeline.producers.MultiplexProducer$Multiplexer,com.facebook.imagepipeline.producers.MultiplexProducer$1) -> <init>
com.facebook.imagepipeline.producers.NetworkFetchProducer -> com.facebook.imagepipeline.producers.NetworkFetchProducer:
    java.lang.String PRODUCER_NAME -> PRODUCER_NAME
    java.lang.String INTERMEDIATE_RESULT_PRODUCER_EVENT -> INTERMEDIATE_RESULT_PRODUCER_EVENT
    int READ_SIZE -> READ_SIZE
    long TIME_BETWEEN_PARTIAL_RESULTS_MS -> TIME_BETWEEN_PARTIAL_RESULTS_MS
    com.facebook.common.memory.PooledByteBufferFactory mPooledByteBufferFactory -> mPooledByteBufferFactory
    com.facebook.common.memory.ByteArrayPool mByteArrayPool -> mByteArrayPool
    com.facebook.imagepipeline.producers.NetworkFetcher mNetworkFetcher -> mNetworkFetcher
    void <init>(com.facebook.common.memory.PooledByteBufferFactory,com.facebook.common.memory.ByteArrayPool,com.facebook.imagepipeline.producers.NetworkFetcher) -> <init>
    void produceResults(com.facebook.imagepipeline.producers.Consumer,com.facebook.imagepipeline.producers.ProducerContext) -> produceResults
    void onResponse(com.facebook.imagepipeline.producers.FetchState,java.io.InputStream,int) -> onResponse
    float calculateProgress(int,int) -> calculateProgress
    void maybeHandleIntermediateResult(com.facebook.common.memory.PooledByteBufferOutputStream,com.facebook.imagepipeline.producers.FetchState) -> maybeHandleIntermediateResult
    void handleFinalResult(com.facebook.common.memory.PooledByteBufferOutputStream,com.facebook.imagepipeline.producers.FetchState) -> handleFinalResult
    void notifyConsumer(com.facebook.common.memory.PooledByteBufferOutputStream,boolean,com.facebook.imagepipeline.producers.Consumer) -> notifyConsumer
    void onFailure(com.facebook.imagepipeline.producers.FetchState,java.lang.Throwable) -> onFailure
    void onCancellation(com.facebook.imagepipeline.producers.FetchState) -> onCancellation
    boolean shouldPropagateIntermediateResults(com.facebook.imagepipeline.producers.FetchState) -> shouldPropagateIntermediateResults
    java.util.Map getExtraMap(com.facebook.imagepipeline.producers.FetchState,int) -> getExtraMap
    void access$000(com.facebook.imagepipeline.producers.NetworkFetchProducer,com.facebook.imagepipeline.producers.FetchState,java.io.InputStream,int) -> access$000
    void access$100(com.facebook.imagepipeline.producers.NetworkFetchProducer,com.facebook.imagepipeline.producers.FetchState,java.lang.Throwable) -> access$100
    void access$200(com.facebook.imagepipeline.producers.NetworkFetchProducer,com.facebook.imagepipeline.producers.FetchState) -> access$200
com.facebook.imagepipeline.producers.NetworkFetchProducer$1 -> com.facebook.imagepipeline.producers.NetworkFetchProducer$1:
    com.facebook.imagepipeline.producers.FetchState val$fetchState -> val$fetchState
    com.facebook.imagepipeline.producers.NetworkFetchProducer this$0 -> this$0
    void <init>(com.facebook.imagepipeline.producers.NetworkFetchProducer,com.facebook.imagepipeline.producers.FetchState) -> <init>
    void onResponse(java.io.InputStream,int) -> onResponse
    void onFailure(java.lang.Throwable) -> onFailure
    void onCancellation() -> onCancellation
com.facebook.imagepipeline.producers.NetworkFetcher -> com.facebook.imagepipeline.producers.NetworkFetcher:
    com.facebook.imagepipeline.producers.FetchState createFetchState(com.facebook.imagepipeline.producers.Consumer,com.facebook.imagepipeline.producers.ProducerContext) -> createFetchState
    void fetch(com.facebook.imagepipeline.producers.FetchState,com.facebook.imagepipeline.producers.NetworkFetcher$Callback) -> fetch
    boolean shouldPropagate(com.facebook.imagepipeline.producers.FetchState) -> shouldPropagate
    void onFetchCompletion(com.facebook.imagepipeline.producers.FetchState,int) -> onFetchCompletion
    java.util.Map getExtraMap(com.facebook.imagepipeline.producers.FetchState,int) -> getExtraMap
com.facebook.imagepipeline.producers.NetworkFetcher$Callback -> com.facebook.imagepipeline.producers.NetworkFetcher$Callback:
    void onResponse(java.io.InputStream,int) -> onResponse
    void onFailure(java.lang.Throwable) -> onFailure
    void onCancellation() -> onCancellation
com.facebook.imagepipeline.producers.NullProducer -> com.facebook.imagepipeline.producers.NullProducer:
    void <init>() -> <init>
    void produceResults(com.facebook.imagepipeline.producers.Consumer,com.facebook.imagepipeline.producers.ProducerContext) -> produceResults
com.facebook.imagepipeline.producers.PostprocessedBitmapMemoryCacheProducer -> com.facebook.imagepipeline.producers.PostprocessedBitmapMemoryCacheProducer:
    java.lang.String PRODUCER_NAME -> PRODUCER_NAME
    java.lang.String VALUE_FOUND -> VALUE_FOUND
    com.facebook.imagepipeline.cache.MemoryCache mMemoryCache -> mMemoryCache
    com.facebook.imagepipeline.cache.CacheKeyFactory mCacheKeyFactory -> mCacheKeyFactory
    com.facebook.imagepipeline.producers.Producer mInputProducer -> mInputProducer
    void <init>(com.facebook.imagepipeline.cache.MemoryCache,com.facebook.imagepipeline.cache.CacheKeyFactory,com.facebook.imagepipeline.producers.Producer) -> <init>
    void produceResults(com.facebook.imagepipeline.producers.Consumer,com.facebook.imagepipeline.producers.ProducerContext) -> produceResults
    java.lang.String getProducerName() -> getProducerName
com.facebook.imagepipeline.producers.PostprocessedBitmapMemoryCacheProducer$CachedPostprocessorConsumer -> com.facebook.imagepipeline.producers.PostprocessedBitmapMemoryCacheProducer$CachedPostprocessorConsumer:
    com.facebook.cache.common.CacheKey mCacheKey -> mCacheKey
    boolean mIsRepeatedProcessor -> mIsRepeatedProcessor
    com.facebook.imagepipeline.cache.MemoryCache mMemoryCache -> mMemoryCache
    void <init>(com.facebook.imagepipeline.producers.Consumer,com.facebook.cache.common.CacheKey,boolean,com.facebook.imagepipeline.cache.MemoryCache) -> <init>
    void onNewResultImpl(com.facebook.common.references.CloseableReference,boolean) -> onNewResultImpl
    void onNewResultImpl(java.lang.Object,boolean) -> onNewResultImpl
com.facebook.imagepipeline.producers.PostprocessorProducer -> com.facebook.imagepipeline.producers.PostprocessorProducer:
    java.lang.String NAME -> NAME
    java.lang.String POSTPROCESSOR -> POSTPROCESSOR
    com.facebook.imagepipeline.producers.Producer mInputProducer -> mInputProducer
    com.facebook.imagepipeline.bitmaps.PlatformBitmapFactory mBitmapFactory -> mBitmapFactory
    java.util.concurrent.Executor mExecutor -> mExecutor
    void <init>(com.facebook.imagepipeline.producers.Producer,com.facebook.imagepipeline.bitmaps.PlatformBitmapFactory,java.util.concurrent.Executor) -> <init>
    void produceResults(com.facebook.imagepipeline.producers.Consumer,com.facebook.imagepipeline.producers.ProducerContext) -> produceResults
    java.util.concurrent.Executor access$800(com.facebook.imagepipeline.producers.PostprocessorProducer) -> access$800
    com.facebook.imagepipeline.bitmaps.PlatformBitmapFactory access$900(com.facebook.imagepipeline.producers.PostprocessorProducer) -> access$900
com.facebook.imagepipeline.producers.PostprocessorProducer$1 -> com.facebook.imagepipeline.producers.PostprocessorProducer$1:
com.facebook.imagepipeline.producers.PostprocessorProducer$PostprocessorConsumer -> com.facebook.imagepipeline.producers.PostprocessorProducer$PostprocessorConsumer:
    com.facebook.imagepipeline.producers.ProducerListener mListener -> mListener
    java.lang.String mRequestId -> mRequestId
    com.facebook.imagepipeline.request.Postprocessor mPostprocessor -> mPostprocessor
    boolean mIsClosed -> mIsClosed
    com.facebook.common.references.CloseableReference mSourceImageRef -> mSourceImageRef
    boolean mIsLast -> mIsLast
    boolean mIsDirty -> mIsDirty
    boolean mIsPostProcessingRunning -> mIsPostProcessingRunning
    com.facebook.imagepipeline.producers.PostprocessorProducer this$0 -> this$0
    void <init>(com.facebook.imagepipeline.producers.PostprocessorProducer,com.facebook.imagepipeline.producers.Consumer,com.facebook.imagepipeline.producers.ProducerListener,java.lang.String,com.facebook.imagepipeline.request.Postprocessor,com.facebook.imagepipeline.producers.ProducerContext) -> <init>
    void onNewResultImpl(com.facebook.common.references.CloseableReference,boolean) -> onNewResultImpl
    void onFailureImpl(java.lang.Throwable) -> onFailureImpl
    void onCancellationImpl() -> onCancellationImpl
    void updateSourceImageRef(com.facebook.common.references.CloseableReference,boolean) -> updateSourceImageRef
    void submitPostprocessing() -> submitPostprocessing
    void clearRunningAndStartIfDirty() -> clearRunningAndStartIfDirty
    boolean setRunningIfDirtyAndNotRunning() -> setRunningIfDirtyAndNotRunning
    void doPostprocessing(com.facebook.common.references.CloseableReference,boolean) -> doPostprocessing
    java.util.Map getExtraMap(com.facebook.imagepipeline.producers.ProducerListener,java.lang.String,com.facebook.imagepipeline.request.Postprocessor) -> getExtraMap
    boolean shouldPostprocess(com.facebook.imagepipeline.image.CloseableImage) -> shouldPostprocess
    com.facebook.common.references.CloseableReference postprocessInternal(com.facebook.imagepipeline.image.CloseableImage) -> postprocessInternal
    void maybeNotifyOnNewResult(com.facebook.common.references.CloseableReference,boolean) -> maybeNotifyOnNewResult
    void maybeNotifyOnFailure(java.lang.Throwable) -> maybeNotifyOnFailure
    void maybeNotifyOnCancellation() -> maybeNotifyOnCancellation
    boolean isClosed() -> isClosed
    boolean close() -> close
    void onNewResultImpl(java.lang.Object,boolean) -> onNewResultImpl
    void access$200(com.facebook.imagepipeline.producers.PostprocessorProducer$PostprocessorConsumer) -> access$200
    com.facebook.common.references.CloseableReference access$300(com.facebook.imagepipeline.producers.PostprocessorProducer$PostprocessorConsumer) -> access$300
    boolean access$400(com.facebook.imagepipeline.producers.PostprocessorProducer$PostprocessorConsumer) -> access$400
    com.facebook.common.references.CloseableReference access$302(com.facebook.imagepipeline.producers.PostprocessorProducer$PostprocessorConsumer,com.facebook.common.references.CloseableReference) -> access$302
    boolean access$502(com.facebook.imagepipeline.producers.PostprocessorProducer$PostprocessorConsumer,boolean) -> access$502
    void access$600(com.facebook.imagepipeline.producers.PostprocessorProducer$PostprocessorConsumer,com.facebook.common.references.CloseableReference,boolean) -> access$600
    void access$700(com.facebook.imagepipeline.producers.PostprocessorProducer$PostprocessorConsumer) -> access$700
com.facebook.imagepipeline.producers.PostprocessorProducer$PostprocessorConsumer$1 -> com.facebook.imagepipeline.producers.PostprocessorProducer$PostprocessorConsumer$1:
    com.facebook.imagepipeline.producers.PostprocessorProducer val$this$0 -> val$this$0
    com.facebook.imagepipeline.producers.PostprocessorProducer$PostprocessorConsumer this$1 -> this$1
    void <init>(com.facebook.imagepipeline.producers.PostprocessorProducer$PostprocessorConsumer,com.facebook.imagepipeline.producers.PostprocessorProducer) -> <init>
    void onCancellationRequested() -> onCancellationRequested
com.facebook.imagepipeline.producers.PostprocessorProducer$PostprocessorConsumer$2 -> com.facebook.imagepipeline.producers.PostprocessorProducer$PostprocessorConsumer$2:
    com.facebook.imagepipeline.producers.PostprocessorProducer$PostprocessorConsumer this$1 -> this$1
    void <init>(com.facebook.imagepipeline.producers.PostprocessorProducer$PostprocessorConsumer) -> <init>
    void run() -> run
com.facebook.imagepipeline.producers.PostprocessorProducer$RepeatedPostprocessorConsumer -> com.facebook.imagepipeline.producers.PostprocessorProducer$RepeatedPostprocessorConsumer:
    boolean mIsClosed -> mIsClosed
    com.facebook.common.references.CloseableReference mSourceImageRef -> mSourceImageRef
    com.facebook.imagepipeline.producers.PostprocessorProducer this$0 -> this$0
    void <init>(com.facebook.imagepipeline.producers.PostprocessorProducer,com.facebook.imagepipeline.producers.PostprocessorProducer$PostprocessorConsumer,com.facebook.imagepipeline.request.RepeatedPostprocessor,com.facebook.imagepipeline.producers.ProducerContext) -> <init>
    void onNewResultImpl(com.facebook.common.references.CloseableReference,boolean) -> onNewResultImpl
    void onFailureImpl(java.lang.Throwable) -> onFailureImpl
    void onCancellationImpl() -> onCancellationImpl
    void update() -> update
    void updateInternal() -> updateInternal
    void setSourceImageRef(com.facebook.common.references.CloseableReference) -> setSourceImageRef
    boolean close() -> close
    void onNewResultImpl(java.lang.Object,boolean) -> onNewResultImpl
    void <init>(com.facebook.imagepipeline.producers.PostprocessorProducer,com.facebook.imagepipeline.producers.PostprocessorProducer$PostprocessorConsumer,com.facebook.imagepipeline.request.RepeatedPostprocessor,com.facebook.imagepipeline.producers.ProducerContext,com.facebook.imagepipeline.producers.PostprocessorProducer$1) -> <init>
    boolean access$1000(com.facebook.imagepipeline.producers.PostprocessorProducer$RepeatedPostprocessorConsumer) -> access$1000
com.facebook.imagepipeline.producers.PostprocessorProducer$RepeatedPostprocessorConsumer$1 -> com.facebook.imagepipeline.producers.PostprocessorProducer$RepeatedPostprocessorConsumer$1:
    com.facebook.imagepipeline.producers.PostprocessorProducer val$this$0 -> val$this$0
    com.facebook.imagepipeline.producers.PostprocessorProducer$RepeatedPostprocessorConsumer this$1 -> this$1
    void <init>(com.facebook.imagepipeline.producers.PostprocessorProducer$RepeatedPostprocessorConsumer,com.facebook.imagepipeline.producers.PostprocessorProducer) -> <init>
    void onCancellationRequested() -> onCancellationRequested
com.facebook.imagepipeline.producers.PostprocessorProducer$SingleUsePostprocessorConsumer -> com.facebook.imagepipeline.producers.PostprocessorProducer$SingleUsePostprocessorConsumer:
    com.facebook.imagepipeline.producers.PostprocessorProducer this$0 -> this$0
    void <init>(com.facebook.imagepipeline.producers.PostprocessorProducer,com.facebook.imagepipeline.producers.PostprocessorProducer$PostprocessorConsumer) -> <init>
    void onNewResultImpl(com.facebook.common.references.CloseableReference,boolean) -> onNewResultImpl
    void onNewResultImpl(java.lang.Object,boolean) -> onNewResultImpl
    void <init>(com.facebook.imagepipeline.producers.PostprocessorProducer,com.facebook.imagepipeline.producers.PostprocessorProducer$PostprocessorConsumer,com.facebook.imagepipeline.producers.PostprocessorProducer$1) -> <init>
com.facebook.imagepipeline.producers.Producer -> com.facebook.imagepipeline.producers.Producer:
    void produceResults(com.facebook.imagepipeline.producers.Consumer,com.facebook.imagepipeline.producers.ProducerContext) -> produceResults
com.facebook.imagepipeline.producers.ProducerConstants -> com.facebook.imagepipeline.producers.ProducerConstants:
    java.lang.String EXTRA_CACHED_VALUE_FOUND -> EXTRA_CACHED_VALUE_FOUND
    java.lang.String EXTRA_BITMAP_SIZE -> EXTRA_BITMAP_SIZE
    java.lang.String EXTRA_HAS_GOOD_QUALITY -> EXTRA_HAS_GOOD_QUALITY
    java.lang.String EXTRA_IMAGE_TYPE -> EXTRA_IMAGE_TYPE
    java.lang.String EXTRA_IS_FINAL -> EXTRA_IS_FINAL
    java.lang.String EXTRA_IMAGE_FORMAT_NAME -> EXTRA_IMAGE_FORMAT_NAME
    java.lang.String ENCODED_IMAGE_SIZE -> ENCODED_IMAGE_SIZE
    java.lang.String REQUESTED_IMAGE_SIZE -> REQUESTED_IMAGE_SIZE
    java.lang.String SAMPLE_SIZE -> SAMPLE_SIZE
    void <init>() -> <init>
com.facebook.imagepipeline.producers.ProducerContext -> com.facebook.imagepipeline.producers.ProducerContext:
    com.facebook.imagepipeline.request.ImageRequest getImageRequest() -> getImageRequest
    java.lang.String getId() -> getId
    com.facebook.imagepipeline.producers.ProducerListener getListener() -> getListener
    java.lang.Object getCallerContext() -> getCallerContext
    com.facebook.imagepipeline.request.ImageRequest$RequestLevel getLowestPermittedRequestLevel() -> getLowestPermittedRequestLevel
    boolean isPrefetch() -> isPrefetch
    com.facebook.imagepipeline.common.Priority getPriority() -> getPriority
    boolean isIntermediateResultExpected() -> isIntermediateResultExpected
    void addCallbacks(com.facebook.imagepipeline.producers.ProducerContextCallbacks) -> addCallbacks
com.facebook.imagepipeline.producers.ProducerContextCallbacks -> com.facebook.imagepipeline.producers.ProducerContextCallbacks:
    void onCancellationRequested() -> onCancellationRequested
    void onIsPrefetchChanged() -> onIsPrefetchChanged
    void onIsIntermediateResultExpectedChanged() -> onIsIntermediateResultExpectedChanged
    void onPriorityChanged() -> onPriorityChanged
com.facebook.imagepipeline.producers.ProducerListener -> com.facebook.imagepipeline.producers.ProducerListener:
    void onProducerStart(java.lang.String,java.lang.String) -> onProducerStart
    void onProducerEvent(java.lang.String,java.lang.String,java.lang.String) -> onProducerEvent
    void onProducerFinishWithSuccess(java.lang.String,java.lang.String,java.util.Map) -> onProducerFinishWithSuccess
    void onProducerFinishWithFailure(java.lang.String,java.lang.String,java.lang.Throwable,java.util.Map) -> onProducerFinishWithFailure
    void onProducerFinishWithCancellation(java.lang.String,java.lang.String,java.util.Map) -> onProducerFinishWithCancellation
    boolean requiresExtraMap(java.lang.String) -> requiresExtraMap
com.facebook.imagepipeline.producers.RemoveImageTransformMetaDataProducer -> com.facebook.imagepipeline.producers.RemoveImageTransformMetaDataProducer:
    com.facebook.imagepipeline.producers.Producer mInputProducer -> mInputProducer
    void <init>(com.facebook.imagepipeline.producers.Producer) -> <init>
    void produceResults(com.facebook.imagepipeline.producers.Consumer,com.facebook.imagepipeline.producers.ProducerContext) -> produceResults
com.facebook.imagepipeline.producers.RemoveImageTransformMetaDataProducer$1 -> com.facebook.imagepipeline.producers.RemoveImageTransformMetaDataProducer$1:
com.facebook.imagepipeline.producers.RemoveImageTransformMetaDataProducer$RemoveImageTransformMetaDataConsumer -> com.facebook.imagepipeline.producers.RemoveImageTransformMetaDataProducer$RemoveImageTransformMetaDataConsumer:
    com.facebook.imagepipeline.producers.RemoveImageTransformMetaDataProducer this$0 -> this$0
    void <init>(com.facebook.imagepipeline.producers.RemoveImageTransformMetaDataProducer,com.facebook.imagepipeline.producers.Consumer) -> <init>
    void onNewResultImpl(com.facebook.imagepipeline.image.EncodedImage,boolean) -> onNewResultImpl
    void onNewResultImpl(java.lang.Object,boolean) -> onNewResultImpl
    void <init>(com.facebook.imagepipeline.producers.RemoveImageTransformMetaDataProducer,com.facebook.imagepipeline.producers.Consumer,com.facebook.imagepipeline.producers.RemoveImageTransformMetaDataProducer$1) -> <init>
com.facebook.imagepipeline.producers.ResizeAndRotateProducer -> com.facebook.imagepipeline.producers.ResizeAndRotateProducer:
    java.lang.String PRODUCER_NAME -> PRODUCER_NAME
    java.lang.String ORIGINAL_SIZE_KEY -> ORIGINAL_SIZE_KEY
    java.lang.String REQUESTED_SIZE_KEY -> REQUESTED_SIZE_KEY
    java.lang.String DOWNSAMPLE_ENUMERATOR_KEY -> DOWNSAMPLE_ENUMERATOR_KEY
    java.lang.String SOFTWARE_ENUMERATOR_KEY -> SOFTWARE_ENUMERATOR_KEY
    java.lang.String ROTATION_ANGLE_KEY -> ROTATION_ANGLE_KEY
    java.lang.String FRACTION_KEY -> FRACTION_KEY
    int FULL_ROUND -> FULL_ROUND
    int DEFAULT_JPEG_QUALITY -> DEFAULT_JPEG_QUALITY
    int MAX_JPEG_SCALE_NUMERATOR -> MAX_JPEG_SCALE_NUMERATOR
    int MIN_TRANSFORM_INTERVAL_MS -> MIN_TRANSFORM_INTERVAL_MS
    java.util.concurrent.Executor mExecutor -> mExecutor
    com.facebook.common.memory.PooledByteBufferFactory mPooledByteBufferFactory -> mPooledByteBufferFactory
    boolean mResizingEnabled -> mResizingEnabled
    com.facebook.imagepipeline.producers.Producer mInputProducer -> mInputProducer
    boolean mUseDownsamplingRatio -> mUseDownsamplingRatio
    void <init>(java.util.concurrent.Executor,com.facebook.common.memory.PooledByteBufferFactory,boolean,com.facebook.imagepipeline.producers.Producer,boolean) -> <init>
    void produceResults(com.facebook.imagepipeline.producers.Consumer,com.facebook.imagepipeline.producers.ProducerContext) -> produceResults
    com.facebook.common.util.TriState shouldTransform(com.facebook.imagepipeline.request.ImageRequest,com.facebook.imagepipeline.image.EncodedImage,boolean) -> shouldTransform
    float determineResizeRatio(com.facebook.imagepipeline.common.ResizeOptions,int,int) -> determineResizeRatio
    int roundNumerator(float,float) -> roundNumerator
    int getSoftwareNumerator(com.facebook.imagepipeline.request.ImageRequest,com.facebook.imagepipeline.image.EncodedImage,boolean) -> getSoftwareNumerator
    int getRotationAngle(com.facebook.imagepipeline.common.RotationOptions,com.facebook.imagepipeline.image.EncodedImage) -> getRotationAngle
    int extractOrientationFromMetadata(com.facebook.imagepipeline.image.EncodedImage) -> extractOrientationFromMetadata
    boolean shouldResize(int) -> shouldResize
    boolean shouldRotate(com.facebook.imagepipeline.common.RotationOptions,com.facebook.imagepipeline.image.EncodedImage) -> shouldRotate
    int calculateDownsampleNumerator(int) -> calculateDownsampleNumerator
    java.util.concurrent.Executor access$100(com.facebook.imagepipeline.producers.ResizeAndRotateProducer) -> access$100
    boolean access$500(com.facebook.imagepipeline.producers.ResizeAndRotateProducer) -> access$500
    com.facebook.common.util.TriState access$600(com.facebook.imagepipeline.request.ImageRequest,com.facebook.imagepipeline.image.EncodedImage,boolean) -> access$600
    com.facebook.common.memory.PooledByteBufferFactory access$700(com.facebook.imagepipeline.producers.ResizeAndRotateProducer) -> access$700
    int access$800(com.facebook.imagepipeline.request.ImageRequest,com.facebook.imagepipeline.image.EncodedImage,boolean) -> access$800
    boolean access$900(com.facebook.imagepipeline.producers.ResizeAndRotateProducer) -> access$900
    int access$1000(com.facebook.imagepipeline.common.RotationOptions,com.facebook.imagepipeline.image.EncodedImage) -> access$1000
com.facebook.imagepipeline.producers.ResizeAndRotateProducer$TransformingConsumer -> com.facebook.imagepipeline.producers.ResizeAndRotateProducer$TransformingConsumer:
    com.facebook.imagepipeline.producers.ProducerContext mProducerContext -> mProducerContext
    boolean mIsCancelled -> mIsCancelled
    com.facebook.imagepipeline.producers.JobScheduler mJobScheduler -> mJobScheduler
    com.facebook.imagepipeline.producers.ResizeAndRotateProducer this$0 -> this$0
    void <init>(com.facebook.imagepipeline.producers.ResizeAndRotateProducer,com.facebook.imagepipeline.producers.Consumer,com.facebook.imagepipeline.producers.ProducerContext) -> <init>
    void onNewResultImpl(com.facebook.imagepipeline.image.EncodedImage,boolean) -> onNewResultImpl
    void doTransform(com.facebook.imagepipeline.image.EncodedImage,boolean) -> doTransform
    java.util.Map getExtraMap(com.facebook.imagepipeline.image.EncodedImage,com.facebook.imagepipeline.request.ImageRequest,int,int,int,int) -> getExtraMap
    void onNewResultImpl(java.lang.Object,boolean) -> onNewResultImpl
    void access$000(com.facebook.imagepipeline.producers.ResizeAndRotateProducer$TransformingConsumer,com.facebook.imagepipeline.image.EncodedImage,boolean) -> access$000
    com.facebook.imagepipeline.producers.ProducerContext access$200(com.facebook.imagepipeline.producers.ResizeAndRotateProducer$TransformingConsumer) -> access$200
    com.facebook.imagepipeline.producers.JobScheduler access$300(com.facebook.imagepipeline.producers.ResizeAndRotateProducer$TransformingConsumer) -> access$300
    boolean access$402(com.facebook.imagepipeline.producers.ResizeAndRotateProducer$TransformingConsumer,boolean) -> access$402
com.facebook.imagepipeline.producers.ResizeAndRotateProducer$TransformingConsumer$1 -> com.facebook.imagepipeline.producers.ResizeAndRotateProducer$TransformingConsumer$1:
    com.facebook.imagepipeline.producers.ResizeAndRotateProducer val$this$0 -> val$this$0
    com.facebook.imagepipeline.producers.ResizeAndRotateProducer$TransformingConsumer this$1 -> this$1
    void <init>(com.facebook.imagepipeline.producers.ResizeAndRotateProducer$TransformingConsumer,com.facebook.imagepipeline.producers.ResizeAndRotateProducer) -> <init>
    void run(com.facebook.imagepipeline.image.EncodedImage,boolean) -> run
com.facebook.imagepipeline.producers.ResizeAndRotateProducer$TransformingConsumer$2 -> com.facebook.imagepipeline.producers.ResizeAndRotateProducer$TransformingConsumer$2:
    com.facebook.imagepipeline.producers.ResizeAndRotateProducer val$this$0 -> val$this$0
    com.facebook.imagepipeline.producers.Consumer val$consumer -> val$consumer
    com.facebook.imagepipeline.producers.ResizeAndRotateProducer$TransformingConsumer this$1 -> this$1
    void <init>(com.facebook.imagepipeline.producers.ResizeAndRotateProducer$TransformingConsumer,com.facebook.imagepipeline.producers.ResizeAndRotateProducer,com.facebook.imagepipeline.producers.Consumer) -> <init>
    void onIsIntermediateResultExpectedChanged() -> onIsIntermediateResultExpectedChanged
    void onCancellationRequested() -> onCancellationRequested
com.facebook.imagepipeline.producers.SettableProducerContext -> com.facebook.imagepipeline.producers.SettableProducerContext:
    void <init>(com.facebook.imagepipeline.request.ImageRequest,java.lang.String,com.facebook.imagepipeline.producers.ProducerListener,java.lang.Object,com.facebook.imagepipeline.request.ImageRequest$RequestLevel,boolean,boolean,com.facebook.imagepipeline.common.Priority) -> <init>
    void setIsPrefetch(boolean) -> setIsPrefetch
    void setIsIntermediateResultExpected(boolean) -> setIsIntermediateResultExpected
    void setPriority(com.facebook.imagepipeline.common.Priority) -> setPriority
com.facebook.imagepipeline.producers.StatefulProducerRunnable -> com.facebook.imagepipeline.producers.StatefulProducerRunnable:
    com.facebook.imagepipeline.producers.Consumer mConsumer -> mConsumer
    com.facebook.imagepipeline.producers.ProducerListener mProducerListener -> mProducerListener
    java.lang.String mProducerName -> mProducerName
    java.lang.String mRequestId -> mRequestId
    void <init>(com.facebook.imagepipeline.producers.Consumer,com.facebook.imagepipeline.producers.ProducerListener,java.lang.String,java.lang.String) -> <init>
    void onSuccess(java.lang.Object) -> onSuccess
    void onFailure(java.lang.Exception) -> onFailure
    void onCancellation() -> onCancellation
    java.util.Map getExtraMapOnSuccess(java.lang.Object) -> getExtraMapOnSuccess
    java.util.Map getExtraMapOnFailure(java.lang.Exception) -> getExtraMapOnFailure
    java.util.Map getExtraMapOnCancellation() -> getExtraMapOnCancellation
    void disposeResult(java.lang.Object) -> disposeResult
com.facebook.imagepipeline.producers.SwallowResultProducer -> com.facebook.imagepipeline.producers.SwallowResultProducer:
    com.facebook.imagepipeline.producers.Producer mInputProducer -> mInputProducer
    void <init>(com.facebook.imagepipeline.producers.Producer) -> <init>
    void produceResults(com.facebook.imagepipeline.producers.Consumer,com.facebook.imagepipeline.producers.ProducerContext) -> produceResults
com.facebook.imagepipeline.producers.SwallowResultProducer$1 -> com.facebook.imagepipeline.producers.SwallowResultProducer$1:
    com.facebook.imagepipeline.producers.SwallowResultProducer this$0 -> this$0
    void <init>(com.facebook.imagepipeline.producers.SwallowResultProducer,com.facebook.imagepipeline.producers.Consumer) -> <init>
    void onNewResultImpl(java.lang.Object,boolean) -> onNewResultImpl
com.facebook.imagepipeline.producers.ThreadHandoffProducer -> com.facebook.imagepipeline.producers.ThreadHandoffProducer:
    java.lang.String PRODUCER_NAME -> PRODUCER_NAME
    com.facebook.imagepipeline.producers.Producer mInputProducer -> mInputProducer
    com.facebook.imagepipeline.producers.ThreadHandoffProducerQueue mThreadHandoffProducerQueue -> mThreadHandoffProducerQueue
    void <init>(com.facebook.imagepipeline.producers.Producer,com.facebook.imagepipeline.producers.ThreadHandoffProducerQueue) -> <init>
    void produceResults(com.facebook.imagepipeline.producers.Consumer,com.facebook.imagepipeline.producers.ProducerContext) -> produceResults
    com.facebook.imagepipeline.producers.Producer access$000(com.facebook.imagepipeline.producers.ThreadHandoffProducer) -> access$000
    com.facebook.imagepipeline.producers.ThreadHandoffProducerQueue access$100(com.facebook.imagepipeline.producers.ThreadHandoffProducer) -> access$100
com.facebook.imagepipeline.producers.ThreadHandoffProducer$1 -> com.facebook.imagepipeline.producers.ThreadHandoffProducer$1:
    com.facebook.imagepipeline.producers.ProducerListener val$producerListener -> val$producerListener
    java.lang.String val$requestId -> val$requestId
    com.facebook.imagepipeline.producers.Consumer val$consumer -> val$consumer
    com.facebook.imagepipeline.producers.ProducerContext val$context -> val$context
    com.facebook.imagepipeline.producers.ThreadHandoffProducer this$0 -> this$0
    void <init>(com.facebook.imagepipeline.producers.ThreadHandoffProducer,com.facebook.imagepipeline.producers.Consumer,com.facebook.imagepipeline.producers.ProducerListener,java.lang.String,java.lang.String,com.facebook.imagepipeline.producers.ProducerListener,java.lang.String,com.facebook.imagepipeline.producers.Consumer,com.facebook.imagepipeline.producers.ProducerContext) -> <init>
    void onSuccess(java.lang.Object) -> onSuccess
    void disposeResult(java.lang.Object) -> disposeResult
    java.lang.Object getResult() -> getResult
com.facebook.imagepipeline.producers.ThreadHandoffProducer$2 -> com.facebook.imagepipeline.producers.ThreadHandoffProducer$2:
    com.facebook.imagepipeline.producers.StatefulProducerRunnable val$statefulRunnable -> val$statefulRunnable
    com.facebook.imagepipeline.producers.ThreadHandoffProducer this$0 -> this$0
    void <init>(com.facebook.imagepipeline.producers.ThreadHandoffProducer,com.facebook.imagepipeline.producers.StatefulProducerRunnable) -> <init>
    void onCancellationRequested() -> onCancellationRequested
com.facebook.imagepipeline.producers.ThreadHandoffProducerQueue -> com.facebook.imagepipeline.producers.ThreadHandoffProducerQueue:
    boolean mQueueing -> mQueueing
    java.util.Deque mRunnableList -> mRunnableList
    java.util.concurrent.Executor mExecutor -> mExecutor
    void <init>(java.util.concurrent.Executor) -> <init>
    void addToQueueOrExecute(java.lang.Runnable) -> addToQueueOrExecute
    void startQueueing() -> startQueueing
    void stopQueuing() -> stopQueuing
    void execInQueue() -> execInQueue
    void remove(java.lang.Runnable) -> remove
    boolean isQueueing() -> isQueueing
com.facebook.imagepipeline.producers.ThrottlingProducer -> com.facebook.imagepipeline.producers.ThrottlingProducer:
    java.lang.String PRODUCER_NAME -> PRODUCER_NAME
    com.facebook.imagepipeline.producers.Producer mInputProducer -> mInputProducer
    int mMaxSimultaneousRequests -> mMaxSimultaneousRequests
    int mNumCurrentRequests -> mNumCurrentRequests
    java.util.concurrent.ConcurrentLinkedQueue mPendingRequests -> mPendingRequests
    java.util.concurrent.Executor mExecutor -> mExecutor
    void <init>(int,java.util.concurrent.Executor,com.facebook.imagepipeline.producers.Producer) -> <init>
    void produceResults(com.facebook.imagepipeline.producers.Consumer,com.facebook.imagepipeline.producers.ProducerContext) -> produceResults
    void produceResultsInternal(com.facebook.imagepipeline.producers.Consumer,com.facebook.imagepipeline.producers.ProducerContext) -> produceResultsInternal
    java.util.concurrent.ConcurrentLinkedQueue access$100(com.facebook.imagepipeline.producers.ThrottlingProducer) -> access$100
    int access$210(com.facebook.imagepipeline.producers.ThrottlingProducer) -> access$210
    java.util.concurrent.Executor access$300(com.facebook.imagepipeline.producers.ThrottlingProducer) -> access$300
com.facebook.imagepipeline.producers.ThrottlingProducer$1 -> com.facebook.imagepipeline.producers.ThrottlingProducer$1:
com.facebook.imagepipeline.producers.ThrottlingProducer$ThrottlerConsumer -> com.facebook.imagepipeline.producers.ThrottlingProducer$ThrottlerConsumer:
    com.facebook.imagepipeline.producers.ThrottlingProducer this$0 -> this$0
    void <init>(com.facebook.imagepipeline.producers.ThrottlingProducer,com.facebook.imagepipeline.producers.Consumer) -> <init>
    void onNewResultImpl(java.lang.Object,boolean) -> onNewResultImpl
    void onFailureImpl(java.lang.Throwable) -> onFailureImpl
    void onCancellationImpl() -> onCancellationImpl
    void onRequestFinished() -> onRequestFinished
    void <init>(com.facebook.imagepipeline.producers.ThrottlingProducer,com.facebook.imagepipeline.producers.Consumer,com.facebook.imagepipeline.producers.ThrottlingProducer$1) -> <init>
com.facebook.imagepipeline.producers.ThrottlingProducer$ThrottlerConsumer$1 -> com.facebook.imagepipeline.producers.ThrottlingProducer$ThrottlerConsumer$1:
    android.util.Pair val$nextRequestPair -> val$nextRequestPair
    com.facebook.imagepipeline.producers.ThrottlingProducer$ThrottlerConsumer this$1 -> this$1
    void <init>(com.facebook.imagepipeline.producers.ThrottlingProducer$ThrottlerConsumer,android.util.Pair) -> <init>
    void run() -> run
com.facebook.imagepipeline.producers.ThumbnailBranchProducer -> com.facebook.imagepipeline.producers.ThumbnailBranchProducer:
    com.facebook.imagepipeline.producers.ThumbnailProducer[] mThumbnailProducers -> mThumbnailProducers
    void <init>(com.facebook.imagepipeline.producers.ThumbnailProducer[]) -> <init>
    void produceResults(com.facebook.imagepipeline.producers.Consumer,com.facebook.imagepipeline.producers.ProducerContext) -> produceResults
    boolean produceResultsFromThumbnailProducer(int,com.facebook.imagepipeline.producers.Consumer,com.facebook.imagepipeline.producers.ProducerContext) -> produceResultsFromThumbnailProducer
    int findFirstProducerForSize(int,com.facebook.imagepipeline.common.ResizeOptions) -> findFirstProducerForSize
    boolean access$000(com.facebook.imagepipeline.producers.ThumbnailBranchProducer,int,com.facebook.imagepipeline.producers.Consumer,com.facebook.imagepipeline.producers.ProducerContext) -> access$000
com.facebook.imagepipeline.producers.ThumbnailBranchProducer$ThumbnailConsumer -> com.facebook.imagepipeline.producers.ThumbnailBranchProducer$ThumbnailConsumer:
    com.facebook.imagepipeline.producers.ProducerContext mProducerContext -> mProducerContext
    int mProducerIndex -> mProducerIndex
    com.facebook.imagepipeline.common.ResizeOptions mResizeOptions -> mResizeOptions
    com.facebook.imagepipeline.producers.ThumbnailBranchProducer this$0 -> this$0
    void <init>(com.facebook.imagepipeline.producers.ThumbnailBranchProducer,com.facebook.imagepipeline.producers.Consumer,com.facebook.imagepipeline.producers.ProducerContext,int) -> <init>
    void onNewResultImpl(com.facebook.imagepipeline.image.EncodedImage,boolean) -> onNewResultImpl
    void onFailureImpl(java.lang.Throwable) -> onFailureImpl
    void onNewResultImpl(java.lang.Object,boolean) -> onNewResultImpl
com.facebook.imagepipeline.producers.ThumbnailProducer -> com.facebook.imagepipeline.producers.ThumbnailProducer:
    boolean canProvideImageForSize(com.facebook.imagepipeline.common.ResizeOptions) -> canProvideImageForSize
com.facebook.imagepipeline.producers.ThumbnailSizeChecker -> com.facebook.imagepipeline.producers.ThumbnailSizeChecker:
    float ACCEPTABLE_REQUESTED_TO_ACTUAL_SIZE_RATIO -> ACCEPTABLE_REQUESTED_TO_ACTUAL_SIZE_RATIO
    int ROTATED_90_DEGREES_CLOCKWISE -> ROTATED_90_DEGREES_CLOCKWISE
    int ROTATED_90_DEGREES_COUNTER_CLOCKWISE -> ROTATED_90_DEGREES_COUNTER_CLOCKWISE
    void <init>() -> <init>
    boolean isImageBigEnough(int,int,com.facebook.imagepipeline.common.ResizeOptions) -> isImageBigEnough
    boolean isImageBigEnough(com.facebook.imagepipeline.image.EncodedImage,com.facebook.imagepipeline.common.ResizeOptions) -> isImageBigEnough
    int getAcceptableSize(int) -> getAcceptableSize
com.facebook.imagepipeline.producers.WebpTranscodeProducer -> com.facebook.imagepipeline.producers.WebpTranscodeProducer:
    java.lang.String PRODUCER_NAME -> PRODUCER_NAME
    int DEFAULT_JPEG_QUALITY -> DEFAULT_JPEG_QUALITY
    java.util.concurrent.Executor mExecutor -> mExecutor
    com.facebook.common.memory.PooledByteBufferFactory mPooledByteBufferFactory -> mPooledByteBufferFactory
    com.facebook.imagepipeline.producers.Producer mInputProducer -> mInputProducer
    void <init>(java.util.concurrent.Executor,com.facebook.common.memory.PooledByteBufferFactory,com.facebook.imagepipeline.producers.Producer) -> <init>
    void produceResults(com.facebook.imagepipeline.producers.Consumer,com.facebook.imagepipeline.producers.ProducerContext) -> produceResults
    void transcodeLastResult(com.facebook.imagepipeline.image.EncodedImage,com.facebook.imagepipeline.producers.Consumer,com.facebook.imagepipeline.producers.ProducerContext) -> transcodeLastResult
    com.facebook.common.util.TriState shouldTranscode(com.facebook.imagepipeline.image.EncodedImage) -> shouldTranscode
    void doTranscode(com.facebook.imagepipeline.image.EncodedImage,com.facebook.common.memory.PooledByteBufferOutputStream) -> doTranscode
    com.facebook.common.util.TriState access$000(com.facebook.imagepipeline.image.EncodedImage) -> access$000
    void access$100(com.facebook.imagepipeline.producers.WebpTranscodeProducer,com.facebook.imagepipeline.image.EncodedImage,com.facebook.imagepipeline.producers.Consumer,com.facebook.imagepipeline.producers.ProducerContext) -> access$100
    com.facebook.common.memory.PooledByteBufferFactory access$200(com.facebook.imagepipeline.producers.WebpTranscodeProducer) -> access$200
    void access$300(com.facebook.imagepipeline.image.EncodedImage,com.facebook.common.memory.PooledByteBufferOutputStream) -> access$300
com.facebook.imagepipeline.producers.WebpTranscodeProducer$1 -> com.facebook.imagepipeline.producers.WebpTranscodeProducer$1:
    com.facebook.imagepipeline.image.EncodedImage val$encodedImageCopy -> val$encodedImageCopy
    com.facebook.imagepipeline.producers.WebpTranscodeProducer this$0 -> this$0
    void <init>(com.facebook.imagepipeline.producers.WebpTranscodeProducer,com.facebook.imagepipeline.producers.Consumer,com.facebook.imagepipeline.producers.ProducerListener,java.lang.String,java.lang.String,com.facebook.imagepipeline.image.EncodedImage) -> <init>
    com.facebook.imagepipeline.image.EncodedImage getResult() -> getResult
    void disposeResult(com.facebook.imagepipeline.image.EncodedImage) -> disposeResult
    void onSuccess(com.facebook.imagepipeline.image.EncodedImage) -> onSuccess
    void onFailure(java.lang.Exception) -> onFailure
    void onCancellation() -> onCancellation
    void disposeResult(java.lang.Object) -> disposeResult
    void onSuccess(java.lang.Object) -> onSuccess
    java.lang.Object getResult() -> getResult
com.facebook.imagepipeline.producers.WebpTranscodeProducer$WebpTranscodeConsumer -> com.facebook.imagepipeline.producers.WebpTranscodeProducer$WebpTranscodeConsumer:
    com.facebook.imagepipeline.producers.ProducerContext mContext -> mContext
    com.facebook.common.util.TriState mShouldTranscodeWhenFinished -> mShouldTranscodeWhenFinished
    com.facebook.imagepipeline.producers.WebpTranscodeProducer this$0 -> this$0
    void <init>(com.facebook.imagepipeline.producers.WebpTranscodeProducer,com.facebook.imagepipeline.producers.Consumer,com.facebook.imagepipeline.producers.ProducerContext) -> <init>
    void onNewResultImpl(com.facebook.imagepipeline.image.EncodedImage,boolean) -> onNewResultImpl
    void onNewResultImpl(java.lang.Object,boolean) -> onNewResultImpl
com.facebook.imagepipeline.request.BasePostprocessor -> com.facebook.imagepipeline.request.BasePostprocessor:
    android.graphics.Bitmap$Config FALLBACK_BITMAP_CONFIGURATION -> FALLBACK_BITMAP_CONFIGURATION
    void <init>() -> <init>
    java.lang.String getName() -> getName
    com.facebook.common.references.CloseableReference process(android.graphics.Bitmap,com.facebook.imagepipeline.bitmaps.PlatformBitmapFactory) -> process
    void process(android.graphics.Bitmap,android.graphics.Bitmap) -> process
    void process(android.graphics.Bitmap) -> process
    com.facebook.cache.common.CacheKey getPostprocessorCacheKey() -> getPostprocessorCacheKey
    void internalCopyBitmap(android.graphics.Bitmap,android.graphics.Bitmap) -> internalCopyBitmap
    void <clinit>() -> <clinit>
com.facebook.imagepipeline.request.BaseRepeatedPostProcessor -> com.facebook.imagepipeline.request.BaseRepeatedPostProcessor:
    com.facebook.imagepipeline.request.RepeatedPostprocessorRunner mCallback -> mCallback
    void <init>() -> <init>
    void setCallback(com.facebook.imagepipeline.request.RepeatedPostprocessorRunner) -> setCallback
    com.facebook.imagepipeline.request.RepeatedPostprocessorRunner getCallback() -> getCallback
    void update() -> update
com.facebook.imagepipeline.request.ImageRequest -> com.facebook.imagepipeline.request.ImageRequest:
    com.facebook.imagepipeline.request.ImageRequest$CacheChoice mCacheChoice -> mCacheChoice
    android.net.Uri mSourceUri -> mSourceUri
    int mSourceUriType -> mSourceUriType
    com.facebook.imagepipeline.request.MediaVariations mMediaVariations -> mMediaVariations
    java.io.File mSourceFile -> mSourceFile
    boolean mProgressiveRenderingEnabled -> mProgressiveRenderingEnabled
    boolean mLocalThumbnailPreviewsEnabled -> mLocalThumbnailPreviewsEnabled
    com.facebook.imagepipeline.common.ImageDecodeOptions mImageDecodeOptions -> mImageDecodeOptions
    java.lang.ref.SoftReference mCallerViewContext -> mCallerViewContext
    com.facebook.imagepipeline.common.ResizeOptions mResizeOptions -> mResizeOptions
    com.facebook.imagepipeline.common.RotationOptions mRotationOptions -> mRotationOptions
    com.facebook.imagepipeline.common.Priority mRequestPriority -> mRequestPriority
    com.facebook.imagepipeline.request.ImageRequest$RequestLevel mLowestPermittedRequestLevel -> mLowestPermittedRequestLevel
    boolean mIsDiskCacheEnabled -> mIsDiskCacheEnabled
    com.facebook.imagepipeline.request.Postprocessor mPostprocessor -> mPostprocessor
    com.facebook.imagepipeline.listener.RequestListener mRequestListener -> mRequestListener
    com.facebook.imagepipeline.request.ImageRequest fromFile(java.io.File) -> fromFile
    com.facebook.imagepipeline.request.ImageRequest fromUri(android.net.Uri) -> fromUri
    com.facebook.imagepipeline.request.ImageRequest fromUri(java.lang.String) -> fromUri
    void <init>(com.facebook.imagepipeline.request.ImageRequestBuilder) -> <init>
    com.facebook.imagepipeline.request.ImageRequest$CacheChoice getCacheChoice() -> getCacheChoice
    android.net.Uri getSourceUri() -> getSourceUri
    int getSourceUriType() -> getSourceUriType
    com.facebook.imagepipeline.request.MediaVariations getMediaVariations() -> getMediaVariations
    int getPreferredWidth() -> getPreferredWidth
    int getPreferredHeight() -> getPreferredHeight
    com.facebook.imagepipeline.common.ResizeOptions getResizeOptions() -> getResizeOptions
    com.facebook.imagepipeline.common.RotationOptions getRotationOptions() -> getRotationOptions
    boolean getAutoRotateEnabled() -> getAutoRotateEnabled
    com.facebook.imagepipeline.common.ImageDecodeOptions getImageDecodeOptions() -> getImageDecodeOptions
    boolean getProgressiveRenderingEnabled() -> getProgressiveRenderingEnabled
    boolean getLocalThumbnailPreviewsEnabled() -> getLocalThumbnailPreviewsEnabled
    com.facebook.imagepipeline.common.Priority getPriority() -> getPriority
    com.facebook.imagepipeline.request.ImageRequest$RequestLevel getLowestPermittedRequestLevel() -> getLowestPermittedRequestLevel
    boolean isDiskCacheEnabled() -> isDiskCacheEnabled
    java.io.File getSourceFile() -> getSourceFile
    android.content.Context getCallerViewContext() -> getCallerViewContext
    com.facebook.imagepipeline.request.Postprocessor getPostprocessor() -> getPostprocessor
    com.facebook.imagepipeline.listener.RequestListener getRequestListener() -> getRequestListener
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    int getSourceUriType(android.net.Uri) -> getSourceUriType
com.facebook.imagepipeline.request.ImageRequest$CacheChoice -> com.facebook.imagepipeline.request.ImageRequest$CacheChoice:
    com.facebook.imagepipeline.request.ImageRequest$CacheChoice SMALL -> SMALL
    com.facebook.imagepipeline.request.ImageRequest$CacheChoice DEFAULT -> DEFAULT
    com.facebook.imagepipeline.request.ImageRequest$CacheChoice[] $VALUES -> $VALUES
    com.facebook.imagepipeline.request.ImageRequest$CacheChoice[] values() -> values
    com.facebook.imagepipeline.request.ImageRequest$CacheChoice valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.facebook.imagepipeline.request.ImageRequest$RequestLevel -> com.facebook.imagepipeline.request.ImageRequest$RequestLevel:
    com.facebook.imagepipeline.request.ImageRequest$RequestLevel FULL_FETCH -> FULL_FETCH
    com.facebook.imagepipeline.request.ImageRequest$RequestLevel DISK_CACHE -> DISK_CACHE
    com.facebook.imagepipeline.request.ImageRequest$RequestLevel ENCODED_MEMORY_CACHE -> ENCODED_MEMORY_CACHE
    com.facebook.imagepipeline.request.ImageRequest$RequestLevel BITMAP_MEMORY_CACHE -> BITMAP_MEMORY_CACHE
    int mValue -> mValue
    com.facebook.imagepipeline.request.ImageRequest$RequestLevel[] $VALUES -> $VALUES
    com.facebook.imagepipeline.request.ImageRequest$RequestLevel[] values() -> values
    com.facebook.imagepipeline.request.ImageRequest$RequestLevel valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,int) -> <init>
    int getValue() -> getValue
    com.facebook.imagepipeline.request.ImageRequest$RequestLevel getMax(com.facebook.imagepipeline.request.ImageRequest$RequestLevel,com.facebook.imagepipeline.request.ImageRequest$RequestLevel) -> getMax
    void <clinit>() -> <clinit>
com.facebook.imagepipeline.request.ImageRequestBuilder -> com.facebook.imagepipeline.request.ImageRequestBuilder:
    android.net.Uri mSourceUri -> mSourceUri
    com.facebook.imagepipeline.request.ImageRequest$RequestLevel mLowestPermittedRequestLevel -> mLowestPermittedRequestLevel
    com.facebook.imagepipeline.common.ResizeOptions mResizeOptions -> mResizeOptions
    com.facebook.imagepipeline.common.RotationOptions mRotationOptions -> mRotationOptions
    com.facebook.imagepipeline.common.ImageDecodeOptions mImageDecodeOptions -> mImageDecodeOptions
    com.facebook.imagepipeline.request.ImageRequest$CacheChoice mCacheChoice -> mCacheChoice
    boolean mProgressiveRenderingEnabled -> mProgressiveRenderingEnabled
    boolean mLocalThumbnailPreviewsEnabled -> mLocalThumbnailPreviewsEnabled
    com.facebook.imagepipeline.common.Priority mRequestPriority -> mRequestPriority
    com.facebook.imagepipeline.request.Postprocessor mPostprocessor -> mPostprocessor
    boolean mDiskCacheEnabled -> mDiskCacheEnabled
    com.facebook.imagepipeline.listener.RequestListener mRequestListener -> mRequestListener
    com.facebook.imagepipeline.request.MediaVariations mMediaVariations -> mMediaVariations
    java.lang.ref.SoftReference mCallerViewContext -> mCallerViewContext
    com.facebook.imagepipeline.request.ImageRequestBuilder newBuilderWithSource(android.net.Uri) -> newBuilderWithSource
    com.facebook.imagepipeline.request.ImageRequestBuilder newBuilderWithResourceId(int) -> newBuilderWithResourceId
    com.facebook.imagepipeline.request.ImageRequestBuilder fromRequest(com.facebook.imagepipeline.request.ImageRequest) -> fromRequest
    void <init>() -> <init>
    com.facebook.imagepipeline.request.ImageRequestBuilder setSource(android.net.Uri) -> setSource
    android.net.Uri getSourceUri() -> getSourceUri
    com.facebook.imagepipeline.request.ImageRequestBuilder setMediaVariations(com.facebook.imagepipeline.request.MediaVariations) -> setMediaVariations
    com.facebook.imagepipeline.request.ImageRequestBuilder setMediaVariationsForMediaId(java.lang.String) -> setMediaVariationsForMediaId
    com.facebook.imagepipeline.request.MediaVariations getMediaVariations() -> getMediaVariations
    com.facebook.imagepipeline.request.ImageRequestBuilder setLowestPermittedRequestLevel(com.facebook.imagepipeline.request.ImageRequest$RequestLevel) -> setLowestPermittedRequestLevel
    com.facebook.imagepipeline.request.ImageRequest$RequestLevel getLowestPermittedRequestLevel() -> getLowestPermittedRequestLevel
    com.facebook.imagepipeline.request.ImageRequestBuilder setAutoRotateEnabled(boolean) -> setAutoRotateEnabled
    com.facebook.imagepipeline.request.ImageRequestBuilder setResizeOptions(com.facebook.imagepipeline.common.ResizeOptions) -> setResizeOptions
    com.facebook.imagepipeline.common.ResizeOptions getResizeOptions() -> getResizeOptions
    com.facebook.imagepipeline.request.ImageRequestBuilder setRotationOptions(com.facebook.imagepipeline.common.RotationOptions) -> setRotationOptions
    com.facebook.imagepipeline.common.RotationOptions getRotationOptions() -> getRotationOptions
    com.facebook.imagepipeline.request.ImageRequestBuilder setImageDecodeOptions(com.facebook.imagepipeline.common.ImageDecodeOptions) -> setImageDecodeOptions
    com.facebook.imagepipeline.common.ImageDecodeOptions getImageDecodeOptions() -> getImageDecodeOptions
    com.facebook.imagepipeline.request.ImageRequestBuilder setCacheChoice(com.facebook.imagepipeline.request.ImageRequest$CacheChoice) -> setCacheChoice
    com.facebook.imagepipeline.request.ImageRequest$CacheChoice getCacheChoice() -> getCacheChoice
    com.facebook.imagepipeline.request.ImageRequestBuilder setProgressiveRenderingEnabled(boolean) -> setProgressiveRenderingEnabled
    boolean isProgressiveRenderingEnabled() -> isProgressiveRenderingEnabled
    com.facebook.imagepipeline.request.ImageRequestBuilder setLocalThumbnailPreviewsEnabled(boolean) -> setLocalThumbnailPreviewsEnabled
    boolean isLocalThumbnailPreviewsEnabled() -> isLocalThumbnailPreviewsEnabled
    com.facebook.imagepipeline.request.ImageRequestBuilder disableDiskCache() -> disableDiskCache
    boolean isDiskCacheEnabled() -> isDiskCacheEnabled
    com.facebook.imagepipeline.request.ImageRequestBuilder setRequestPriority(com.facebook.imagepipeline.common.Priority) -> setRequestPriority
    com.facebook.imagepipeline.common.Priority getRequestPriority() -> getRequestPriority
    com.facebook.imagepipeline.request.ImageRequestBuilder setPostprocessor(com.facebook.imagepipeline.request.Postprocessor) -> setPostprocessor
    com.facebook.imagepipeline.request.Postprocessor getPostprocessor() -> getPostprocessor
    com.facebook.imagepipeline.request.ImageRequestBuilder setRequestListener(com.facebook.imagepipeline.listener.RequestListener) -> setRequestListener
    com.facebook.imagepipeline.listener.RequestListener getRequestListener() -> getRequestListener
    com.facebook.imagepipeline.request.ImageRequestBuilder setCallerViewContext(java.lang.ref.SoftReference) -> setCallerViewContext
    com.facebook.imagepipeline.request.ImageRequestBuilder setCallerViewContext(android.content.Context) -> setCallerViewContext
    java.lang.ref.SoftReference getCallerViewContext() -> getCallerViewContext
    com.facebook.imagepipeline.request.ImageRequest build() -> build
    void validate() -> validate
com.facebook.imagepipeline.request.ImageRequestBuilder$BuilderException -> com.facebook.imagepipeline.request.ImageRequestBuilder$BuilderException:
    void <init>(java.lang.String) -> <init>
com.facebook.imagepipeline.request.MediaVariations -> com.facebook.imagepipeline.request.MediaVariations:
    java.lang.String SOURCE_IMAGE_REQUEST -> SOURCE_IMAGE_REQUEST
    java.lang.String SOURCE_INDEX_DB -> SOURCE_INDEX_DB
    java.lang.String SOURCE_ID_EXTRACTOR -> SOURCE_ID_EXTRACTOR
    java.lang.String mMediaId -> mMediaId
    java.util.List mVariants -> mVariants
    boolean mForceRequestForSpecifiedUri -> mForceRequestForSpecifiedUri
    java.lang.String mSource -> mSource
    void <init>(com.facebook.imagepipeline.request.MediaVariations$Builder) -> <init>
    java.lang.String getMediaId() -> getMediaId
    int getVariantsCount() -> getVariantsCount
    com.facebook.imagepipeline.request.MediaVariations$Variant getVariant(int) -> getVariant
    java.util.List getSortedVariants(java.util.Comparator) -> getSortedVariants
    boolean shouldForceRequestForSpecifiedUri() -> shouldForceRequestForSpecifiedUri
    java.lang.String getSource() -> getSource
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    com.facebook.imagepipeline.request.MediaVariations forMediaId(java.lang.String) -> forMediaId
    com.facebook.imagepipeline.request.MediaVariations$Builder newBuilderForMediaId(java.lang.String) -> newBuilderForMediaId
    void <init>(com.facebook.imagepipeline.request.MediaVariations$Builder,com.facebook.imagepipeline.request.MediaVariations$1) -> <init>
com.facebook.imagepipeline.request.MediaVariations$1 -> com.facebook.imagepipeline.request.MediaVariations$1:
com.facebook.imagepipeline.request.MediaVariations$Builder -> com.facebook.imagepipeline.request.MediaVariations$Builder:
    java.lang.String mMediaId -> mMediaId
    java.util.List mVariants -> mVariants
    boolean mForceRequestForSpecifiedUri -> mForceRequestForSpecifiedUri
    java.lang.String mSource -> mSource
    void <init>(java.lang.String) -> <init>
    com.facebook.imagepipeline.request.MediaVariations$Builder addVariant(android.net.Uri,int,int) -> addVariant
    com.facebook.imagepipeline.request.MediaVariations$Builder addVariant(android.net.Uri,int,int,com.facebook.imagepipeline.request.ImageRequest$CacheChoice) -> addVariant
    com.facebook.imagepipeline.request.MediaVariations$Builder setForceRequestForSpecifiedUri(boolean) -> setForceRequestForSpecifiedUri
    com.facebook.imagepipeline.request.MediaVariations$Builder setSource(java.lang.String) -> setSource
    com.facebook.imagepipeline.request.MediaVariations build() -> build
    java.lang.String access$000(com.facebook.imagepipeline.request.MediaVariations$Builder) -> access$000
    java.util.List access$100(com.facebook.imagepipeline.request.MediaVariations$Builder) -> access$100
    boolean access$200(com.facebook.imagepipeline.request.MediaVariations$Builder) -> access$200
    java.lang.String access$300(com.facebook.imagepipeline.request.MediaVariations$Builder) -> access$300
    void <init>(java.lang.String,com.facebook.imagepipeline.request.MediaVariations$1) -> <init>
com.facebook.imagepipeline.request.MediaVariations$Source -> com.facebook.imagepipeline.request.MediaVariations$Source:
com.facebook.imagepipeline.request.MediaVariations$Variant -> com.facebook.imagepipeline.request.MediaVariations$Variant:
    android.net.Uri mUri -> mUri
    int mWidth -> mWidth
    int mHeight -> mHeight
    com.facebook.imagepipeline.request.ImageRequest$CacheChoice mCacheChoice -> mCacheChoice
    void <init>(android.net.Uri,int,int) -> <init>
    void <init>(android.net.Uri,int,int,com.facebook.imagepipeline.request.ImageRequest$CacheChoice) -> <init>
    android.net.Uri getUri() -> getUri
    int getWidth() -> getWidth
    int getHeight() -> getHeight
    com.facebook.imagepipeline.request.ImageRequest$CacheChoice getCacheChoice() -> getCacheChoice
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
com.facebook.imagepipeline.request.Postprocessor -> com.facebook.imagepipeline.request.Postprocessor:
    com.facebook.common.references.CloseableReference process(android.graphics.Bitmap,com.facebook.imagepipeline.bitmaps.PlatformBitmapFactory) -> process
    java.lang.String getName() -> getName
    com.facebook.cache.common.CacheKey getPostprocessorCacheKey() -> getPostprocessorCacheKey
com.facebook.imagepipeline.request.RepeatedPostprocessor -> com.facebook.imagepipeline.request.RepeatedPostprocessor:
    void setCallback(com.facebook.imagepipeline.request.RepeatedPostprocessorRunner) -> setCallback
com.facebook.imagepipeline.request.RepeatedPostprocessorRunner -> com.facebook.imagepipeline.request.RepeatedPostprocessorRunner:
    void update() -> update
com.facebook.imageutils.BitmapUtil -> com.facebook.imageutils.BitmapUtil:
    int DECODE_BUFFER_SIZE -> DECODE_BUFFER_SIZE
    int POOL_SIZE -> POOL_SIZE
    android.support.v4.util.Pools$SynchronizedPool DECODE_BUFFERS -> DECODE_BUFFERS
    int ALPHA_8_BYTES_PER_PIXEL -> ALPHA_8_BYTES_PER_PIXEL
    int ARGB_4444_BYTES_PER_PIXEL -> ARGB_4444_BYTES_PER_PIXEL
    int ARGB_8888_BYTES_PER_PIXEL -> ARGB_8888_BYTES_PER_PIXEL
    int RGB_565_BYTES_PER_PIXEL -> RGB_565_BYTES_PER_PIXEL
    float MAX_BITMAP_SIZE -> MAX_BITMAP_SIZE
    void <init>() -> <init>
    int getSizeInBytes(android.graphics.Bitmap) -> getSizeInBytes
    android.util.Pair decodeDimensions(byte[]) -> decodeDimensions
    android.util.Pair decodeDimensions(java.io.InputStream) -> decodeDimensions
    int getPixelSizeForBitmapConfig(android.graphics.Bitmap$Config) -> getPixelSizeForBitmapConfig
    int getSizeInByteForBitmap(int,int,android.graphics.Bitmap$Config) -> getSizeInByteForBitmap
    void <clinit>() -> <clinit>
com.facebook.imageutils.BitmapUtil$1 -> com.facebook.imageutils.BitmapUtil$1:
    int[] $SwitchMap$android$graphics$Bitmap$Config -> $SwitchMap$android$graphics$Bitmap$Config
    void <clinit>() -> <clinit>
com.facebook.imageutils.JfifUtil -> com.facebook.imageutils.JfifUtil:
    int MARKER_FIRST_BYTE -> MARKER_FIRST_BYTE
    int MARKER_ESCAPE_BYTE -> MARKER_ESCAPE_BYTE
    int MARKER_SOI -> MARKER_SOI
    int MARKER_TEM -> MARKER_TEM
    int MARKER_EOI -> MARKER_EOI
    int MARKER_SOS -> MARKER_SOS
    int MARKER_APP1 -> MARKER_APP1
    int MARKER_SOFn -> MARKER_SOFn
    int MARKER_RST0 -> MARKER_RST0
    int MARKER_RST7 -> MARKER_RST7
    int APP1_EXIF_MAGIC -> APP1_EXIF_MAGIC
    void <init>() -> <init>
    int getAutoRotateAngleFromOrientation(int) -> getAutoRotateAngleFromOrientation
    int getOrientation(byte[]) -> getOrientation
    int getOrientation(java.io.InputStream) -> getOrientation
    boolean moveToMarker(java.io.InputStream,int) -> moveToMarker
    boolean isSOFn(int) -> isSOFn
    int moveToAPP1EXIF(java.io.InputStream) -> moveToAPP1EXIF
com.facebook.imageutils.StreamProcessor -> com.facebook.imageutils.StreamProcessor:
    void <init>() -> <init>
    int readPackedInt(java.io.InputStream,int,boolean) -> readPackedInt
com.facebook.imageutils.TiffUtil -> com.facebook.imageutils.TiffUtil:
    java.lang.Class TAG -> TAG
    int TIFF_BYTE_ORDER_BIG_END -> TIFF_BYTE_ORDER_BIG_END
    int TIFF_BYTE_ORDER_LITTLE_END -> TIFF_BYTE_ORDER_LITTLE_END
    int TIFF_TAG_ORIENTATION -> TIFF_TAG_ORIENTATION
    int TIFF_TYPE_SHORT -> TIFF_TYPE_SHORT
    void <init>() -> <init>
    int getAutoRotateAngleFromOrientation(int) -> getAutoRotateAngleFromOrientation
    int readOrientationFromTIFF(java.io.InputStream,int) -> readOrientationFromTIFF
    int readTiffHeader(java.io.InputStream,int,com.facebook.imageutils.TiffUtil$TiffHeader) -> readTiffHeader
    int moveToTiffEntryWithTag(java.io.InputStream,int,boolean,int) -> moveToTiffEntryWithTag
    int getOrientationFromTiffEntry(java.io.InputStream,int,boolean) -> getOrientationFromTiffEntry
    void <clinit>() -> <clinit>
com.facebook.imageutils.TiffUtil$1 -> com.facebook.imageutils.TiffUtil$1:
com.facebook.imageutils.TiffUtil$TiffHeader -> com.facebook.imageutils.TiffUtil$TiffHeader:
    boolean isLittleEndian -> isLittleEndian
    int byteOrder -> byteOrder
    int firstIfdOffset -> firstIfdOffset
    void <init>() -> <init>
    void <init>(com.facebook.imageutils.TiffUtil$1) -> <init>
com.facebook.imageutils.WebpUtil -> com.facebook.imageutils.WebpUtil:
    java.lang.String VP8_HEADER -> VP8_HEADER
    java.lang.String VP8L_HEADER -> VP8L_HEADER
    java.lang.String VP8X_HEADER -> VP8X_HEADER
    void <init>() -> <init>
    android.util.Pair getSize(java.io.InputStream) -> getSize
    android.util.Pair getVP8Dimension(java.io.InputStream) -> getVP8Dimension
    android.util.Pair getVP8LDimension(java.io.InputStream) -> getVP8LDimension
    android.util.Pair getVP8XDimension(java.io.InputStream) -> getVP8XDimension
    boolean compare(byte[],java.lang.String) -> compare
    java.lang.String getHeader(byte[]) -> getHeader
    int getInt(java.io.InputStream) -> getInt
    int get2BytesAsInt(java.io.InputStream) -> get2BytesAsInt
    int read3Bytes(java.io.InputStream) -> read3Bytes
    short getShort(java.io.InputStream) -> getShort
    byte getByte(java.io.InputStream) -> getByte
    boolean isBitOne(byte,int) -> isBitOne
com.facebook.webpsupport.WebpBitmapFactoryImpl -> com.facebook.webpsupport.WebpBitmapFactoryImpl:
    int HEADER_SIZE -> HEADER_SIZE
    int IN_TEMP_BUFFER_SIZE -> IN_TEMP_BUFFER_SIZE
    boolean IN_BITMAP_SUPPORTED -> IN_BITMAP_SUPPORTED
    com.facebook.common.webp.WebpBitmapFactory$WebpErrorLogger mWebpErrorLogger -> mWebpErrorLogger
    com.facebook.common.webp.BitmapCreator mBitmapCreator -> mBitmapCreator
    void <init>() -> <init>
    void setBitmapCreator(com.facebook.common.webp.BitmapCreator) -> setBitmapCreator
    java.io.InputStream wrapToMarkSupportedStream(java.io.InputStream) -> wrapToMarkSupportedStream
    byte[] getWebpHeader(java.io.InputStream,android.graphics.BitmapFactory$Options) -> getWebpHeader
    void setDensityFromOptions(android.graphics.Bitmap,android.graphics.BitmapFactory$Options) -> setDensityFromOptions
    void setWebpErrorLogger(com.facebook.common.webp.WebpBitmapFactory$WebpErrorLogger) -> setWebpErrorLogger
    android.graphics.Bitmap decodeFileDescriptor(java.io.FileDescriptor,android.graphics.Rect,android.graphics.BitmapFactory$Options) -> decodeFileDescriptor
    android.graphics.Bitmap decodeStream(java.io.InputStream,android.graphics.Rect,android.graphics.BitmapFactory$Options) -> decodeStream
    android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options) -> decodeFile
    android.graphics.Bitmap decodeByteArray(byte[],int,int,android.graphics.BitmapFactory$Options) -> decodeByteArray
    android.graphics.Bitmap hookDecodeByteArray(byte[],int,int,android.graphics.BitmapFactory$Options) -> hookDecodeByteArray
    android.graphics.Bitmap originalDecodeByteArray(byte[],int,int,android.graphics.BitmapFactory$Options) -> originalDecodeByteArray
    android.graphics.Bitmap hookDecodeByteArray(byte[],int,int) -> hookDecodeByteArray
    android.graphics.Bitmap originalDecodeByteArray(byte[],int,int) -> originalDecodeByteArray
    android.graphics.Bitmap hookDecodeStream(java.io.InputStream,android.graphics.Rect,android.graphics.BitmapFactory$Options) -> hookDecodeStream
    android.graphics.Bitmap originalDecodeStream(java.io.InputStream,android.graphics.Rect,android.graphics.BitmapFactory$Options) -> originalDecodeStream
    android.graphics.Bitmap hookDecodeStream(java.io.InputStream) -> hookDecodeStream
    android.graphics.Bitmap originalDecodeStream(java.io.InputStream) -> originalDecodeStream
    android.graphics.Bitmap hookDecodeFile(java.lang.String,android.graphics.BitmapFactory$Options) -> hookDecodeFile
    android.graphics.Bitmap hookDecodeFile(java.lang.String) -> hookDecodeFile
    android.graphics.Bitmap hookDecodeResourceStream(android.content.res.Resources,android.util.TypedValue,java.io.InputStream,android.graphics.Rect,android.graphics.BitmapFactory$Options) -> hookDecodeResourceStream
    android.graphics.Bitmap originalDecodeResourceStream(android.content.res.Resources,android.util.TypedValue,java.io.InputStream,android.graphics.Rect,android.graphics.BitmapFactory$Options) -> originalDecodeResourceStream
    android.graphics.Bitmap hookDecodeResource(android.content.res.Resources,int,android.graphics.BitmapFactory$Options) -> hookDecodeResource
    android.graphics.Bitmap originalDecodeResource(android.content.res.Resources,int,android.graphics.BitmapFactory$Options) -> originalDecodeResource
    android.graphics.Bitmap hookDecodeResource(android.content.res.Resources,int) -> hookDecodeResource
    android.graphics.Bitmap originalDecodeResource(android.content.res.Resources,int) -> originalDecodeResource
    boolean setOutDimensions(android.graphics.BitmapFactory$Options,int,int) -> setOutDimensions
    void setPaddingDefaultValues(android.graphics.Rect) -> setPaddingDefaultValues
    void setBitmapSize(android.graphics.BitmapFactory$Options,int,int) -> setBitmapSize
    android.graphics.Bitmap originalDecodeFile(java.lang.String,android.graphics.BitmapFactory$Options) -> originalDecodeFile
    android.graphics.Bitmap originalDecodeFile(java.lang.String) -> originalDecodeFile
    android.graphics.Bitmap hookDecodeFileDescriptor(java.io.FileDescriptor,android.graphics.Rect,android.graphics.BitmapFactory$Options) -> hookDecodeFileDescriptor
    android.graphics.Bitmap originalDecodeFileDescriptor(java.io.FileDescriptor,android.graphics.Rect,android.graphics.BitmapFactory$Options) -> originalDecodeFileDescriptor
    android.graphics.Bitmap hookDecodeFileDescriptor(java.io.FileDescriptor) -> hookDecodeFileDescriptor
    android.graphics.Bitmap originalDecodeFileDescriptor(java.io.FileDescriptor) -> originalDecodeFileDescriptor
    void setWebpBitmapOptions(android.graphics.Bitmap,android.graphics.BitmapFactory$Options) -> setWebpBitmapOptions
    boolean shouldPremultiply(android.graphics.BitmapFactory$Options) -> shouldPremultiply
    android.graphics.Bitmap createBitmap(int,int,android.graphics.BitmapFactory$Options) -> createBitmap
    android.graphics.Bitmap nativeDecodeStream(java.io.InputStream,android.graphics.BitmapFactory$Options,float,byte[]) -> nativeDecodeStream
    android.graphics.Bitmap nativeDecodeByteArray(byte[],int,int,android.graphics.BitmapFactory$Options,float,byte[]) -> nativeDecodeByteArray
    long nativeSeek(java.io.FileDescriptor,long,boolean) -> nativeSeek
    byte[] getInTempStorageFromOptions(android.graphics.BitmapFactory$Options) -> getInTempStorageFromOptions
    float getScaleFromOptions(android.graphics.BitmapFactory$Options) -> getScaleFromOptions
    void sendWebpErrorLog(java.lang.String) -> sendWebpErrorLog
    void <clinit>() -> <clinit>
com.facebook.widget.text.span.BetterImageSpan -> com.facebook.widget.text.span.BetterImageSpan:
    int ALIGN_BOTTOM -> ALIGN_BOTTOM
    int ALIGN_BASELINE -> ALIGN_BASELINE
    int ALIGN_CENTER -> ALIGN_CENTER
    int mWidth -> mWidth
    int mHeight -> mHeight
    android.graphics.Rect mBounds -> mBounds
    int mAlignment -> mAlignment
    android.graphics.Paint$FontMetricsInt mFontMetricsInt -> mFontMetricsInt
    android.graphics.drawable.Drawable mDrawable -> mDrawable
    int normalizeAlignment(int) -> normalizeAlignment
    void <init>(android.graphics.drawable.Drawable) -> <init>
    void <init>(android.graphics.drawable.Drawable,int) -> <init>
    android.graphics.drawable.Drawable getDrawable() -> getDrawable
    int getSize(android.graphics.Paint,java.lang.CharSequence,int,int,android.graphics.Paint$FontMetricsInt) -> getSize
    void draw(android.graphics.Canvas,java.lang.CharSequence,int,int,float,int,int,int,android.graphics.Paint) -> draw
    void updateBounds() -> updateBounds
    int getOffsetAboveBaseline(android.graphics.Paint$FontMetricsInt) -> getOffsetAboveBaseline
com.facebook.widget.text.span.BetterImageSpan$BetterImageSpanAlignment -> com.facebook.widget.text.span.BetterImageSpan$BetterImageSpanAlignment:
com.iqiyi.video.download.engine.data.DownloadDataSource -> com.iqiyi.video.download.a.a.a:
    java.util.ArrayList mItemList -> bm
    void <init>() -> <init>
    void addAll(java.util.List) -> b
    void deleteAll(java.util.List) -> c
    void deleteAllById(java.util.List) -> d
    void clear() -> clear
    void replace(int,java.lang.Object) -> a
    java.lang.Object get(int) -> get
    java.lang.Object getById(java.lang.String) -> f
    java.util.List copyAll() -> J
    java.util.List getAll() -> K
    int size() -> size
    boolean contains(java.lang.Object) -> contains
    int getIndexById(java.lang.String) -> g
com.iqiyi.video.download.engine.data.IDownloadDataSource -> com.iqiyi.video.download.a.a.b:
    java.lang.String getId(java.lang.Object) -> d
com.iqiyi.video.download.engine.downloadcenter.QiyiDownloadCenter -> com.iqiyi.video.download.a.b.a:
    java.util.HashMap mDownloads -> bn
    android.content.Context mContext -> mContext
    com.iqiyi.video.download.engine.downloadcenter.QiyiDownloadCenter$EnvironmentChangeReceiver mEnvironmentReceiver -> bo
    boolean mHasInit -> bp
    void <init>(android.content.Context) -> <init>
    void init() -> init
    void registerReceiver() -> L
    boolean addDownloader(java.lang.Class,com.iqiyi.video.download.engine.downloader.IQiyiDownloader) -> a
    void exit() -> exit
    void unregisterReceiver() -> M
    java.util.HashMap access$400(com.iqiyi.video.download.engine.downloadcenter.QiyiDownloadCenter) -> a
com.iqiyi.video.download.engine.downloadcenter.QiyiDownloadCenter$1 -> com.iqiyi.video.download.a.b.b:
com.iqiyi.video.download.engine.downloadcenter.QiyiDownloadCenter$EnvironmentChangeReceiver -> com.iqiyi.video.download.a.b.c:
    int MSG_NETWORK_CHANGED -> MSG_NETWORK_CHANGED
    int MSG_SDCARD_CHANGED -> bq
    org.qiyi.basecore.utils.NetworkStatus currentStatus -> br
    android.content.Context mInnerContext -> bs
    android.os.Handler receiverHandler -> bt
    com.iqiyi.video.download.engine.downloadcenter.QiyiDownloadCenter this$0 -> bu
    void <init>(com.iqiyi.video.download.engine.downloadcenter.QiyiDownloadCenter,android.content.Context) -> <init>
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
    void handleNetStatusChangeInDownload(org.qiyi.basecore.utils.NetworkStatus) -> a
    void handleSDCardMountsInDownload(android.content.Context,java.lang.String) -> c
    void <init>(com.iqiyi.video.download.engine.downloadcenter.QiyiDownloadCenter,android.content.Context,com.iqiyi.video.download.engine.downloadcenter.QiyiDownloadCenter$1) -> <init>
    android.content.Context access$100(com.iqiyi.video.download.engine.downloadcenter.QiyiDownloadCenter$EnvironmentChangeReceiver) -> a
    void access$200(com.iqiyi.video.download.engine.downloadcenter.QiyiDownloadCenter$EnvironmentChangeReceiver,android.content.Context,java.lang.String) -> a
    void access$300(com.iqiyi.video.download.engine.downloadcenter.QiyiDownloadCenter$EnvironmentChangeReceiver,org.qiyi.basecore.utils.NetworkStatus) -> a
com.iqiyi.video.download.engine.downloadcenter.QiyiDownloadCenter$EnvironmentChangeReceiver$1 -> com.iqiyi.video.download.a.b.d:
    com.iqiyi.video.download.engine.downloadcenter.QiyiDownloadCenter$EnvironmentChangeReceiver this$1 -> bv
    void <init>(com.iqiyi.video.download.engine.downloadcenter.QiyiDownloadCenter$EnvironmentChangeReceiver,android.os.Looper) -> <init>
    void handleMessage(android.os.Message) -> handleMessage
com.iqiyi.video.download.engine.downloadcenter.QiyiDownloadCenter$EnvironmentChangeReceiver$2 -> com.iqiyi.video.download.a.b.e:
    com.iqiyi.video.download.engine.downloadcenter.QiyiDownloadCenter$EnvironmentChangeReceiver this$1 -> bv
    void <init>(com.iqiyi.video.download.engine.downloadcenter.QiyiDownloadCenter$EnvironmentChangeReceiver) -> <init>
    java.lang.Void doInBackground(android.content.Context[]) -> a
    void onPostExecute(java.lang.Void) -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.iqiyi.video.download.engine.downloadcenter.QiyiDownloadCenter$EnvironmentChangeReceiver$3 -> com.iqiyi.video.download.a.b.f:
    com.iqiyi.video.download.engine.downloadcenter.QiyiDownloadCenter$EnvironmentChangeReceiver this$1 -> bv
    void <init>(com.iqiyi.video.download.engine.downloadcenter.QiyiDownloadCenter$EnvironmentChangeReceiver) -> <init>
    java.lang.Void doInBackground(android.content.Context[]) -> a
    void onPostExecute(java.lang.Void) -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.iqiyi.video.download.engine.downloader.BaseQiyiDownloader -> com.iqiyi.video.download.a.c.a:
    android.content.Context mContext -> mContext
    com.iqiyi.video.download.engine.taskmgr.serial.ISerialTaskManager mTaskMgr -> bw
    com.iqiyi.video.download.engine.data.DownloadDataSource mAllDownloadData -> bx
    java.util.List mListeners -> mListeners
    android.os.Handler mHandler -> mHandler
    boolean hasLoaded -> by
    void <init>(com.iqiyi.video.download.engine.taskmgr.serial.ISerialTaskManager) -> <init>
    void load(boolean) -> c
    boolean addDownloadTasks(java.util.List) -> e
    boolean startDownload() -> N
    boolean startDownload(java.lang.String) -> h
    boolean stopDownload(java.lang.String) -> i
    boolean deleteDownloadTasks(java.util.List) -> f
    boolean deleteDownloadTask(java.lang.String) -> j
    java.util.List getAllDownloadTask() -> O
    void registerListener(com.iqiyi.video.download.engine.downloader.IQiyiDownloaderListener) -> a
    void handleNetWorkChange(int) -> d
    void netWorkOff() -> P
    void netWorkToWifi() -> Q
    void netWorkToMobile() -> R
    void handleSdCardChange(int) -> e
    void sdCardRemove() -> S
    void sdCardInsert() -> T
    void stopAndClear() -> U
    boolean hasTaskRunning() -> V
    java.util.List onPreAddDownloadTask(java.util.List) -> g
    void loadFromPersistence(com.iqiyi.video.download.engine.downloader.BaseQiyiDownloader$ILoadFromPersistenceListener) -> a
    boolean saveToPersistence(java.util.List,com.iqiyi.video.download.engine.downloader.BaseQiyiDownloader$PersistenceType,com.iqiyi.video.download.engine.downloader.BaseQiyiDownloader$ISavePersistenceListener) -> a
    boolean deleteLocalFile(java.util.List,com.iqiyi.video.download.engine.downloader.BaseQiyiDownloader$IDeleteFileListener) -> a
    void setDeleteFlag(java.util.List) -> h
    void setTaskSchedule(com.iqiyi.video.download.engine.task.ITaskSchedule) -> a
com.iqiyi.video.download.engine.downloader.BaseQiyiDownloader$1 -> com.iqiyi.video.download.a.c.b:
    boolean val$isForce -> bz
    com.iqiyi.video.download.engine.downloader.BaseQiyiDownloader this$0 -> bA
    void <init>(com.iqiyi.video.download.engine.downloader.BaseQiyiDownloader,boolean) -> <init>
    void loadSuccess(java.util.List) -> i
com.iqiyi.video.download.engine.downloader.BaseQiyiDownloader$2 -> com.iqiyi.video.download.a.c.c:
    java.util.List val$addBeans -> bB
    com.iqiyi.video.download.engine.downloader.BaseQiyiDownloader this$0 -> bA
    void <init>(com.iqiyi.video.download.engine.downloader.BaseQiyiDownloader,java.util.List) -> <init>
    void addSuccess(java.util.List) -> j
com.iqiyi.video.download.engine.downloader.BaseQiyiDownloader$3 -> com.iqiyi.video.download.a.c.d:
    com.iqiyi.video.download.engine.downloader.BaseQiyiDownloader this$0 -> bA
    void <init>(com.iqiyi.video.download.engine.downloader.BaseQiyiDownloader) -> <init>
com.iqiyi.video.download.engine.downloader.BaseQiyiDownloader$IDeleteFileListener -> com.iqiyi.video.download.a.c.e:
com.iqiyi.video.download.engine.downloader.BaseQiyiDownloader$ILoadFromPersistenceListener -> com.iqiyi.video.download.a.c.f:
    void loadSuccess(java.util.List) -> i
com.iqiyi.video.download.engine.downloader.BaseQiyiDownloader$ISavePersistenceListener -> com.iqiyi.video.download.a.c.g:
    void addSuccess(java.util.List) -> j
com.iqiyi.video.download.engine.downloader.BaseQiyiDownloader$InnerHandler -> com.iqiyi.video.download.a.c.h:
    com.iqiyi.video.download.engine.downloader.BaseQiyiDownloader this$0 -> bA
    void <init>(com.iqiyi.video.download.engine.downloader.BaseQiyiDownloader,android.os.Looper) -> <init>
    void handleMessage(android.os.Message) -> handleMessage
com.iqiyi.video.download.engine.downloader.BaseQiyiDownloader$InnerListener -> com.iqiyi.video.download.a.c.i:
    com.iqiyi.video.download.engine.downloader.BaseQiyiDownloader this$0 -> bA
    void <init>(com.iqiyi.video.download.engine.downloader.BaseQiyiDownloader) -> <init>
    void onNoDowningTask() -> W
    void onFinishAll() -> X
    void onStart(org.qiyi.video.module.download.exbean.XTaskBean) -> a
    void onPause(org.qiyi.video.module.download.exbean.XTaskBean) -> b
    void onDoing(org.qiyi.video.module.download.exbean.XTaskBean,long) -> a
    void onComplete(org.qiyi.video.module.download.exbean.XTaskBean) -> c
    void onError(org.qiyi.video.module.download.exbean.XTaskBean,java.lang.String) -> a
    void onPrepare() -> Y
com.iqiyi.video.download.engine.downloader.BaseQiyiDownloader$PersistenceType -> com.iqiyi.video.download.a.c.j:
    com.iqiyi.video.download.engine.downloader.BaseQiyiDownloader$PersistenceType CREATE -> bC
    com.iqiyi.video.download.engine.downloader.BaseQiyiDownloader$PersistenceType DELETE -> bD
    com.iqiyi.video.download.engine.downloader.BaseQiyiDownloader$PersistenceType UPDATE -> bE
    com.iqiyi.video.download.engine.downloader.BaseQiyiDownloader$PersistenceType[] $VALUES -> bF
    com.iqiyi.video.download.engine.downloader.BaseQiyiDownloader$PersistenceType[] values() -> values
    com.iqiyi.video.download.engine.downloader.BaseQiyiDownloader$PersistenceType valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.iqiyi.video.download.engine.downloader.IQiyiDownloader -> com.iqiyi.video.download.a.c.k:
    void init() -> init
    void exit() -> exit
    void load(boolean) -> c
    boolean addDownloadTasks(java.util.List) -> e
    boolean deleteDownloadTasks(java.util.List) -> f
    boolean deleteDownloadTask(java.lang.String) -> j
    java.util.List getAllDownloadTask() -> O
    boolean startDownload() -> N
    boolean startDownload(java.lang.String) -> h
    boolean stopDownload(java.lang.String) -> i
    boolean hasTaskRunning() -> V
    void registerListener(com.iqiyi.video.download.engine.downloader.IQiyiDownloaderListener) -> a
    void handleNetWorkChange(int) -> d
    void handleSdCardChange(int) -> e
com.iqiyi.video.download.engine.downloader.IQiyiDownloaderListener -> com.iqiyi.video.download.a.c.l:
    void onLoad() -> Z
    void onAdd(java.util.List) -> k
    void onDelete(java.util.List,int) -> b
    void onUpdate(java.util.List,int) -> c
    void onStart(org.qiyi.video.module.download.exbean.XTaskBean) -> a
    void onPause(org.qiyi.video.module.download.exbean.XTaskBean) -> b
    void onPauseAll() -> aa
    void onNoDowningTask() -> W
    void onDownloading(org.qiyi.video.module.download.exbean.XTaskBean) -> d
    void onComplete(org.qiyi.video.module.download.exbean.XTaskBean) -> c
    void onError(org.qiyi.video.module.download.exbean.XTaskBean) -> e
    void onFinishAll() -> X
    void onNoNetwork() -> ab
    void onNetworkNotWifi() -> ac
    void onNetworkWifi() -> ad
    void onMountedSdCard() -> ae
    void onUnmountedSdCard(boolean) -> d
    void onPrepare() -> Y
    void onSDFull(org.qiyi.video.module.download.exbean.XTaskBean) -> f
com.iqiyi.video.download.engine.task.ITaskListener -> com.iqiyi.video.download.a.d.a:
    void onStart(org.qiyi.video.module.download.exbean.XTaskBean) -> a
    void onPause(org.qiyi.video.module.download.exbean.XTaskBean) -> b
    void onAbort(org.qiyi.video.module.download.exbean.XTaskBean) -> g
    void onDoing(org.qiyi.video.module.download.exbean.XTaskBean,long) -> a
    void onComplete(org.qiyi.video.module.download.exbean.XTaskBean) -> c
    void onError(org.qiyi.video.module.download.exbean.XTaskBean,java.lang.String,boolean) -> a
com.iqiyi.video.download.engine.task.ITaskSchedule -> com.iqiyi.video.download.a.d.b:
    int compare(java.lang.Object,java.lang.Object) -> compare
com.iqiyi.video.download.engine.task.XBaseTaskExecutor -> com.iqiyi.video.download.a.d.c:
    int mStatus -> bG
    org.qiyi.video.module.download.exbean.XTaskBean mBean -> bH
    com.iqiyi.video.download.engine.task.ITaskListener mListener -> bI
    void <init>(org.qiyi.video.module.download.exbean.XTaskBean) -> <init>
    void <init>(org.qiyi.video.module.download.exbean.XTaskBean,int) -> <init>
    org.qiyi.video.module.download.exbean.XTaskBean getBean() -> af
    java.lang.String getId() -> getId
    void setStatus(int) -> setStatus
    int getStatus() -> getStatus
    void setListener(com.iqiyi.video.download.engine.task.ITaskListener) -> a
    int start(int[]) -> a
    int pause(int[]) -> b
    boolean abort() -> ag
    boolean endSuccess() -> ah
    boolean endError(java.lang.String,boolean) -> b
    void notifyDoing(long) -> e
    boolean onStart() -> ai
    boolean onPause() -> aj
    boolean onAbort() -> ak
    boolean onEndSuccess() -> al
    boolean onEndError(java.lang.String,boolean) -> c
com.iqiyi.video.download.engine.task.runnable.IRetryRunnable -> com.iqiyi.video.download.a.d.a.a:
    long getRetryInterval(long) -> f
    java.lang.Object getBean() -> am
    boolean onPreExecute(java.lang.Object) -> e
    void onPreExecuteError(java.lang.Object) -> f
    boolean onRepeatExecute(java.lang.Object) -> g
    void onPostExecute(java.lang.Object) -> onPostExecute
    void onCancelled(java.lang.Object) -> onCancelled
com.iqiyi.video.download.engine.task.runnable.XFiniteRetryRunnable -> com.iqiyi.video.download.a.d.a.b:
    boolean isRunning -> bJ
    long maxRetryCount -> bK
    long retryCount -> bL
    void <init>(long) -> <init>
    long getRetryCount() -> an
    boolean isRunning() -> isRunning
    void cancel() -> cancel
    void run() -> run
com.iqiyi.video.download.engine.task.runnable.XInfiniteRetryRunnable -> com.iqiyi.video.download.a.d.a.c:
    boolean isRunning -> bJ
    void <init>() -> <init>
    long getRetryCount() -> an
    boolean isRunning() -> isRunning
    void cancel() -> cancel
    void run() -> run
com.iqiyi.video.download.engine.taskmgr.IDownloadTaskCreator -> com.iqiyi.video.download.a.e.a:
    com.iqiyi.video.download.engine.task.XBaseTaskExecutor createDownloadTask(java.lang.String) -> k
com.iqiyi.video.download.engine.taskmgr.IDownloadTaskListener -> com.iqiyi.video.download.a.e.b:
    void onStart(org.qiyi.video.module.download.exbean.XTaskBean) -> a
    void onPause(org.qiyi.video.module.download.exbean.XTaskBean) -> b
    void onNoDowningTask() -> W
    void onFinishAll() -> X
    void onDoing(org.qiyi.video.module.download.exbean.XTaskBean,long) -> a
    void onComplete(org.qiyi.video.module.download.exbean.XTaskBean) -> c
    void onError(org.qiyi.video.module.download.exbean.XTaskBean,java.lang.String) -> a
    void onPrepare() -> Y
com.iqiyi.video.download.engine.taskmgr.paralle.IParalleTaskManager -> com.iqiyi.video.download.a.e.a.a:
com.iqiyi.video.download.engine.taskmgr.paralle.ParalleTaskManager -> com.iqiyi.video.download.a.e.a.b:
    boolean mIsWorking -> bM
    boolean mAuto -> bN
    java.util.LinkedList mCurrentExecuted -> bO
    java.util.LinkedList mTobeExecuted -> bP
    com.iqiyi.video.download.engine.taskmgr.paralle.ParalleTaskManager$ParalleTaskComparator mInnerComparator -> bQ
    java.util.concurrent.CopyOnWriteArrayList mListeners -> bR
    com.iqiyi.video.download.engine.task.ITaskListener mInnerTaskListener -> bS
    int mParallelLimit -> bT
    com.iqiyi.video.download.engine.taskmgr.IDownloadTaskCreator mCreater -> bU
    com.iqiyi.video.download.engine.task.ITaskSchedule schedule -> bV
    void <init>(int) -> <init>
    boolean isEmptyParallel() -> ao
    boolean isFullParallel() -> ap
    boolean isAllStop() -> aq
    java.lang.String getTaskId(com.iqiyi.video.download.filedownload.TaskBean) -> a
    com.iqiyi.video.download.filedownload.TaskBean getTaskById(java.lang.String) -> l
    void addTasks(java.util.List) -> l
    void removeTasks(java.util.List) -> m
    void removeTasksById(java.util.List) -> n
    boolean start() -> start
    boolean start(java.lang.String) -> m
    boolean pause() -> pause
    boolean stop(java.lang.String) -> n
    void stopAndReset() -> ar
    void setAutoRunning(boolean) -> e
    com.iqiyi.video.download.filedownload.TaskBean findNextTask(com.iqiyi.video.download.filedownload.TaskBean) -> b
    void notifyTaskFinished(com.iqiyi.video.download.filedownload.TaskBean,boolean) -> a
    boolean startAll() -> as
    com.iqiyi.video.download.filedownload.TaskBean getRunningTask() -> at
    void setDownloadCreator(com.iqiyi.video.download.engine.taskmgr.IDownloadTaskCreator) -> a
    void setTaskSchedule(com.iqiyi.video.download.engine.task.ITaskSchedule) -> a
    void registerListener(com.iqiyi.video.download.engine.taskmgr.IDownloadTaskListener) -> a
    boolean hasTaskRunning() -> V
com.iqiyi.video.download.engine.taskmgr.paralle.ParalleTaskManager$1 -> com.iqiyi.video.download.a.e.a.c:
    com.iqiyi.video.download.engine.taskmgr.paralle.ParalleTaskManager this$0 -> bW
    void <init>(com.iqiyi.video.download.engine.taskmgr.paralle.ParalleTaskManager) -> <init>
    void onStart(org.qiyi.video.module.download.exbean.XTaskBean) -> a
    void onPause(org.qiyi.video.module.download.exbean.XTaskBean) -> b
    void onAbort(org.qiyi.video.module.download.exbean.XTaskBean) -> g
    void onDoing(org.qiyi.video.module.download.exbean.XTaskBean,long) -> a
    void onComplete(org.qiyi.video.module.download.exbean.XTaskBean) -> c
    void onError(org.qiyi.video.module.download.exbean.XTaskBean,java.lang.String,boolean) -> a
com.iqiyi.video.download.engine.taskmgr.paralle.ParalleTaskManager$ParalleTaskComparator -> com.iqiyi.video.download.a.e.a.d:
    com.iqiyi.video.download.engine.taskmgr.paralle.ParalleTaskManager this$0 -> bW
    void <init>(com.iqiyi.video.download.engine.taskmgr.paralle.ParalleTaskManager) -> <init>
    int compare(com.iqiyi.video.download.filedownload.TaskBean,com.iqiyi.video.download.filedownload.TaskBean) -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
    void <init>(com.iqiyi.video.download.engine.taskmgr.paralle.ParalleTaskManager,com.iqiyi.video.download.engine.taskmgr.paralle.ParalleTaskManager$1) -> <init>
com.iqiyi.video.download.engine.taskmgr.serial.ISerialTaskManager -> com.iqiyi.video.download.a.e.b.a:
    void addTasks(java.util.List) -> l
    void removeTasksById(java.util.List) -> n
    boolean start() -> start
    boolean start(java.lang.String) -> m
    boolean pause() -> pause
    boolean stop(java.lang.String) -> n
    void stopAndReset() -> ar
    void setAutoRunning(boolean) -> e
    void registerListener(com.iqiyi.video.download.engine.taskmgr.IDownloadTaskListener) -> a
    boolean startAll() -> as
    boolean hasTaskRunning() -> V
    com.iqiyi.video.download.filedownload.TaskBean getRunningTask() -> at
    void setDownloadCreator(com.iqiyi.video.download.engine.taskmgr.IDownloadTaskCreator) -> a
    void setTaskSchedule(com.iqiyi.video.download.engine.task.ITaskSchedule) -> a
com.iqiyi.video.download.filedownload.FileDownloadController -> com.iqiyi.video.download.filedownload.a:
    boolean isInit -> bX
    android.content.Context mContext -> mContext
    java.util.List mDownloadList -> bY
    com.iqiyi.video.download.engine.downloader.IQiyiDownloader mDownloader -> bZ
    com.iqiyi.video.download.engine.downloader.IQiyiDownloaderListener mDownloaderListener -> ca
    void <init>(com.iqiyi.video.download.engine.downloader.IQiyiDownloader,android.content.Context) -> <init>
    void init() -> init
    void startOrPauseDownloadTask(org.qiyi.video.module.download.exbean.FileDownloadObject) -> a
    void startOrPauseDownloadTask(java.lang.String) -> o
    void checkAndDownloadFile(org.qiyi.video.module.download.exbean.FileDownloadObject) -> b
    void autoStartDownloadFileTask(org.qiyi.video.module.download.exbean.FileDownloadObject) -> c
    boolean hasRunningTask() -> au
    org.qiyi.video.module.download.exbean.FileDownloadObject findFileDownloadObjectById(java.lang.String) -> p
    void addDownloadTask(org.qiyi.video.module.download.exbean.FileDownloadObject) -> d
    void addDownloadTask(java.util.List) -> o
    void deleteDownloadTasksWithId(java.util.List) -> p
    void deleteDownloadTaskWithGroupName(java.lang.String) -> q
com.iqiyi.video.download.filedownload.FileDownloadController$1 -> com.iqiyi.video.download.filedownload.b:
com.iqiyi.video.download.filedownload.FileDownloadController$InnerListener -> com.iqiyi.video.download.filedownload.c:
    com.iqiyi.video.download.filedownload.FileDownloadController this$0 -> cb
    void <init>(com.iqiyi.video.download.filedownload.FileDownloadController) -> <init>
    void onDownloadDataSetChanged() -> av
    void onDownloadDataStatusChanged(org.qiyi.video.module.download.exbean.FileDownloadObject,int) -> a
    void onLoad() -> Z
    void onAdd(java.util.List) -> k
    void onDelete(java.util.List,int) -> b
    void onUpdate(java.util.List,int) -> c
    void onStart(org.qiyi.video.module.download.exbean.FileDownloadObject) -> e
    void onPause(org.qiyi.video.module.download.exbean.FileDownloadObject) -> f
    void onPauseAll() -> aa
    void onNoDowningTask() -> W
    void onDownloading(org.qiyi.video.module.download.exbean.FileDownloadObject) -> g
    void onComplete(org.qiyi.video.module.download.exbean.FileDownloadObject) -> h
    void onError(org.qiyi.video.module.download.exbean.FileDownloadObject) -> i
    void onFinishAll() -> X
    void onNoNetwork() -> ab
    void onNetworkNotWifi() -> ac
    void onNetworkWifi() -> ad
    void onMountedSdCard() -> ae
    void onUnmountedSdCard(boolean) -> d
    void onPrepare() -> Y
    void onSDFull(org.qiyi.video.module.download.exbean.FileDownloadObject) -> j
    void deleteDownloadTaskIfNeed(org.qiyi.video.module.download.exbean.FileDownloadObject) -> k
    void checkTaskConfigAndNetwork(android.content.Context,org.qiyi.video.module.download.exbean.FileDownloadObject) -> a
    void onSDFull(org.qiyi.video.module.download.exbean.XTaskBean) -> f
    void onError(org.qiyi.video.module.download.exbean.XTaskBean) -> e
    void onComplete(org.qiyi.video.module.download.exbean.XTaskBean) -> c
    void onDownloading(org.qiyi.video.module.download.exbean.XTaskBean) -> d
    void onPause(org.qiyi.video.module.download.exbean.XTaskBean) -> b
    void onStart(org.qiyi.video.module.download.exbean.XTaskBean) -> a
    void <init>(com.iqiyi.video.download.filedownload.FileDownloadController,com.iqiyi.video.download.filedownload.FileDownloadController$1) -> <init>
com.iqiyi.video.download.filedownload.FileDownloadExBean -> com.iqiyi.video.download.filedownload.FileDownloadExBean:
    int actionId -> actionId
    org.qiyi.video.module.download.exbean.FileDownloadObject mFileObject -> cc
    java.util.List mFileList -> cd
    java.util.List mUrlList -> ce
    java.lang.String sValue1 -> cf
    java.lang.String sValue2 -> cg
    int iValue1 -> ch
    int iValue2 -> ci
    android.os.Bundle mBundle -> cj
    android.os.Parcelable$Creator CREATOR -> CREATOR
    void <init>() -> <init>
    void <init>(int) -> <init>
    int getActionId() -> aw
    void <init>(android.os.Parcel) -> <init>
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
    void <clinit>() -> <clinit>
com.iqiyi.video.download.filedownload.FileDownloadExBean$1 -> com.iqiyi.video.download.filedownload.d:
    void <init>() -> <init>
    com.iqiyi.video.download.filedownload.FileDownloadExBean createFromParcel(android.os.Parcel) -> a
    com.iqiyi.video.download.filedownload.FileDownloadExBean[] newArray(int) -> f
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
com.iqiyi.video.download.filedownload.FileDownloadHelper -> com.iqiyi.video.download.filedownload.e:
    int verifyFile(org.qiyi.video.module.download.exbean.FileDownloadObject,java.io.File,java.io.File) -> a
    boolean unzipFile(org.qiyi.video.module.download.exbean.FileDownloadObject,java.io.File) -> a
    boolean renameToCompleteFile(java.io.File,java.io.File) -> b
    void clearDownloadFile(java.io.File) -> b
    boolean createDir(java.lang.String) -> r
    boolean createFile(java.lang.String) -> s
    int getSleepTimeForfiniteRetry(java.util.Random,int,int) -> a
    int calculatePercent(long,long) -> a
    void sleep(boolean,long) -> a
    int getSleepTime(java.util.Random,int) -> a
    com.iqiyi.video.download.filedownload.FileDownloadExBean buildCallbackMsg(org.qiyi.video.module.download.exbean.FileDownloadObject,int) -> b
    boolean deleteFile(java.lang.String) -> deleteFile
    void deliverFileDownloadErrorCode(org.qiyi.video.module.download.exbean.FileDownloadObject) -> l
com.iqiyi.video.download.filedownload.IDownloadCoreAidl -> com.iqiyi.video.download.filedownload.IDownloadCoreAidl:
    void sendMessage(com.iqiyi.video.download.filedownload.FileDownloadExBean) -> a
    com.iqiyi.video.download.filedownload.FileDownloadExBean getMessage(com.iqiyi.video.download.filedownload.FileDownloadExBean) -> b
    void registerCallback(com.iqiyi.video.download.filedownload.IDownloadCoreCallback) -> a
    void unregisterCallback(com.iqiyi.video.download.filedownload.IDownloadCoreCallback) -> b
com.iqiyi.video.download.filedownload.IDownloadCoreAidl$Stub -> com.iqiyi.video.download.filedownload.IDownloadCoreAidl$Stub:
    void <init>() -> <init>
    android.os.IBinder asBinder() -> asBinder
    boolean onTransact(int,android.os.Parcel,android.os.Parcel,int) -> onTransact
com.iqiyi.video.download.filedownload.IDownloadCoreCallback -> com.iqiyi.video.download.filedownload.IDownloadCoreCallback:
    void callback(com.iqiyi.video.download.filedownload.FileDownloadExBean) -> c
    com.iqiyi.video.download.filedownload.FileDownloadExBean getMessage(com.iqiyi.video.download.filedownload.FileDownloadExBean) -> b
com.iqiyi.video.download.filedownload.IDownloadCoreCallback$Stub -> com.iqiyi.video.download.filedownload.IDownloadCoreCallback$Stub:
    void <init>() -> <init>
    com.iqiyi.video.download.filedownload.IDownloadCoreCallback asInterface(android.os.IBinder) -> a
    android.os.IBinder asBinder() -> asBinder
    boolean onTransact(int,android.os.Parcel,android.os.Parcel,int) -> onTransact
com.iqiyi.video.download.filedownload.IDownloadCoreCallback$Stub$Proxy -> com.iqiyi.video.download.filedownload.f:
    android.os.IBinder mRemote -> ck
    void <init>(android.os.IBinder) -> <init>
    android.os.IBinder asBinder() -> asBinder
    void callback(com.iqiyi.video.download.filedownload.FileDownloadExBean) -> c
    com.iqiyi.video.download.filedownload.FileDownloadExBean getMessage(com.iqiyi.video.download.filedownload.FileDownloadExBean) -> b
com.iqiyi.video.download.filedownload.QiyiDownloadCoreService -> com.iqiyi.video.download.filedownload.QiyiDownloadCoreService:
    android.content.Context mContext -> mContext
    void <init>() -> <init>
    void onCreate() -> onCreate
    void onDestroy() -> onDestroy
    android.os.IBinder onBind(android.content.Intent) -> onBind
    com.iqiyi.video.download.filedownload.IDownloadCoreAidl$Stub initBinder() -> ax
    android.content.Context access$000(com.iqiyi.video.download.filedownload.QiyiDownloadCoreService) -> a
com.iqiyi.video.download.filedownload.QiyiDownloadCoreService$1 -> com.iqiyi.video.download.filedownload.g:
    com.iqiyi.video.download.filedownload.QiyiDownloadCoreService this$0 -> cl
    void <init>(com.iqiyi.video.download.filedownload.QiyiDownloadCoreService) -> <init>
    void sendMessage(com.iqiyi.video.download.filedownload.FileDownloadExBean) -> a
    com.iqiyi.video.download.filedownload.FileDownloadExBean getMessage(com.iqiyi.video.download.filedownload.FileDownloadExBean) -> b
    void registerCallback(com.iqiyi.video.download.filedownload.IDownloadCoreCallback) -> a
    void unregisterCallback(com.iqiyi.video.download.filedownload.IDownloadCoreCallback) -> b
com.iqiyi.video.download.filedownload.QiyiFileDownloader -> com.iqiyi.video.download.filedownload.h:
    com.iqiyi.video.download.filedownload.db.DBRequestController mDbController -> cm
    com.iqiyi.video.download.engine.task.ITaskSchedule schedule -> bV
    void <init>(android.content.Context,com.iqiyi.video.download.filedownload.db.DBRequestController) -> <init>
    java.util.List onPreAddDownloadTask(java.util.List) -> g
    void netWorkOff() -> P
    void netWorkToWifi() -> Q
    void netWorkToMobile() -> R
    void sdCardInsert() -> T
    void sdCardRemove() -> S
    void loadFromPersistence(com.iqiyi.video.download.engine.downloader.BaseQiyiDownloader$ILoadFromPersistenceListener) -> a
    boolean saveToPersistence(java.util.List,com.iqiyi.video.download.engine.downloader.BaseQiyiDownloader$PersistenceType,com.iqiyi.video.download.engine.downloader.BaseQiyiDownloader$ISavePersistenceListener) -> a
    boolean deleteLocalFile(java.util.List,com.iqiyi.video.download.engine.downloader.BaseQiyiDownloader$IDeleteFileListener) -> a
    void setDeleteFlag(java.util.List) -> h
    void setTaskSchedule(com.iqiyi.video.download.engine.task.ITaskSchedule) -> a
    void init() -> init
    void exit() -> exit
    com.iqiyi.video.download.engine.data.DownloadDataSource access$000(com.iqiyi.video.download.filedownload.QiyiFileDownloader) -> a
    android.content.Context access$100(com.iqiyi.video.download.filedownload.QiyiFileDownloader) -> b
    com.iqiyi.video.download.filedownload.db.DBRequestController access$200(com.iqiyi.video.download.filedownload.QiyiFileDownloader) -> c
    android.content.Context access$300(com.iqiyi.video.download.filedownload.QiyiFileDownloader) -> d
    android.content.Context access$400(com.iqiyi.video.download.filedownload.QiyiFileDownloader) -> e
com.iqiyi.video.download.filedownload.QiyiFileDownloader$1 -> com.iqiyi.video.download.filedownload.i:
    com.iqiyi.video.download.filedownload.QiyiFileDownloader this$0 -> cn
    void <init>(com.iqiyi.video.download.filedownload.QiyiFileDownloader) -> <init>
    java.lang.String getId(org.qiyi.video.module.download.exbean.FileDownloadObject) -> m
    java.lang.String getId(java.lang.Object) -> d
com.iqiyi.video.download.filedownload.QiyiFileDownloader$2 -> com.iqiyi.video.download.filedownload.j:
    java.util.List val$deleteList -> co
    com.iqiyi.video.download.filedownload.QiyiFileDownloader this$0 -> cn
    void <init>(com.iqiyi.video.download.filedownload.QiyiFileDownloader,java.util.List) -> <init>
    void run() -> run
com.iqiyi.video.download.filedownload.QiyiFileDownloader$FileDownloadTaskCreator -> com.iqiyi.video.download.filedownload.k:
    com.iqiyi.video.download.filedownload.QiyiFileDownloader this$0 -> cn
    void <init>(com.iqiyi.video.download.filedownload.QiyiFileDownloader) -> <init>
    com.iqiyi.video.download.engine.task.XBaseTaskExecutor createDownloadTask(java.lang.String) -> k
com.iqiyi.video.download.filedownload.TaskBean -> com.iqiyi.video.download.filedownload.l:
    java.lang.String taskId -> cp
    int mStatus -> bG
    org.qiyi.video.module.download.exbean.ScheduleBean scheduleBean -> cq
    com.iqiyi.video.download.engine.task.XBaseTaskExecutor mDownloadTask -> cr
    com.iqiyi.video.download.engine.taskmgr.serial.ISerialTaskManager mTaskMgr -> bw
    void <init>(java.lang.String,int) -> <init>
    java.lang.String getId() -> getId
    int getStatus() -> getStatus
    void setStatus(int) -> setStatus
    void setScheduleBean(org.qiyi.video.module.download.exbean.ScheduleBean) -> a
    org.qiyi.video.module.download.exbean.ScheduleBean getScheduleBean() -> getScheduleBean
    void setTaskMgr(com.iqiyi.video.download.engine.taskmgr.serial.ISerialTaskManager) -> a
com.iqiyi.video.download.filedownload.db.AbstractDbTask -> com.iqiyi.video.download.filedownload.a.a:
    com.iqiyi.video.download.filedownload.db.AbstractDbTask$CallBack mCallBack -> cs
    int mResponseCode -> ct
    java.lang.Object mResponseData -> cu
    void process() -> ay
    void doInBackground() -> az
    void callBack() -> aA
    void callBackTimeout() -> aB
com.iqiyi.video.download.filedownload.db.AbstractDbTask$CallBack -> com.iqiyi.video.download.filedownload.a.b:
    void callBack(int,java.lang.Object) -> b
com.iqiyi.video.download.filedownload.db.AsyncTaskDbQueue -> com.iqiyi.video.download.filedownload.a.c:
    java.util.Queue taskQueue -> cv
    boolean isStop -> isStop
    android.os.Handler sHandler -> cw
    void <init>() -> <init>
    void run() -> run
    void <clinit>() -> <clinit>
com.iqiyi.video.download.filedownload.db.AsyncTaskDbQueue$1 -> com.iqiyi.video.download.filedownload.a.d:
    void <init>() -> <init>
    void handleMessage(android.os.Message) -> handleMessage
com.iqiyi.video.download.filedownload.db.DBRequestController -> com.iqiyi.video.download.filedownload.a.e:
    com.iqiyi.video.download.filedownload.db.AsyncTaskDbQueue mDatabaseTaskQueue -> cx
    void <init>() -> <init>
    void init() -> init
com.iqiyi.video.download.filedownload.extern.FileDownloadAgent -> com.iqiyi.video.download.filedownload.b.a:
    com.iqiyi.video.download.filedownload.extern.IFileDownloadStatistic iFileDownloadStatistic -> cy
    com.iqiyi.video.download.filedownload.extern.IFileDownloadStatistic getFileDownloadStatistic() -> aC
com.iqiyi.video.download.filedownload.extern.IFileDownloadStatistic -> com.iqiyi.video.download.filedownload.b.b:
    void sendStatistic(org.qiyi.video.module.download.exbean.FileDownloadObject) -> n
com.iqiyi.video.download.filedownload.http.DownloadHttpAdapter -> com.iqiyi.video.download.filedownload.c.a:
    boolean isRunning -> bJ
    int recursiveTime -> cz
    void <init>() -> <init>
    int downloadFile(org.qiyi.video.module.download.exbean.XTaskBean,com.iqiyi.video.download.filedownload.http.DownloadProgressCallback) -> a
    java.net.HttpURLConnection getConnection(java.lang.String,long,long) -> a
    long getFileSize(java.lang.String) -> getFileSize
    boolean isRunning() -> isRunning
    void setRunning(boolean) -> f
    int downloadFileByUrlConnection(java.io.InputStream,org.qiyi.video.module.download.exbean.XTaskBean,com.iqiyi.video.download.filedownload.http.DownloadProgressCallback) -> a
com.iqiyi.video.download.filedownload.http.DownloadProgressCallback -> com.iqiyi.video.download.filedownload.c.b:
    void onDataChanged(org.qiyi.video.module.download.exbean.XTaskBean) -> h
com.iqiyi.video.download.filedownload.ipc.DownloadCoreManager -> com.iqiyi.video.download.filedownload.d.a:
    com.iqiyi.video.download.engine.downloadcenter.QiyiDownloadCenter mQiyiDownloadCenter -> cA
    com.iqiyi.video.download.filedownload.FileDownloadController mFileDownloadController -> cB
    com.iqiyi.video.download.engine.downloader.IQiyiDownloader mFileDownloader -> cC
    com.iqiyi.video.download.filedownload.db.DBRequestController mDBRequestController -> cD
    android.content.Context mContext -> mContext
    com.iqiyi.video.download.filedownload.ipc.DownloadCoreManager downloadCoreManager -> cE
    com.iqiyi.video.download.filedownload.ipc.RemoteMessageProcesser binderProcesser -> cF
    android.os.RemoteCallbackList remoteCallbackList -> cG
    com.iqiyi.video.download.filedownload.ipc.DownloadCoreManager getInstance(android.content.Context) -> f
    void <init>(android.content.Context) -> <init>
    void init() -> init
    void destroy() -> destroy
    void sendMessage(com.iqiyi.video.download.filedownload.FileDownloadExBean) -> a
    com.iqiyi.video.download.filedownload.FileDownloadExBean getMessage(com.iqiyi.video.download.filedownload.FileDownloadExBean) -> b
    void registerCallback(com.iqiyi.video.download.filedownload.IDownloadCoreCallback) -> a
    void unregisterCallback(com.iqiyi.video.download.filedownload.IDownloadCoreCallback) -> b
com.iqiyi.video.download.filedownload.ipc.MessageCenter -> com.iqiyi.video.download.filedownload.d.b:
    com.iqiyi.video.download.filedownload.FileDownloadExBean processRemoteMessage(com.iqiyi.video.download.filedownload.FileDownloadExBean,com.iqiyi.video.download.filedownload.FileDownloadController) -> a
com.iqiyi.video.download.filedownload.ipc.RemoteMessageProcesser -> com.iqiyi.video.download.filedownload.d.c:
    com.iqiyi.video.download.filedownload.ipc.RemoteMessageProcesser binderProcesser -> cF
    com.iqiyi.video.download.filedownload.FileDownloadController mFileDownloadController -> cB
    android.os.RemoteCallbackList remoteCallbackList -> cG
    java.lang.Object mLock -> mLock
    com.iqiyi.video.download.filedownload.ipc.RemoteMessageProcesser getInstance() -> aD
    void <init>() -> <init>
    void setRemoteCallbackList(android.os.RemoteCallbackList) -> a
    void setFileDownloadController(com.iqiyi.video.download.filedownload.FileDownloadController) -> a
    void sendMessage(com.iqiyi.video.download.filedownload.FileDownloadExBean) -> a
    com.iqiyi.video.download.filedownload.FileDownloadExBean processRemoteMessage(com.iqiyi.video.download.filedownload.FileDownloadExBean) -> d
com.iqiyi.video.download.filedownload.pool.CancelableThreadPoolExecutor -> com.iqiyi.video.download.filedownload.e.a:
    void <init>(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue,java.util.concurrent.ThreadFactory) -> <init>
    void <init>(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue,java.util.concurrent.ThreadFactory,java.util.concurrent.RejectedExecutionHandler) -> <init>
com.iqiyi.video.download.filedownload.pool.DownloadThreadPool -> com.iqiyi.video.download.filedownload.e.b:
    com.iqiyi.video.download.filedownload.pool.CancelableThreadPoolExecutor DOWNLOAD_POOL -> cH
    com.iqiyi.video.download.filedownload.pool.CancelableThreadPoolExecutor F4V_POOL -> cI
    com.iqiyi.video.download.filedownload.pool.CancelableThreadPoolExecutor createCacheThreadPool() -> aE
    com.iqiyi.video.download.filedownload.pool.CancelableThreadPoolExecutor createFixThreadPool(int) -> g
    void <clinit>() -> <clinit>
com.iqiyi.video.download.filedownload.pool.DownloadThreadPool$1 -> com.iqiyi.video.download.filedownload.e.c:
    java.util.concurrent.atomic.AtomicInteger mCount -> cJ
    void <init>() -> <init>
    java.lang.Thread newThread(java.lang.Runnable) -> newThread
com.iqiyi.video.download.filedownload.pool.DownloadThreadPool$2 -> com.iqiyi.video.download.filedownload.e.d:
    java.util.concurrent.atomic.AtomicInteger mCount -> cJ
    void <init>() -> <init>
    java.lang.Thread newThread(java.lang.Runnable) -> newThread
com.iqiyi.video.download.filedownload.pool.DownloadThreadPool$3 -> com.iqiyi.video.download.filedownload.e.e:
    void <init>() -> <init>
    void rejectedExecution(java.lang.Runnable,java.util.concurrent.ThreadPoolExecutor) -> rejectedExecution
com.iqiyi.video.download.filedownload.schedule.FileSchedule -> com.iqiyi.video.download.filedownload.f.a:
    void <init>() -> <init>
    int compare(org.qiyi.video.module.download.exbean.ScheduleBean,org.qiyi.video.module.download.exbean.ScheduleBean) -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
com.iqiyi.video.download.filedownload.task.CdnDownloadFileTask -> com.iqiyi.video.download.filedownload.g.a:
    android.content.Context mContext -> mContext
    com.iqiyi.video.download.filedownload.db.DBRequestController mDbController -> cm
    com.iqiyi.video.download.filedownload.task.CdnDownloadFileTask$FileDownloadRunnable mRunnable -> cK
    void <init>(android.content.Context,org.qiyi.video.module.download.exbean.FileDownloadObject,com.iqiyi.video.download.filedownload.db.DBRequestController) -> <init>
    boolean onStart() -> ai
    boolean onPause() -> aj
    boolean onAbort() -> ak
    boolean onEndSuccess() -> al
    boolean onEndError(java.lang.String,boolean) -> c
    void exitRunnable() -> aF
    int getMaxRetryTimes() -> aG
    int access$100(com.iqiyi.video.download.filedownload.task.CdnDownloadFileTask) -> a
com.iqiyi.video.download.filedownload.task.CdnDownloadFileTask$FileDownloadRunnable -> com.iqiyi.video.download.filedownload.g.b:
    android.content.Context mContext -> mContext
    com.iqiyi.video.download.engine.task.XBaseTaskExecutor mHost -> cL
    com.iqiyi.video.download.filedownload.db.DBRequestController mDbController -> cm
    boolean isDownloadSuccess -> cM
    boolean isDownloadError -> cN
    java.io.File downloadingFile -> cO
    java.io.File completeFile -> cP
    com.iqiyi.video.download.filedownload.http.DownloadHttpAdapter httpAdapter -> cQ
    int verifyRetryTimes -> cR
    int networkRetryTimes -> cS
    int unzipRetryTimes -> cT
    java.util.Random mRandom -> cU
    com.iqiyi.video.download.filedownload.task.CdnDownloadFileTask this$0 -> cV
    void <init>(com.iqiyi.video.download.filedownload.task.CdnDownloadFileTask,android.content.Context,com.iqiyi.video.download.engine.task.XBaseTaskExecutor,com.iqiyi.video.download.filedownload.db.DBRequestController) -> <init>
    boolean onPreExecute(org.qiyi.video.module.download.exbean.FileDownloadObject) -> o
    void onCancelled(org.qiyi.video.module.download.exbean.FileDownloadObject) -> p
    void onPreExecuteError(org.qiyi.video.module.download.exbean.FileDownloadObject) -> q
    void cancel() -> cancel
    void abortDownload() -> aH
    boolean onRepeatExecute(org.qiyi.video.module.download.exbean.FileDownloadObject) -> r
    void onPostExecute(org.qiyi.video.module.download.exbean.FileDownloadObject) -> s
    boolean isOn() -> aI
    long getRetryInterval(long) -> f
    org.qiyi.video.module.download.exbean.FileDownloadObject getBean() -> aJ
    void handleIntervalRetry() -> aK
    void handleError() -> aL
    void handleSuccess() -> aM
    void handleVerifyError() -> aN
    void handleUnzipError() -> aO
    boolean handleRenameFile() -> aP
    boolean checkFile(org.qiyi.video.module.download.exbean.FileDownloadObject,java.io.File,java.io.File) -> b
    void onCancelled(java.lang.Object) -> onCancelled
    void onPostExecute(java.lang.Object) -> onPostExecute
    boolean onRepeatExecute(java.lang.Object) -> g
    void onPreExecuteError(java.lang.Object) -> f
    boolean onPreExecute(java.lang.Object) -> e
    java.lang.Object getBean() -> am
    com.iqiyi.video.download.engine.task.XBaseTaskExecutor access$000(com.iqiyi.video.download.filedownload.task.CdnDownloadFileTask$FileDownloadRunnable) -> a
com.iqiyi.video.download.filedownload.task.CdnDownloadFileTask$FileDownloadRunnable$1 -> com.iqiyi.video.download.filedownload.g.c:
    com.iqiyi.video.download.filedownload.task.CdnDownloadFileTask$FileDownloadRunnable this$1 -> cW
    void <init>(com.iqiyi.video.download.filedownload.task.CdnDownloadFileTask$FileDownloadRunnable) -> <init>
    void onDataChanged(org.qiyi.video.module.download.exbean.FileDownloadObject) -> t
    void onDataChanged(org.qiyi.video.module.download.exbean.XTaskBean) -> h
com.iqiyi.video.download.filedownload.task.MultiDownloadFileTask -> com.iqiyi.video.download.filedownload.g.d:
    android.content.Context mContext -> mContext
    com.iqiyi.video.download.filedownload.db.DBRequestController mDbController -> cm
    com.iqiyi.video.download.filedownload.task.MultiDownloadFileTask$MainRunnable mRunnable -> cX
    void <init>(android.content.Context,org.qiyi.video.module.download.exbean.FileDownloadObject,com.iqiyi.video.download.filedownload.db.DBRequestController) -> <init>
    void <init>(android.content.Context,org.qiyi.video.module.download.exbean.FileDownloadObject,int,com.iqiyi.video.download.filedownload.db.DBRequestController) -> <init>
    boolean onStart() -> ai
    boolean onPause() -> aj
    boolean onAbort() -> ak
    boolean onEndSuccess() -> al
    boolean onEndError(java.lang.String,boolean) -> c
com.iqiyi.video.download.filedownload.task.MultiDownloadFileTask$1 -> com.iqiyi.video.download.filedownload.g.e:
com.iqiyi.video.download.filedownload.task.MultiDownloadFileTask$BitmapFile -> com.iqiyi.video.download.filedownload.g.f:
    void <init>() -> <init>
    boolean create(com.iqiyi.video.download.filedownload.task.MultiDownloadFileTask$BitmapInfo) -> a
    boolean update(com.iqiyi.video.download.filedownload.task.MultiDownloadFileTask$BitmapInfo) -> b
    boolean parse(java.io.File,com.iqiyi.video.download.filedownload.task.MultiDownloadFileTask$BitmapInfo) -> a
    java.io.File getFile(com.iqiyi.video.download.filedownload.task.MultiDownloadFileTask$BitmapInfo) -> c
    void <init>(com.iqiyi.video.download.filedownload.task.MultiDownloadFileTask$1) -> <init>
com.iqiyi.video.download.filedownload.task.MultiDownloadFileTask$BitmapInfo -> com.iqiyi.video.download.filedownload.g.g:
    java.lang.String savePath -> cY
    long unit -> cZ
    long size -> size
    int[] bits -> bits
    com.iqiyi.video.download.filedownload.task.MultiDownloadFileTask$BitmapFile config -> da
    java.lang.String toString() -> toString
    void <init>(java.lang.String) -> <init>
    boolean readFromConfig() -> aQ
    boolean saveToConfig() -> aR
    boolean setBitAndSaveToConfig(int) -> h
com.iqiyi.video.download.filedownload.task.MultiDownloadFileTask$FragmentRunnable -> com.iqiyi.video.download.filedownload.g.h:
    android.content.Context mContext -> mContext
    java.lang.String logTag -> db
    java.lang.String mUrl -> mUrl
    java.io.File mSaveFile -> dc
    com.iqiyi.video.download.filedownload.task.MultiDownloadFileTask$BitmapInfo mBitmapInfo -> dd
    long mStartLoc -> de
    long mEndLoc -> df
    int mCurrentBit -> dg
    byte[] mBuffer -> dh
    java.lang.String errorCode -> di
    boolean isError -> dj
    com.iqiyi.video.download.filedownload.http.DownloadHttpAdapter adapter -> dk
    void <init>(android.content.Context,java.lang.String,java.io.File,com.iqiyi.video.download.filedownload.task.MultiDownloadFileTask$BitmapInfo,long,long) -> <init>
    void cancel() -> cancel
    long getRetryInterval(long) -> f
    java.lang.String getBean() -> aS
    boolean onPreExecute(java.lang.String) -> t
    void onPreExecuteError(java.lang.String) -> u
    boolean onRepeatExecute(java.lang.String) -> v
    void onPostExecute(java.lang.String) -> w
    void onCancelled(java.lang.String) -> x
    void onCancelled(java.lang.Object) -> onCancelled
    void onPostExecute(java.lang.Object) -> onPostExecute
    boolean onRepeatExecute(java.lang.Object) -> g
    void onPreExecuteError(java.lang.Object) -> f
    boolean onPreExecute(java.lang.Object) -> e
    java.lang.Object getBean() -> am
    java.lang.String access$000(com.iqiyi.video.download.filedownload.task.MultiDownloadFileTask$FragmentRunnable) -> a
    boolean access$100(com.iqiyi.video.download.filedownload.task.MultiDownloadFileTask$FragmentRunnable) -> b
    java.lang.String access$200(com.iqiyi.video.download.filedownload.task.MultiDownloadFileTask$FragmentRunnable) -> c
com.iqiyi.video.download.filedownload.task.MultiDownloadFileTask$MainRunnable -> com.iqiyi.video.download.filedownload.g.i:
    java.util.concurrent.ExecutorService mThreadPool -> dl
    java.util.concurrent.Future mFuture -> dm
    java.lang.String realUrl -> do
    java.lang.String errorCode -> di
    boolean isDownloadSuccess -> cM
    long lastUpdateTime -> lastUpdateTime
    android.content.Context mContext -> mContext
    org.qiyi.video.module.download.exbean.FileDownloadObject mBean -> dp
    com.iqiyi.video.download.engine.task.XBaseTaskExecutor mHost -> cL
    com.iqiyi.video.download.filedownload.db.DBRequestController mDbController -> cm
    com.iqiyi.video.download.filedownload.task.MultiDownloadFileTask$FragmentRunnable[] fragmentTasks -> dq
    java.util.concurrent.Future[] fragmentFutures -> dr
    com.iqiyi.video.download.filedownload.task.MultiDownloadFileTask$BitmapInfo bitmapInfo -> ds
    com.iqiyi.video.download.filedownload.http.DownloadHttpAdapter adapter -> dk
    void <init>(android.content.Context,org.qiyi.video.module.download.exbean.FileDownloadObject,com.iqiyi.video.download.engine.task.XBaseTaskExecutor,com.iqiyi.video.download.filedownload.db.DBRequestController) -> <init>
    void setFuture(java.util.concurrent.Future) -> a
    void createThreadPool() -> aT
    void cancel() -> cancel
    void cancelAllTask() -> aU
    long getRetryInterval(long) -> f
    org.qiyi.video.module.download.exbean.FileDownloadObject getBean() -> aJ
    boolean onPreExecute(org.qiyi.video.module.download.exbean.FileDownloadObject) -> o
    void onPreExecuteError(org.qiyi.video.module.download.exbean.FileDownloadObject) -> q
    boolean onRepeatExecute(org.qiyi.video.module.download.exbean.FileDownloadObject) -> r
    void onPostExecute(org.qiyi.video.module.download.exbean.FileDownloadObject) -> s
    void onCancelled(org.qiyi.video.module.download.exbean.FileDownloadObject) -> p
    boolean createFullFile(java.io.File,long) -> a
    void onCancelled(java.lang.Object) -> onCancelled
    void onPostExecute(java.lang.Object) -> onPostExecute
    boolean onRepeatExecute(java.lang.Object) -> g
    void onPreExecuteError(java.lang.Object) -> f
    boolean onPreExecute(java.lang.Object) -> e
    java.lang.Object getBean() -> am
    void <clinit>() -> <clinit>
com.iqiyi.video.download.filedownload.verify.CRCVerification -> com.iqiyi.video.download.filedownload.h.a:
    void <init>() -> <init>
    boolean verify(java.lang.String,java.lang.String) -> b
    boolean checksumByCRC(java.io.File,java.lang.String) -> b
    byte[] getBytesBySize(java.io.File,int) -> a
com.iqiyi.video.download.filedownload.verify.MDFiveVerification -> com.iqiyi.video.download.filedownload.h.b:
    void <init>() -> <init>
    boolean verify(java.lang.String,java.lang.String) -> b
    java.lang.String fileMD5(java.lang.String) -> y
    java.lang.String byteArrayToHex(byte[]) -> b
com.iqiyi.video.download.filedownload.verify.RSAVerification -> com.iqiyi.video.download.filedownload.h.c:
    void <init>() -> <init>
    boolean verify(java.lang.String,java.lang.String) -> b
com.iqiyi.video.download.filedownload.verify.VerifyFactory -> com.iqiyi.video.download.filedownload.h.d:
    boolean verify(int,java.lang.String,java.lang.String) -> a
com.iqiyi.video.download.filedownload.verify.VerifyHelper -> com.iqiyi.video.download.filedownload.h.e:
    boolean isDownloadFileModified(java.lang.String,java.lang.String) -> c
    byte[] decryptBASE64(java.lang.String) -> z
    boolean verify(byte[],java.lang.String,byte[]) -> a
    byte[] inputToBytes(java.lang.String) -> A
com.iqiyi.video.download.filedownload.verify.ZipVerification -> com.iqiyi.video.download.filedownload.h.f:
    boolean unzipToSelfPath(java.lang.String) -> B
    java.lang.String zipPath2ZipDir(java.lang.String) -> C
    java.lang.String zipPath2ZipDir(java.lang.String,boolean) -> d
    boolean unzip(java.lang.String,java.lang.String) -> f
    int unzipAndWriteOneFile(java.util.zip.ZipFile,java.util.zip.ZipEntry,java.lang.String) -> a
    java.lang.String getFromLastIndexToEnd(java.lang.String,java.lang.String,boolean) -> a
    java.lang.String cutStringOfLastIndex(java.lang.String,java.lang.String,boolean,boolean) -> a
com.qiyi.video.QYApmAdapter -> com.qiyi.video.QYApmAdapter:
    void <init>() -> <init>
    void traceEnter(java.lang.String) -> traceEnter
    void traceLeave(java.lang.String) -> traceLeave
    void traceEnter(android.webkit.WebView,java.lang.String) -> traceEnter
    void traceLeave(android.webkit.WebView,java.lang.String) -> traceLeave
okhttp3.Address -> okhttp3.Address:
    okhttp3.HttpUrl url -> url
    okhttp3.Dns dns -> dns
    javax.net.SocketFactory socketFactory -> socketFactory
    okhttp3.Authenticator proxyAuthenticator -> proxyAuthenticator
    java.util.List protocols -> protocols
    java.util.List connectionSpecs -> connectionSpecs
    java.net.ProxySelector proxySelector -> proxySelector
    java.net.Proxy proxy -> proxy
    javax.net.ssl.SSLSocketFactory sslSocketFactory -> sslSocketFactory
    javax.net.ssl.HostnameVerifier hostnameVerifier -> hostnameVerifier
    okhttp3.CertificatePinner certificatePinner -> certificatePinner
    void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector) -> <init>
    okhttp3.HttpUrl url() -> url
    okhttp3.Dns dns() -> dns
    javax.net.SocketFactory socketFactory() -> socketFactory
    okhttp3.Authenticator proxyAuthenticator() -> proxyAuthenticator
    java.util.List protocols() -> protocols
    java.util.List connectionSpecs() -> connectionSpecs
    java.net.ProxySelector proxySelector() -> proxySelector
    java.net.Proxy proxy() -> proxy
    javax.net.ssl.SSLSocketFactory sslSocketFactory() -> sslSocketFactory
    javax.net.ssl.HostnameVerifier hostnameVerifier() -> hostnameVerifier
    okhttp3.CertificatePinner certificatePinner() -> certificatePinner
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
okhttp3.Authenticator -> okhttp3.Authenticator:
    okhttp3.Authenticator NONE -> NONE
    okhttp3.Request authenticate(okhttp3.Route,okhttp3.Response) -> authenticate
    void <clinit>() -> <clinit>
okhttp3.Authenticator$1 -> okhttp3.Authenticator$1:
    void <init>() -> <init>
    okhttp3.Request authenticate(okhttp3.Route,okhttp3.Response) -> authenticate
okhttp3.Cache -> okhttp3.Cache:
    int VERSION -> VERSION
    int ENTRY_METADATA -> ENTRY_METADATA
    int ENTRY_BODY -> ENTRY_BODY
    int ENTRY_COUNT -> ENTRY_COUNT
    okhttp3.internal.cache.InternalCache internalCache -> internalCache
    okhttp3.internal.cache.DiskLruCache cache -> cache
    int writeSuccessCount -> writeSuccessCount
    int writeAbortCount -> writeAbortCount
    int networkCount -> networkCount
    int hitCount -> hitCount
    int requestCount -> requestCount
    void <init>(java.io.File,long) -> <init>
    void <init>(java.io.File,long,okhttp3.internal.io.FileSystem) -> <init>
    java.lang.String urlToKey(okhttp3.Request) -> urlToKey
    okhttp3.Response get(okhttp3.Request) -> get
    okhttp3.internal.cache.CacheRequest put(okhttp3.Response) -> put
    void remove(okhttp3.Request) -> remove
    void update(okhttp3.Response,okhttp3.Response) -> update
    void abortQuietly(okhttp3.internal.cache.DiskLruCache$Editor) -> abortQuietly
    void initialize() -> initialize
    void delete() -> delete
    void evictAll() -> evictAll
    java.util.Iterator urls() -> urls
    int writeAbortCount() -> writeAbortCount
    int writeSuccessCount() -> writeSuccessCount
    long size() -> size
    long maxSize() -> maxSize
    void flush() -> flush
    void close() -> close
    java.io.File directory() -> directory
    boolean isClosed() -> isClosed
    void trackResponse(okhttp3.internal.cache.CacheStrategy) -> trackResponse
    void trackConditionalCacheHit() -> trackConditionalCacheHit
    int networkCount() -> networkCount
    int hitCount() -> hitCount
    int requestCount() -> requestCount
    int readInt(okio.BufferedSource) -> readInt
    okhttp3.internal.cache.CacheRequest access$000(okhttp3.Cache,okhttp3.Response) -> access$000
    void access$100(okhttp3.Cache,okhttp3.Request) -> access$100
    void access$200(okhttp3.Cache,okhttp3.Response,okhttp3.Response) -> access$200
    void access$300(okhttp3.Cache) -> access$300
    void access$400(okhttp3.Cache,okhttp3.internal.cache.CacheStrategy) -> access$400
    okhttp3.internal.cache.DiskLruCache access$600(okhttp3.Cache) -> access$600
    int access$808(okhttp3.Cache) -> access$808
    int access$908(okhttp3.Cache) -> access$908
    int access$1000(okio.BufferedSource) -> access$1000
okhttp3.Cache$1 -> okhttp3.Cache$1:
    okhttp3.Cache this$0 -> this$0
    void <init>(okhttp3.Cache) -> <init>
    okhttp3.Response get(okhttp3.Request) -> get
    okhttp3.internal.cache.CacheRequest put(okhttp3.Response) -> put
    void remove(okhttp3.Request) -> remove
    void update(okhttp3.Response,okhttp3.Response) -> update
    void trackConditionalCacheHit() -> trackConditionalCacheHit
    void trackResponse(okhttp3.internal.cache.CacheStrategy) -> trackResponse
okhttp3.Cache$2 -> okhttp3.Cache$2:
    java.util.Iterator delegate -> delegate
    java.lang.String nextUrl -> nextUrl
    boolean canRemove -> canRemove
    okhttp3.Cache this$0 -> this$0
    void <init>(okhttp3.Cache) -> <init>
    boolean hasNext() -> hasNext
    java.lang.String next() -> next
    void remove() -> remove
    java.lang.Object next() -> next
okhttp3.Cache$CacheRequestImpl -> okhttp3.Cache$CacheRequestImpl:
    okhttp3.internal.cache.DiskLruCache$Editor editor -> editor
    okio.Sink cacheOut -> cacheOut
    boolean done -> done
    okio.Sink body -> body
    okhttp3.Cache this$0 -> this$0
    void <init>(okhttp3.Cache,okhttp3.internal.cache.DiskLruCache$Editor) -> <init>
    void abort() -> abort
    okio.Sink body() -> body
    boolean access$700(okhttp3.Cache$CacheRequestImpl) -> access$700
    boolean access$702(okhttp3.Cache$CacheRequestImpl,boolean) -> access$702
okhttp3.Cache$CacheRequestImpl$1 -> okhttp3.Cache$CacheRequestImpl$1:
    okhttp3.Cache val$this$0 -> val$this$0
    okhttp3.internal.cache.DiskLruCache$Editor val$editor -> val$editor
    okhttp3.Cache$CacheRequestImpl this$1 -> this$1
    void <init>(okhttp3.Cache$CacheRequestImpl,okio.Sink,okhttp3.Cache,okhttp3.internal.cache.DiskLruCache$Editor) -> <init>
    void close() -> close
okhttp3.Cache$CacheResponseBody -> okhttp3.Cache$CacheResponseBody:
    okhttp3.internal.cache.DiskLruCache$Snapshot snapshot -> snapshot
    okio.BufferedSource bodySource -> bodySource
    java.lang.String contentType -> contentType
    java.lang.String contentLength -> contentLength
    void <init>(okhttp3.internal.cache.DiskLruCache$Snapshot,java.lang.String,java.lang.String) -> <init>
    okhttp3.MediaType contentType() -> contentType
    long contentLength() -> contentLength
    okio.BufferedSource source() -> source
    okhttp3.internal.cache.DiskLruCache$Snapshot access$500(okhttp3.Cache$CacheResponseBody) -> access$500
okhttp3.Cache$CacheResponseBody$1 -> okhttp3.Cache$CacheResponseBody$1:
    okhttp3.internal.cache.DiskLruCache$Snapshot val$snapshot -> val$snapshot
    okhttp3.Cache$CacheResponseBody this$0 -> this$0
    void <init>(okhttp3.Cache$CacheResponseBody,okio.Source,okhttp3.internal.cache.DiskLruCache$Snapshot) -> <init>
    void close() -> close
okhttp3.Cache$Entry -> okhttp3.Cache$Entry:
    java.lang.String SENT_MILLIS -> SENT_MILLIS
    java.lang.String RECEIVED_MILLIS -> RECEIVED_MILLIS
    java.lang.String url -> url
    okhttp3.Headers varyHeaders -> varyHeaders
    java.lang.String requestMethod -> requestMethod
    okhttp3.Protocol protocol -> protocol
    int code -> code
    java.lang.String message -> message
    okhttp3.Headers responseHeaders -> responseHeaders
    okhttp3.Handshake handshake -> handshake
    long sentRequestMillis -> sentRequestMillis
    long receivedResponseMillis -> receivedResponseMillis
    void <init>(okio.Source) -> <init>
    void <init>(okhttp3.Response) -> <init>
    void writeTo(okhttp3.internal.cache.DiskLruCache$Editor) -> writeTo
    boolean isHttps() -> isHttps
    java.util.List readCertificateList(okio.BufferedSource) -> readCertificateList
    void writeCertList(okio.BufferedSink,java.util.List) -> writeCertList
    boolean matches(okhttp3.Request,okhttp3.Response) -> matches
    okhttp3.Response response(okhttp3.internal.cache.DiskLruCache$Snapshot) -> response
    void <clinit>() -> <clinit>
okhttp3.CacheControl -> okhttp3.CacheControl:
    okhttp3.CacheControl FORCE_NETWORK -> FORCE_NETWORK
    okhttp3.CacheControl FORCE_CACHE -> FORCE_CACHE
    boolean noCache -> noCache
    boolean noStore -> noStore
    int maxAgeSeconds -> maxAgeSeconds
    int sMaxAgeSeconds -> sMaxAgeSeconds
    boolean isPrivate -> isPrivate
    boolean isPublic -> isPublic
    boolean mustRevalidate -> mustRevalidate
    int maxStaleSeconds -> maxStaleSeconds
    int minFreshSeconds -> minFreshSeconds
    boolean onlyIfCached -> onlyIfCached
    boolean noTransform -> noTransform
    java.lang.String headerValue -> headerValue
    void <init>(boolean,boolean,int,int,boolean,boolean,boolean,int,int,boolean,boolean,java.lang.String) -> <init>
    void <init>(okhttp3.CacheControl$Builder) -> <init>
    boolean noCache() -> noCache
    boolean noStore() -> noStore
    int maxAgeSeconds() -> maxAgeSeconds
    int sMaxAgeSeconds() -> sMaxAgeSeconds
    boolean isPrivate() -> isPrivate
    boolean isPublic() -> isPublic
    boolean mustRevalidate() -> mustRevalidate
    int maxStaleSeconds() -> maxStaleSeconds
    int minFreshSeconds() -> minFreshSeconds
    boolean onlyIfCached() -> onlyIfCached
    boolean noTransform() -> noTransform
    okhttp3.CacheControl parse(okhttp3.Headers) -> parse
    java.lang.String toString() -> toString
    java.lang.String headerValue() -> headerValue
    void <init>(okhttp3.CacheControl$Builder,okhttp3.CacheControl$1) -> <init>
    void <clinit>() -> <clinit>
okhttp3.CacheControl$1 -> okhttp3.CacheControl$1:
okhttp3.CacheControl$Builder -> okhttp3.CacheControl$Builder:
    boolean noCache -> noCache
    boolean noStore -> noStore
    int maxAgeSeconds -> maxAgeSeconds
    int maxStaleSeconds -> maxStaleSeconds
    int minFreshSeconds -> minFreshSeconds
    boolean onlyIfCached -> onlyIfCached
    boolean noTransform -> noTransform
    void <init>() -> <init>
    okhttp3.CacheControl$Builder noCache() -> noCache
    okhttp3.CacheControl$Builder noStore() -> noStore
    okhttp3.CacheControl$Builder maxAge(int,java.util.concurrent.TimeUnit) -> maxAge
    okhttp3.CacheControl$Builder maxStale(int,java.util.concurrent.TimeUnit) -> maxStale
    okhttp3.CacheControl$Builder minFresh(int,java.util.concurrent.TimeUnit) -> minFresh
    okhttp3.CacheControl$Builder onlyIfCached() -> onlyIfCached
    okhttp3.CacheControl$Builder noTransform() -> noTransform
    okhttp3.CacheControl build() -> build
okhttp3.Call -> okhttp3.Call:
    okhttp3.Request request() -> request
    okhttp3.Response execute() -> execute
    void enqueue(okhttp3.Callback) -> enqueue
    void cancel() -> cancel
    boolean isExecuted() -> isExecuted
    boolean isCanceled() -> isCanceled
okhttp3.Call$Factory -> okhttp3.Call$Factory:
    okhttp3.Call newCall(okhttp3.Request) -> newCall
okhttp3.Callback -> okhttp3.Callback:
    void onFailure(okhttp3.Call,java.io.IOException) -> onFailure
    void onResponse(okhttp3.Call,okhttp3.Response) -> onResponse
okhttp3.CertificatePinner -> okhttp3.CertificatePinner:
    okhttp3.CertificatePinner DEFAULT -> DEFAULT
    java.util.List pins -> pins
    okhttp3.internal.tls.CertificateChainCleaner certificateChainCleaner -> certificateChainCleaner
    void <init>(java.util.List,okhttp3.internal.tls.CertificateChainCleaner) -> <init>
    void check(java.lang.String,java.util.List) -> check
    void check(java.lang.String,java.security.cert.Certificate[]) -> check
    java.util.List findMatchingPins(java.lang.String) -> findMatchingPins
    okhttp3.CertificatePinner withCertificateChainCleaner(okhttp3.internal.tls.CertificateChainCleaner) -> withCertificateChainCleaner
    java.lang.String pin(java.security.cert.Certificate) -> pin
    okio.ByteString sha1(java.security.cert.X509Certificate) -> sha1
    okio.ByteString sha256(java.security.cert.X509Certificate) -> sha256
    void <init>(java.util.List,okhttp3.internal.tls.CertificateChainCleaner,okhttp3.CertificatePinner$1) -> <init>
    void <clinit>() -> <clinit>
okhttp3.CertificatePinner$1 -> okhttp3.CertificatePinner$1:
okhttp3.CertificatePinner$Builder -> okhttp3.CertificatePinner$Builder:
    java.util.List pins -> pins
    void <init>() -> <init>
    okhttp3.CertificatePinner$Builder add(java.lang.String,java.lang.String[]) -> add
    okhttp3.CertificatePinner build() -> build
okhttp3.CertificatePinner$Pin -> okhttp3.CertificatePinner$Pin:
    java.lang.String WILDCARD -> WILDCARD
    java.lang.String pattern -> pattern
    java.lang.String canonicalHostname -> canonicalHostname
    java.lang.String hashAlgorithm -> hashAlgorithm
    okio.ByteString hash -> hash
    void <init>(java.lang.String,java.lang.String) -> <init>
    boolean matches(java.lang.String) -> matches
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
okhttp3.Challenge -> okhttp3.Challenge:
    java.lang.String scheme -> scheme
    java.lang.String realm -> realm
    void <init>(java.lang.String,java.lang.String) -> <init>
    java.lang.String scheme() -> scheme
    java.lang.String realm() -> realm
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
okhttp3.CipherSuite -> okhttp3.CipherSuite:
    java.util.concurrent.ConcurrentMap INSTANCES -> INSTANCES
    okhttp3.CipherSuite TLS_RSA_WITH_NULL_MD5 -> TLS_RSA_WITH_NULL_MD5
    okhttp3.CipherSuite TLS_RSA_WITH_NULL_SHA -> TLS_RSA_WITH_NULL_SHA
    okhttp3.CipherSuite TLS_RSA_EXPORT_WITH_RC4_40_MD5 -> TLS_RSA_EXPORT_WITH_RC4_40_MD5
    okhttp3.CipherSuite TLS_RSA_WITH_RC4_128_MD5 -> TLS_RSA_WITH_RC4_128_MD5
    okhttp3.CipherSuite TLS_RSA_WITH_RC4_128_SHA -> TLS_RSA_WITH_RC4_128_SHA
    okhttp3.CipherSuite TLS_RSA_EXPORT_WITH_DES40_CBC_SHA -> TLS_RSA_EXPORT_WITH_DES40_CBC_SHA
    okhttp3.CipherSuite TLS_RSA_WITH_DES_CBC_SHA -> TLS_RSA_WITH_DES_CBC_SHA
    okhttp3.CipherSuite TLS_RSA_WITH_3DES_EDE_CBC_SHA -> TLS_RSA_WITH_3DES_EDE_CBC_SHA
    okhttp3.CipherSuite TLS_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA -> TLS_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA
    okhttp3.CipherSuite TLS_DHE_DSS_WITH_DES_CBC_SHA -> TLS_DHE_DSS_WITH_DES_CBC_SHA
    okhttp3.CipherSuite TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA -> TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA
    okhttp3.CipherSuite TLS_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA -> TLS_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA
    okhttp3.CipherSuite TLS_DHE_RSA_WITH_DES_CBC_SHA -> TLS_DHE_RSA_WITH_DES_CBC_SHA
    okhttp3.CipherSuite TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA -> TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA
    okhttp3.CipherSuite TLS_DH_anon_EXPORT_WITH_RC4_40_MD5 -> TLS_DH_anon_EXPORT_WITH_RC4_40_MD5
    okhttp3.CipherSuite TLS_DH_anon_WITH_RC4_128_MD5 -> TLS_DH_anon_WITH_RC4_128_MD5
    okhttp3.CipherSuite TLS_DH_anon_EXPORT_WITH_DES40_CBC_SHA -> TLS_DH_anon_EXPORT_WITH_DES40_CBC_SHA
    okhttp3.CipherSuite TLS_DH_anon_WITH_DES_CBC_SHA -> TLS_DH_anon_WITH_DES_CBC_SHA
    okhttp3.CipherSuite TLS_DH_anon_WITH_3DES_EDE_CBC_SHA -> TLS_DH_anon_WITH_3DES_EDE_CBC_SHA
    okhttp3.CipherSuite TLS_KRB5_WITH_DES_CBC_SHA -> TLS_KRB5_WITH_DES_CBC_SHA
    okhttp3.CipherSuite TLS_KRB5_WITH_3DES_EDE_CBC_SHA -> TLS_KRB5_WITH_3DES_EDE_CBC_SHA
    okhttp3.CipherSuite TLS_KRB5_WITH_RC4_128_SHA -> TLS_KRB5_WITH_RC4_128_SHA
    okhttp3.CipherSuite TLS_KRB5_WITH_DES_CBC_MD5 -> TLS_KRB5_WITH_DES_CBC_MD5
    okhttp3.CipherSuite TLS_KRB5_WITH_3DES_EDE_CBC_MD5 -> TLS_KRB5_WITH_3DES_EDE_CBC_MD5
    okhttp3.CipherSuite TLS_KRB5_WITH_RC4_128_MD5 -> TLS_KRB5_WITH_RC4_128_MD5
    okhttp3.CipherSuite TLS_KRB5_EXPORT_WITH_DES_CBC_40_SHA -> TLS_KRB5_EXPORT_WITH_DES_CBC_40_SHA
    okhttp3.CipherSuite TLS_KRB5_EXPORT_WITH_RC4_40_SHA -> TLS_KRB5_EXPORT_WITH_RC4_40_SHA
    okhttp3.CipherSuite TLS_KRB5_EXPORT_WITH_DES_CBC_40_MD5 -> TLS_KRB5_EXPORT_WITH_DES_CBC_40_MD5
    okhttp3.CipherSuite TLS_KRB5_EXPORT_WITH_RC4_40_MD5 -> TLS_KRB5_EXPORT_WITH_RC4_40_MD5
    okhttp3.CipherSuite TLS_RSA_WITH_AES_128_CBC_SHA -> TLS_RSA_WITH_AES_128_CBC_SHA
    okhttp3.CipherSuite TLS_DHE_DSS_WITH_AES_128_CBC_SHA -> TLS_DHE_DSS_WITH_AES_128_CBC_SHA
    okhttp3.CipherSuite TLS_DHE_RSA_WITH_AES_128_CBC_SHA -> TLS_DHE_RSA_WITH_AES_128_CBC_SHA
    okhttp3.CipherSuite TLS_DH_anon_WITH_AES_128_CBC_SHA -> TLS_DH_anon_WITH_AES_128_CBC_SHA
    okhttp3.CipherSuite TLS_RSA_WITH_AES_256_CBC_SHA -> TLS_RSA_WITH_AES_256_CBC_SHA
    okhttp3.CipherSuite TLS_DHE_DSS_WITH_AES_256_CBC_SHA -> TLS_DHE_DSS_WITH_AES_256_CBC_SHA
    okhttp3.CipherSuite TLS_DHE_RSA_WITH_AES_256_CBC_SHA -> TLS_DHE_RSA_WITH_AES_256_CBC_SHA
    okhttp3.CipherSuite TLS_DH_anon_WITH_AES_256_CBC_SHA -> TLS_DH_anon_WITH_AES_256_CBC_SHA
    okhttp3.CipherSuite TLS_RSA_WITH_NULL_SHA256 -> TLS_RSA_WITH_NULL_SHA256
    okhttp3.CipherSuite TLS_RSA_WITH_AES_128_CBC_SHA256 -> TLS_RSA_WITH_AES_128_CBC_SHA256
    okhttp3.CipherSuite TLS_RSA_WITH_AES_256_CBC_SHA256 -> TLS_RSA_WITH_AES_256_CBC_SHA256
    okhttp3.CipherSuite TLS_DHE_DSS_WITH_AES_128_CBC_SHA256 -> TLS_DHE_DSS_WITH_AES_128_CBC_SHA256
    okhttp3.CipherSuite TLS_DHE_RSA_WITH_AES_128_CBC_SHA256 -> TLS_DHE_RSA_WITH_AES_128_CBC_SHA256
    okhttp3.CipherSuite TLS_DHE_DSS_WITH_AES_256_CBC_SHA256 -> TLS_DHE_DSS_WITH_AES_256_CBC_SHA256
    okhttp3.CipherSuite TLS_DHE_RSA_WITH_AES_256_CBC_SHA256 -> TLS_DHE_RSA_WITH_AES_256_CBC_SHA256
    okhttp3.CipherSuite TLS_DH_anon_WITH_AES_128_CBC_SHA256 -> TLS_DH_anon_WITH_AES_128_CBC_SHA256
    okhttp3.CipherSuite TLS_DH_anon_WITH_AES_256_CBC_SHA256 -> TLS_DH_anon_WITH_AES_256_CBC_SHA256
    okhttp3.CipherSuite TLS_RSA_WITH_AES_128_GCM_SHA256 -> TLS_RSA_WITH_AES_128_GCM_SHA256
    okhttp3.CipherSuite TLS_RSA_WITH_AES_256_GCM_SHA384 -> TLS_RSA_WITH_AES_256_GCM_SHA384
    okhttp3.CipherSuite TLS_DHE_RSA_WITH_AES_128_GCM_SHA256 -> TLS_DHE_RSA_WITH_AES_128_GCM_SHA256
    okhttp3.CipherSuite TLS_DHE_RSA_WITH_AES_256_GCM_SHA384 -> TLS_DHE_RSA_WITH_AES_256_GCM_SHA384
    okhttp3.CipherSuite TLS_DHE_DSS_WITH_AES_128_GCM_SHA256 -> TLS_DHE_DSS_WITH_AES_128_GCM_SHA256
    okhttp3.CipherSuite TLS_DHE_DSS_WITH_AES_256_GCM_SHA384 -> TLS_DHE_DSS_WITH_AES_256_GCM_SHA384
    okhttp3.CipherSuite TLS_DH_anon_WITH_AES_128_GCM_SHA256 -> TLS_DH_anon_WITH_AES_128_GCM_SHA256
    okhttp3.CipherSuite TLS_DH_anon_WITH_AES_256_GCM_SHA384 -> TLS_DH_anon_WITH_AES_256_GCM_SHA384
    okhttp3.CipherSuite TLS_EMPTY_RENEGOTIATION_INFO_SCSV -> TLS_EMPTY_RENEGOTIATION_INFO_SCSV
    okhttp3.CipherSuite TLS_ECDH_ECDSA_WITH_NULL_SHA -> TLS_ECDH_ECDSA_WITH_NULL_SHA
    okhttp3.CipherSuite TLS_ECDH_ECDSA_WITH_RC4_128_SHA -> TLS_ECDH_ECDSA_WITH_RC4_128_SHA
    okhttp3.CipherSuite TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA -> TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA
    okhttp3.CipherSuite TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA -> TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA
    okhttp3.CipherSuite TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA -> TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA
    okhttp3.CipherSuite TLS_ECDHE_ECDSA_WITH_NULL_SHA -> TLS_ECDHE_ECDSA_WITH_NULL_SHA
    okhttp3.CipherSuite TLS_ECDHE_ECDSA_WITH_RC4_128_SHA -> TLS_ECDHE_ECDSA_WITH_RC4_128_SHA
    okhttp3.CipherSuite TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA -> TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA
    okhttp3.CipherSuite TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA -> TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA
    okhttp3.CipherSuite TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA -> TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA
    okhttp3.CipherSuite TLS_ECDH_RSA_WITH_NULL_SHA -> TLS_ECDH_RSA_WITH_NULL_SHA
    okhttp3.CipherSuite TLS_ECDH_RSA_WITH_RC4_128_SHA -> TLS_ECDH_RSA_WITH_RC4_128_SHA
    okhttp3.CipherSuite TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA -> TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA
    okhttp3.CipherSuite TLS_ECDH_RSA_WITH_AES_128_CBC_SHA -> TLS_ECDH_RSA_WITH_AES_128_CBC_SHA
    okhttp3.CipherSuite TLS_ECDH_RSA_WITH_AES_256_CBC_SHA -> TLS_ECDH_RSA_WITH_AES_256_CBC_SHA
    okhttp3.CipherSuite TLS_ECDHE_RSA_WITH_NULL_SHA -> TLS_ECDHE_RSA_WITH_NULL_SHA
    okhttp3.CipherSuite TLS_ECDHE_RSA_WITH_RC4_128_SHA -> TLS_ECDHE_RSA_WITH_RC4_128_SHA
    okhttp3.CipherSuite TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA -> TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA
    okhttp3.CipherSuite TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA -> TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA
    okhttp3.CipherSuite TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA -> TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA
    okhttp3.CipherSuite TLS_ECDH_anon_WITH_NULL_SHA -> TLS_ECDH_anon_WITH_NULL_SHA
    okhttp3.CipherSuite TLS_ECDH_anon_WITH_RC4_128_SHA -> TLS_ECDH_anon_WITH_RC4_128_SHA
    okhttp3.CipherSuite TLS_ECDH_anon_WITH_3DES_EDE_CBC_SHA -> TLS_ECDH_anon_WITH_3DES_EDE_CBC_SHA
    okhttp3.CipherSuite TLS_ECDH_anon_WITH_AES_128_CBC_SHA -> TLS_ECDH_anon_WITH_AES_128_CBC_SHA
    okhttp3.CipherSuite TLS_ECDH_anon_WITH_AES_256_CBC_SHA -> TLS_ECDH_anon_WITH_AES_256_CBC_SHA
    okhttp3.CipherSuite TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256 -> TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256
    okhttp3.CipherSuite TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384 -> TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384
    okhttp3.CipherSuite TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256 -> TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256
    okhttp3.CipherSuite TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384 -> TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384
    okhttp3.CipherSuite TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256 -> TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256
    okhttp3.CipherSuite TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384 -> TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384
    okhttp3.CipherSuite TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256 -> TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256
    okhttp3.CipherSuite TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384 -> TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384
    okhttp3.CipherSuite TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 -> TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256
    okhttp3.CipherSuite TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 -> TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
    okhttp3.CipherSuite TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256 -> TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256
    okhttp3.CipherSuite TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384 -> TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384
    okhttp3.CipherSuite TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 -> TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256
    okhttp3.CipherSuite TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 -> TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384
    okhttp3.CipherSuite TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256 -> TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256
    okhttp3.CipherSuite TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384 -> TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384
    java.lang.String javaName -> javaName
    okhttp3.CipherSuite forJavaName(java.lang.String) -> forJavaName
    void <init>(java.lang.String) -> <init>
    okhttp3.CipherSuite of(java.lang.String,int,int,int,int) -> of
    java.lang.String javaName() -> javaName
    java.lang.String toString() -> toString
    void <clinit>() -> <clinit>
okhttp3.Connection -> okhttp3.Connection:
    okhttp3.Route route() -> route
    java.net.Socket socket() -> socket
    okhttp3.Handshake handshake() -> handshake
    okhttp3.Protocol protocol() -> protocol
okhttp3.ConnectionPool -> okhttp3.ConnectionPool:
    java.util.concurrent.Executor executor -> executor
    int maxIdleConnections -> maxIdleConnections
    long keepAliveDurationNs -> keepAliveDurationNs
    java.lang.Runnable cleanupRunnable -> cleanupRunnable
    java.util.Deque connections -> connections
    okhttp3.internal.connection.RouteDatabase routeDatabase -> routeDatabase
    boolean cleanupRunning -> cleanupRunning
    boolean $assertionsDisabled -> $assertionsDisabled
    void <init>() -> <init>
    void <init>(int,long,java.util.concurrent.TimeUnit) -> <init>
    int idleConnectionCount() -> idleConnectionCount
    int connectionCount() -> connectionCount
    okhttp3.internal.connection.RealConnection get(okhttp3.Address,okhttp3.internal.connection.StreamAllocation) -> get
    void put(okhttp3.internal.connection.RealConnection) -> put
    boolean connectionBecameIdle(okhttp3.internal.connection.RealConnection) -> connectionBecameIdle
    void evictAll() -> evictAll
    long cleanup(long) -> cleanup
    int pruneAndGetAllocationCount(okhttp3.internal.connection.RealConnection,long) -> pruneAndGetAllocationCount
    void <clinit>() -> <clinit>
okhttp3.ConnectionPool$1 -> okhttp3.ConnectionPool$1:
    okhttp3.ConnectionPool this$0 -> this$0
    void <init>(okhttp3.ConnectionPool) -> <init>
    void run() -> run
okhttp3.ConnectionSpec -> okhttp3.ConnectionSpec:
    okhttp3.CipherSuite[] APPROVED_CIPHER_SUITES -> APPROVED_CIPHER_SUITES
    okhttp3.ConnectionSpec MODERN_TLS -> MODERN_TLS
    okhttp3.ConnectionSpec COMPATIBLE_TLS -> COMPATIBLE_TLS
    okhttp3.ConnectionSpec CLEARTEXT -> CLEARTEXT
    boolean tls -> tls
    boolean supportsTlsExtensions -> supportsTlsExtensions
    java.lang.String[] cipherSuites -> cipherSuites
    java.lang.String[] tlsVersions -> tlsVersions
    void <init>(okhttp3.ConnectionSpec$Builder) -> <init>
    boolean isTls() -> isTls
    java.util.List cipherSuites() -> cipherSuites
    java.util.List tlsVersions() -> tlsVersions
    boolean supportsTlsExtensions() -> supportsTlsExtensions
    void apply(javax.net.ssl.SSLSocket,boolean) -> apply
    okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean) -> supportedSpec
    boolean isCompatible(javax.net.ssl.SSLSocket) -> isCompatible
    boolean nonEmptyIntersection(java.lang.String[],java.lang.String[]) -> nonEmptyIntersection
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    boolean access$400(okhttp3.ConnectionSpec) -> access$400
    java.lang.String[] access$500(okhttp3.ConnectionSpec) -> access$500
    java.lang.String[] access$600(okhttp3.ConnectionSpec) -> access$600
    boolean access$700(okhttp3.ConnectionSpec) -> access$700
    void <init>(okhttp3.ConnectionSpec$Builder,okhttp3.ConnectionSpec$1) -> <init>
    void <clinit>() -> <clinit>
okhttp3.ConnectionSpec$1 -> okhttp3.ConnectionSpec$1:
okhttp3.ConnectionSpec$Builder -> okhttp3.ConnectionSpec$Builder:
    boolean tls -> tls
    java.lang.String[] cipherSuites -> cipherSuites
    java.lang.String[] tlsVersions -> tlsVersions
    boolean supportsTlsExtensions -> supportsTlsExtensions
    void <init>(boolean) -> <init>
    void <init>(okhttp3.ConnectionSpec) -> <init>
    okhttp3.ConnectionSpec$Builder allEnabledCipherSuites() -> allEnabledCipherSuites
    okhttp3.ConnectionSpec$Builder cipherSuites(okhttp3.CipherSuite[]) -> cipherSuites
    okhttp3.ConnectionSpec$Builder cipherSuites(java.lang.String[]) -> cipherSuites
    okhttp3.ConnectionSpec$Builder allEnabledTlsVersions() -> allEnabledTlsVersions
    okhttp3.ConnectionSpec$Builder tlsVersions(okhttp3.TlsVersion[]) -> tlsVersions
    okhttp3.ConnectionSpec$Builder tlsVersions(java.lang.String[]) -> tlsVersions
    okhttp3.ConnectionSpec$Builder supportsTlsExtensions(boolean) -> supportsTlsExtensions
    okhttp3.ConnectionSpec build() -> build
    boolean access$000(okhttp3.ConnectionSpec$Builder) -> access$000
    java.lang.String[] access$100(okhttp3.ConnectionSpec$Builder) -> access$100
    java.lang.String[] access$200(okhttp3.ConnectionSpec$Builder) -> access$200
    boolean access$300(okhttp3.ConnectionSpec$Builder) -> access$300
okhttp3.Cookie -> okhttp3.Cookie:
    java.util.regex.Pattern YEAR_PATTERN -> YEAR_PATTERN
    java.util.regex.Pattern MONTH_PATTERN -> MONTH_PATTERN
    java.util.regex.Pattern DAY_OF_MONTH_PATTERN -> DAY_OF_MONTH_PATTERN
    java.util.regex.Pattern TIME_PATTERN -> TIME_PATTERN
    java.lang.String name -> name
    java.lang.String value -> value
    long expiresAt -> expiresAt
    java.lang.String domain -> domain
    java.lang.String path -> path
    boolean secure -> secure
    boolean httpOnly -> httpOnly
    boolean persistent -> persistent
    boolean hostOnly -> hostOnly
    void <init>(java.lang.String,java.lang.String,long,java.lang.String,java.lang.String,boolean,boolean,boolean,boolean) -> <init>
    void <init>(okhttp3.Cookie$Builder) -> <init>
    java.lang.String name() -> name
    java.lang.String value() -> value
    boolean persistent() -> persistent
    long expiresAt() -> expiresAt
    boolean hostOnly() -> hostOnly
    java.lang.String domain() -> domain
    java.lang.String path() -> path
    boolean httpOnly() -> httpOnly
    boolean secure() -> secure
    boolean matches(okhttp3.HttpUrl) -> matches
    boolean domainMatch(okhttp3.HttpUrl,java.lang.String) -> domainMatch
    boolean pathMatch(okhttp3.HttpUrl,java.lang.String) -> pathMatch
    okhttp3.Cookie parse(okhttp3.HttpUrl,java.lang.String) -> parse
    okhttp3.Cookie parse(long,okhttp3.HttpUrl,java.lang.String) -> parse
    long parseExpires(java.lang.String,int,int) -> parseExpires
    int dateCharacterOffset(java.lang.String,int,int,boolean) -> dateCharacterOffset
    long parseMaxAge(java.lang.String) -> parseMaxAge
    java.lang.String parseDomain(java.lang.String) -> parseDomain
    java.util.List parseAll(okhttp3.HttpUrl,okhttp3.Headers) -> parseAll
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    void <init>(okhttp3.Cookie$Builder,okhttp3.Cookie$1) -> <init>
    void <clinit>() -> <clinit>
okhttp3.Cookie$1 -> okhttp3.Cookie$1:
okhttp3.Cookie$Builder -> okhttp3.Cookie$Builder:
    java.lang.String name -> name
    java.lang.String value -> value
    long expiresAt -> expiresAt
    java.lang.String domain -> domain
    java.lang.String path -> path
    boolean secure -> secure
    boolean httpOnly -> httpOnly
    boolean persistent -> persistent
    boolean hostOnly -> hostOnly
    void <init>() -> <init>
    okhttp3.Cookie$Builder name(java.lang.String) -> name
    okhttp3.Cookie$Builder value(java.lang.String) -> value
    okhttp3.Cookie$Builder expiresAt(long) -> expiresAt
    okhttp3.Cookie$Builder domain(java.lang.String) -> domain
    okhttp3.Cookie$Builder hostOnlyDomain(java.lang.String) -> hostOnlyDomain
    okhttp3.Cookie$Builder domain(java.lang.String,boolean) -> domain
    okhttp3.Cookie$Builder path(java.lang.String) -> path
    okhttp3.Cookie$Builder secure() -> secure
    okhttp3.Cookie$Builder httpOnly() -> httpOnly
    okhttp3.Cookie build() -> build
okhttp3.CookieJar -> okhttp3.CookieJar:
    okhttp3.CookieJar NO_COOKIES -> NO_COOKIES
    void saveFromResponse(okhttp3.HttpUrl,java.util.List) -> saveFromResponse
    java.util.List loadForRequest(okhttp3.HttpUrl) -> loadForRequest
    void <clinit>() -> <clinit>
okhttp3.CookieJar$1 -> okhttp3.CookieJar$1:
    void <init>() -> <init>
    void saveFromResponse(okhttp3.HttpUrl,java.util.List) -> saveFromResponse
    java.util.List loadForRequest(okhttp3.HttpUrl) -> loadForRequest
okhttp3.Credentials -> okhttp3.Credentials:
    void <init>() -> <init>
    java.lang.String basic(java.lang.String,java.lang.String) -> basic
okhttp3.Dispatcher -> okhttp3.Dispatcher:
    int maxRequests -> maxRequests
    int maxRequestsPerHost -> maxRequestsPerHost
    java.lang.Runnable idleCallback -> idleCallback
    java.util.concurrent.ExecutorService executorService -> executorService
    java.util.Deque readyAsyncCalls -> readyAsyncCalls
    java.util.Deque runningAsyncCalls -> runningAsyncCalls
    java.util.Deque runningSyncCalls -> runningSyncCalls
    void <init>(java.util.concurrent.ExecutorService) -> <init>
    void <init>() -> <init>
    java.util.concurrent.ExecutorService executorService() -> executorService
    void setMaxRequests(int) -> setMaxRequests
    int getMaxRequests() -> getMaxRequests
    void setMaxRequestsPerHost(int) -> setMaxRequestsPerHost
    int getMaxRequestsPerHost() -> getMaxRequestsPerHost
    void setIdleCallback(java.lang.Runnable) -> setIdleCallback
    void enqueue(okhttp3.RealCall$AsyncCall) -> enqueue
    void cancelAll() -> cancelAll
    void promoteCalls() -> promoteCalls
    int runningCallsForHost(okhttp3.RealCall$AsyncCall) -> runningCallsForHost
    void executed(okhttp3.RealCall) -> executed
    void finished(okhttp3.RealCall$AsyncCall) -> finished
    void finished(okhttp3.RealCall) -> finished
    void finished(java.util.Deque,java.lang.Object,boolean) -> finished
    java.util.List queuedCalls() -> queuedCalls
    java.util.List runningCalls() -> runningCalls
    int queuedCallsCount() -> queuedCallsCount
    int runningCallsCount() -> runningCallsCount
okhttp3.Dns -> okhttp3.Dns:
    okhttp3.Dns SYSTEM -> SYSTEM
    java.util.List lookup(java.lang.String) -> lookup
    void <clinit>() -> <clinit>
okhttp3.Dns$1 -> okhttp3.Dns$1:
    void <init>() -> <init>
    java.util.List lookup(java.lang.String) -> lookup
okhttp3.FormBody -> okhttp3.FormBody:
    okhttp3.MediaType CONTENT_TYPE -> CONTENT_TYPE
    java.util.List encodedNames -> encodedNames
    java.util.List encodedValues -> encodedValues
    void <init>(java.util.List,java.util.List) -> <init>
    int size() -> size
    java.lang.String encodedName(int) -> encodedName
    java.lang.String name(int) -> name
    java.lang.String encodedValue(int) -> encodedValue
    java.lang.String value(int) -> value
    okhttp3.MediaType contentType() -> contentType
    long contentLength() -> contentLength
    void writeTo(okio.BufferedSink) -> writeTo
    long writeOrCountBytes(okio.BufferedSink,boolean) -> writeOrCountBytes
    void <init>(java.util.List,java.util.List,okhttp3.FormBody$1) -> <init>
    void <clinit>() -> <clinit>
okhttp3.FormBody$1 -> okhttp3.FormBody$1:
okhttp3.FormBody$Builder -> okhttp3.FormBody$Builder:
    java.util.List names -> names
    java.util.List values -> values
    void <init>() -> <init>
    okhttp3.FormBody$Builder add(java.lang.String,java.lang.String) -> add
    okhttp3.FormBody$Builder addEncoded(java.lang.String,java.lang.String) -> addEncoded
    okhttp3.FormBody build() -> build
okhttp3.Handshake -> okhttp3.Handshake:
    okhttp3.TlsVersion tlsVersion -> tlsVersion
    okhttp3.CipherSuite cipherSuite -> cipherSuite
    java.util.List peerCertificates -> peerCertificates
    java.util.List localCertificates -> localCertificates
    void <init>(okhttp3.TlsVersion,okhttp3.CipherSuite,java.util.List,java.util.List) -> <init>
    okhttp3.Handshake get(javax.net.ssl.SSLSession) -> get
    okhttp3.Handshake get(okhttp3.TlsVersion,okhttp3.CipherSuite,java.util.List,java.util.List) -> get
    okhttp3.TlsVersion tlsVersion() -> tlsVersion
    okhttp3.CipherSuite cipherSuite() -> cipherSuite
    java.util.List peerCertificates() -> peerCertificates
    java.security.Principal peerPrincipal() -> peerPrincipal
    java.util.List localCertificates() -> localCertificates
    java.security.Principal localPrincipal() -> localPrincipal
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
okhttp3.Headers -> okhttp3.Headers:
    java.lang.String[] namesAndValues -> namesAndValues
    void <init>(okhttp3.Headers$Builder) -> <init>
    void <init>(java.lang.String[]) -> <init>
    java.lang.String get(java.lang.String) -> get
    java.util.Date getDate(java.lang.String) -> getDate
    int size() -> size
    java.lang.String name(int) -> name
    java.lang.String value(int) -> value
    java.util.Set names() -> names
    java.util.List values(java.lang.String) -> values
    okhttp3.Headers$Builder newBuilder() -> newBuilder
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    java.util.Map toMultimap() -> toMultimap
    java.lang.String get(java.lang.String[],java.lang.String) -> get
    okhttp3.Headers of(java.lang.String[]) -> of
    okhttp3.Headers of(java.util.Map) -> of
    void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1) -> <init>
okhttp3.Headers$1 -> okhttp3.Headers$1:
okhttp3.Headers$Builder -> okhttp3.Headers$Builder:
    java.util.List namesAndValues -> namesAndValues
    void <init>() -> <init>
    okhttp3.Headers$Builder addLenient(java.lang.String) -> addLenient
    okhttp3.Headers$Builder add(java.lang.String) -> add
    okhttp3.Headers$Builder add(java.lang.String,java.lang.String) -> add
    okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String) -> addLenient
    okhttp3.Headers$Builder removeAll(java.lang.String) -> removeAll
    okhttp3.Headers$Builder set(java.lang.String,java.lang.String) -> set
    void checkNameAndValue(java.lang.String,java.lang.String) -> checkNameAndValue
    java.lang.String get(java.lang.String) -> get
    okhttp3.Headers build() -> build
    java.util.List access$000(okhttp3.Headers$Builder) -> access$000
okhttp3.HttpUrl -> okhttp3.HttpUrl:
    char[] HEX_DIGITS -> HEX_DIGITS
    java.lang.String USERNAME_ENCODE_SET -> USERNAME_ENCODE_SET
    java.lang.String PASSWORD_ENCODE_SET -> PASSWORD_ENCODE_SET
    java.lang.String PATH_SEGMENT_ENCODE_SET -> PATH_SEGMENT_ENCODE_SET
    java.lang.String PATH_SEGMENT_ENCODE_SET_URI -> PATH_SEGMENT_ENCODE_SET_URI
    java.lang.String QUERY_ENCODE_SET -> QUERY_ENCODE_SET
    java.lang.String QUERY_COMPONENT_ENCODE_SET -> QUERY_COMPONENT_ENCODE_SET
    java.lang.String QUERY_COMPONENT_ENCODE_SET_URI -> QUERY_COMPONENT_ENCODE_SET_URI
    java.lang.String FORM_ENCODE_SET -> FORM_ENCODE_SET
    java.lang.String FRAGMENT_ENCODE_SET -> FRAGMENT_ENCODE_SET
    java.lang.String FRAGMENT_ENCODE_SET_URI -> FRAGMENT_ENCODE_SET_URI
    java.lang.String scheme -> scheme
    java.lang.String username -> username
    java.lang.String password -> password
    java.lang.String host -> host
    int port -> port
    java.util.List pathSegments -> pathSegments
    java.util.List queryNamesAndValues -> queryNamesAndValues
    java.lang.String fragment -> fragment
    java.lang.String url -> url
    void <init>(okhttp3.HttpUrl$Builder) -> <init>
    java.net.URL url() -> url
    java.net.URI uri() -> uri
    java.lang.String scheme() -> scheme
    boolean isHttps() -> isHttps
    java.lang.String encodedUsername() -> encodedUsername
    java.lang.String username() -> username
    java.lang.String encodedPassword() -> encodedPassword
    java.lang.String password() -> password
    java.lang.String host() -> host
    int port() -> port
    int defaultPort(java.lang.String) -> defaultPort
    int pathSize() -> pathSize
    java.lang.String encodedPath() -> encodedPath
    void pathSegmentsToString(java.lang.StringBuilder,java.util.List) -> pathSegmentsToString
    java.util.List encodedPathSegments() -> encodedPathSegments
    java.util.List pathSegments() -> pathSegments
    java.lang.String encodedQuery() -> encodedQuery
    void namesAndValuesToQueryString(java.lang.StringBuilder,java.util.List) -> namesAndValuesToQueryString
    java.util.List queryStringToNamesAndValues(java.lang.String) -> queryStringToNamesAndValues
    java.lang.String query() -> query
    int querySize() -> querySize
    java.lang.String queryParameter(java.lang.String) -> queryParameter
    java.util.Set queryParameterNames() -> queryParameterNames
    java.util.List queryParameterValues(java.lang.String) -> queryParameterValues
    java.lang.String queryParameterName(int) -> queryParameterName
    java.lang.String queryParameterValue(int) -> queryParameterValue
    java.lang.String encodedFragment() -> encodedFragment
    java.lang.String fragment() -> fragment
    okhttp3.HttpUrl resolve(java.lang.String) -> resolve
    okhttp3.HttpUrl$Builder newBuilder() -> newBuilder
    okhttp3.HttpUrl$Builder newBuilder(java.lang.String) -> newBuilder
    okhttp3.HttpUrl parse(java.lang.String) -> parse
    okhttp3.HttpUrl get(java.net.URL) -> get
    okhttp3.HttpUrl getChecked(java.lang.String) -> getChecked
    okhttp3.HttpUrl get(java.net.URI) -> get
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    java.lang.String percentDecode(java.lang.String,boolean) -> percentDecode
    java.util.List percentDecode(java.util.List,boolean) -> percentDecode
    java.lang.String percentDecode(java.lang.String,int,int,boolean) -> percentDecode
    void percentDecode(okio.Buffer,java.lang.String,int,int,boolean) -> percentDecode
    boolean percentEncoded(java.lang.String,int,int) -> percentEncoded
    int decodeHexDigit(char) -> decodeHexDigit
    java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean) -> canonicalize
    void canonicalize(okio.Buffer,java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean) -> canonicalize
    java.lang.String canonicalize(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean) -> canonicalize
    void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1) -> <init>
    java.lang.String access$100(okhttp3.HttpUrl) -> access$100
    java.lang.String access$200(okhttp3.HttpUrl) -> access$200
    int access$300(okhttp3.HttpUrl) -> access$300
    void <clinit>() -> <clinit>
okhttp3.HttpUrl$1 -> okhttp3.HttpUrl$1:
    int[] $SwitchMap$okhttp3$HttpUrl$Builder$ParseResult -> $SwitchMap$okhttp3$HttpUrl$Builder$ParseResult
    void <clinit>() -> <clinit>
okhttp3.HttpUrl$Builder -> okhttp3.HttpUrl$Builder:
    java.lang.String scheme -> scheme
    java.lang.String encodedUsername -> encodedUsername
    java.lang.String encodedPassword -> encodedPassword
    java.lang.String host -> host
    int port -> port
    java.util.List encodedPathSegments -> encodedPathSegments
    java.util.List encodedQueryNamesAndValues -> encodedQueryNamesAndValues
    java.lang.String encodedFragment -> encodedFragment
    void <init>() -> <init>
    okhttp3.HttpUrl$Builder scheme(java.lang.String) -> scheme
    okhttp3.HttpUrl$Builder username(java.lang.String) -> username
    okhttp3.HttpUrl$Builder encodedUsername(java.lang.String) -> encodedUsername
    okhttp3.HttpUrl$Builder password(java.lang.String) -> password
    okhttp3.HttpUrl$Builder encodedPassword(java.lang.String) -> encodedPassword
    okhttp3.HttpUrl$Builder host(java.lang.String) -> host
    okhttp3.HttpUrl$Builder port(int) -> port
    int effectivePort() -> effectivePort
    okhttp3.HttpUrl$Builder addPathSegment(java.lang.String) -> addPathSegment
    okhttp3.HttpUrl$Builder addPathSegments(java.lang.String) -> addPathSegments
    okhttp3.HttpUrl$Builder addEncodedPathSegment(java.lang.String) -> addEncodedPathSegment
    okhttp3.HttpUrl$Builder addEncodedPathSegments(java.lang.String) -> addEncodedPathSegments
    okhttp3.HttpUrl$Builder addPathSegments(java.lang.String,boolean) -> addPathSegments
    okhttp3.HttpUrl$Builder setPathSegment(int,java.lang.String) -> setPathSegment
    okhttp3.HttpUrl$Builder setEncodedPathSegment(int,java.lang.String) -> setEncodedPathSegment
    okhttp3.HttpUrl$Builder removePathSegment(int) -> removePathSegment
    okhttp3.HttpUrl$Builder encodedPath(java.lang.String) -> encodedPath
    okhttp3.HttpUrl$Builder query(java.lang.String) -> query
    okhttp3.HttpUrl$Builder encodedQuery(java.lang.String) -> encodedQuery
    okhttp3.HttpUrl$Builder addQueryParameter(java.lang.String,java.lang.String) -> addQueryParameter
    okhttp3.HttpUrl$Builder addEncodedQueryParameter(java.lang.String,java.lang.String) -> addEncodedQueryParameter
    okhttp3.HttpUrl$Builder setQueryParameter(java.lang.String,java.lang.String) -> setQueryParameter
    okhttp3.HttpUrl$Builder setEncodedQueryParameter(java.lang.String,java.lang.String) -> setEncodedQueryParameter
    okhttp3.HttpUrl$Builder removeAllQueryParameters(java.lang.String) -> removeAllQueryParameters
    okhttp3.HttpUrl$Builder removeAllEncodedQueryParameters(java.lang.String) -> removeAllEncodedQueryParameters
    void removeAllCanonicalQueryParameters(java.lang.String) -> removeAllCanonicalQueryParameters
    okhttp3.HttpUrl$Builder fragment(java.lang.String) -> fragment
    okhttp3.HttpUrl$Builder encodedFragment(java.lang.String) -> encodedFragment
    okhttp3.HttpUrl$Builder reencodeForUri() -> reencodeForUri
    okhttp3.HttpUrl build() -> build
    java.lang.String toString() -> toString
    okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String) -> parse
    void resolvePath(java.lang.String,int,int) -> resolvePath
    void push(java.lang.String,int,int,boolean,boolean) -> push
    boolean isDot(java.lang.String) -> isDot
    boolean isDotDot(java.lang.String) -> isDotDot
    void pop() -> pop
    int schemeDelimiterOffset(java.lang.String,int,int) -> schemeDelimiterOffset
    int slashCount(java.lang.String,int,int) -> slashCount
    int portColonOffset(java.lang.String,int,int) -> portColonOffset
    java.lang.String canonicalizeHost(java.lang.String,int,int) -> canonicalizeHost
    java.net.InetAddress decodeIpv6(java.lang.String,int,int) -> decodeIpv6
    boolean decodeIpv4Suffix(java.lang.String,int,int,byte[],int) -> decodeIpv4Suffix
    java.lang.String inet6AddressToAscii(byte[]) -> inet6AddressToAscii
    int parsePort(java.lang.String,int,int) -> parsePort
okhttp3.HttpUrl$Builder$ParseResult -> okhttp3.HttpUrl$Builder$ParseResult:
    okhttp3.HttpUrl$Builder$ParseResult SUCCESS -> SUCCESS
    okhttp3.HttpUrl$Builder$ParseResult MISSING_SCHEME -> MISSING_SCHEME
    okhttp3.HttpUrl$Builder$ParseResult UNSUPPORTED_SCHEME -> UNSUPPORTED_SCHEME
    okhttp3.HttpUrl$Builder$ParseResult INVALID_PORT -> INVALID_PORT
    okhttp3.HttpUrl$Builder$ParseResult INVALID_HOST -> INVALID_HOST
    okhttp3.HttpUrl$Builder$ParseResult[] $VALUES -> $VALUES
    okhttp3.HttpUrl$Builder$ParseResult[] values() -> values
    okhttp3.HttpUrl$Builder$ParseResult valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
okhttp3.Interceptor -> okhttp3.Interceptor:
    okhttp3.Response intercept(okhttp3.Interceptor$Chain) -> intercept
okhttp3.Interceptor$Chain -> okhttp3.Interceptor$Chain:
    okhttp3.Request request() -> request
    okhttp3.Response proceed(okhttp3.Request) -> proceed
    okhttp3.Connection connection() -> connection
okhttp3.MediaType -> okhttp3.MediaType:
    java.lang.String TOKEN -> TOKEN
    java.lang.String QUOTED -> QUOTED
    java.util.regex.Pattern TYPE_SUBTYPE -> TYPE_SUBTYPE
    java.util.regex.Pattern PARAMETER -> PARAMETER
    java.lang.String mediaType -> mediaType
    java.lang.String type -> type
    java.lang.String subtype -> subtype
    java.lang.String charset -> charset
    void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> <init>
    okhttp3.MediaType parse(java.lang.String) -> parse
    java.lang.String type() -> type
    java.lang.String subtype() -> subtype
    java.nio.charset.Charset charset() -> charset
    java.nio.charset.Charset charset(java.nio.charset.Charset) -> charset
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    void <clinit>() -> <clinit>
okhttp3.MultipartBody -> okhttp3.MultipartBody:
    okhttp3.MediaType MIXED -> MIXED
    okhttp3.MediaType ALTERNATIVE -> ALTERNATIVE
    okhttp3.MediaType DIGEST -> DIGEST
    okhttp3.MediaType PARALLEL -> PARALLEL
    okhttp3.MediaType FORM -> FORM
    byte[] COLONSPACE -> COLONSPACE
    byte[] CRLF -> CRLF
    byte[] DASHDASH -> DASHDASH
    okio.ByteString boundary -> boundary
    okhttp3.MediaType originalType -> originalType
    okhttp3.MediaType contentType -> contentType
    java.util.List parts -> parts
    long contentLength -> contentLength
    void <init>(okio.ByteString,okhttp3.MediaType,java.util.List) -> <init>
    okhttp3.MediaType type() -> type
    java.lang.String boundary() -> boundary
    int size() -> size
    java.util.List parts() -> parts
    okhttp3.MultipartBody$Part part(int) -> part
    okhttp3.MediaType contentType() -> contentType
    long contentLength() -> contentLength
    void writeTo(okio.BufferedSink) -> writeTo
    long writeOrCountBytes(okio.BufferedSink,boolean) -> writeOrCountBytes
    java.lang.StringBuilder appendQuotedString(java.lang.StringBuilder,java.lang.String) -> appendQuotedString
    void <clinit>() -> <clinit>
okhttp3.MultipartBody$Builder -> okhttp3.MultipartBody$Builder:
    okio.ByteString boundary -> boundary
    okhttp3.MediaType type -> type
    java.util.List parts -> parts
    void <init>() -> <init>
    void <init>(java.lang.String) -> <init>
    okhttp3.MultipartBody$Builder setType(okhttp3.MediaType) -> setType
    okhttp3.MultipartBody$Builder addPart(okhttp3.RequestBody) -> addPart
    okhttp3.MultipartBody$Builder addPart(okhttp3.Headers,okhttp3.RequestBody) -> addPart
    okhttp3.MultipartBody$Builder addFormDataPart(java.lang.String,java.lang.String) -> addFormDataPart
    okhttp3.MultipartBody$Builder addFormDataPart(java.lang.String,java.lang.String,okhttp3.RequestBody) -> addFormDataPart
    okhttp3.MultipartBody$Builder addPart(okhttp3.MultipartBody$Part) -> addPart
    okhttp3.MultipartBody build() -> build
okhttp3.MultipartBody$Part -> okhttp3.MultipartBody$Part:
    okhttp3.Headers headers -> headers
    okhttp3.RequestBody body -> body
    okhttp3.MultipartBody$Part create(okhttp3.RequestBody) -> create
    okhttp3.MultipartBody$Part create(okhttp3.Headers,okhttp3.RequestBody) -> create
    okhttp3.MultipartBody$Part createFormData(java.lang.String,java.lang.String) -> createFormData
    okhttp3.MultipartBody$Part createFormData(java.lang.String,java.lang.String,okhttp3.RequestBody) -> createFormData
    void <init>(okhttp3.Headers,okhttp3.RequestBody) -> <init>
    okhttp3.Headers access$000(okhttp3.MultipartBody$Part) -> access$000
    okhttp3.RequestBody access$100(okhttp3.MultipartBody$Part) -> access$100
okhttp3.OkHttpClient -> okhttp3.OkHttpClient:
    java.util.List DEFAULT_PROTOCOLS -> DEFAULT_PROTOCOLS
    java.util.List DEFAULT_CONNECTION_SPECS -> DEFAULT_CONNECTION_SPECS
    okhttp3.Dispatcher dispatcher -> dispatcher
    java.net.Proxy proxy -> proxy
    java.util.List protocols -> protocols
    java.util.List connectionSpecs -> connectionSpecs
    java.util.List interceptors -> interceptors
    java.util.List networkInterceptors -> networkInterceptors
    java.net.ProxySelector proxySelector -> proxySelector
    okhttp3.CookieJar cookieJar -> cookieJar
    okhttp3.Cache cache -> cache
    okhttp3.internal.cache.InternalCache internalCache -> internalCache
    javax.net.SocketFactory socketFactory -> socketFactory
    javax.net.ssl.SSLSocketFactory sslSocketFactory -> sslSocketFactory
    okhttp3.internal.tls.CertificateChainCleaner certificateChainCleaner -> certificateChainCleaner
    javax.net.ssl.HostnameVerifier hostnameVerifier -> hostnameVerifier
    okhttp3.CertificatePinner certificatePinner -> certificatePinner
    okhttp3.Authenticator proxyAuthenticator -> proxyAuthenticator
    okhttp3.Authenticator authenticator -> authenticator
    okhttp3.ConnectionPool connectionPool -> connectionPool
    okhttp3.Dns dns -> dns
    boolean followSslRedirects -> followSslRedirects
    boolean followRedirects -> followRedirects
    boolean retryOnConnectionFailure -> retryOnConnectionFailure
    int connectTimeout -> connectTimeout
    int readTimeout -> readTimeout
    int writeTimeout -> writeTimeout
    void <init>() -> <init>
    void <init>(okhttp3.OkHttpClient$Builder) -> <init>
    javax.net.ssl.X509TrustManager systemDefaultTrustManager() -> systemDefaultTrustManager
    javax.net.ssl.SSLSocketFactory systemDefaultSslSocketFactory(javax.net.ssl.X509TrustManager) -> systemDefaultSslSocketFactory
    int connectTimeoutMillis() -> connectTimeoutMillis
    int readTimeoutMillis() -> readTimeoutMillis
    int writeTimeoutMillis() -> writeTimeoutMillis
    java.net.Proxy proxy() -> proxy
    java.net.ProxySelector proxySelector() -> proxySelector
    okhttp3.CookieJar cookieJar() -> cookieJar
    okhttp3.Cache cache() -> cache
    okhttp3.internal.cache.InternalCache internalCache() -> internalCache
    okhttp3.Dns dns() -> dns
    javax.net.SocketFactory socketFactory() -> socketFactory
    javax.net.ssl.SSLSocketFactory sslSocketFactory() -> sslSocketFactory
    javax.net.ssl.HostnameVerifier hostnameVerifier() -> hostnameVerifier
    okhttp3.CertificatePinner certificatePinner() -> certificatePinner
    okhttp3.Authenticator authenticator() -> authenticator
    okhttp3.Authenticator proxyAuthenticator() -> proxyAuthenticator
    okhttp3.ConnectionPool connectionPool() -> connectionPool
    boolean followSslRedirects() -> followSslRedirects
    boolean followRedirects() -> followRedirects
    boolean retryOnConnectionFailure() -> retryOnConnectionFailure
    okhttp3.Dispatcher dispatcher() -> dispatcher
    java.util.List protocols() -> protocols
    java.util.List connectionSpecs() -> connectionSpecs
    java.util.List interceptors() -> interceptors
    java.util.List networkInterceptors() -> networkInterceptors
    okhttp3.Call newCall(okhttp3.Request) -> newCall
    okhttp3.OkHttpClient$Builder newBuilder() -> newBuilder
    java.util.List access$000() -> access$000
    java.util.List access$100() -> access$100
    void <init>(okhttp3.OkHttpClient$Builder,okhttp3.OkHttpClient$1) -> <init>
    void <clinit>() -> <clinit>
okhttp3.OkHttpClient$1 -> okhttp3.OkHttpClient$1:
    void <init>() -> <init>
    void addLenient(okhttp3.Headers$Builder,java.lang.String) -> addLenient
    void addLenient(okhttp3.Headers$Builder,java.lang.String,java.lang.String) -> addLenient
    void setCache(okhttp3.OkHttpClient$Builder,okhttp3.internal.cache.InternalCache) -> setCache
    boolean connectionBecameIdle(okhttp3.ConnectionPool,okhttp3.internal.connection.RealConnection) -> connectionBecameIdle
    okhttp3.internal.connection.RealConnection get(okhttp3.ConnectionPool,okhttp3.Address,okhttp3.internal.connection.StreamAllocation) -> get
    void put(okhttp3.ConnectionPool,okhttp3.internal.connection.RealConnection) -> put
    okhttp3.internal.connection.RouteDatabase routeDatabase(okhttp3.ConnectionPool) -> routeDatabase
    okhttp3.internal.connection.StreamAllocation callEngineGetStreamAllocation(okhttp3.Call) -> callEngineGetStreamAllocation
    void apply(okhttp3.ConnectionSpec,javax.net.ssl.SSLSocket,boolean) -> apply
    okhttp3.HttpUrl getHttpUrlChecked(java.lang.String) -> getHttpUrlChecked
    void setCallWebSocket(okhttp3.Call) -> setCallWebSocket
okhttp3.OkHttpClient$Builder -> okhttp3.OkHttpClient$Builder:
    okhttp3.Dispatcher dispatcher -> dispatcher
    java.net.Proxy proxy -> proxy
    java.util.List protocols -> protocols
    java.util.List connectionSpecs -> connectionSpecs
    java.util.List interceptors -> interceptors
    java.util.List networkInterceptors -> networkInterceptors
    java.net.ProxySelector proxySelector -> proxySelector
    okhttp3.CookieJar cookieJar -> cookieJar
    okhttp3.Cache cache -> cache
    okhttp3.internal.cache.InternalCache internalCache -> internalCache
    javax.net.SocketFactory socketFactory -> socketFactory
    javax.net.ssl.SSLSocketFactory sslSocketFactory -> sslSocketFactory
    okhttp3.internal.tls.CertificateChainCleaner certificateChainCleaner -> certificateChainCleaner
    javax.net.ssl.HostnameVerifier hostnameVerifier -> hostnameVerifier
    okhttp3.CertificatePinner certificatePinner -> certificatePinner
    okhttp3.Authenticator proxyAuthenticator -> proxyAuthenticator
    okhttp3.Authenticator authenticator -> authenticator
    okhttp3.ConnectionPool connectionPool -> connectionPool
    okhttp3.Dns dns -> dns
    boolean followSslRedirects -> followSslRedirects
    boolean followRedirects -> followRedirects
    boolean retryOnConnectionFailure -> retryOnConnectionFailure
    int connectTimeout -> connectTimeout
    int readTimeout -> readTimeout
    int writeTimeout -> writeTimeout
    void <init>() -> <init>
    void <init>(okhttp3.OkHttpClient) -> <init>
    okhttp3.OkHttpClient$Builder connectTimeout(long,java.util.concurrent.TimeUnit) -> connectTimeout
    okhttp3.OkHttpClient$Builder readTimeout(long,java.util.concurrent.TimeUnit) -> readTimeout
    okhttp3.OkHttpClient$Builder writeTimeout(long,java.util.concurrent.TimeUnit) -> writeTimeout
    okhttp3.OkHttpClient$Builder proxy(java.net.Proxy) -> proxy
    okhttp3.OkHttpClient$Builder proxySelector(java.net.ProxySelector) -> proxySelector
    okhttp3.OkHttpClient$Builder cookieJar(okhttp3.CookieJar) -> cookieJar
    void setInternalCache(okhttp3.internal.cache.InternalCache) -> setInternalCache
    okhttp3.OkHttpClient$Builder cache(okhttp3.Cache) -> cache
    okhttp3.OkHttpClient$Builder dns(okhttp3.Dns) -> dns
    okhttp3.OkHttpClient$Builder socketFactory(javax.net.SocketFactory) -> socketFactory
    okhttp3.OkHttpClient$Builder sslSocketFactory(javax.net.ssl.SSLSocketFactory) -> sslSocketFactory
    okhttp3.OkHttpClient$Builder sslSocketFactory(javax.net.ssl.SSLSocketFactory,javax.net.ssl.X509TrustManager) -> sslSocketFactory
    okhttp3.OkHttpClient$Builder hostnameVerifier(javax.net.ssl.HostnameVerifier) -> hostnameVerifier
    okhttp3.OkHttpClient$Builder certificatePinner(okhttp3.CertificatePinner) -> certificatePinner
    okhttp3.OkHttpClient$Builder authenticator(okhttp3.Authenticator) -> authenticator
    okhttp3.OkHttpClient$Builder proxyAuthenticator(okhttp3.Authenticator) -> proxyAuthenticator
    okhttp3.OkHttpClient$Builder connectionPool(okhttp3.ConnectionPool) -> connectionPool
    okhttp3.OkHttpClient$Builder followSslRedirects(boolean) -> followSslRedirects
    okhttp3.OkHttpClient$Builder followRedirects(boolean) -> followRedirects
    okhttp3.OkHttpClient$Builder retryOnConnectionFailure(boolean) -> retryOnConnectionFailure
    okhttp3.OkHttpClient$Builder dispatcher(okhttp3.Dispatcher) -> dispatcher
    okhttp3.OkHttpClient$Builder protocols(java.util.List) -> protocols
    okhttp3.OkHttpClient$Builder connectionSpecs(java.util.List) -> connectionSpecs
    java.util.List interceptors() -> interceptors
    okhttp3.OkHttpClient$Builder addInterceptor(okhttp3.Interceptor) -> addInterceptor
    java.util.List networkInterceptors() -> networkInterceptors
    okhttp3.OkHttpClient$Builder addNetworkInterceptor(okhttp3.Interceptor) -> addNetworkInterceptor
    okhttp3.OkHttpClient build() -> build
okhttp3.Protocol -> okhttp3.Protocol:
    okhttp3.Protocol HTTP_1_0 -> HTTP_1_0
    okhttp3.Protocol HTTP_1_1 -> HTTP_1_1
    okhttp3.Protocol SPDY_3 -> SPDY_3
    okhttp3.Protocol HTTP_2 -> HTTP_2
    java.lang.String protocol -> protocol
    okhttp3.Protocol[] $VALUES -> $VALUES
    okhttp3.Protocol[] values() -> values
    okhttp3.Protocol valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,java.lang.String) -> <init>
    okhttp3.Protocol get(java.lang.String) -> get
    java.lang.String toString() -> toString
    void <clinit>() -> <clinit>
okhttp3.RealCall -> okhttp3.RealCall:
    okhttp3.OkHttpClient client -> client
    okhttp3.internal.http.RetryAndFollowUpInterceptor retryAndFollowUpInterceptor -> retryAndFollowUpInterceptor
    boolean executed -> executed
    okhttp3.Request originalRequest -> originalRequest
    void <init>(okhttp3.OkHttpClient,okhttp3.Request) -> <init>
    okhttp3.Request request() -> request
    okhttp3.Response execute() -> execute
    void setForWebSocket() -> setForWebSocket
    void enqueue(okhttp3.Callback) -> enqueue
    void cancel() -> cancel
    boolean isExecuted() -> isExecuted
    boolean isCanceled() -> isCanceled
    okhttp3.internal.connection.StreamAllocation streamAllocation() -> streamAllocation
    java.lang.String toLoggableString() -> toLoggableString
    okhttp3.HttpUrl redactedUrl() -> redactedUrl
    okhttp3.Response getResponseWithInterceptorChain() -> getResponseWithInterceptorChain
    okhttp3.Response access$100(okhttp3.RealCall) -> access$100
    okhttp3.internal.http.RetryAndFollowUpInterceptor access$200(okhttp3.RealCall) -> access$200
    java.lang.String access$300(okhttp3.RealCall) -> access$300
    okhttp3.OkHttpClient access$400(okhttp3.RealCall) -> access$400
okhttp3.RealCall$1 -> okhttp3.RealCall$1:
okhttp3.RealCall$AsyncCall -> okhttp3.RealCall$AsyncCall:
    okhttp3.Callback responseCallback -> responseCallback
    okhttp3.RealCall this$0 -> this$0
    void <init>(okhttp3.RealCall,okhttp3.Callback) -> <init>
    java.lang.String host() -> host
    okhttp3.Request request() -> request
    okhttp3.RealCall get() -> get
    void execute() -> execute
    void <init>(okhttp3.RealCall,okhttp3.Callback,okhttp3.RealCall$1) -> <init>
okhttp3.Request -> okhttp3.Request:
    okhttp3.HttpUrl url -> url
    java.lang.String method -> method
    okhttp3.Headers headers -> headers
    okhttp3.RequestBody body -> body
    java.lang.Object tag -> tag
    okhttp3.CacheControl cacheControl -> cacheControl
    void <init>(okhttp3.Request$Builder) -> <init>
    okhttp3.HttpUrl url() -> url
    java.lang.String method() -> method
    okhttp3.Headers headers() -> headers
    java.lang.String header(java.lang.String) -> header
    java.util.List headers(java.lang.String) -> headers
    okhttp3.RequestBody body() -> body
    java.lang.Object tag() -> tag
    okhttp3.Request$Builder newBuilder() -> newBuilder
    okhttp3.CacheControl cacheControl() -> cacheControl
    boolean isHttps() -> isHttps
    java.lang.String toString() -> toString
    okhttp3.HttpUrl access$600(okhttp3.Request) -> access$600
    java.lang.String access$700(okhttp3.Request) -> access$700
    okhttp3.RequestBody access$800(okhttp3.Request) -> access$800
    java.lang.Object access$900(okhttp3.Request) -> access$900
    okhttp3.Headers access$1000(okhttp3.Request) -> access$1000
    void <init>(okhttp3.Request$Builder,okhttp3.Request$1) -> <init>
okhttp3.Request$1 -> okhttp3.Request$1:
okhttp3.Request$Builder -> okhttp3.Request$Builder:
    okhttp3.HttpUrl url -> url
    java.lang.String method -> method
    okhttp3.Headers$Builder headers -> headers
    okhttp3.RequestBody body -> body
    java.lang.Object tag -> tag
    void <init>() -> <init>
    void <init>(okhttp3.Request) -> <init>
    okhttp3.Request$Builder url(okhttp3.HttpUrl) -> url
    okhttp3.Request$Builder url(java.lang.String) -> url
    okhttp3.Request$Builder url(java.net.URL) -> url
    okhttp3.Request$Builder header(java.lang.String,java.lang.String) -> header
    okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String) -> addHeader
    okhttp3.Request$Builder removeHeader(java.lang.String) -> removeHeader
    okhttp3.Request$Builder headers(okhttp3.Headers) -> headers
    okhttp3.Request$Builder cacheControl(okhttp3.CacheControl) -> cacheControl
    okhttp3.Request$Builder get() -> get
    okhttp3.Request$Builder head() -> head
    okhttp3.Request$Builder post(okhttp3.RequestBody) -> post
    okhttp3.Request$Builder delete(okhttp3.RequestBody) -> delete
    okhttp3.Request$Builder delete() -> delete
    okhttp3.Request$Builder put(okhttp3.RequestBody) -> put
    okhttp3.Request$Builder patch(okhttp3.RequestBody) -> patch
    okhttp3.Request$Builder method(java.lang.String,okhttp3.RequestBody) -> method
    okhttp3.Request$Builder tag(java.lang.Object) -> tag
    okhttp3.Request build() -> build
    okhttp3.HttpUrl access$000(okhttp3.Request$Builder) -> access$000
    java.lang.String access$100(okhttp3.Request$Builder) -> access$100
    okhttp3.Headers$Builder access$200(okhttp3.Request$Builder) -> access$200
    okhttp3.RequestBody access$300(okhttp3.Request$Builder) -> access$300
    java.lang.Object access$400(okhttp3.Request$Builder) -> access$400
    void <init>(okhttp3.Request,okhttp3.Request$1) -> <init>
okhttp3.RequestBody -> okhttp3.RequestBody:
    void <init>() -> <init>
    okhttp3.MediaType contentType() -> contentType
    long contentLength() -> contentLength
    void writeTo(okio.BufferedSink) -> writeTo
    okhttp3.RequestBody create(okhttp3.MediaType,java.lang.String) -> create
    okhttp3.RequestBody create(okhttp3.MediaType,okio.ByteString) -> create
    okhttp3.RequestBody create(okhttp3.MediaType,byte[]) -> create
    okhttp3.RequestBody create(okhttp3.MediaType,byte[],int,int) -> create
    okhttp3.RequestBody create(okhttp3.MediaType,java.io.File) -> create
okhttp3.RequestBody$1 -> okhttp3.RequestBody$1:
    okhttp3.MediaType val$contentType -> val$contentType
    okio.ByteString val$content -> val$content
    void <init>(okhttp3.MediaType,okio.ByteString) -> <init>
    okhttp3.MediaType contentType() -> contentType
    long contentLength() -> contentLength
    void writeTo(okio.BufferedSink) -> writeTo
okhttp3.RequestBody$2 -> okhttp3.RequestBody$2:
    okhttp3.MediaType val$contentType -> val$contentType
    int val$byteCount -> val$byteCount
    byte[] val$content -> val$content
    int val$offset -> val$offset
    void <init>(okhttp3.MediaType,int,byte[],int) -> <init>
    okhttp3.MediaType contentType() -> contentType
    long contentLength() -> contentLength
    void writeTo(okio.BufferedSink) -> writeTo
okhttp3.RequestBody$3 -> okhttp3.RequestBody$3:
    okhttp3.MediaType val$contentType -> val$contentType
    java.io.File val$file -> val$file
    void <init>(okhttp3.MediaType,java.io.File) -> <init>
    okhttp3.MediaType contentType() -> contentType
    long contentLength() -> contentLength
    void writeTo(okio.BufferedSink) -> writeTo
okhttp3.Response -> okhttp3.Response:
    okhttp3.Request request -> request
    okhttp3.Protocol protocol -> protocol
    int code -> code
    java.lang.String message -> message
    okhttp3.Handshake handshake -> handshake
    okhttp3.Headers headers -> headers
    okhttp3.ResponseBody body -> body
    okhttp3.Response networkResponse -> networkResponse
    okhttp3.Response cacheResponse -> cacheResponse
    okhttp3.Response priorResponse -> priorResponse
    long sentRequestAtMillis -> sentRequestAtMillis
    long receivedResponseAtMillis -> receivedResponseAtMillis
    okhttp3.CacheControl cacheControl -> cacheControl
    void <init>(okhttp3.Response$Builder) -> <init>
    okhttp3.Request request() -> request
    okhttp3.Protocol protocol() -> protocol
    int code() -> code
    boolean isSuccessful() -> isSuccessful
    java.lang.String message() -> message
    okhttp3.Handshake handshake() -> handshake
    java.util.List headers(java.lang.String) -> headers
    java.lang.String header(java.lang.String) -> header
    java.lang.String header(java.lang.String,java.lang.String) -> header
    okhttp3.Headers headers() -> headers
    okhttp3.ResponseBody peekBody(long) -> peekBody
    okhttp3.ResponseBody body() -> body
    okhttp3.Response$Builder newBuilder() -> newBuilder
    boolean isRedirect() -> isRedirect
    okhttp3.Response networkResponse() -> networkResponse
    okhttp3.Response cacheResponse() -> cacheResponse
    okhttp3.Response priorResponse() -> priorResponse
    java.util.List challenges() -> challenges
    okhttp3.CacheControl cacheControl() -> cacheControl
    long sentRequestAtMillis() -> sentRequestAtMillis
    long receivedResponseAtMillis() -> receivedResponseAtMillis
    void close() -> close
    java.lang.String toString() -> toString
    okhttp3.Request access$1300(okhttp3.Response) -> access$1300
    okhttp3.Protocol access$1400(okhttp3.Response) -> access$1400
    int access$1500(okhttp3.Response) -> access$1500
    java.lang.String access$1600(okhttp3.Response) -> access$1600
    okhttp3.Handshake access$1700(okhttp3.Response) -> access$1700
    okhttp3.Headers access$1800(okhttp3.Response) -> access$1800
    okhttp3.ResponseBody access$1900(okhttp3.Response) -> access$1900
    okhttp3.Response access$2000(okhttp3.Response) -> access$2000
    okhttp3.Response access$2100(okhttp3.Response) -> access$2100
    okhttp3.Response access$2200(okhttp3.Response) -> access$2200
    long access$2300(okhttp3.Response) -> access$2300
    long access$2400(okhttp3.Response) -> access$2400
    void <init>(okhttp3.Response$Builder,okhttp3.Response$1) -> <init>
okhttp3.Response$1 -> okhttp3.Response$1:
okhttp3.Response$Builder -> okhttp3.Response$Builder:
    okhttp3.Request request -> request
    okhttp3.Protocol protocol -> protocol
    int code -> code
    java.lang.String message -> message
    okhttp3.Handshake handshake -> handshake
    okhttp3.Headers$Builder headers -> headers
    okhttp3.ResponseBody body -> body
    okhttp3.Response networkResponse -> networkResponse
    okhttp3.Response cacheResponse -> cacheResponse
    okhttp3.Response priorResponse -> priorResponse
    long sentRequestAtMillis -> sentRequestAtMillis
    long receivedResponseAtMillis -> receivedResponseAtMillis
    void <init>() -> <init>
    void <init>(okhttp3.Response) -> <init>
    okhttp3.Response$Builder request(okhttp3.Request) -> request
    okhttp3.Response$Builder protocol(okhttp3.Protocol) -> protocol
    okhttp3.Response$Builder code(int) -> code
    okhttp3.Response$Builder message(java.lang.String) -> message
    okhttp3.Response$Builder handshake(okhttp3.Handshake) -> handshake
    okhttp3.Response$Builder header(java.lang.String,java.lang.String) -> header
    okhttp3.Response$Builder addHeader(java.lang.String,java.lang.String) -> addHeader
    okhttp3.Response$Builder removeHeader(java.lang.String) -> removeHeader
    okhttp3.Response$Builder headers(okhttp3.Headers) -> headers
    okhttp3.Response$Builder body(okhttp3.ResponseBody) -> body
    okhttp3.Response$Builder networkResponse(okhttp3.Response) -> networkResponse
    okhttp3.Response$Builder cacheResponse(okhttp3.Response) -> cacheResponse
    void checkSupportResponse(java.lang.String,okhttp3.Response) -> checkSupportResponse
    okhttp3.Response$Builder priorResponse(okhttp3.Response) -> priorResponse
    void checkPriorResponse(okhttp3.Response) -> checkPriorResponse
    okhttp3.Response$Builder sentRequestAtMillis(long) -> sentRequestAtMillis
    okhttp3.Response$Builder receivedResponseAtMillis(long) -> receivedResponseAtMillis
    okhttp3.Response build() -> build
    okhttp3.Request access$000(okhttp3.Response$Builder) -> access$000
    okhttp3.Protocol access$100(okhttp3.Response$Builder) -> access$100
    int access$200(okhttp3.Response$Builder) -> access$200
    java.lang.String access$300(okhttp3.Response$Builder) -> access$300
    okhttp3.Handshake access$400(okhttp3.Response$Builder) -> access$400
    okhttp3.Headers$Builder access$500(okhttp3.Response$Builder) -> access$500
    okhttp3.ResponseBody access$600(okhttp3.Response$Builder) -> access$600
    okhttp3.Response access$700(okhttp3.Response$Builder) -> access$700
    okhttp3.Response access$800(okhttp3.Response$Builder) -> access$800
    okhttp3.Response access$900(okhttp3.Response$Builder) -> access$900
    long access$1000(okhttp3.Response$Builder) -> access$1000
    long access$1100(okhttp3.Response$Builder) -> access$1100
    void <init>(okhttp3.Response,okhttp3.Response$1) -> <init>
okhttp3.ResponseBody -> okhttp3.ResponseBody:
    java.io.Reader reader -> reader
    void <init>() -> <init>
    okhttp3.MediaType contentType() -> contentType
    long contentLength() -> contentLength
    java.io.InputStream byteStream() -> byteStream
    okio.BufferedSource source() -> source
    byte[] bytes() -> bytes
    java.io.Reader charStream() -> charStream
    java.lang.String string() -> string
    java.nio.charset.Charset charset() -> charset
    void close() -> close
    okhttp3.ResponseBody create(okhttp3.MediaType,java.lang.String) -> create
    okhttp3.ResponseBody create(okhttp3.MediaType,byte[]) -> create
    okhttp3.ResponseBody create(okhttp3.MediaType,long,okio.BufferedSource) -> create
okhttp3.ResponseBody$1 -> okhttp3.ResponseBody$1:
    okhttp3.MediaType val$contentType -> val$contentType
    long val$contentLength -> val$contentLength
    okio.BufferedSource val$content -> val$content
    void <init>(okhttp3.MediaType,long,okio.BufferedSource) -> <init>
    okhttp3.MediaType contentType() -> contentType
    long contentLength() -> contentLength
    okio.BufferedSource source() -> source
okhttp3.Route -> okhttp3.Route:
    okhttp3.Address address -> address
    java.net.Proxy proxy -> proxy
    java.net.InetSocketAddress inetSocketAddress -> inetSocketAddress
    void <init>(okhttp3.Address,java.net.Proxy,java.net.InetSocketAddress) -> <init>
    okhttp3.Address address() -> address
    java.net.Proxy proxy() -> proxy
    java.net.InetSocketAddress socketAddress() -> socketAddress
    boolean requiresTunnel() -> requiresTunnel
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
okhttp3.TlsVersion -> okhttp3.TlsVersion:
    okhttp3.TlsVersion TLS_1_2 -> TLS_1_2
    okhttp3.TlsVersion TLS_1_1 -> TLS_1_1
    okhttp3.TlsVersion TLS_1_0 -> TLS_1_0
    okhttp3.TlsVersion SSL_3_0 -> SSL_3_0
    java.lang.String javaName -> javaName
    okhttp3.TlsVersion[] $VALUES -> $VALUES
    okhttp3.TlsVersion[] values() -> values
    okhttp3.TlsVersion valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,java.lang.String) -> <init>
    okhttp3.TlsVersion forJavaName(java.lang.String) -> forJavaName
    java.lang.String javaName() -> javaName
    void <clinit>() -> <clinit>
okhttp3.internal.Internal -> okhttp3.internal.Internal:
    okhttp3.internal.Internal instance -> instance
    void <init>() -> <init>
    void initializeInstanceForTests() -> initializeInstanceForTests
    void addLenient(okhttp3.Headers$Builder,java.lang.String) -> addLenient
    void addLenient(okhttp3.Headers$Builder,java.lang.String,java.lang.String) -> addLenient
    void setCache(okhttp3.OkHttpClient$Builder,okhttp3.internal.cache.InternalCache) -> setCache
    okhttp3.internal.connection.RealConnection get(okhttp3.ConnectionPool,okhttp3.Address,okhttp3.internal.connection.StreamAllocation) -> get
    void put(okhttp3.ConnectionPool,okhttp3.internal.connection.RealConnection) -> put
    boolean connectionBecameIdle(okhttp3.ConnectionPool,okhttp3.internal.connection.RealConnection) -> connectionBecameIdle
    okhttp3.internal.connection.RouteDatabase routeDatabase(okhttp3.ConnectionPool) -> routeDatabase
    void apply(okhttp3.ConnectionSpec,javax.net.ssl.SSLSocket,boolean) -> apply
    okhttp3.HttpUrl getHttpUrlChecked(java.lang.String) -> getHttpUrlChecked
    okhttp3.internal.connection.StreamAllocation callEngineGetStreamAllocation(okhttp3.Call) -> callEngineGetStreamAllocation
    void setCallWebSocket(okhttp3.Call) -> setCallWebSocket
okhttp3.internal.NamedRunnable -> okhttp3.internal.NamedRunnable:
    java.lang.String name -> name
    void <init>(java.lang.String,java.lang.Object[]) -> <init>
    void run() -> run
    void execute() -> execute
okhttp3.internal.Util -> okhttp3.internal.Util:
    byte[] EMPTY_BYTE_ARRAY -> EMPTY_BYTE_ARRAY
    java.lang.String[] EMPTY_STRING_ARRAY -> EMPTY_STRING_ARRAY
    java.nio.charset.Charset UTF_8 -> UTF_8
    java.util.TimeZone UTC -> UTC
    java.util.regex.Pattern VERIFY_AS_IP_ADDRESS -> VERIFY_AS_IP_ADDRESS
    void <init>() -> <init>
    void checkOffsetAndCount(long,long,long) -> checkOffsetAndCount
    boolean equal(java.lang.Object,java.lang.Object) -> equal
    void closeQuietly(java.io.Closeable) -> closeQuietly
    void closeQuietly(java.net.Socket) -> closeQuietly
    void closeQuietly(java.net.ServerSocket) -> closeQuietly
    void closeAll(java.io.Closeable,java.io.Closeable) -> closeAll
    boolean discard(okio.Source,int,java.util.concurrent.TimeUnit) -> discard
    boolean skipAll(okio.Source,int,java.util.concurrent.TimeUnit) -> skipAll
    java.lang.String md5Hex(java.lang.String) -> md5Hex
    java.lang.String shaBase64(java.lang.String) -> shaBase64
    okio.ByteString sha1(okio.ByteString) -> sha1
    okio.ByteString sha256(okio.ByteString) -> sha256
    java.util.List immutableList(java.util.List) -> immutableList
    java.util.List immutableList(java.lang.Object[]) -> immutableList
    java.util.concurrent.ThreadFactory threadFactory(java.lang.String,boolean) -> threadFactory
    java.lang.Object[] intersect(java.lang.Class,java.lang.Object[],java.lang.Object[]) -> intersect
    java.util.List intersect(java.lang.Object[],java.lang.Object[]) -> intersect
    java.lang.String hostHeader(okhttp3.HttpUrl,boolean) -> hostHeader
    java.lang.String toHumanReadableAscii(java.lang.String) -> toHumanReadableAscii
    boolean isAndroidGetsocknameError(java.lang.AssertionError) -> isAndroidGetsocknameError
    int indexOf(java.lang.Object[],java.lang.Object) -> indexOf
    java.lang.String[] concat(java.lang.String[],java.lang.String) -> concat
    int skipLeadingAsciiWhitespace(java.lang.String,int,int) -> skipLeadingAsciiWhitespace
    int skipTrailingAsciiWhitespace(java.lang.String,int,int) -> skipTrailingAsciiWhitespace
    java.lang.String trimSubstring(java.lang.String,int,int) -> trimSubstring
    int delimiterOffset(java.lang.String,int,int,java.lang.String) -> delimiterOffset
    int delimiterOffset(java.lang.String,int,int,char) -> delimiterOffset
    java.lang.String domainToAscii(java.lang.String) -> domainToAscii
    boolean containsInvalidHostnameAsciiCodes(java.lang.String) -> containsInvalidHostnameAsciiCodes
    boolean verifyAsIpAddress(java.lang.String) -> verifyAsIpAddress
    java.lang.String format(java.lang.String,java.lang.Object[]) -> format
    void <clinit>() -> <clinit>
okhttp3.internal.Util$1 -> okhttp3.internal.Util$1:
    java.lang.String val$name -> val$name
    boolean val$daemon -> val$daemon
    void <init>(java.lang.String,boolean) -> <init>
    java.lang.Thread newThread(java.lang.Runnable) -> newThread
okhttp3.internal.Version -> okhttp3.internal.Version:
    java.lang.String userAgent() -> userAgent
    void <init>() -> <init>
okhttp3.internal.cache.CacheInterceptor -> okhttp3.internal.cache.CacheInterceptor:
    okhttp3.ResponseBody EMPTY_BODY -> EMPTY_BODY
    okhttp3.internal.cache.InternalCache cache -> cache
    void <init>(okhttp3.internal.cache.InternalCache) -> <init>
    okhttp3.Response intercept(okhttp3.Interceptor$Chain) -> intercept
    okhttp3.Response stripBody(okhttp3.Response) -> stripBody
    okhttp3.internal.cache.CacheRequest maybeCache(okhttp3.Response,okhttp3.Request,okhttp3.internal.cache.InternalCache) -> maybeCache
    okhttp3.Response cacheWritingResponse(okhttp3.internal.cache.CacheRequest,okhttp3.Response) -> cacheWritingResponse
    boolean validate(okhttp3.Response,okhttp3.Response) -> validate
    okhttp3.Headers combine(okhttp3.Headers,okhttp3.Headers) -> combine
    boolean isEndToEnd(java.lang.String) -> isEndToEnd
    void <clinit>() -> <clinit>
okhttp3.internal.cache.CacheInterceptor$1 -> okhttp3.internal.cache.CacheInterceptor$1:
    void <init>() -> <init>
    okhttp3.MediaType contentType() -> contentType
    long contentLength() -> contentLength
    okio.BufferedSource source() -> source
okhttp3.internal.cache.CacheInterceptor$2 -> okhttp3.internal.cache.CacheInterceptor$2:
    boolean cacheRequestClosed -> cacheRequestClosed
    okio.BufferedSource val$source -> val$source
    okhttp3.internal.cache.CacheRequest val$cacheRequest -> val$cacheRequest
    okio.BufferedSink val$cacheBody -> val$cacheBody
    okhttp3.internal.cache.CacheInterceptor this$0 -> this$0
    void <init>(okhttp3.internal.cache.CacheInterceptor,okio.BufferedSource,okhttp3.internal.cache.CacheRequest,okio.BufferedSink) -> <init>
    long read(okio.Buffer,long) -> read
    okio.Timeout timeout() -> timeout
    void close() -> close
okhttp3.internal.cache.CacheRequest -> okhttp3.internal.cache.CacheRequest:
    okio.Sink body() -> body
    void abort() -> abort
okhttp3.internal.cache.CacheStrategy -> okhttp3.internal.cache.CacheStrategy:
    okhttp3.Request networkRequest -> networkRequest
    okhttp3.Response cacheResponse -> cacheResponse
    void <init>(okhttp3.Request,okhttp3.Response) -> <init>
    boolean isCacheable(okhttp3.Response,okhttp3.Request) -> isCacheable
    void <init>(okhttp3.Request,okhttp3.Response,okhttp3.internal.cache.CacheStrategy$1) -> <init>
okhttp3.internal.cache.CacheStrategy$1 -> okhttp3.internal.cache.CacheStrategy$1:
okhttp3.internal.cache.CacheStrategy$Factory -> okhttp3.internal.cache.CacheStrategy$Factory:
    long nowMillis -> nowMillis
    okhttp3.Request request -> request
    okhttp3.Response cacheResponse -> cacheResponse
    java.util.Date servedDate -> servedDate
    java.lang.String servedDateString -> servedDateString
    java.util.Date lastModified -> lastModified
    java.lang.String lastModifiedString -> lastModifiedString
    java.util.Date expires -> expires
    long sentRequestMillis -> sentRequestMillis
    long receivedResponseMillis -> receivedResponseMillis
    java.lang.String etag -> etag
    int ageSeconds -> ageSeconds
    void <init>(long,okhttp3.Request,okhttp3.Response) -> <init>
    okhttp3.internal.cache.CacheStrategy get() -> get
    okhttp3.internal.cache.CacheStrategy getCandidate() -> getCandidate
    long computeFreshnessLifetime() -> computeFreshnessLifetime
    long cacheResponseAge() -> cacheResponseAge
    boolean isFreshnessLifetimeHeuristic() -> isFreshnessLifetimeHeuristic
    boolean hasConditions(okhttp3.Request) -> hasConditions
okhttp3.internal.cache.DiskLruCache -> okhttp3.internal.cache.DiskLruCache:
    java.lang.String JOURNAL_FILE -> JOURNAL_FILE
    java.lang.String JOURNAL_FILE_TEMP -> JOURNAL_FILE_TEMP
    java.lang.String JOURNAL_FILE_BACKUP -> JOURNAL_FILE_BACKUP
    java.lang.String MAGIC -> MAGIC
    java.lang.String VERSION_1 -> VERSION_1
    long ANY_SEQUENCE_NUMBER -> ANY_SEQUENCE_NUMBER
    java.util.regex.Pattern LEGAL_KEY_PATTERN -> LEGAL_KEY_PATTERN
    java.lang.String CLEAN -> CLEAN
    java.lang.String DIRTY -> DIRTY
    java.lang.String REMOVE -> REMOVE
    java.lang.String READ -> READ
    okhttp3.internal.io.FileSystem fileSystem -> fileSystem
    java.io.File directory -> directory
    java.io.File journalFile -> journalFile
    java.io.File journalFileTmp -> journalFileTmp
    java.io.File journalFileBackup -> journalFileBackup
    int appVersion -> appVersion
    long maxSize -> maxSize
    int valueCount -> valueCount
    long size -> size
    okio.BufferedSink journalWriter -> journalWriter
    java.util.LinkedHashMap lruEntries -> lruEntries
    int redundantOpCount -> redundantOpCount
    boolean hasJournalErrors -> hasJournalErrors
    boolean initialized -> initialized
    boolean closed -> closed
    boolean mostRecentTrimFailed -> mostRecentTrimFailed
    boolean mostRecentRebuildFailed -> mostRecentRebuildFailed
    long nextSequenceNumber -> nextSequenceNumber
    java.util.concurrent.Executor executor -> executor
    java.lang.Runnable cleanupRunnable -> cleanupRunnable
    okio.Sink NULL_SINK -> NULL_SINK
    boolean $assertionsDisabled -> $assertionsDisabled
    void <init>(okhttp3.internal.io.FileSystem,java.io.File,int,int,long,java.util.concurrent.Executor) -> <init>
    void initialize() -> initialize
    okhttp3.internal.cache.DiskLruCache create(okhttp3.internal.io.FileSystem,java.io.File,int,int,long) -> create
    void readJournal() -> readJournal
    okio.BufferedSink newJournalWriter() -> newJournalWriter
    void readJournalLine(java.lang.String) -> readJournalLine
    void processJournal() -> processJournal
    void rebuildJournal() -> rebuildJournal
    okhttp3.internal.cache.DiskLruCache$Snapshot get(java.lang.String) -> get
    okhttp3.internal.cache.DiskLruCache$Editor edit(java.lang.String) -> edit
    okhttp3.internal.cache.DiskLruCache$Editor edit(java.lang.String,long) -> edit
    java.io.File getDirectory() -> getDirectory
    long getMaxSize() -> getMaxSize
    void setMaxSize(long) -> setMaxSize
    long size() -> size
    void completeEdit(okhttp3.internal.cache.DiskLruCache$Editor,boolean) -> completeEdit
    boolean journalRebuildRequired() -> journalRebuildRequired
    boolean remove(java.lang.String) -> remove
    boolean removeEntry(okhttp3.internal.cache.DiskLruCache$Entry) -> removeEntry
    boolean isClosed() -> isClosed
    void checkNotClosed() -> checkNotClosed
    void flush() -> flush
    void close() -> close
    void trimToSize() -> trimToSize
    void delete() -> delete
    void evictAll() -> evictAll
    void validateKey(java.lang.String) -> validateKey
    java.util.Iterator snapshots() -> snapshots
    boolean access$000(okhttp3.internal.cache.DiskLruCache) -> access$000
    boolean access$100(okhttp3.internal.cache.DiskLruCache) -> access$100
    void access$200(okhttp3.internal.cache.DiskLruCache) -> access$200
    boolean access$302(okhttp3.internal.cache.DiskLruCache,boolean) -> access$302
    boolean access$400(okhttp3.internal.cache.DiskLruCache) -> access$400
    void access$500(okhttp3.internal.cache.DiskLruCache) -> access$500
    int access$602(okhttp3.internal.cache.DiskLruCache,int) -> access$602
    boolean access$702(okhttp3.internal.cache.DiskLruCache,boolean) -> access$702
    okio.BufferedSink access$802(okhttp3.internal.cache.DiskLruCache,okio.BufferedSink) -> access$802
    okio.Sink access$900() -> access$900
    boolean access$1002(okhttp3.internal.cache.DiskLruCache,boolean) -> access$1002
    java.util.LinkedHashMap access$2300(okhttp3.internal.cache.DiskLruCache) -> access$2300
    okhttp3.internal.cache.DiskLruCache$Editor access$2500(okhttp3.internal.cache.DiskLruCache,java.lang.String,long) -> access$2500
    int access$2600(okhttp3.internal.cache.DiskLruCache) -> access$2600
    okhttp3.internal.io.FileSystem access$2700(okhttp3.internal.cache.DiskLruCache) -> access$2700
    void access$2800(okhttp3.internal.cache.DiskLruCache,okhttp3.internal.cache.DiskLruCache$Editor,boolean) -> access$2800
    java.io.File access$2900(okhttp3.internal.cache.DiskLruCache) -> access$2900
    boolean access$3100(okhttp3.internal.cache.DiskLruCache,okhttp3.internal.cache.DiskLruCache$Entry) -> access$3100
    void <clinit>() -> <clinit>
okhttp3.internal.cache.DiskLruCache$1 -> okhttp3.internal.cache.DiskLruCache$1:
    okhttp3.internal.cache.DiskLruCache this$0 -> this$0
    void <init>(okhttp3.internal.cache.DiskLruCache) -> <init>
    void run() -> run
okhttp3.internal.cache.DiskLruCache$2 -> okhttp3.internal.cache.DiskLruCache$2:
    boolean $assertionsDisabled -> $assertionsDisabled
    okhttp3.internal.cache.DiskLruCache this$0 -> this$0
    void <init>(okhttp3.internal.cache.DiskLruCache,okio.Sink) -> <init>
    void onException(java.io.IOException) -> onException
    void <clinit>() -> <clinit>
okhttp3.internal.cache.DiskLruCache$3 -> okhttp3.internal.cache.DiskLruCache$3:
    java.util.Iterator delegate -> delegate
    okhttp3.internal.cache.DiskLruCache$Snapshot nextSnapshot -> nextSnapshot
    okhttp3.internal.cache.DiskLruCache$Snapshot removeSnapshot -> removeSnapshot
    okhttp3.internal.cache.DiskLruCache this$0 -> this$0
    void <init>(okhttp3.internal.cache.DiskLruCache) -> <init>
    boolean hasNext() -> hasNext
    okhttp3.internal.cache.DiskLruCache$Snapshot next() -> next
    void remove() -> remove
    java.lang.Object next() -> next
okhttp3.internal.cache.DiskLruCache$4 -> okhttp3.internal.cache.DiskLruCache$4:
    void <init>() -> <init>
    void write(okio.Buffer,long) -> write
    void flush() -> flush
    okio.Timeout timeout() -> timeout
    void close() -> close
okhttp3.internal.cache.DiskLruCache$Editor -> okhttp3.internal.cache.DiskLruCache$Editor:
    okhttp3.internal.cache.DiskLruCache$Entry entry -> entry
    boolean[] written -> written
    boolean done -> done
    okhttp3.internal.cache.DiskLruCache this$0 -> this$0
    void <init>(okhttp3.internal.cache.DiskLruCache,okhttp3.internal.cache.DiskLruCache$Entry) -> <init>
    void detach() -> detach
    okio.Source newSource(int) -> newSource
    okio.Sink newSink(int) -> newSink
    void commit() -> commit
    void abort() -> abort
    void abortUnlessCommitted() -> abortUnlessCommitted
    void <init>(okhttp3.internal.cache.DiskLruCache,okhttp3.internal.cache.DiskLruCache$Entry,okhttp3.internal.cache.DiskLruCache$1) -> <init>
    okhttp3.internal.cache.DiskLruCache$Entry access$2100(okhttp3.internal.cache.DiskLruCache$Editor) -> access$2100
    boolean[] access$2200(okhttp3.internal.cache.DiskLruCache$Editor) -> access$2200
okhttp3.internal.cache.DiskLruCache$Editor$1 -> okhttp3.internal.cache.DiskLruCache$Editor$1:
    okhttp3.internal.cache.DiskLruCache$Editor this$1 -> this$1
    void <init>(okhttp3.internal.cache.DiskLruCache$Editor,okio.Sink) -> <init>
    void onException(java.io.IOException) -> onException
okhttp3.internal.cache.DiskLruCache$Entry -> okhttp3.internal.cache.DiskLruCache$Entry:
    java.lang.String key -> key
    long[] lengths -> lengths
    java.io.File[] cleanFiles -> cleanFiles
    java.io.File[] dirtyFiles -> dirtyFiles
    boolean readable -> readable
    okhttp3.internal.cache.DiskLruCache$Editor currentEditor -> currentEditor
    long sequenceNumber -> sequenceNumber
    okhttp3.internal.cache.DiskLruCache this$0 -> this$0
    void <init>(okhttp3.internal.cache.DiskLruCache,java.lang.String) -> <init>
    void setLengths(java.lang.String[]) -> setLengths
    void writeLengths(okio.BufferedSink) -> writeLengths
    java.io.IOException invalidLengths(java.lang.String[]) -> invalidLengths
    okhttp3.internal.cache.DiskLruCache$Snapshot snapshot() -> snapshot
    void <init>(okhttp3.internal.cache.DiskLruCache,java.lang.String,okhttp3.internal.cache.DiskLruCache$1) -> <init>
    boolean access$1202(okhttp3.internal.cache.DiskLruCache$Entry,boolean) -> access$1202
    okhttp3.internal.cache.DiskLruCache$Editor access$1302(okhttp3.internal.cache.DiskLruCache$Entry,okhttp3.internal.cache.DiskLruCache$Editor) -> access$1302
    void access$1400(okhttp3.internal.cache.DiskLruCache$Entry,java.lang.String[]) -> access$1400
    okhttp3.internal.cache.DiskLruCache$Editor access$1300(okhttp3.internal.cache.DiskLruCache$Entry) -> access$1300
    long[] access$1600(okhttp3.internal.cache.DiskLruCache$Entry) -> access$1600
    java.io.File[] access$1700(okhttp3.internal.cache.DiskLruCache$Entry) -> access$1700
    java.io.File[] access$1800(okhttp3.internal.cache.DiskLruCache$Entry) -> access$1800
    java.lang.String access$1900(okhttp3.internal.cache.DiskLruCache$Entry) -> access$1900
    boolean access$1200(okhttp3.internal.cache.DiskLruCache$Entry) -> access$1200
    long access$2000(okhttp3.internal.cache.DiskLruCache$Entry) -> access$2000
    long access$2002(okhttp3.internal.cache.DiskLruCache$Entry,long) -> access$2002
okhttp3.internal.cache.DiskLruCache$Snapshot -> okhttp3.internal.cache.DiskLruCache$Snapshot:
    java.lang.String key -> key
    long sequenceNumber -> sequenceNumber
    okio.Source[] sources -> sources
    long[] lengths -> lengths
    okhttp3.internal.cache.DiskLruCache this$0 -> this$0
    void <init>(okhttp3.internal.cache.DiskLruCache,java.lang.String,long,okio.Source[],long[]) -> <init>
    java.lang.String key() -> key
    okhttp3.internal.cache.DiskLruCache$Editor edit() -> edit
    okio.Source getSource(int) -> getSource
    long getLength(int) -> getLength
    void close() -> close
    java.lang.String access$2400(okhttp3.internal.cache.DiskLruCache$Snapshot) -> access$2400
    void <init>(okhttp3.internal.cache.DiskLruCache,java.lang.String,long,okio.Source[],long[],okhttp3.internal.cache.DiskLruCache$1) -> <init>
okhttp3.internal.cache.FaultHidingSink -> okhttp3.internal.cache.FaultHidingSink:
    boolean hasErrors -> hasErrors
    void <init>(okio.Sink) -> <init>
    void write(okio.Buffer,long) -> write
    void flush() -> flush
    void close() -> close
    void onException(java.io.IOException) -> onException
okhttp3.internal.cache.InternalCache -> okhttp3.internal.cache.InternalCache:
    okhttp3.Response get(okhttp3.Request) -> get
    okhttp3.internal.cache.CacheRequest put(okhttp3.Response) -> put
    void remove(okhttp3.Request) -> remove
    void update(okhttp3.Response,okhttp3.Response) -> update
    void trackConditionalCacheHit() -> trackConditionalCacheHit
    void trackResponse(okhttp3.internal.cache.CacheStrategy) -> trackResponse
okhttp3.internal.connection.ConnectInterceptor -> okhttp3.internal.connection.ConnectInterceptor:
    okhttp3.OkHttpClient client -> client
    void <init>(okhttp3.OkHttpClient) -> <init>
    okhttp3.Response intercept(okhttp3.Interceptor$Chain) -> intercept
okhttp3.internal.connection.ConnectionSpecSelector -> okhttp3.internal.connection.ConnectionSpecSelector:
    java.util.List connectionSpecs -> connectionSpecs
    int nextModeIndex -> nextModeIndex
    boolean isFallbackPossible -> isFallbackPossible
    boolean isFallback -> isFallback
    void <init>(java.util.List) -> <init>
    okhttp3.ConnectionSpec configureSecureSocket(javax.net.ssl.SSLSocket) -> configureSecureSocket
    boolean connectionFailed(java.io.IOException) -> connectionFailed
    boolean isFallbackPossible(javax.net.ssl.SSLSocket) -> isFallbackPossible
okhttp3.internal.connection.RealConnection -> okhttp3.internal.connection.RealConnection:
    okhttp3.Route route -> route
    java.net.Socket rawSocket -> rawSocket
    java.net.Socket socket -> socket
    okhttp3.Handshake handshake -> handshake
    okhttp3.Protocol protocol -> protocol
    okhttp3.internal.framed.FramedConnection framedConnection -> framedConnection
    int successCount -> successCount
    okio.BufferedSource source -> source
    okio.BufferedSink sink -> sink
    int allocationLimit -> allocationLimit
    java.util.List allocations -> allocations
    boolean noNewStreams -> noNewStreams
    long idleAtNanos -> idleAtNanos
    void <init>(okhttp3.Route) -> <init>
    void connect(int,int,int,java.util.List,boolean) -> connect
    void buildTunneledConnection(int,int,int,okhttp3.internal.connection.ConnectionSpecSelector) -> buildTunneledConnection
    void buildConnection(int,int,int,okhttp3.internal.connection.ConnectionSpecSelector) -> buildConnection
    void connectSocket(int,int) -> connectSocket
    void establishProtocol(int,int,okhttp3.internal.connection.ConnectionSpecSelector) -> establishProtocol
    void connectTls(int,int,okhttp3.internal.connection.ConnectionSpecSelector) -> connectTls
    okhttp3.Request createTunnel(int,int,okhttp3.Request,okhttp3.HttpUrl) -> createTunnel
    okhttp3.Request createTunnelRequest() -> createTunnelRequest
    okhttp3.Route route() -> route
    void cancel() -> cancel
    java.net.Socket socket() -> socket
    boolean isHealthy(boolean) -> isHealthy
    void onStream(okhttp3.internal.framed.FramedStream) -> onStream
    void onSettings(okhttp3.internal.framed.FramedConnection) -> onSettings
    okhttp3.Handshake handshake() -> handshake
    boolean isMultiplexed() -> isMultiplexed
    okhttp3.Protocol protocol() -> protocol
    java.lang.String toString() -> toString
okhttp3.internal.connection.RouteDatabase -> okhttp3.internal.connection.RouteDatabase:
    java.util.Set failedRoutes -> failedRoutes
    void <init>() -> <init>
    void failed(okhttp3.Route) -> failed
    void connected(okhttp3.Route) -> connected
    boolean shouldPostpone(okhttp3.Route) -> shouldPostpone
okhttp3.internal.connection.RouteException -> okhttp3.internal.connection.RouteException:
    java.lang.reflect.Method addSuppressedExceptionMethod -> addSuppressedExceptionMethod
    java.io.IOException lastException -> lastException
    void <init>(java.io.IOException) -> <init>
    java.io.IOException getLastConnectException() -> getLastConnectException
    void addConnectException(java.io.IOException) -> addConnectException
    void addSuppressedIfPossible(java.io.IOException,java.io.IOException) -> addSuppressedIfPossible
    void <clinit>() -> <clinit>
okhttp3.internal.connection.RouteSelector -> okhttp3.internal.connection.RouteSelector:
    okhttp3.Address address -> address
    okhttp3.internal.connection.RouteDatabase routeDatabase -> routeDatabase
    java.net.Proxy lastProxy -> lastProxy
    java.net.InetSocketAddress lastInetSocketAddress -> lastInetSocketAddress
    java.util.List proxies -> proxies
    int nextProxyIndex -> nextProxyIndex
    java.util.List inetSocketAddresses -> inetSocketAddresses
    int nextInetSocketAddressIndex -> nextInetSocketAddressIndex
    java.util.List postponedRoutes -> postponedRoutes
    void <init>(okhttp3.Address,okhttp3.internal.connection.RouteDatabase) -> <init>
    boolean hasNext() -> hasNext
    okhttp3.Route next() -> next
    void connectFailed(okhttp3.Route,java.io.IOException) -> connectFailed
    void resetNextProxy(okhttp3.HttpUrl,java.net.Proxy) -> resetNextProxy
    boolean hasNextProxy() -> hasNextProxy
    java.net.Proxy nextProxy() -> nextProxy
    void resetNextInetSocketAddress(java.net.Proxy) -> resetNextInetSocketAddress
    java.lang.String getHostString(java.net.InetSocketAddress) -> getHostString
    boolean hasNextInetSocketAddress() -> hasNextInetSocketAddress
    java.net.InetSocketAddress nextInetSocketAddress() -> nextInetSocketAddress
    boolean hasNextPostponed() -> hasNextPostponed
    okhttp3.Route nextPostponed() -> nextPostponed
okhttp3.internal.connection.StreamAllocation -> okhttp3.internal.connection.StreamAllocation:
    okhttp3.Address address -> address
    okhttp3.Route route -> route
    okhttp3.ConnectionPool connectionPool -> connectionPool
    okhttp3.internal.connection.RouteSelector routeSelector -> routeSelector
    int refusedStreamCount -> refusedStreamCount
    okhttp3.internal.connection.RealConnection connection -> connection
    boolean released -> released
    boolean canceled -> canceled
    okhttp3.internal.http.HttpStream stream -> stream
    void <init>(okhttp3.ConnectionPool,okhttp3.Address) -> <init>
    okhttp3.internal.http.HttpStream newStream(okhttp3.OkHttpClient,boolean) -> newStream
    okhttp3.internal.connection.RealConnection findHealthyConnection(int,int,int,boolean,boolean) -> findHealthyConnection
    okhttp3.internal.connection.RealConnection findConnection(int,int,int,boolean) -> findConnection
    void streamFinished(boolean,okhttp3.internal.http.HttpStream) -> streamFinished
    okhttp3.internal.http.HttpStream stream() -> stream
    okhttp3.internal.connection.RouteDatabase routeDatabase() -> routeDatabase
    okhttp3.internal.connection.RealConnection connection() -> connection
    void release() -> release
    void noNewStreams() -> noNewStreams
    void deallocate(boolean,boolean,boolean) -> deallocate
    void cancel() -> cancel
    void streamFailed(java.io.IOException) -> streamFailed
    void acquire(okhttp3.internal.connection.RealConnection) -> acquire
    void release(okhttp3.internal.connection.RealConnection) -> release
    boolean hasMoreRoutes() -> hasMoreRoutes
    java.lang.String toString() -> toString
okhttp3.internal.framed.ErrorCode -> okhttp3.internal.framed.ErrorCode:
    okhttp3.internal.framed.ErrorCode NO_ERROR -> NO_ERROR
    okhttp3.internal.framed.ErrorCode PROTOCOL_ERROR -> PROTOCOL_ERROR
    okhttp3.internal.framed.ErrorCode INVALID_STREAM -> INVALID_STREAM
    okhttp3.internal.framed.ErrorCode UNSUPPORTED_VERSION -> UNSUPPORTED_VERSION
    okhttp3.internal.framed.ErrorCode STREAM_IN_USE -> STREAM_IN_USE
    okhttp3.internal.framed.ErrorCode STREAM_ALREADY_CLOSED -> STREAM_ALREADY_CLOSED
    okhttp3.internal.framed.ErrorCode INTERNAL_ERROR -> INTERNAL_ERROR
    okhttp3.internal.framed.ErrorCode FLOW_CONTROL_ERROR -> FLOW_CONTROL_ERROR
    okhttp3.internal.framed.ErrorCode STREAM_CLOSED -> STREAM_CLOSED
    okhttp3.internal.framed.ErrorCode FRAME_TOO_LARGE -> FRAME_TOO_LARGE
    okhttp3.internal.framed.ErrorCode REFUSED_STREAM -> REFUSED_STREAM
    okhttp3.internal.framed.ErrorCode CANCEL -> CANCEL
    okhttp3.internal.framed.ErrorCode COMPRESSION_ERROR -> COMPRESSION_ERROR
    okhttp3.internal.framed.ErrorCode CONNECT_ERROR -> CONNECT_ERROR
    okhttp3.internal.framed.ErrorCode ENHANCE_YOUR_CALM -> ENHANCE_YOUR_CALM
    okhttp3.internal.framed.ErrorCode INADEQUATE_SECURITY -> INADEQUATE_SECURITY
    okhttp3.internal.framed.ErrorCode HTTP_1_1_REQUIRED -> HTTP_1_1_REQUIRED
    okhttp3.internal.framed.ErrorCode INVALID_CREDENTIALS -> INVALID_CREDENTIALS
    int httpCode -> httpCode
    int spdyRstCode -> spdyRstCode
    int spdyGoAwayCode -> spdyGoAwayCode
    okhttp3.internal.framed.ErrorCode[] $VALUES -> $VALUES
    okhttp3.internal.framed.ErrorCode[] values() -> values
    okhttp3.internal.framed.ErrorCode valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,int,int,int) -> <init>
    okhttp3.internal.framed.ErrorCode fromSpdy3Rst(int) -> fromSpdy3Rst
    okhttp3.internal.framed.ErrorCode fromHttp2(int) -> fromHttp2
    okhttp3.internal.framed.ErrorCode fromSpdyGoAway(int) -> fromSpdyGoAway
    void <clinit>() -> <clinit>
okhttp3.internal.framed.FrameReader -> okhttp3.internal.framed.FrameReader:
    void readConnectionPreface() -> readConnectionPreface
    boolean nextFrame(okhttp3.internal.framed.FrameReader$Handler) -> nextFrame
okhttp3.internal.framed.FrameReader$Handler -> okhttp3.internal.framed.FrameReader$Handler:
    void data(boolean,int,okio.BufferedSource,int) -> data
    void headers(boolean,boolean,int,int,java.util.List,okhttp3.internal.framed.HeadersMode) -> headers
    void rstStream(int,okhttp3.internal.framed.ErrorCode) -> rstStream
    void settings(boolean,okhttp3.internal.framed.Settings) -> settings
    void ackSettings() -> ackSettings
    void ping(boolean,int,int) -> ping
    void goAway(int,okhttp3.internal.framed.ErrorCode,okio.ByteString) -> goAway
    void windowUpdate(int,long) -> windowUpdate
    void priority(int,int,int,boolean) -> priority
    void pushPromise(int,int,java.util.List) -> pushPromise
    void alternateService(int,java.lang.String,okio.ByteString,java.lang.String,int,long) -> alternateService
okhttp3.internal.framed.FrameWriter -> okhttp3.internal.framed.FrameWriter:
    void connectionPreface() -> connectionPreface
    void applyAndAckSettings(okhttp3.internal.framed.Settings) -> applyAndAckSettings
    void pushPromise(int,int,java.util.List) -> pushPromise
    void flush() -> flush
    void synStream(boolean,boolean,int,int,java.util.List) -> synStream
    void synReply(boolean,int,java.util.List) -> synReply
    void headers(int,java.util.List) -> headers
    void rstStream(int,okhttp3.internal.framed.ErrorCode) -> rstStream
    int maxDataLength() -> maxDataLength
    void data(boolean,int,okio.Buffer,int) -> data
    void settings(okhttp3.internal.framed.Settings) -> settings
    void ping(boolean,int,int) -> ping
    void goAway(int,okhttp3.internal.framed.ErrorCode,byte[]) -> goAway
    void windowUpdate(int,long) -> windowUpdate
okhttp3.internal.framed.FramedConnection -> okhttp3.internal.framed.FramedConnection:
    java.util.concurrent.ExecutorService executor -> executor
    okhttp3.Protocol protocol -> protocol
    boolean client -> client
    okhttp3.internal.framed.FramedConnection$Listener listener -> listener
    java.util.Map streams -> streams
    java.lang.String hostname -> hostname
    int lastGoodStreamId -> lastGoodStreamId
    int nextStreamId -> nextStreamId
    boolean shutdown -> shutdown
    java.util.concurrent.ExecutorService pushExecutor -> pushExecutor
    java.util.Map pings -> pings
    okhttp3.internal.framed.PushObserver pushObserver -> pushObserver
    int nextPingId -> nextPingId
    long unacknowledgedBytesRead -> unacknowledgedBytesRead
    long bytesLeftInWriteWindow -> bytesLeftInWriteWindow
    okhttp3.internal.framed.Settings okHttpSettings -> okHttpSettings
    int OKHTTP_CLIENT_WINDOW_SIZE -> OKHTTP_CLIENT_WINDOW_SIZE
    okhttp3.internal.framed.Settings peerSettings -> peerSettings
    boolean receivedInitialPeerSettings -> receivedInitialPeerSettings
    okhttp3.internal.framed.Variant variant -> variant
    java.net.Socket socket -> socket
    okhttp3.internal.framed.FrameWriter frameWriter -> frameWriter
    okhttp3.internal.framed.FramedConnection$Reader readerRunnable -> readerRunnable
    java.util.Set currentPushRequests -> currentPushRequests
    boolean $assertionsDisabled -> $assertionsDisabled
    void <init>(okhttp3.internal.framed.FramedConnection$Builder) -> <init>
    okhttp3.Protocol getProtocol() -> getProtocol
    int openStreamCount() -> openStreamCount
    okhttp3.internal.framed.FramedStream getStream(int) -> getStream
    okhttp3.internal.framed.FramedStream removeStream(int) -> removeStream
    int maxConcurrentStreams() -> maxConcurrentStreams
    okhttp3.internal.framed.FramedStream pushStream(int,java.util.List,boolean) -> pushStream
    okhttp3.internal.framed.FramedStream newStream(java.util.List,boolean,boolean) -> newStream
    okhttp3.internal.framed.FramedStream newStream(int,java.util.List,boolean,boolean) -> newStream
    void writeSynReply(int,boolean,java.util.List) -> writeSynReply
    void writeData(int,boolean,okio.Buffer,long) -> writeData
    void addBytesToWriteWindow(long) -> addBytesToWriteWindow
    void writeSynResetLater(int,okhttp3.internal.framed.ErrorCode) -> writeSynResetLater
    void writeSynReset(int,okhttp3.internal.framed.ErrorCode) -> writeSynReset
    void writeWindowUpdateLater(int,long) -> writeWindowUpdateLater
    okhttp3.internal.framed.Ping ping() -> ping
    void writePingLater(boolean,int,int,okhttp3.internal.framed.Ping) -> writePingLater
    void writePing(boolean,int,int,okhttp3.internal.framed.Ping) -> writePing
    okhttp3.internal.framed.Ping removePing(int) -> removePing
    void flush() -> flush
    void shutdown(okhttp3.internal.framed.ErrorCode) -> shutdown
    void close() -> close
    void close(okhttp3.internal.framed.ErrorCode,okhttp3.internal.framed.ErrorCode) -> close
    void start() -> start
    void start(boolean) -> start
    void setSettings(okhttp3.internal.framed.Settings) -> setSettings
    boolean pushedStream(int) -> pushedStream
    void pushRequestLater(int,java.util.List) -> pushRequestLater
    void pushHeadersLater(int,java.util.List,boolean) -> pushHeadersLater
    void pushDataLater(int,okio.BufferedSource,int,boolean) -> pushDataLater
    void pushResetLater(int,okhttp3.internal.framed.ErrorCode) -> pushResetLater
    void access$900(okhttp3.internal.framed.FramedConnection,boolean,int,int,okhttp3.internal.framed.Ping) -> access$900
    void <init>(okhttp3.internal.framed.FramedConnection$Builder,okhttp3.internal.framed.FramedConnection$1) -> <init>
    java.lang.String access$1100(okhttp3.internal.framed.FramedConnection) -> access$1100
    void access$1200(okhttp3.internal.framed.FramedConnection,okhttp3.internal.framed.ErrorCode,okhttp3.internal.framed.ErrorCode) -> access$1200
    boolean access$1300(okhttp3.internal.framed.FramedConnection,int) -> access$1300
    void access$1400(okhttp3.internal.framed.FramedConnection,int,okio.BufferedSource,int,boolean) -> access$1400
    void access$1500(okhttp3.internal.framed.FramedConnection,int,java.util.List,boolean) -> access$1500
    boolean access$1600(okhttp3.internal.framed.FramedConnection) -> access$1600
    int access$1700(okhttp3.internal.framed.FramedConnection) -> access$1700
    int access$1800(okhttp3.internal.framed.FramedConnection) -> access$1800
    int access$1702(okhttp3.internal.framed.FramedConnection,int) -> access$1702
    java.util.Map access$1900(okhttp3.internal.framed.FramedConnection) -> access$1900
    okhttp3.internal.framed.FramedConnection$Listener access$2000(okhttp3.internal.framed.FramedConnection) -> access$2000
    java.util.concurrent.ExecutorService access$2100() -> access$2100
    void access$2200(okhttp3.internal.framed.FramedConnection,int,okhttp3.internal.framed.ErrorCode) -> access$2200
    boolean access$2300(okhttp3.internal.framed.FramedConnection) -> access$2300
    boolean access$2302(okhttp3.internal.framed.FramedConnection,boolean) -> access$2302
    okhttp3.internal.framed.Ping access$2400(okhttp3.internal.framed.FramedConnection,int) -> access$2400
    void access$2500(okhttp3.internal.framed.FramedConnection,boolean,int,int,okhttp3.internal.framed.Ping) -> access$2500
    boolean access$1602(okhttp3.internal.framed.FramedConnection,boolean) -> access$1602
    void access$2600(okhttp3.internal.framed.FramedConnection,int,java.util.List) -> access$2600
    okhttp3.internal.framed.PushObserver access$2700(okhttp3.internal.framed.FramedConnection) -> access$2700
    java.util.Set access$2800(okhttp3.internal.framed.FramedConnection) -> access$2800
    void <clinit>() -> <clinit>
okhttp3.internal.framed.FramedConnection$1 -> okhttp3.internal.framed.FramedConnection$1:
    int val$streamId -> val$streamId
    okhttp3.internal.framed.ErrorCode val$errorCode -> val$errorCode
    okhttp3.internal.framed.FramedConnection this$0 -> this$0
    void <init>(okhttp3.internal.framed.FramedConnection,java.lang.String,java.lang.Object[],int,okhttp3.internal.framed.ErrorCode) -> <init>
    void execute() -> execute
okhttp3.internal.framed.FramedConnection$2 -> okhttp3.internal.framed.FramedConnection$2:
    int val$streamId -> val$streamId
    long val$unacknowledgedBytesRead -> val$unacknowledgedBytesRead
    okhttp3.internal.framed.FramedConnection this$0 -> this$0
    void <init>(okhttp3.internal.framed.FramedConnection,java.lang.String,java.lang.Object[],int,long) -> <init>
    void execute() -> execute
okhttp3.internal.framed.FramedConnection$3 -> okhttp3.internal.framed.FramedConnection$3:
    boolean val$reply -> val$reply
    int val$payload1 -> val$payload1
    int val$payload2 -> val$payload2
    okhttp3.internal.framed.Ping val$ping -> val$ping
    okhttp3.internal.framed.FramedConnection this$0 -> this$0
    void <init>(okhttp3.internal.framed.FramedConnection,java.lang.String,java.lang.Object[],boolean,int,int,okhttp3.internal.framed.Ping) -> <init>
    void execute() -> execute
okhttp3.internal.framed.FramedConnection$4 -> okhttp3.internal.framed.FramedConnection$4:
    int val$streamId -> val$streamId
    java.util.List val$requestHeaders -> val$requestHeaders
    okhttp3.internal.framed.FramedConnection this$0 -> this$0
    void <init>(okhttp3.internal.framed.FramedConnection,java.lang.String,java.lang.Object[],int,java.util.List) -> <init>
    void execute() -> execute
okhttp3.internal.framed.FramedConnection$5 -> okhttp3.internal.framed.FramedConnection$5:
    int val$streamId -> val$streamId
    java.util.List val$requestHeaders -> val$requestHeaders
    boolean val$inFinished -> val$inFinished
    okhttp3.internal.framed.FramedConnection this$0 -> this$0
    void <init>(okhttp3.internal.framed.FramedConnection,java.lang.String,java.lang.Object[],int,java.util.List,boolean) -> <init>
    void execute() -> execute
okhttp3.internal.framed.FramedConnection$6 -> okhttp3.internal.framed.FramedConnection$6:
    int val$streamId -> val$streamId
    okio.Buffer val$buffer -> val$buffer
    int val$byteCount -> val$byteCount
    boolean val$inFinished -> val$inFinished
    okhttp3.internal.framed.FramedConnection this$0 -> this$0
    void <init>(okhttp3.internal.framed.FramedConnection,java.lang.String,java.lang.Object[],int,okio.Buffer,int,boolean) -> <init>
    void execute() -> execute
okhttp3.internal.framed.FramedConnection$7 -> okhttp3.internal.framed.FramedConnection$7:
    int val$streamId -> val$streamId
    okhttp3.internal.framed.ErrorCode val$errorCode -> val$errorCode
    okhttp3.internal.framed.FramedConnection this$0 -> this$0
    void <init>(okhttp3.internal.framed.FramedConnection,java.lang.String,java.lang.Object[],int,okhttp3.internal.framed.ErrorCode) -> <init>
    void execute() -> execute
okhttp3.internal.framed.FramedConnection$Builder -> okhttp3.internal.framed.FramedConnection$Builder:
    java.net.Socket socket -> socket
    java.lang.String hostname -> hostname
    okio.BufferedSource source -> source
    okio.BufferedSink sink -> sink
    okhttp3.internal.framed.FramedConnection$Listener listener -> listener
    okhttp3.Protocol protocol -> protocol
    okhttp3.internal.framed.PushObserver pushObserver -> pushObserver
    boolean client -> client
    void <init>(boolean) -> <init>
    okhttp3.internal.framed.FramedConnection$Builder socket(java.net.Socket) -> socket
    okhttp3.internal.framed.FramedConnection$Builder socket(java.net.Socket,java.lang.String,okio.BufferedSource,okio.BufferedSink) -> socket
    okhttp3.internal.framed.FramedConnection$Builder listener(okhttp3.internal.framed.FramedConnection$Listener) -> listener
    okhttp3.internal.framed.FramedConnection$Builder protocol(okhttp3.Protocol) -> protocol
    okhttp3.internal.framed.FramedConnection$Builder pushObserver(okhttp3.internal.framed.PushObserver) -> pushObserver
    okhttp3.internal.framed.FramedConnection build() -> build
    okhttp3.Protocol access$000(okhttp3.internal.framed.FramedConnection$Builder) -> access$000
    okhttp3.internal.framed.PushObserver access$100(okhttp3.internal.framed.FramedConnection$Builder) -> access$100
    boolean access$200(okhttp3.internal.framed.FramedConnection$Builder) -> access$200
    okhttp3.internal.framed.FramedConnection$Listener access$300(okhttp3.internal.framed.FramedConnection$Builder) -> access$300
    java.lang.String access$400(okhttp3.internal.framed.FramedConnection$Builder) -> access$400
    java.net.Socket access$500(okhttp3.internal.framed.FramedConnection$Builder) -> access$500
    okio.BufferedSink access$600(okhttp3.internal.framed.FramedConnection$Builder) -> access$600
    okio.BufferedSource access$700(okhttp3.internal.framed.FramedConnection$Builder) -> access$700
okhttp3.internal.framed.FramedConnection$Listener -> okhttp3.internal.framed.FramedConnection$Listener:
    okhttp3.internal.framed.FramedConnection$Listener REFUSE_INCOMING_STREAMS -> REFUSE_INCOMING_STREAMS
    void <init>() -> <init>
    void onStream(okhttp3.internal.framed.FramedStream) -> onStream
    void onSettings(okhttp3.internal.framed.FramedConnection) -> onSettings
    void <clinit>() -> <clinit>
okhttp3.internal.framed.FramedConnection$Listener$1 -> okhttp3.internal.framed.FramedConnection$Listener$1:
    void <init>() -> <init>
    void onStream(okhttp3.internal.framed.FramedStream) -> onStream
okhttp3.internal.framed.FramedConnection$Reader -> okhttp3.internal.framed.FramedConnection$Reader:
    okhttp3.internal.framed.FrameReader frameReader -> frameReader
    okhttp3.internal.framed.FramedConnection this$0 -> this$0
    void <init>(okhttp3.internal.framed.FramedConnection,okhttp3.internal.framed.FrameReader) -> <init>
    void execute() -> execute
    void data(boolean,int,okio.BufferedSource,int) -> data
    void headers(boolean,boolean,int,int,java.util.List,okhttp3.internal.framed.HeadersMode) -> headers
    void rstStream(int,okhttp3.internal.framed.ErrorCode) -> rstStream
    void settings(boolean,okhttp3.internal.framed.Settings) -> settings
    void applyAndAckSettings(okhttp3.internal.framed.Settings) -> applyAndAckSettings
    void ackSettings() -> ackSettings
    void ping(boolean,int,int) -> ping
    void goAway(int,okhttp3.internal.framed.ErrorCode,okio.ByteString) -> goAway
    void windowUpdate(int,long) -> windowUpdate
    void priority(int,int,int,boolean) -> priority
    void pushPromise(int,int,java.util.List) -> pushPromise
    void alternateService(int,java.lang.String,okio.ByteString,java.lang.String,int,long) -> alternateService
    void <init>(okhttp3.internal.framed.FramedConnection,okhttp3.internal.framed.FrameReader,okhttp3.internal.framed.FramedConnection$1) -> <init>
okhttp3.internal.framed.FramedConnection$Reader$1 -> okhttp3.internal.framed.FramedConnection$Reader$1:
    okhttp3.internal.framed.FramedStream val$newStream -> val$newStream
    okhttp3.internal.framed.FramedConnection$Reader this$1 -> this$1
    void <init>(okhttp3.internal.framed.FramedConnection$Reader,java.lang.String,java.lang.Object[],okhttp3.internal.framed.FramedStream) -> <init>
    void execute() -> execute
okhttp3.internal.framed.FramedConnection$Reader$2 -> okhttp3.internal.framed.FramedConnection$Reader$2:
    okhttp3.internal.framed.FramedConnection$Reader this$1 -> this$1
    void <init>(okhttp3.internal.framed.FramedConnection$Reader,java.lang.String,java.lang.Object[]) -> <init>
    void execute() -> execute
okhttp3.internal.framed.FramedConnection$Reader$3 -> okhttp3.internal.framed.FramedConnection$Reader$3:
    okhttp3.internal.framed.Settings val$peerSettings -> val$peerSettings
    okhttp3.internal.framed.FramedConnection$Reader this$1 -> this$1
    void <init>(okhttp3.internal.framed.FramedConnection$Reader,java.lang.String,java.lang.Object[],okhttp3.internal.framed.Settings) -> <init>
    void execute() -> execute
okhttp3.internal.framed.FramedStream -> okhttp3.internal.framed.FramedStream:
    long unacknowledgedBytesRead -> unacknowledgedBytesRead
    long bytesLeftInWriteWindow -> bytesLeftInWriteWindow
    int id -> id
    okhttp3.internal.framed.FramedConnection connection -> connection
    java.util.List requestHeaders -> requestHeaders
    java.util.List responseHeaders -> responseHeaders
    okhttp3.internal.framed.FramedStream$FramedDataSource source -> source
    okhttp3.internal.framed.FramedStream$FramedDataSink sink -> sink
    okhttp3.internal.framed.FramedStream$StreamTimeout readTimeout -> readTimeout
    okhttp3.internal.framed.FramedStream$StreamTimeout writeTimeout -> writeTimeout
    okhttp3.internal.framed.ErrorCode errorCode -> errorCode
    boolean $assertionsDisabled -> $assertionsDisabled
    void <init>(int,okhttp3.internal.framed.FramedConnection,boolean,boolean,java.util.List) -> <init>
    int getId() -> getId
    boolean isOpen() -> isOpen
    boolean isLocallyInitiated() -> isLocallyInitiated
    okhttp3.internal.framed.FramedConnection getConnection() -> getConnection
    java.util.List getRequestHeaders() -> getRequestHeaders
    java.util.List getResponseHeaders() -> getResponseHeaders
    okhttp3.internal.framed.ErrorCode getErrorCode() -> getErrorCode
    void reply(java.util.List,boolean) -> reply
    okio.Timeout readTimeout() -> readTimeout
    okio.Timeout writeTimeout() -> writeTimeout
    okio.Source getSource() -> getSource
    okio.Sink getSink() -> getSink
    void close(okhttp3.internal.framed.ErrorCode) -> close
    void closeLater(okhttp3.internal.framed.ErrorCode) -> closeLater
    boolean closeInternal(okhttp3.internal.framed.ErrorCode) -> closeInternal
    void receiveHeaders(java.util.List,okhttp3.internal.framed.HeadersMode) -> receiveHeaders
    void receiveData(okio.BufferedSource,int) -> receiveData
    void receiveFin() -> receiveFin
    void receiveRstStream(okhttp3.internal.framed.ErrorCode) -> receiveRstStream
    void cancelStreamIfNecessary() -> cancelStreamIfNecessary
    void addBytesToWriteWindow(long) -> addBytesToWriteWindow
    void checkOutNotClosed() -> checkOutNotClosed
    void waitForIo() -> waitForIo
    okhttp3.internal.framed.FramedConnection access$500(okhttp3.internal.framed.FramedStream) -> access$500
    int access$600(okhttp3.internal.framed.FramedStream) -> access$600
    okhttp3.internal.framed.FramedStream$StreamTimeout access$700(okhttp3.internal.framed.FramedStream) -> access$700
    okhttp3.internal.framed.ErrorCode access$800(okhttp3.internal.framed.FramedStream) -> access$800
    void access$900(okhttp3.internal.framed.FramedStream) -> access$900
    void access$1000(okhttp3.internal.framed.FramedStream) -> access$1000
    okhttp3.internal.framed.FramedStream$StreamTimeout access$1100(okhttp3.internal.framed.FramedStream) -> access$1100
    void access$1200(okhttp3.internal.framed.FramedStream) -> access$1200
    void <clinit>() -> <clinit>
okhttp3.internal.framed.FramedStream$1 -> okhttp3.internal.framed.FramedStream$1:
okhttp3.internal.framed.FramedStream$FramedDataSink -> okhttp3.internal.framed.FramedStream$FramedDataSink:
    long EMIT_BUFFER_SIZE -> EMIT_BUFFER_SIZE
    okio.Buffer sendBuffer -> sendBuffer
    boolean closed -> closed
    boolean finished -> finished
    boolean $assertionsDisabled -> $assertionsDisabled
    okhttp3.internal.framed.FramedStream this$0 -> this$0
    void <init>(okhttp3.internal.framed.FramedStream) -> <init>
    void write(okio.Buffer,long) -> write
    void emitDataFrame(boolean) -> emitDataFrame
    void flush() -> flush
    okio.Timeout timeout() -> timeout
    void close() -> close
    boolean access$202(okhttp3.internal.framed.FramedStream$FramedDataSink,boolean) -> access$202
    boolean access$200(okhttp3.internal.framed.FramedStream$FramedDataSink) -> access$200
    boolean access$400(okhttp3.internal.framed.FramedStream$FramedDataSink) -> access$400
    void <clinit>() -> <clinit>
okhttp3.internal.framed.FramedStream$FramedDataSource -> okhttp3.internal.framed.FramedStream$FramedDataSource:
    okio.Buffer receiveBuffer -> receiveBuffer
    okio.Buffer readBuffer -> readBuffer
    long maxByteCount -> maxByteCount
    boolean closed -> closed
    boolean finished -> finished
    boolean $assertionsDisabled -> $assertionsDisabled
    okhttp3.internal.framed.FramedStream this$0 -> this$0
    void <init>(okhttp3.internal.framed.FramedStream,long) -> <init>
    long read(okio.Buffer,long) -> read
    void waitUntilReadable() -> waitUntilReadable
    void receive(okio.BufferedSource,long) -> receive
    okio.Timeout timeout() -> timeout
    void close() -> close
    void checkNotClosed() -> checkNotClosed
    void <init>(okhttp3.internal.framed.FramedStream,long,okhttp3.internal.framed.FramedStream$1) -> <init>
    boolean access$102(okhttp3.internal.framed.FramedStream$FramedDataSource,boolean) -> access$102
    boolean access$100(okhttp3.internal.framed.FramedStream$FramedDataSource) -> access$100
    boolean access$300(okhttp3.internal.framed.FramedStream$FramedDataSource) -> access$300
    void <clinit>() -> <clinit>
okhttp3.internal.framed.FramedStream$StreamTimeout -> okhttp3.internal.framed.FramedStream$StreamTimeout:
    okhttp3.internal.framed.FramedStream this$0 -> this$0
    void <init>(okhttp3.internal.framed.FramedStream) -> <init>
    void timedOut() -> timedOut
    java.io.IOException newTimeoutException(java.io.IOException) -> newTimeoutException
    void exitAndThrowIfTimedOut() -> exitAndThrowIfTimedOut
okhttp3.internal.framed.Header -> okhttp3.internal.framed.Header:
    okio.ByteString RESPONSE_STATUS -> RESPONSE_STATUS
    okio.ByteString TARGET_METHOD -> TARGET_METHOD
    okio.ByteString TARGET_PATH -> TARGET_PATH
    okio.ByteString TARGET_SCHEME -> TARGET_SCHEME
    okio.ByteString TARGET_AUTHORITY -> TARGET_AUTHORITY
    okio.ByteString TARGET_HOST -> TARGET_HOST
    okio.ByteString VERSION -> VERSION
    okio.ByteString name -> name
    okio.ByteString value -> value
    int hpackSize -> hpackSize
    void <init>(java.lang.String,java.lang.String) -> <init>
    void <init>(okio.ByteString,java.lang.String) -> <init>
    void <init>(okio.ByteString,okio.ByteString) -> <init>
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void <clinit>() -> <clinit>
okhttp3.internal.framed.HeadersMode -> okhttp3.internal.framed.HeadersMode:
    okhttp3.internal.framed.HeadersMode SPDY_SYN_STREAM -> SPDY_SYN_STREAM
    okhttp3.internal.framed.HeadersMode SPDY_REPLY -> SPDY_REPLY
    okhttp3.internal.framed.HeadersMode SPDY_HEADERS -> SPDY_HEADERS
    okhttp3.internal.framed.HeadersMode HTTP_20_HEADERS -> HTTP_20_HEADERS
    okhttp3.internal.framed.HeadersMode[] $VALUES -> $VALUES
    okhttp3.internal.framed.HeadersMode[] values() -> values
    okhttp3.internal.framed.HeadersMode valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    boolean failIfStreamAbsent() -> failIfStreamAbsent
    boolean failIfStreamPresent() -> failIfStreamPresent
    boolean failIfHeadersAbsent() -> failIfHeadersAbsent
    boolean failIfHeadersPresent() -> failIfHeadersPresent
    void <clinit>() -> <clinit>
okhttp3.internal.framed.Hpack -> okhttp3.internal.framed.Hpack:
    int PREFIX_4_BITS -> PREFIX_4_BITS
    int PREFIX_5_BITS -> PREFIX_5_BITS
    int PREFIX_6_BITS -> PREFIX_6_BITS
    int PREFIX_7_BITS -> PREFIX_7_BITS
    okhttp3.internal.framed.Header[] STATIC_HEADER_TABLE -> STATIC_HEADER_TABLE
    java.util.Map NAME_TO_FIRST_INDEX -> NAME_TO_FIRST_INDEX
    void <init>() -> <init>
    java.util.Map nameToFirstIndex() -> nameToFirstIndex
    okio.ByteString checkLowercase(okio.ByteString) -> checkLowercase
    okhttp3.internal.framed.Header[] access$000() -> access$000
    okio.ByteString access$100(okio.ByteString) -> access$100
    java.util.Map access$200() -> access$200
    void <clinit>() -> <clinit>
okhttp3.internal.framed.Hpack$Reader -> okhttp3.internal.framed.Hpack$Reader:
    java.util.List headerList -> headerList
    okio.BufferedSource source -> source
    int headerTableSizeSetting -> headerTableSizeSetting
    int maxDynamicTableByteCount -> maxDynamicTableByteCount
    okhttp3.internal.framed.Header[] dynamicTable -> dynamicTable
    int nextHeaderIndex -> nextHeaderIndex
    int headerCount -> headerCount
    int dynamicTableByteCount -> dynamicTableByteCount
    void <init>(int,okio.Source) -> <init>
    void <init>(int,int,okio.Source) -> <init>
    int maxDynamicTableByteCount() -> maxDynamicTableByteCount
    void adjustDynamicTableByteCount() -> adjustDynamicTableByteCount
    void clearDynamicTable() -> clearDynamicTable
    int evictToRecoverBytes(int) -> evictToRecoverBytes
    void readHeaders() -> readHeaders
    java.util.List getAndResetHeaderList() -> getAndResetHeaderList
    void readIndexedHeader(int) -> readIndexedHeader
    int dynamicTableIndex(int) -> dynamicTableIndex
    void readLiteralHeaderWithoutIndexingIndexedName(int) -> readLiteralHeaderWithoutIndexingIndexedName
    void readLiteralHeaderWithoutIndexingNewName() -> readLiteralHeaderWithoutIndexingNewName
    void readLiteralHeaderWithIncrementalIndexingIndexedName(int) -> readLiteralHeaderWithIncrementalIndexingIndexedName
    void readLiteralHeaderWithIncrementalIndexingNewName() -> readLiteralHeaderWithIncrementalIndexingNewName
    okio.ByteString getName(int) -> getName
    boolean isStaticHeader(int) -> isStaticHeader
    void insertIntoDynamicTable(int,okhttp3.internal.framed.Header) -> insertIntoDynamicTable
    int readByte() -> readByte
    int readInt(int,int) -> readInt
    okio.ByteString readByteString() -> readByteString
okhttp3.internal.framed.Hpack$Writer -> okhttp3.internal.framed.Hpack$Writer:
    int SETTINGS_HEADER_TABLE_SIZE -> SETTINGS_HEADER_TABLE_SIZE
    int SETTINGS_HEADER_TABLE_SIZE_LIMIT -> SETTINGS_HEADER_TABLE_SIZE_LIMIT
    okio.Buffer out -> out
    int smallestHeaderTableSizeSetting -> smallestHeaderTableSizeSetting
    boolean emitDynamicTableSizeUpdate -> emitDynamicTableSizeUpdate
    int headerTableSizeSetting -> headerTableSizeSetting
    int maxDynamicTableByteCount -> maxDynamicTableByteCount
    okhttp3.internal.framed.Header[] dynamicTable -> dynamicTable
    int nextHeaderIndex -> nextHeaderIndex
    int headerCount -> headerCount
    int dynamicTableByteCount -> dynamicTableByteCount
    void <init>(okio.Buffer) -> <init>
    void <init>(int,okio.Buffer) -> <init>
    void clearDynamicTable() -> clearDynamicTable
    int evictToRecoverBytes(int) -> evictToRecoverBytes
    void insertIntoDynamicTable(okhttp3.internal.framed.Header) -> insertIntoDynamicTable
    void writeHeaders(java.util.List) -> writeHeaders
    void writeInt(int,int,int) -> writeInt
    void writeByteString(okio.ByteString) -> writeByteString
    void setHeaderTableSizeSetting(int) -> setHeaderTableSizeSetting
    void adjustDynamicTableByteCount() -> adjustDynamicTableByteCount
okhttp3.internal.framed.Http2 -> okhttp3.internal.framed.Http2:
    java.util.logging.Logger logger -> logger
    okio.ByteString CONNECTION_PREFACE -> CONNECTION_PREFACE
    int INITIAL_MAX_FRAME_SIZE -> INITIAL_MAX_FRAME_SIZE
    byte TYPE_DATA -> TYPE_DATA
    byte TYPE_HEADERS -> TYPE_HEADERS
    byte TYPE_PRIORITY -> TYPE_PRIORITY
    byte TYPE_RST_STREAM -> TYPE_RST_STREAM
    byte TYPE_SETTINGS -> TYPE_SETTINGS
    byte TYPE_PUSH_PROMISE -> TYPE_PUSH_PROMISE
    byte TYPE_PING -> TYPE_PING
    byte TYPE_GOAWAY -> TYPE_GOAWAY
    byte TYPE_WINDOW_UPDATE -> TYPE_WINDOW_UPDATE
    byte TYPE_CONTINUATION -> TYPE_CONTINUATION
    byte FLAG_NONE -> FLAG_NONE
    byte FLAG_ACK -> FLAG_ACK
    byte FLAG_END_STREAM -> FLAG_END_STREAM
    byte FLAG_END_HEADERS -> FLAG_END_HEADERS
    byte FLAG_END_PUSH_PROMISE -> FLAG_END_PUSH_PROMISE
    byte FLAG_PADDED -> FLAG_PADDED
    byte FLAG_PRIORITY -> FLAG_PRIORITY
    byte FLAG_COMPRESSED -> FLAG_COMPRESSED
    void <init>() -> <init>
    okhttp3.Protocol getProtocol() -> getProtocol
    okhttp3.internal.framed.FrameReader newReader(okio.BufferedSource,boolean) -> newReader
    okhttp3.internal.framed.FrameWriter newWriter(okio.BufferedSink,boolean) -> newWriter
    java.lang.IllegalArgumentException illegalArgument(java.lang.String,java.lang.Object[]) -> illegalArgument
    java.io.IOException ioException(java.lang.String,java.lang.Object[]) -> ioException
    int lengthWithoutPadding(int,byte,short) -> lengthWithoutPadding
    int readMedium(okio.BufferedSource) -> readMedium
    void writeMedium(okio.BufferedSink,int) -> writeMedium
    okio.ByteString access$000() -> access$000
    java.util.logging.Logger access$100() -> access$100
    java.io.IOException access$200(java.lang.String,java.lang.Object[]) -> access$200
    int access$300(okio.BufferedSource) -> access$300
    int access$400(int,byte,short) -> access$400
    java.lang.IllegalArgumentException access$500(java.lang.String,java.lang.Object[]) -> access$500
    void access$600(okio.BufferedSink,int) -> access$600
    void <clinit>() -> <clinit>
okhttp3.internal.framed.Http2$ContinuationSource -> okhttp3.internal.framed.Http2$ContinuationSource:
    okio.BufferedSource source -> source
    int length -> length
    byte flags -> flags
    int streamId -> streamId
    int left -> left
    short padding -> padding
    void <init>(okio.BufferedSource) -> <init>
    long read(okio.Buffer,long) -> read
    okio.Timeout timeout() -> timeout
    void close() -> close
    void readContinuationHeader() -> readContinuationHeader
okhttp3.internal.framed.Http2$FrameLogger -> okhttp3.internal.framed.Http2$FrameLogger:
    java.lang.String[] TYPES -> TYPES
    java.lang.String[] FLAGS -> FLAGS
    java.lang.String[] BINARY -> BINARY
    void <init>() -> <init>
    java.lang.String formatHeader(boolean,int,int,byte,byte) -> formatHeader
    java.lang.String formatFlags(byte,byte) -> formatFlags
    void <clinit>() -> <clinit>
okhttp3.internal.framed.Http2$Reader -> okhttp3.internal.framed.Http2$Reader:
    okio.BufferedSource source -> source
    okhttp3.internal.framed.Http2$ContinuationSource continuation -> continuation
    boolean client -> client
    okhttp3.internal.framed.Hpack$Reader hpackReader -> hpackReader
    void <init>(okio.BufferedSource,int,boolean) -> <init>
    void readConnectionPreface() -> readConnectionPreface
    boolean nextFrame(okhttp3.internal.framed.FrameReader$Handler) -> nextFrame
    void readHeaders(okhttp3.internal.framed.FrameReader$Handler,int,byte,int) -> readHeaders
    java.util.List readHeaderBlock(int,short,byte,int) -> readHeaderBlock
    void readData(okhttp3.internal.framed.FrameReader$Handler,int,byte,int) -> readData
    void readPriority(okhttp3.internal.framed.FrameReader$Handler,int,byte,int) -> readPriority
    void readPriority(okhttp3.internal.framed.FrameReader$Handler,int) -> readPriority
    void readRstStream(okhttp3.internal.framed.FrameReader$Handler,int,byte,int) -> readRstStream
    void readSettings(okhttp3.internal.framed.FrameReader$Handler,int,byte,int) -> readSettings
    void readPushPromise(okhttp3.internal.framed.FrameReader$Handler,int,byte,int) -> readPushPromise
    void readPing(okhttp3.internal.framed.FrameReader$Handler,int,byte,int) -> readPing
    void readGoAway(okhttp3.internal.framed.FrameReader$Handler,int,byte,int) -> readGoAway
    void readWindowUpdate(okhttp3.internal.framed.FrameReader$Handler,int,byte,int) -> readWindowUpdate
    void close() -> close
okhttp3.internal.framed.Http2$Writer -> okhttp3.internal.framed.Http2$Writer:
    okio.BufferedSink sink -> sink
    boolean client -> client
    okio.Buffer hpackBuffer -> hpackBuffer
    int maxFrameSize -> maxFrameSize
    boolean closed -> closed
    okhttp3.internal.framed.Hpack$Writer hpackWriter -> hpackWriter
    void <init>(okio.BufferedSink,boolean) -> <init>
    void flush() -> flush
    void applyAndAckSettings(okhttp3.internal.framed.Settings) -> applyAndAckSettings
    void connectionPreface() -> connectionPreface
    void synStream(boolean,boolean,int,int,java.util.List) -> synStream
    void synReply(boolean,int,java.util.List) -> synReply
    void headers(int,java.util.List) -> headers
    void pushPromise(int,int,java.util.List) -> pushPromise
    void headers(boolean,int,java.util.List) -> headers
    void writeContinuationFrames(int,long) -> writeContinuationFrames
    void rstStream(int,okhttp3.internal.framed.ErrorCode) -> rstStream
    int maxDataLength() -> maxDataLength
    void data(boolean,int,okio.Buffer,int) -> data
    void dataFrame(int,byte,okio.Buffer,int) -> dataFrame
    void settings(okhttp3.internal.framed.Settings) -> settings
    void ping(boolean,int,int) -> ping
    void goAway(int,okhttp3.internal.framed.ErrorCode,byte[]) -> goAway
    void windowUpdate(int,long) -> windowUpdate
    void close() -> close
    void frameHeader(int,int,byte,byte) -> frameHeader
okhttp3.internal.framed.Huffman -> okhttp3.internal.framed.Huffman:
    int[] CODES -> CODES
    byte[] CODE_LENGTHS -> CODE_LENGTHS
    okhttp3.internal.framed.Huffman INSTANCE -> INSTANCE
    okhttp3.internal.framed.Huffman$Node root -> root
    okhttp3.internal.framed.Huffman get() -> get
    void <init>() -> <init>
    void encode(byte[],java.io.OutputStream) -> encode
    int encodedLength(byte[]) -> encodedLength
    byte[] decode(byte[]) -> decode
    void buildTree() -> buildTree
    void addCode(int,int,byte) -> addCode
    void <clinit>() -> <clinit>
okhttp3.internal.framed.Huffman$Node -> okhttp3.internal.framed.Huffman$Node:
    okhttp3.internal.framed.Huffman$Node[] children -> children
    int symbol -> symbol
    int terminalBits -> terminalBits
    void <init>() -> <init>
    void <init>(int,int) -> <init>
    okhttp3.internal.framed.Huffman$Node[] access$000(okhttp3.internal.framed.Huffman$Node) -> access$000
    int access$100(okhttp3.internal.framed.Huffman$Node) -> access$100
    int access$200(okhttp3.internal.framed.Huffman$Node) -> access$200
okhttp3.internal.framed.NameValueBlockReader -> okhttp3.internal.framed.NameValueBlockReader:
    okio.InflaterSource inflaterSource -> inflaterSource
    int compressedLimit -> compressedLimit
    okio.BufferedSource source -> source
    void <init>(okio.BufferedSource) -> <init>
    java.util.List readNameValueBlock(int) -> readNameValueBlock
    okio.ByteString readByteString() -> readByteString
    void doneReading() -> doneReading
    void close() -> close
    int access$000(okhttp3.internal.framed.NameValueBlockReader) -> access$000
    int access$002(okhttp3.internal.framed.NameValueBlockReader,int) -> access$002
okhttp3.internal.framed.NameValueBlockReader$1 -> okhttp3.internal.framed.NameValueBlockReader$1:
    okhttp3.internal.framed.NameValueBlockReader this$0 -> this$0
    void <init>(okhttp3.internal.framed.NameValueBlockReader,okio.Source) -> <init>
    long read(okio.Buffer,long) -> read
okhttp3.internal.framed.NameValueBlockReader$2 -> okhttp3.internal.framed.NameValueBlockReader$2:
    okhttp3.internal.framed.NameValueBlockReader this$0 -> this$0
    void <init>(okhttp3.internal.framed.NameValueBlockReader) -> <init>
    int inflate(byte[],int,int) -> inflate
okhttp3.internal.framed.Ping -> okhttp3.internal.framed.Ping:
    java.util.concurrent.CountDownLatch latch -> latch
    long sent -> sent
    long received -> received
    void <init>() -> <init>
    void send() -> send
    void receive() -> receive
    void cancel() -> cancel
    long roundTripTime() -> roundTripTime
    long roundTripTime(long,java.util.concurrent.TimeUnit) -> roundTripTime
okhttp3.internal.framed.PushObserver -> okhttp3.internal.framed.PushObserver:
    okhttp3.internal.framed.PushObserver CANCEL -> CANCEL
    boolean onRequest(int,java.util.List) -> onRequest
    boolean onHeaders(int,java.util.List,boolean) -> onHeaders
    boolean onData(int,okio.BufferedSource,int,boolean) -> onData
    void onReset(int,okhttp3.internal.framed.ErrorCode) -> onReset
    void <clinit>() -> <clinit>
okhttp3.internal.framed.PushObserver$1 -> okhttp3.internal.framed.PushObserver$1:
    void <init>() -> <init>
    boolean onRequest(int,java.util.List) -> onRequest
    boolean onHeaders(int,java.util.List,boolean) -> onHeaders
    boolean onData(int,okio.BufferedSource,int,boolean) -> onData
    void onReset(int,okhttp3.internal.framed.ErrorCode) -> onReset
okhttp3.internal.framed.Settings -> okhttp3.internal.framed.Settings:
    int DEFAULT_INITIAL_WINDOW_SIZE -> DEFAULT_INITIAL_WINDOW_SIZE
    int FLAG_CLEAR_PREVIOUSLY_PERSISTED_SETTINGS -> FLAG_CLEAR_PREVIOUSLY_PERSISTED_SETTINGS
    int PERSIST_VALUE -> PERSIST_VALUE
    int PERSISTED -> PERSISTED
    int UPLOAD_BANDWIDTH -> UPLOAD_BANDWIDTH
    int HEADER_TABLE_SIZE -> HEADER_TABLE_SIZE
    int DOWNLOAD_BANDWIDTH -> DOWNLOAD_BANDWIDTH
    int ENABLE_PUSH -> ENABLE_PUSH
    int ROUND_TRIP_TIME -> ROUND_TRIP_TIME
    int MAX_CONCURRENT_STREAMS -> MAX_CONCURRENT_STREAMS
    int CURRENT_CWND -> CURRENT_CWND
    int MAX_FRAME_SIZE -> MAX_FRAME_SIZE
    int DOWNLOAD_RETRANS_RATE -> DOWNLOAD_RETRANS_RATE
    int MAX_HEADER_LIST_SIZE -> MAX_HEADER_LIST_SIZE
    int INITIAL_WINDOW_SIZE -> INITIAL_WINDOW_SIZE
    int CLIENT_CERTIFICATE_VECTOR_SIZE -> CLIENT_CERTIFICATE_VECTOR_SIZE
    int FLOW_CONTROL_OPTIONS -> FLOW_CONTROL_OPTIONS
    int COUNT -> COUNT
    int FLOW_CONTROL_OPTIONS_DISABLED -> FLOW_CONTROL_OPTIONS_DISABLED
    int set -> set
    int persistValue -> persistValue
    int persisted -> persisted
    int[] values -> values
    void <init>() -> <init>
    void clear() -> clear
    okhttp3.internal.framed.Settings set(int,int,int) -> set
    boolean isSet(int) -> isSet
    int get(int) -> get
    int flags(int) -> flags
    int size() -> size
    int getUploadBandwidth(int) -> getUploadBandwidth
    int getHeaderTableSize() -> getHeaderTableSize
    int getDownloadBandwidth(int) -> getDownloadBandwidth
    boolean getEnablePush(boolean) -> getEnablePush
    int getRoundTripTime(int) -> getRoundTripTime
    int getMaxConcurrentStreams(int) -> getMaxConcurrentStreams
    int getCurrentCwnd(int) -> getCurrentCwnd
    int getMaxFrameSize(int) -> getMaxFrameSize
    int getDownloadRetransRate(int) -> getDownloadRetransRate
    int getMaxHeaderListSize(int) -> getMaxHeaderListSize
    int getInitialWindowSize(int) -> getInitialWindowSize
    int getClientCertificateVectorSize(int) -> getClientCertificateVectorSize
    boolean isFlowControlDisabled() -> isFlowControlDisabled
    boolean persistValue(int) -> persistValue
    boolean isPersisted(int) -> isPersisted
    void merge(okhttp3.internal.framed.Settings) -> merge
okhttp3.internal.framed.Spdy3 -> okhttp3.internal.framed.Spdy3:
    int TYPE_DATA -> TYPE_DATA
    int TYPE_SYN_STREAM -> TYPE_SYN_STREAM
    int TYPE_SYN_REPLY -> TYPE_SYN_REPLY
    int TYPE_RST_STREAM -> TYPE_RST_STREAM
    int TYPE_SETTINGS -> TYPE_SETTINGS
    int TYPE_PING -> TYPE_PING
    int TYPE_GOAWAY -> TYPE_GOAWAY
    int TYPE_HEADERS -> TYPE_HEADERS
    int TYPE_WINDOW_UPDATE -> TYPE_WINDOW_UPDATE
    int FLAG_FIN -> FLAG_FIN
    int FLAG_UNIDIRECTIONAL -> FLAG_UNIDIRECTIONAL
    int VERSION -> VERSION
    byte[] DICTIONARY -> DICTIONARY
    void <init>() -> <init>
    okhttp3.Protocol getProtocol() -> getProtocol
    okhttp3.internal.framed.FrameReader newReader(okio.BufferedSource,boolean) -> newReader
    okhttp3.internal.framed.FrameWriter newWriter(okio.BufferedSink,boolean) -> newWriter
    void <clinit>() -> <clinit>
okhttp3.internal.framed.Spdy3$Reader -> okhttp3.internal.framed.Spdy3$Reader:
    okio.BufferedSource source -> source
    boolean client -> client
    okhttp3.internal.framed.NameValueBlockReader headerBlockReader -> headerBlockReader
    void <init>(okio.BufferedSource,boolean) -> <init>
    void readConnectionPreface() -> readConnectionPreface
    boolean nextFrame(okhttp3.internal.framed.FrameReader$Handler) -> nextFrame
    void readSynStream(okhttp3.internal.framed.FrameReader$Handler,int,int) -> readSynStream
    void readSynReply(okhttp3.internal.framed.FrameReader$Handler,int,int) -> readSynReply
    void readRstStream(okhttp3.internal.framed.FrameReader$Handler,int,int) -> readRstStream
    void readHeaders(okhttp3.internal.framed.FrameReader$Handler,int,int) -> readHeaders
    void readWindowUpdate(okhttp3.internal.framed.FrameReader$Handler,int,int) -> readWindowUpdate
    void readPing(okhttp3.internal.framed.FrameReader$Handler,int,int) -> readPing
    void readGoAway(okhttp3.internal.framed.FrameReader$Handler,int,int) -> readGoAway
    void readSettings(okhttp3.internal.framed.FrameReader$Handler,int,int) -> readSettings
    java.io.IOException ioException(java.lang.String,java.lang.Object[]) -> ioException
    void close() -> close
okhttp3.internal.framed.Spdy3$Writer -> okhttp3.internal.framed.Spdy3$Writer:
    okio.BufferedSink sink -> sink
    okio.Buffer headerBlockBuffer -> headerBlockBuffer
    okio.BufferedSink headerBlockOut -> headerBlockOut
    boolean client -> client
    boolean closed -> closed
    void <init>(okio.BufferedSink,boolean) -> <init>
    void applyAndAckSettings(okhttp3.internal.framed.Settings) -> applyAndAckSettings
    void pushPromise(int,int,java.util.List) -> pushPromise
    void connectionPreface() -> connectionPreface
    void flush() -> flush
    void synStream(boolean,boolean,int,int,java.util.List) -> synStream
    void synReply(boolean,int,java.util.List) -> synReply
    void headers(int,java.util.List) -> headers
    void rstStream(int,okhttp3.internal.framed.ErrorCode) -> rstStream
    int maxDataLength() -> maxDataLength
    void data(boolean,int,okio.Buffer,int) -> data
    void sendDataFrame(int,int,okio.Buffer,int) -> sendDataFrame
    void writeNameValueBlockToBuffer(java.util.List) -> writeNameValueBlockToBuffer
    void settings(okhttp3.internal.framed.Settings) -> settings
    void ping(boolean,int,int) -> ping
    void goAway(int,okhttp3.internal.framed.ErrorCode,byte[]) -> goAway
    void windowUpdate(int,long) -> windowUpdate
    void close() -> close
okhttp3.internal.framed.StreamResetException -> okhttp3.internal.framed.StreamResetException:
    okhttp3.internal.framed.ErrorCode errorCode -> errorCode
    void <init>(okhttp3.internal.framed.ErrorCode) -> <init>
okhttp3.internal.framed.Variant -> okhttp3.internal.framed.Variant:
    okhttp3.Protocol getProtocol() -> getProtocol
    okhttp3.internal.framed.FrameReader newReader(okio.BufferedSource,boolean) -> newReader
    okhttp3.internal.framed.FrameWriter newWriter(okio.BufferedSink,boolean) -> newWriter
okhttp3.internal.http.BridgeInterceptor -> okhttp3.internal.http.BridgeInterceptor:
    okhttp3.CookieJar cookieJar -> cookieJar
    void <init>(okhttp3.CookieJar) -> <init>
    okhttp3.Response intercept(okhttp3.Interceptor$Chain) -> intercept
    java.lang.String cookieHeader(java.util.List) -> cookieHeader
okhttp3.internal.http.CallServerInterceptor -> okhttp3.internal.http.CallServerInterceptor:
    boolean forWebSocket -> forWebSocket
    void <init>(boolean) -> <init>
    okhttp3.Response intercept(okhttp3.Interceptor$Chain) -> intercept
okhttp3.internal.http.Http1xStream -> okhttp3.internal.http.Http1xStream:
    int STATE_IDLE -> STATE_IDLE
    int STATE_OPEN_REQUEST_BODY -> STATE_OPEN_REQUEST_BODY
    int STATE_WRITING_REQUEST_BODY -> STATE_WRITING_REQUEST_BODY
    int STATE_READ_RESPONSE_HEADERS -> STATE_READ_RESPONSE_HEADERS
    int STATE_OPEN_RESPONSE_BODY -> STATE_OPEN_RESPONSE_BODY
    int STATE_READING_RESPONSE_BODY -> STATE_READING_RESPONSE_BODY
    int STATE_CLOSED -> STATE_CLOSED
    okhttp3.OkHttpClient client -> client
    okhttp3.internal.connection.StreamAllocation streamAllocation -> streamAllocation
    okio.BufferedSource source -> source
    okio.BufferedSink sink -> sink
    int state -> state
    void <init>(okhttp3.OkHttpClient,okhttp3.internal.connection.StreamAllocation,okio.BufferedSource,okio.BufferedSink) -> <init>
    okio.Sink createRequestBody(okhttp3.Request,long) -> createRequestBody
    void cancel() -> cancel
    void writeRequestHeaders(okhttp3.Request) -> writeRequestHeaders
    okhttp3.Response$Builder readResponseHeaders() -> readResponseHeaders
    okhttp3.ResponseBody openResponseBody(okhttp3.Response) -> openResponseBody
    okio.Source getTransferStream(okhttp3.Response) -> getTransferStream
    boolean isClosed() -> isClosed
    void finishRequest() -> finishRequest
    void writeRequest(okhttp3.Headers,java.lang.String) -> writeRequest
    okhttp3.Response$Builder readResponse() -> readResponse
    okhttp3.Headers readHeaders() -> readHeaders
    okio.Sink newChunkedSink() -> newChunkedSink
    okio.Sink newFixedLengthSink(long) -> newFixedLengthSink
    okio.Source newFixedLengthSource(long) -> newFixedLengthSource
    okio.Source newChunkedSource(okhttp3.HttpUrl) -> newChunkedSource
    okio.Source newUnknownLengthSource() -> newUnknownLengthSource
    void detachTimeout(okio.ForwardingTimeout) -> detachTimeout
    okio.BufferedSink access$300(okhttp3.internal.http.Http1xStream) -> access$300
    void access$400(okhttp3.internal.http.Http1xStream,okio.ForwardingTimeout) -> access$400
    int access$502(okhttp3.internal.http.Http1xStream,int) -> access$502
    okio.BufferedSource access$600(okhttp3.internal.http.Http1xStream) -> access$600
    int access$500(okhttp3.internal.http.Http1xStream) -> access$500
    okhttp3.internal.connection.StreamAllocation access$700(okhttp3.internal.http.Http1xStream) -> access$700
    okhttp3.OkHttpClient access$900(okhttp3.internal.http.Http1xStream) -> access$900
okhttp3.internal.http.Http1xStream$1 -> okhttp3.internal.http.Http1xStream$1:
okhttp3.internal.http.Http1xStream$AbstractSource -> okhttp3.internal.http.Http1xStream$AbstractSource:
    okio.ForwardingTimeout timeout -> timeout
    boolean closed -> closed
    okhttp3.internal.http.Http1xStream this$0 -> this$0
    void <init>(okhttp3.internal.http.Http1xStream) -> <init>
    okio.Timeout timeout() -> timeout
    void endOfInput(boolean) -> endOfInput
    void <init>(okhttp3.internal.http.Http1xStream,okhttp3.internal.http.Http1xStream$1) -> <init>
okhttp3.internal.http.Http1xStream$ChunkedSink -> okhttp3.internal.http.Http1xStream$ChunkedSink:
    okio.ForwardingTimeout timeout -> timeout
    boolean closed -> closed
    okhttp3.internal.http.Http1xStream this$0 -> this$0
    void <init>(okhttp3.internal.http.Http1xStream) -> <init>
    okio.Timeout timeout() -> timeout
    void write(okio.Buffer,long) -> write
    void flush() -> flush
    void close() -> close
    void <init>(okhttp3.internal.http.Http1xStream,okhttp3.internal.http.Http1xStream$1) -> <init>
okhttp3.internal.http.Http1xStream$ChunkedSource -> okhttp3.internal.http.Http1xStream$ChunkedSource:
    long NO_CHUNK_YET -> NO_CHUNK_YET
    okhttp3.HttpUrl url -> url
    long bytesRemainingInChunk -> bytesRemainingInChunk
    boolean hasMoreChunks -> hasMoreChunks
    okhttp3.internal.http.Http1xStream this$0 -> this$0
    void <init>(okhttp3.internal.http.Http1xStream,okhttp3.HttpUrl) -> <init>
    long read(okio.Buffer,long) -> read
    void readChunkSize() -> readChunkSize
    void close() -> close
okhttp3.internal.http.Http1xStream$FixedLengthSink -> okhttp3.internal.http.Http1xStream$FixedLengthSink:
    okio.ForwardingTimeout timeout -> timeout
    boolean closed -> closed
    long bytesRemaining -> bytesRemaining
    okhttp3.internal.http.Http1xStream this$0 -> this$0
    void <init>(okhttp3.internal.http.Http1xStream,long) -> <init>
    okio.Timeout timeout() -> timeout
    void write(okio.Buffer,long) -> write
    void flush() -> flush
    void close() -> close
    void <init>(okhttp3.internal.http.Http1xStream,long,okhttp3.internal.http.Http1xStream$1) -> <init>
okhttp3.internal.http.Http1xStream$FixedLengthSource -> okhttp3.internal.http.Http1xStream$FixedLengthSource:
    long bytesRemaining -> bytesRemaining
    okhttp3.internal.http.Http1xStream this$0 -> this$0
    void <init>(okhttp3.internal.http.Http1xStream,long) -> <init>
    long read(okio.Buffer,long) -> read
    void close() -> close
okhttp3.internal.http.Http1xStream$UnknownLengthSource -> okhttp3.internal.http.Http1xStream$UnknownLengthSource:
    boolean inputExhausted -> inputExhausted
    okhttp3.internal.http.Http1xStream this$0 -> this$0
    void <init>(okhttp3.internal.http.Http1xStream) -> <init>
    long read(okio.Buffer,long) -> read
    void close() -> close
    void <init>(okhttp3.internal.http.Http1xStream,okhttp3.internal.http.Http1xStream$1) -> <init>
okhttp3.internal.http.Http2xStream -> okhttp3.internal.http.Http2xStream:
    okio.ByteString CONNECTION -> CONNECTION
    okio.ByteString HOST -> HOST
    okio.ByteString KEEP_ALIVE -> KEEP_ALIVE
    okio.ByteString PROXY_CONNECTION -> PROXY_CONNECTION
    okio.ByteString TRANSFER_ENCODING -> TRANSFER_ENCODING
    okio.ByteString TE -> TE
    okio.ByteString ENCODING -> ENCODING
    okio.ByteString UPGRADE -> UPGRADE
    java.util.List SPDY_3_SKIPPED_REQUEST_HEADERS -> SPDY_3_SKIPPED_REQUEST_HEADERS
    java.util.List SPDY_3_SKIPPED_RESPONSE_HEADERS -> SPDY_3_SKIPPED_RESPONSE_HEADERS
    java.util.List HTTP_2_SKIPPED_REQUEST_HEADERS -> HTTP_2_SKIPPED_REQUEST_HEADERS
    java.util.List HTTP_2_SKIPPED_RESPONSE_HEADERS -> HTTP_2_SKIPPED_RESPONSE_HEADERS
    okhttp3.OkHttpClient client -> client
    okhttp3.internal.connection.StreamAllocation streamAllocation -> streamAllocation
    okhttp3.internal.framed.FramedConnection framedConnection -> framedConnection
    okhttp3.internal.framed.FramedStream stream -> stream
    void <init>(okhttp3.OkHttpClient,okhttp3.internal.connection.StreamAllocation,okhttp3.internal.framed.FramedConnection) -> <init>
    okio.Sink createRequestBody(okhttp3.Request,long) -> createRequestBody
    void writeRequestHeaders(okhttp3.Request) -> writeRequestHeaders
    void finishRequest() -> finishRequest
    okhttp3.Response$Builder readResponseHeaders() -> readResponseHeaders
    java.util.List spdy3HeadersList(okhttp3.Request) -> spdy3HeadersList
    java.lang.String joinOnNull(java.lang.String,java.lang.String) -> joinOnNull
    java.util.List http2HeadersList(okhttp3.Request) -> http2HeadersList
    okhttp3.Response$Builder readSpdy3HeadersList(java.util.List) -> readSpdy3HeadersList
    okhttp3.Response$Builder readHttp2HeadersList(java.util.List) -> readHttp2HeadersList
    okhttp3.ResponseBody openResponseBody(okhttp3.Response) -> openResponseBody
    void cancel() -> cancel
    okhttp3.internal.connection.StreamAllocation access$000(okhttp3.internal.http.Http2xStream) -> access$000
    void <clinit>() -> <clinit>
okhttp3.internal.http.Http2xStream$StreamFinishingSource -> okhttp3.internal.http.Http2xStream$StreamFinishingSource:
    okhttp3.internal.http.Http2xStream this$0 -> this$0
    void <init>(okhttp3.internal.http.Http2xStream,okio.Source) -> <init>
    void close() -> close
okhttp3.internal.http.HttpDate -> okhttp3.internal.http.HttpDate:
    long MAX_DATE -> MAX_DATE
    java.lang.ThreadLocal STANDARD_DATE_FORMAT -> STANDARD_DATE_FORMAT
    java.lang.String[] BROWSER_COMPATIBLE_DATE_FORMAT_STRINGS -> BROWSER_COMPATIBLE_DATE_FORMAT_STRINGS
    java.text.DateFormat[] BROWSER_COMPATIBLE_DATE_FORMATS -> BROWSER_COMPATIBLE_DATE_FORMATS
    java.util.Date parse(java.lang.String) -> parse
    java.lang.String format(java.util.Date) -> format
    void <init>() -> <init>
    void <clinit>() -> <clinit>
okhttp3.internal.http.HttpDate$1 -> okhttp3.internal.http.HttpDate$1:
    void <init>() -> <init>
    java.text.DateFormat initialValue() -> initialValue
    java.lang.Object initialValue() -> initialValue
okhttp3.internal.http.HttpHeaders -> okhttp3.internal.http.HttpHeaders:
    void <init>() -> <init>
    long contentLength(okhttp3.Response) -> contentLength
    long contentLength(okhttp3.Headers) -> contentLength
    long stringToLong(java.lang.String) -> stringToLong
    boolean varyMatches(okhttp3.Response,okhttp3.Headers,okhttp3.Request) -> varyMatches
    boolean hasVaryAll(okhttp3.Response) -> hasVaryAll
    boolean hasVaryAll(okhttp3.Headers) -> hasVaryAll
    java.util.Set varyFields(okhttp3.Response) -> varyFields
    java.util.Set varyFields(okhttp3.Headers) -> varyFields
    okhttp3.Headers varyHeaders(okhttp3.Response) -> varyHeaders
    okhttp3.Headers varyHeaders(okhttp3.Headers,okhttp3.Headers) -> varyHeaders
    java.util.List parseChallenges(okhttp3.Headers,java.lang.String) -> parseChallenges
    void receiveHeaders(okhttp3.CookieJar,okhttp3.HttpUrl,okhttp3.Headers) -> receiveHeaders
    boolean hasBody(okhttp3.Response) -> hasBody
    int skipUntil(java.lang.String,int,java.lang.String) -> skipUntil
    int skipWhitespace(java.lang.String,int) -> skipWhitespace
    int parseSeconds(java.lang.String,int) -> parseSeconds
okhttp3.internal.http.HttpMethod -> okhttp3.internal.http.HttpMethod:
    boolean invalidatesCache(java.lang.String) -> invalidatesCache
    boolean requiresRequestBody(java.lang.String) -> requiresRequestBody
    boolean permitsRequestBody(java.lang.String) -> permitsRequestBody
    boolean redirectsToGet(java.lang.String) -> redirectsToGet
    void <init>() -> <init>
okhttp3.internal.http.HttpStream -> okhttp3.internal.http.HttpStream:
    int DISCARD_STREAM_TIMEOUT_MILLIS -> DISCARD_STREAM_TIMEOUT_MILLIS
    okio.Sink createRequestBody(okhttp3.Request,long) -> createRequestBody
    void writeRequestHeaders(okhttp3.Request) -> writeRequestHeaders
    void finishRequest() -> finishRequest
    okhttp3.Response$Builder readResponseHeaders() -> readResponseHeaders
    okhttp3.ResponseBody openResponseBody(okhttp3.Response) -> openResponseBody
    void cancel() -> cancel
okhttp3.internal.http.RealInterceptorChain -> okhttp3.internal.http.RealInterceptorChain:
    java.util.List interceptors -> interceptors
    okhttp3.internal.connection.StreamAllocation streamAllocation -> streamAllocation
    okhttp3.internal.http.HttpStream httpStream -> httpStream
    okhttp3.Connection connection -> connection
    int index -> index
    okhttp3.Request request -> request
    int calls -> calls
    void <init>(java.util.List,okhttp3.internal.connection.StreamAllocation,okhttp3.internal.http.HttpStream,okhttp3.Connection,int,okhttp3.Request) -> <init>
    okhttp3.Connection connection() -> connection
    okhttp3.internal.connection.StreamAllocation streamAllocation() -> streamAllocation
    okhttp3.internal.http.HttpStream httpStream() -> httpStream
    okhttp3.Request request() -> request
    okhttp3.Response proceed(okhttp3.Request) -> proceed
    okhttp3.Response proceed(okhttp3.Request,okhttp3.internal.connection.StreamAllocation,okhttp3.internal.http.HttpStream,okhttp3.Connection) -> proceed
    boolean sameConnection(okhttp3.HttpUrl) -> sameConnection
okhttp3.internal.http.RealResponseBody -> okhttp3.internal.http.RealResponseBody:
    okhttp3.Headers headers -> headers
    okio.BufferedSource source -> source
    void <init>(okhttp3.Headers,okio.BufferedSource) -> <init>
    okhttp3.MediaType contentType() -> contentType
    long contentLength() -> contentLength
    okio.BufferedSource source() -> source
okhttp3.internal.http.RequestLine -> okhttp3.internal.http.RequestLine:
    void <init>() -> <init>
    java.lang.String get(okhttp3.Request,java.net.Proxy$Type) -> get
    boolean includeAuthorityInRequestLine(okhttp3.Request,java.net.Proxy$Type) -> includeAuthorityInRequestLine
    java.lang.String requestPath(okhttp3.HttpUrl) -> requestPath
okhttp3.internal.http.RetryAndFollowUpInterceptor -> okhttp3.internal.http.RetryAndFollowUpInterceptor:
    int MAX_FOLLOW_UPS -> MAX_FOLLOW_UPS
    okhttp3.OkHttpClient client -> client
    okhttp3.internal.connection.StreamAllocation streamAllocation -> streamAllocation
    boolean forWebSocket -> forWebSocket
    boolean canceled -> canceled
    void <init>(okhttp3.OkHttpClient) -> <init>
    void cancel() -> cancel
    boolean isCanceled() -> isCanceled
    okhttp3.OkHttpClient client() -> client
    void setForWebSocket(boolean) -> setForWebSocket
    boolean isForWebSocket() -> isForWebSocket
    okhttp3.internal.connection.StreamAllocation streamAllocation() -> streamAllocation
    okhttp3.Response intercept(okhttp3.Interceptor$Chain) -> intercept
    okhttp3.Address createAddress(okhttp3.HttpUrl) -> createAddress
    boolean recover(java.io.IOException,boolean,okhttp3.Request) -> recover
    boolean isRecoverable(java.io.IOException,boolean) -> isRecoverable
    okhttp3.Request followUpRequest(okhttp3.Response) -> followUpRequest
    boolean sameConnection(okhttp3.Response,okhttp3.HttpUrl) -> sameConnection
okhttp3.internal.http.StatusLine -> okhttp3.internal.http.StatusLine:
    int HTTP_TEMP_REDIRECT -> HTTP_TEMP_REDIRECT
    int HTTP_PERM_REDIRECT -> HTTP_PERM_REDIRECT
    int HTTP_CONTINUE -> HTTP_CONTINUE
    okhttp3.Protocol protocol -> protocol
    int code -> code
    java.lang.String message -> message
    void <init>(okhttp3.Protocol,int,java.lang.String) -> <init>
    okhttp3.internal.http.StatusLine get(okhttp3.Response) -> get
    okhttp3.internal.http.StatusLine parse(java.lang.String) -> parse
    java.lang.String toString() -> toString
okhttp3.internal.http.UnrepeatableRequestBody -> okhttp3.internal.http.UnrepeatableRequestBody:
okhttp3.internal.io.FileSystem -> okhttp3.internal.io.FileSystem:
    okhttp3.internal.io.FileSystem SYSTEM -> SYSTEM
    okio.Source source(java.io.File) -> source
    okio.Sink sink(java.io.File) -> sink
    okio.Sink appendingSink(java.io.File) -> appendingSink
    void delete(java.io.File) -> delete
    boolean exists(java.io.File) -> exists
    long size(java.io.File) -> size
    void rename(java.io.File,java.io.File) -> rename
    void deleteContents(java.io.File) -> deleteContents
    void <clinit>() -> <clinit>
okhttp3.internal.io.FileSystem$1 -> okhttp3.internal.io.FileSystem$1:
    void <init>() -> <init>
    okio.Source source(java.io.File) -> source
    okio.Sink sink(java.io.File) -> sink
    okio.Sink appendingSink(java.io.File) -> appendingSink
    void delete(java.io.File) -> delete
    boolean exists(java.io.File) -> exists
    long size(java.io.File) -> size
    void rename(java.io.File,java.io.File) -> rename
    void deleteContents(java.io.File) -> deleteContents
okhttp3.internal.platform.AndroidPlatform -> okhttp3.internal.platform.AndroidPlatform:
    int MAX_LOG_LENGTH -> MAX_LOG_LENGTH
    java.lang.Class sslParametersClass -> sslParametersClass
    okhttp3.internal.platform.OptionalMethod setUseSessionTickets -> setUseSessionTickets
    okhttp3.internal.platform.OptionalMethod setHostname -> setHostname
    okhttp3.internal.platform.OptionalMethod getAlpnSelectedProtocol -> getAlpnSelectedProtocol
    okhttp3.internal.platform.OptionalMethod setAlpnProtocols -> setAlpnProtocols
    void <init>(java.lang.Class,okhttp3.internal.platform.OptionalMethod,okhttp3.internal.platform.OptionalMethod,okhttp3.internal.platform.OptionalMethod,okhttp3.internal.platform.OptionalMethod) -> <init>
    void connectSocket(java.net.Socket,java.net.InetSocketAddress,int) -> connectSocket
    javax.net.ssl.X509TrustManager trustManager(javax.net.ssl.SSLSocketFactory) -> trustManager
    void configureTlsExtensions(javax.net.ssl.SSLSocket,java.lang.String,java.util.List) -> configureTlsExtensions
    java.lang.String getSelectedProtocol(javax.net.ssl.SSLSocket) -> getSelectedProtocol
    void log(int,java.lang.String,java.lang.Throwable) -> log
    boolean isCleartextTrafficPermitted(java.lang.String) -> isCleartextTrafficPermitted
    okhttp3.internal.tls.CertificateChainCleaner buildCertificateChainCleaner(javax.net.ssl.X509TrustManager) -> buildCertificateChainCleaner
    okhttp3.internal.platform.Platform buildIfSupported() -> buildIfSupported
okhttp3.internal.platform.AndroidPlatform$AndroidCertificateChainCleaner -> okhttp3.internal.platform.AndroidPlatform$AndroidCertificateChainCleaner:
    java.lang.Object x509TrustManagerExtensions -> x509TrustManagerExtensions
    java.lang.reflect.Method checkServerTrusted -> checkServerTrusted
    void <init>(java.lang.Object,java.lang.reflect.Method) -> <init>
    java.util.List clean(java.util.List,java.lang.String) -> clean
okhttp3.internal.platform.Jdk9Platform -> okhttp3.internal.platform.Jdk9Platform:
    java.lang.reflect.Method setProtocolMethod -> setProtocolMethod
    java.lang.reflect.Method getProtocolMethod -> getProtocolMethod
    void <init>(java.lang.reflect.Method,java.lang.reflect.Method) -> <init>
    void configureTlsExtensions(javax.net.ssl.SSLSocket,java.lang.String,java.util.List) -> configureTlsExtensions
    java.lang.String getSelectedProtocol(javax.net.ssl.SSLSocket) -> getSelectedProtocol
    javax.net.ssl.X509TrustManager trustManager(javax.net.ssl.SSLSocketFactory) -> trustManager
    okhttp3.internal.platform.Jdk9Platform buildIfSupported() -> buildIfSupported
okhttp3.internal.platform.JdkWithJettyBootPlatform -> okhttp3.internal.platform.JdkWithJettyBootPlatform:
    java.lang.reflect.Method putMethod -> putMethod
    java.lang.reflect.Method getMethod -> getMethod
    java.lang.reflect.Method removeMethod -> removeMethod
    java.lang.Class clientProviderClass -> clientProviderClass
    java.lang.Class serverProviderClass -> serverProviderClass
    void <init>(java.lang.reflect.Method,java.lang.reflect.Method,java.lang.reflect.Method,java.lang.Class,java.lang.Class) -> <init>
    void configureTlsExtensions(javax.net.ssl.SSLSocket,java.lang.String,java.util.List) -> configureTlsExtensions
    void afterHandshake(javax.net.ssl.SSLSocket) -> afterHandshake
    java.lang.String getSelectedProtocol(javax.net.ssl.SSLSocket) -> getSelectedProtocol
    okhttp3.internal.platform.Platform buildIfSupported() -> buildIfSupported
okhttp3.internal.platform.JdkWithJettyBootPlatform$JettyNegoProvider -> okhttp3.internal.platform.JdkWithJettyBootPlatform$JettyNegoProvider:
    java.util.List protocols -> protocols
    boolean unsupported -> unsupported
    java.lang.String selected -> selected
    void <init>(java.util.List) -> <init>
    java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[]) -> invoke
    boolean access$000(okhttp3.internal.platform.JdkWithJettyBootPlatform$JettyNegoProvider) -> access$000
    java.lang.String access$100(okhttp3.internal.platform.JdkWithJettyBootPlatform$JettyNegoProvider) -> access$100
okhttp3.internal.platform.OptionalMethod -> okhttp3.internal.platform.OptionalMethod:
    java.lang.Class returnType -> returnType
    java.lang.String methodName -> methodName
    java.lang.Class[] methodParams -> methodParams
    void <init>(java.lang.Class,java.lang.String,java.lang.Class[]) -> <init>
    boolean isSupported(java.lang.Object) -> isSupported
    java.lang.Object invokeOptional(java.lang.Object,java.lang.Object[]) -> invokeOptional
    java.lang.Object invokeOptionalWithoutCheckedException(java.lang.Object,java.lang.Object[]) -> invokeOptionalWithoutCheckedException
    java.lang.Object invoke(java.lang.Object,java.lang.Object[]) -> invoke
    java.lang.Object invokeWithoutCheckedException(java.lang.Object,java.lang.Object[]) -> invokeWithoutCheckedException
    java.lang.reflect.Method getMethod(java.lang.Class) -> getMethod
    java.lang.reflect.Method getPublicMethod(java.lang.Class,java.lang.String,java.lang.Class[]) -> getPublicMethod
okhttp3.internal.platform.Platform -> okhttp3.internal.platform.Platform:
    okhttp3.internal.platform.Platform PLATFORM -> PLATFORM
    int INFO -> INFO
    int WARN -> WARN
    java.util.logging.Logger logger -> logger
    void <init>() -> <init>
    okhttp3.internal.platform.Platform get() -> get
    java.lang.String getPrefix() -> getPrefix
    javax.net.ssl.X509TrustManager trustManager(javax.net.ssl.SSLSocketFactory) -> trustManager
    void configureTlsExtensions(javax.net.ssl.SSLSocket,java.lang.String,java.util.List) -> configureTlsExtensions
    void afterHandshake(javax.net.ssl.SSLSocket) -> afterHandshake
    java.lang.String getSelectedProtocol(javax.net.ssl.SSLSocket) -> getSelectedProtocol
    void connectSocket(java.net.Socket,java.net.InetSocketAddress,int) -> connectSocket
    void log(int,java.lang.String,java.lang.Throwable) -> log
    boolean isCleartextTrafficPermitted(java.lang.String) -> isCleartextTrafficPermitted
    java.util.List alpnProtocolNames(java.util.List) -> alpnProtocolNames
    okhttp3.internal.tls.CertificateChainCleaner buildCertificateChainCleaner(javax.net.ssl.X509TrustManager) -> buildCertificateChainCleaner
    okhttp3.internal.platform.Platform findPlatform() -> findPlatform
    byte[] concatLengthPrefixed(java.util.List) -> concatLengthPrefixed
    java.lang.Object readFieldOrNull(java.lang.Object,java.lang.Class,java.lang.String) -> readFieldOrNull
    void <clinit>() -> <clinit>
okhttp3.internal.tls.BasicCertificateChainCleaner -> okhttp3.internal.tls.BasicCertificateChainCleaner:
    int MAX_SIGNERS -> MAX_SIGNERS
    okhttp3.internal.tls.TrustRootIndex trustRootIndex -> trustRootIndex
    void <init>(okhttp3.internal.tls.TrustRootIndex) -> <init>
    java.util.List clean(java.util.List,java.lang.String) -> clean
    boolean verifySignature(java.security.cert.X509Certificate,java.security.cert.X509Certificate) -> verifySignature
okhttp3.internal.tls.CertificateChainCleaner -> okhttp3.internal.tls.CertificateChainCleaner:
    void <init>() -> <init>
    java.util.List clean(java.util.List,java.lang.String) -> clean
    okhttp3.internal.tls.CertificateChainCleaner get(javax.net.ssl.X509TrustManager) -> get
    okhttp3.internal.tls.CertificateChainCleaner get(java.security.cert.X509Certificate[]) -> get
okhttp3.internal.tls.DistinguishedNameParser -> okhttp3.internal.tls.DistinguishedNameParser:
    java.lang.String dn -> dn
    int length -> length
    int pos -> pos
    int beg -> beg
    int end -> end
    int cur -> cur
    char[] chars -> chars
    void <init>(javax.security.auth.x500.X500Principal) -> <init>
    java.lang.String nextAT() -> nextAT
    java.lang.String quotedAV() -> quotedAV
    java.lang.String hexAV() -> hexAV
    java.lang.String escapedAV() -> escapedAV
    char getEscaped() -> getEscaped
    char getUTF8() -> getUTF8
    int getByte(int) -> getByte
    java.lang.String findMostSpecific(java.lang.String) -> findMostSpecific
okhttp3.internal.tls.OkHostnameVerifier -> okhttp3.internal.tls.OkHostnameVerifier:
    okhttp3.internal.tls.OkHostnameVerifier INSTANCE -> INSTANCE
    int ALT_DNS_NAME -> ALT_DNS_NAME
    int ALT_IPA_NAME -> ALT_IPA_NAME
    void <init>() -> <init>
    boolean verify(java.lang.String,javax.net.ssl.SSLSession) -> verify
    boolean verify(java.lang.String,java.security.cert.X509Certificate) -> verify
    boolean verifyIpAddress(java.lang.String,java.security.cert.X509Certificate) -> verifyIpAddress
    boolean verifyHostname(java.lang.String,java.security.cert.X509Certificate) -> verifyHostname
    java.util.List allSubjectAltNames(java.security.cert.X509Certificate) -> allSubjectAltNames
    java.util.List getSubjectAltNames(java.security.cert.X509Certificate,int) -> getSubjectAltNames
    boolean verifyHostname(java.lang.String,java.lang.String) -> verifyHostname
    void <clinit>() -> <clinit>
okhttp3.internal.tls.TrustRootIndex -> okhttp3.internal.tls.TrustRootIndex:
    void <init>() -> <init>
    java.security.cert.X509Certificate findByIssuerAndSignature(java.security.cert.X509Certificate) -> findByIssuerAndSignature
    okhttp3.internal.tls.TrustRootIndex get(javax.net.ssl.X509TrustManager) -> get
    okhttp3.internal.tls.TrustRootIndex get(java.security.cert.X509Certificate[]) -> get
okhttp3.internal.tls.TrustRootIndex$AndroidTrustRootIndex -> okhttp3.internal.tls.TrustRootIndex$AndroidTrustRootIndex:
    javax.net.ssl.X509TrustManager trustManager -> trustManager
    java.lang.reflect.Method findByIssuerAndSignatureMethod -> findByIssuerAndSignatureMethod
    void <init>(javax.net.ssl.X509TrustManager,java.lang.reflect.Method) -> <init>
    java.security.cert.X509Certificate findByIssuerAndSignature(java.security.cert.X509Certificate) -> findByIssuerAndSignature
okhttp3.internal.tls.TrustRootIndex$BasicTrustRootIndex -> okhttp3.internal.tls.TrustRootIndex$BasicTrustRootIndex:
    java.util.Map subjectToCaCerts -> subjectToCaCerts
    void <init>(java.security.cert.X509Certificate[]) -> <init>
    java.security.cert.X509Certificate findByIssuerAndSignature(java.security.cert.X509Certificate) -> findByIssuerAndSignature
okio.AsyncTimeout -> okio.AsyncTimeout:
    int TIMEOUT_WRITE_SIZE -> TIMEOUT_WRITE_SIZE
    okio.AsyncTimeout head -> head
    boolean inQueue -> inQueue
    okio.AsyncTimeout next -> next
    long timeoutAt -> timeoutAt
    void <init>() -> <init>
    void enter() -> enter
    void scheduleTimeout(okio.AsyncTimeout,long,boolean) -> scheduleTimeout
    boolean exit() -> exit
    boolean cancelScheduledTimeout(okio.AsyncTimeout) -> cancelScheduledTimeout
    long remainingNanos(long) -> remainingNanos
    void timedOut() -> timedOut
    okio.Sink sink(okio.Sink) -> sink
    okio.Source source(okio.Source) -> source
    void exit(boolean) -> exit
    java.io.IOException exit(java.io.IOException) -> exit
    java.io.IOException newTimeoutException(java.io.IOException) -> newTimeoutException
    okio.AsyncTimeout awaitTimeout() -> awaitTimeout
okio.AsyncTimeout$1 -> okio.AsyncTimeout$1:
    okio.Sink val$sink -> val$sink
    okio.AsyncTimeout this$0 -> this$0
    void <init>(okio.AsyncTimeout,okio.Sink) -> <init>
    void write(okio.Buffer,long) -> write
    void flush() -> flush
    void close() -> close
    okio.Timeout timeout() -> timeout
    java.lang.String toString() -> toString
okio.AsyncTimeout$2 -> okio.AsyncTimeout$2:
    okio.Source val$source -> val$source
    okio.AsyncTimeout this$0 -> this$0
    void <init>(okio.AsyncTimeout,okio.Source) -> <init>
    long read(okio.Buffer,long) -> read
    void close() -> close
    okio.Timeout timeout() -> timeout
    java.lang.String toString() -> toString
okio.AsyncTimeout$Watchdog -> okio.AsyncTimeout$Watchdog:
    void <init>() -> <init>
    void run() -> run
okio.Base64 -> okio.Base64:
    byte[] MAP -> MAP
    byte[] URL_MAP -> URL_MAP
    void <init>() -> <init>
    byte[] decode(java.lang.String) -> decode
    java.lang.String encode(byte[]) -> encode
    java.lang.String encodeUrl(byte[]) -> encodeUrl
    java.lang.String encode(byte[],byte[]) -> encode
    void <clinit>() -> <clinit>
okio.Buffer -> okio.Buffer:
    byte[] DIGITS -> DIGITS
    int REPLACEMENT_CHARACTER -> REPLACEMENT_CHARACTER
    okio.Segment head -> head
    long size -> size
    void <init>() -> <init>
    long size() -> size
    okio.Buffer buffer() -> buffer
    java.io.OutputStream outputStream() -> outputStream
    okio.Buffer emitCompleteSegments() -> emitCompleteSegments
    okio.BufferedSink emit() -> emit
    boolean exhausted() -> exhausted
    void require(long) -> require
    boolean request(long) -> request
    java.io.InputStream inputStream() -> inputStream
    okio.Buffer copyTo(java.io.OutputStream) -> copyTo
    okio.Buffer copyTo(java.io.OutputStream,long,long) -> copyTo
    okio.Buffer copyTo(okio.Buffer,long,long) -> copyTo
    okio.Buffer writeTo(java.io.OutputStream) -> writeTo
    okio.Buffer writeTo(java.io.OutputStream,long) -> writeTo
    okio.Buffer readFrom(java.io.InputStream) -> readFrom
    okio.Buffer readFrom(java.io.InputStream,long) -> readFrom
    void readFrom(java.io.InputStream,long,boolean) -> readFrom
    long completeSegmentByteCount() -> completeSegmentByteCount
    byte readByte() -> readByte
    byte getByte(long) -> getByte
    short readShort() -> readShort
    int readInt() -> readInt
    long readLong() -> readLong
    short readShortLe() -> readShortLe
    int readIntLe() -> readIntLe
    long readLongLe() -> readLongLe
    long readDecimalLong() -> readDecimalLong
    long readHexadecimalUnsignedLong() -> readHexadecimalUnsignedLong
    okio.ByteString readByteString() -> readByteString
    okio.ByteString readByteString(long) -> readByteString
    int select(okio.Options) -> select
    int selectPrefix(okio.Options) -> selectPrefix
    void readFully(okio.Buffer,long) -> readFully
    long readAll(okio.Sink) -> readAll
    java.lang.String readUtf8() -> readUtf8
    java.lang.String readUtf8(long) -> readUtf8
    java.lang.String readString(java.nio.charset.Charset) -> readString
    java.lang.String readString(long,java.nio.charset.Charset) -> readString
    java.lang.String readUtf8Line() -> readUtf8Line
    java.lang.String readUtf8LineStrict() -> readUtf8LineStrict
    java.lang.String readUtf8Line(long) -> readUtf8Line
    int readUtf8CodePoint() -> readUtf8CodePoint
    byte[] readByteArray() -> readByteArray
    byte[] readByteArray(long) -> readByteArray
    int read(byte[]) -> read
    void readFully(byte[]) -> readFully
    int read(byte[],int,int) -> read
    void clear() -> clear
    void skip(long) -> skip
    okio.Buffer write(okio.ByteString) -> write
    okio.Buffer writeUtf8(java.lang.String) -> writeUtf8
    okio.Buffer writeUtf8(java.lang.String,int,int) -> writeUtf8
    okio.Buffer writeUtf8CodePoint(int) -> writeUtf8CodePoint
    okio.Buffer writeString(java.lang.String,java.nio.charset.Charset) -> writeString
    okio.Buffer writeString(java.lang.String,int,int,java.nio.charset.Charset) -> writeString
    okio.Buffer write(byte[]) -> write
    okio.Buffer write(byte[],int,int) -> write
    long writeAll(okio.Source) -> writeAll
    okio.BufferedSink write(okio.Source,long) -> write
    okio.Buffer writeByte(int) -> writeByte
    okio.Buffer writeShort(int) -> writeShort
    okio.Buffer writeShortLe(int) -> writeShortLe
    okio.Buffer writeInt(int) -> writeInt
    okio.Buffer writeIntLe(int) -> writeIntLe
    okio.Buffer writeLong(long) -> writeLong
    okio.Buffer writeLongLe(long) -> writeLongLe
    okio.Buffer writeDecimalLong(long) -> writeDecimalLong
    okio.Buffer writeHexadecimalUnsignedLong(long) -> writeHexadecimalUnsignedLong
    okio.Segment writableSegment(int) -> writableSegment
    void write(okio.Buffer,long) -> write
    long read(okio.Buffer,long) -> read
    long indexOf(byte) -> indexOf
    long indexOf(byte,long) -> indexOf
    long indexOf(okio.ByteString) -> indexOf
    long indexOf(okio.ByteString,long) -> indexOf
    long indexOfElement(okio.ByteString) -> indexOfElement
    long indexOfElement(okio.ByteString,long) -> indexOfElement
    boolean rangeEquals(long,okio.ByteString) -> rangeEquals
    boolean rangeEquals(long,okio.ByteString,int,int) -> rangeEquals
    boolean rangeEquals(okio.Segment,int,okio.ByteString,int,int) -> rangeEquals
    void flush() -> flush
    void close() -> close
    okio.Timeout timeout() -> timeout
    java.util.List segmentSizes() -> segmentSizes
    okio.ByteString md5() -> md5
    okio.ByteString sha1() -> sha1
    okio.ByteString sha256() -> sha256
    okio.ByteString digest(java.lang.String) -> digest
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    okio.Buffer clone() -> clone
    okio.ByteString snapshot() -> snapshot
    okio.ByteString snapshot(int) -> snapshot
    java.lang.Object clone() -> clone
    okio.BufferedSink emitCompleteSegments() -> emitCompleteSegments
    okio.BufferedSink writeHexadecimalUnsignedLong(long) -> writeHexadecimalUnsignedLong
    okio.BufferedSink writeDecimalLong(long) -> writeDecimalLong
    okio.BufferedSink writeLongLe(long) -> writeLongLe
    okio.BufferedSink writeLong(long) -> writeLong
    okio.BufferedSink writeIntLe(int) -> writeIntLe
    okio.BufferedSink writeInt(int) -> writeInt
    okio.BufferedSink writeShortLe(int) -> writeShortLe
    okio.BufferedSink writeShort(int) -> writeShort
    okio.BufferedSink writeByte(int) -> writeByte
    okio.BufferedSink writeString(java.lang.String,int,int,java.nio.charset.Charset) -> writeString
    okio.BufferedSink writeString(java.lang.String,java.nio.charset.Charset) -> writeString
    okio.BufferedSink writeUtf8CodePoint(int) -> writeUtf8CodePoint
    okio.BufferedSink writeUtf8(java.lang.String,int,int) -> writeUtf8
    okio.BufferedSink writeUtf8(java.lang.String) -> writeUtf8
    okio.BufferedSink write(byte[],int,int) -> write
    okio.BufferedSink write(byte[]) -> write
    okio.BufferedSink write(okio.ByteString) -> write
    void <clinit>() -> <clinit>
okio.Buffer$1 -> okio.Buffer$1:
    okio.Buffer this$0 -> this$0
    void <init>(okio.Buffer) -> <init>
    void write(int) -> write
    void write(byte[],int,int) -> write
    void flush() -> flush
    void close() -> close
    java.lang.String toString() -> toString
okio.Buffer$2 -> okio.Buffer$2:
    okio.Buffer this$0 -> this$0
    void <init>(okio.Buffer) -> <init>
    int read() -> read
    int read(byte[],int,int) -> read
    int available() -> available
    void close() -> close
    java.lang.String toString() -> toString
okio.BufferedSink -> okio.BufferedSink:
    okio.Buffer buffer() -> buffer
    okio.BufferedSink write(okio.ByteString) -> write
    okio.BufferedSink write(byte[]) -> write
    okio.BufferedSink write(byte[],int,int) -> write
    long writeAll(okio.Source) -> writeAll
    okio.BufferedSink write(okio.Source,long) -> write
    okio.BufferedSink writeUtf8(java.lang.String) -> writeUtf8
    okio.BufferedSink writeUtf8(java.lang.String,int,int) -> writeUtf8
    okio.BufferedSink writeUtf8CodePoint(int) -> writeUtf8CodePoint
    okio.BufferedSink writeString(java.lang.String,java.nio.charset.Charset) -> writeString
    okio.BufferedSink writeString(java.lang.String,int,int,java.nio.charset.Charset) -> writeString
    okio.BufferedSink writeByte(int) -> writeByte
    okio.BufferedSink writeShort(int) -> writeShort
    okio.BufferedSink writeShortLe(int) -> writeShortLe
    okio.BufferedSink writeInt(int) -> writeInt
    okio.BufferedSink writeIntLe(int) -> writeIntLe
    okio.BufferedSink writeLong(long) -> writeLong
    okio.BufferedSink writeLongLe(long) -> writeLongLe
    okio.BufferedSink writeDecimalLong(long) -> writeDecimalLong
    okio.BufferedSink writeHexadecimalUnsignedLong(long) -> writeHexadecimalUnsignedLong
    void flush() -> flush
    okio.BufferedSink emit() -> emit
    okio.BufferedSink emitCompleteSegments() -> emitCompleteSegments
    java.io.OutputStream outputStream() -> outputStream
okio.BufferedSource -> okio.BufferedSource:
    okio.Buffer buffer() -> buffer
    boolean exhausted() -> exhausted
    void require(long) -> require
    boolean request(long) -> request
    byte readByte() -> readByte
    short readShort() -> readShort
    short readShortLe() -> readShortLe
    int readInt() -> readInt
    int readIntLe() -> readIntLe
    long readLong() -> readLong
    long readLongLe() -> readLongLe
    long readDecimalLong() -> readDecimalLong
    long readHexadecimalUnsignedLong() -> readHexadecimalUnsignedLong
    void skip(long) -> skip
    okio.ByteString readByteString() -> readByteString
    okio.ByteString readByteString(long) -> readByteString
    int select(okio.Options) -> select
    byte[] readByteArray() -> readByteArray
    byte[] readByteArray(long) -> readByteArray
    int read(byte[]) -> read
    void readFully(byte[]) -> readFully
    int read(byte[],int,int) -> read
    void readFully(okio.Buffer,long) -> readFully
    long readAll(okio.Sink) -> readAll
    java.lang.String readUtf8() -> readUtf8
    java.lang.String readUtf8(long) -> readUtf8
    java.lang.String readUtf8Line() -> readUtf8Line
    java.lang.String readUtf8LineStrict() -> readUtf8LineStrict
    int readUtf8CodePoint() -> readUtf8CodePoint
    java.lang.String readString(java.nio.charset.Charset) -> readString
    java.lang.String readString(long,java.nio.charset.Charset) -> readString
    long indexOf(byte) -> indexOf
    long indexOf(byte,long) -> indexOf
    long indexOf(okio.ByteString) -> indexOf
    long indexOf(okio.ByteString,long) -> indexOf
    long indexOfElement(okio.ByteString) -> indexOfElement
    long indexOfElement(okio.ByteString,long) -> indexOfElement
    boolean rangeEquals(long,okio.ByteString) -> rangeEquals
    boolean rangeEquals(long,okio.ByteString,int,int) -> rangeEquals
    java.io.InputStream inputStream() -> inputStream
okio.ByteString -> okio.ByteString:
    char[] HEX_DIGITS -> HEX_DIGITS
    long serialVersionUID -> serialVersionUID
    okio.ByteString EMPTY -> EMPTY
    byte[] data -> data
    int hashCode -> hashCode
    java.lang.String utf8 -> utf8
    void <init>(byte[]) -> <init>
    okio.ByteString of(byte[]) -> of
    okio.ByteString of(byte[],int,int) -> of
    okio.ByteString encodeUtf8(java.lang.String) -> encodeUtf8
    java.lang.String utf8() -> utf8
    java.lang.String base64() -> base64
    okio.ByteString md5() -> md5
    okio.ByteString sha1() -> sha1
    okio.ByteString sha256() -> sha256
    okio.ByteString digest(java.lang.String) -> digest
    java.lang.String base64Url() -> base64Url
    okio.ByteString decodeBase64(java.lang.String) -> decodeBase64
    java.lang.String hex() -> hex
    okio.ByteString decodeHex(java.lang.String) -> decodeHex
    int decodeHexDigit(char) -> decodeHexDigit
    okio.ByteString read(java.io.InputStream,int) -> read
    okio.ByteString toAsciiLowercase() -> toAsciiLowercase
    okio.ByteString toAsciiUppercase() -> toAsciiUppercase
    okio.ByteString substring(int) -> substring
    okio.ByteString substring(int,int) -> substring
    byte getByte(int) -> getByte
    int size() -> size
    byte[] toByteArray() -> toByteArray
    byte[] internalArray() -> internalArray
    java.nio.ByteBuffer asByteBuffer() -> asByteBuffer
    void write(java.io.OutputStream) -> write
    void write(okio.Buffer) -> write
    boolean rangeEquals(int,okio.ByteString,int,int) -> rangeEquals
    boolean rangeEquals(int,byte[],int,int) -> rangeEquals
    boolean startsWith(okio.ByteString) -> startsWith
    boolean startsWith(byte[]) -> startsWith
    boolean endsWith(okio.ByteString) -> endsWith
    boolean endsWith(byte[]) -> endsWith
    int indexOf(okio.ByteString) -> indexOf
    int indexOf(okio.ByteString,int) -> indexOf
    int indexOf(byte[]) -> indexOf
    int indexOf(byte[],int) -> indexOf
    int lastIndexOf(okio.ByteString) -> lastIndexOf
    int lastIndexOf(okio.ByteString,int) -> lastIndexOf
    int lastIndexOf(byte[]) -> lastIndexOf
    int lastIndexOf(byte[],int) -> lastIndexOf
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    int compareTo(okio.ByteString) -> compareTo
    java.lang.String toString() -> toString
    int codePointIndexToCharIndex(java.lang.String,int) -> codePointIndexToCharIndex
    void readObject(java.io.ObjectInputStream) -> readObject
    void writeObject(java.io.ObjectOutputStream) -> writeObject
    int compareTo(java.lang.Object) -> compareTo
    void <clinit>() -> <clinit>
okio.DeflaterSink -> okio.DeflaterSink:
    okio.BufferedSink sink -> sink
    java.util.zip.Deflater deflater -> deflater
    boolean closed -> closed
    void <init>(okio.Sink,java.util.zip.Deflater) -> <init>
    void <init>(okio.BufferedSink,java.util.zip.Deflater) -> <init>
    void write(okio.Buffer,long) -> write
    void deflate(boolean) -> deflate
    void flush() -> flush
    void finishDeflate() -> finishDeflate
    void close() -> close
    okio.Timeout timeout() -> timeout
    java.lang.String toString() -> toString
okio.ForwardingSink -> okio.ForwardingSink:
    okio.Sink delegate -> delegate
    void <init>(okio.Sink) -> <init>
    okio.Sink delegate() -> delegate
    void write(okio.Buffer,long) -> write
    void flush() -> flush
    okio.Timeout timeout() -> timeout
    void close() -> close
    java.lang.String toString() -> toString
okio.ForwardingSource -> okio.ForwardingSource:
    okio.Source delegate -> delegate
    void <init>(okio.Source) -> <init>
    okio.Source delegate() -> delegate
    long read(okio.Buffer,long) -> read
    okio.Timeout timeout() -> timeout
    void close() -> close
    java.lang.String toString() -> toString
okio.ForwardingTimeout -> okio.ForwardingTimeout:
    okio.Timeout delegate -> delegate
    void <init>(okio.Timeout) -> <init>
    okio.Timeout delegate() -> delegate
    okio.ForwardingTimeout setDelegate(okio.Timeout) -> setDelegate
    okio.Timeout timeout(long,java.util.concurrent.TimeUnit) -> timeout
    long timeoutNanos() -> timeoutNanos
    boolean hasDeadline() -> hasDeadline
    long deadlineNanoTime() -> deadlineNanoTime
    okio.Timeout deadlineNanoTime(long) -> deadlineNanoTime
    okio.Timeout clearTimeout() -> clearTimeout
    okio.Timeout clearDeadline() -> clearDeadline
    void throwIfReached() -> throwIfReached
okio.GzipSink -> okio.GzipSink:
    okio.BufferedSink sink -> sink
    java.util.zip.Deflater deflater -> deflater
    okio.DeflaterSink deflaterSink -> deflaterSink
    boolean closed -> closed
    java.util.zip.CRC32 crc -> crc
    void <init>(okio.Sink) -> <init>
    void write(okio.Buffer,long) -> write
    void flush() -> flush
    okio.Timeout timeout() -> timeout
    void close() -> close
    void writeHeader() -> writeHeader
    void writeFooter() -> writeFooter
    void updateCrc(okio.Buffer,long) -> updateCrc
okio.GzipSource -> okio.GzipSource:
    byte FHCRC -> FHCRC
    byte FEXTRA -> FEXTRA
    byte FNAME -> FNAME
    byte FCOMMENT -> FCOMMENT
    byte SECTION_HEADER -> SECTION_HEADER
    byte SECTION_BODY -> SECTION_BODY
    byte SECTION_TRAILER -> SECTION_TRAILER
    byte SECTION_DONE -> SECTION_DONE
    int section -> section
    okio.BufferedSource source -> source
    java.util.zip.Inflater inflater -> inflater
    okio.InflaterSource inflaterSource -> inflaterSource
    java.util.zip.CRC32 crc -> crc
    void <init>(okio.Source) -> <init>
    long read(okio.Buffer,long) -> read
    void consumeHeader() -> consumeHeader
    void consumeTrailer() -> consumeTrailer
    okio.Timeout timeout() -> timeout
    void close() -> close
    void updateCrc(okio.Buffer,long,long) -> updateCrc
    void checkEqual(java.lang.String,int,int) -> checkEqual
okio.HashingSink -> okio.HashingSink:
    java.security.MessageDigest messageDigest -> messageDigest
    okio.HashingSink md5(okio.Sink) -> md5
    okio.HashingSink sha1(okio.Sink) -> sha1
    okio.HashingSink sha256(okio.Sink) -> sha256
    void <init>(okio.Sink,java.lang.String) -> <init>
    void write(okio.Buffer,long) -> write
    okio.ByteString hash() -> hash
okio.HashingSource -> okio.HashingSource:
    java.security.MessageDigest messageDigest -> messageDigest
    okio.HashingSource md5(okio.Source) -> md5
    okio.HashingSource sha1(okio.Source) -> sha1
    okio.HashingSource sha256(okio.Source) -> sha256
    void <init>(okio.Source,java.lang.String) -> <init>
    long read(okio.Buffer,long) -> read
    okio.ByteString hash() -> hash
okio.InflaterSource -> okio.InflaterSource:
    okio.BufferedSource source -> source
    java.util.zip.Inflater inflater -> inflater
    int bufferBytesHeldByInflater -> bufferBytesHeldByInflater
    boolean closed -> closed
    void <init>(okio.Source,java.util.zip.Inflater) -> <init>
    void <init>(okio.BufferedSource,java.util.zip.Inflater) -> <init>
    long read(okio.Buffer,long) -> read
    boolean refill() -> refill
    void releaseInflatedBytes() -> releaseInflatedBytes
    okio.Timeout timeout() -> timeout
    void close() -> close
okio.Okio -> okio.Okio:
    java.util.logging.Logger logger -> logger
    void <init>() -> <init>
    okio.BufferedSource buffer(okio.Source) -> buffer
    okio.BufferedSink buffer(okio.Sink) -> buffer
    okio.Sink sink(java.io.OutputStream) -> sink
    okio.Sink sink(java.io.OutputStream,okio.Timeout) -> sink
    okio.Sink sink(java.net.Socket) -> sink
    okio.Source source(java.io.InputStream) -> source
    okio.Source source(java.io.InputStream,okio.Timeout) -> source
    okio.Source source(java.io.File) -> source
    okio.Sink sink(java.io.File) -> sink
    okio.Sink appendingSink(java.io.File) -> appendingSink
    okio.Source source(java.net.Socket) -> source
    okio.AsyncTimeout timeout(java.net.Socket) -> timeout
    boolean isAndroidGetsocknameError(java.lang.AssertionError) -> isAndroidGetsocknameError
    void <clinit>() -> <clinit>
okio.Okio$1 -> okio.Okio$1:
    okio.Timeout val$timeout -> val$timeout
    java.io.OutputStream val$out -> val$out
    void <init>(okio.Timeout,java.io.OutputStream) -> <init>
    void write(okio.Buffer,long) -> write
    void flush() -> flush
    void close() -> close
    okio.Timeout timeout() -> timeout
    java.lang.String toString() -> toString
okio.Okio$2 -> okio.Okio$2:
    okio.Timeout val$timeout -> val$timeout
    java.io.InputStream val$in -> val$in
    void <init>(okio.Timeout,java.io.InputStream) -> <init>
    long read(okio.Buffer,long) -> read
    void close() -> close
    okio.Timeout timeout() -> timeout
    java.lang.String toString() -> toString
okio.Okio$3 -> okio.Okio$3:
    java.net.Socket val$socket -> val$socket
    void <init>(java.net.Socket) -> <init>
    java.io.IOException newTimeoutException(java.io.IOException) -> newTimeoutException
    void timedOut() -> timedOut
okio.Options -> okio.Options:
    okio.ByteString[] byteStrings -> byteStrings
    void <init>(okio.ByteString[]) -> <init>
    okio.Options of(okio.ByteString[]) -> of
    okio.ByteString get(int) -> get
    int size() -> size
    java.lang.Object get(int) -> get
okio.Pipe -> okio.Pipe:
    long maxBufferSize -> maxBufferSize
    okio.Buffer buffer -> buffer
    boolean sinkClosed -> sinkClosed
    boolean sourceClosed -> sourceClosed
    okio.Sink sink -> sink
    okio.Source source -> source
    void <init>(long) -> <init>
    okio.Source source() -> source
    okio.Sink sink() -> sink
okio.Pipe$PipeSink -> okio.Pipe$PipeSink:
    okio.Timeout timeout -> timeout
    okio.Pipe this$0 -> this$0
    void <init>(okio.Pipe) -> <init>
    void write(okio.Buffer,long) -> write
    void flush() -> flush
    void close() -> close
    okio.Timeout timeout() -> timeout
okio.Pipe$PipeSource -> okio.Pipe$PipeSource:
    okio.Timeout timeout -> timeout
    okio.Pipe this$0 -> this$0
    void <init>(okio.Pipe) -> <init>
    long read(okio.Buffer,long) -> read
    void close() -> close
    okio.Timeout timeout() -> timeout
okio.RealBufferedSink -> okio.RealBufferedSink:
    okio.Buffer buffer -> buffer
    okio.Sink sink -> sink
    boolean closed -> closed
    void <init>(okio.Sink) -> <init>
    okio.Buffer buffer() -> buffer
    void write(okio.Buffer,long) -> write
    okio.BufferedSink write(okio.ByteString) -> write
    okio.BufferedSink writeUtf8(java.lang.String) -> writeUtf8
    okio.BufferedSink writeUtf8(java.lang.String,int,int) -> writeUtf8
    okio.BufferedSink writeUtf8CodePoint(int) -> writeUtf8CodePoint
    okio.BufferedSink writeString(java.lang.String,java.nio.charset.Charset) -> writeString
    okio.BufferedSink writeString(java.lang.String,int,int,java.nio.charset.Charset) -> writeString
    okio.BufferedSink write(byte[]) -> write
    okio.BufferedSink write(byte[],int,int) -> write
    long writeAll(okio.Source) -> writeAll
    okio.BufferedSink write(okio.Source,long) -> write
    okio.BufferedSink writeByte(int) -> writeByte
    okio.BufferedSink writeShort(int) -> writeShort
    okio.BufferedSink writeShortLe(int) -> writeShortLe
    okio.BufferedSink writeInt(int) -> writeInt
    okio.BufferedSink writeIntLe(int) -> writeIntLe
    okio.BufferedSink writeLong(long) -> writeLong
    okio.BufferedSink writeLongLe(long) -> writeLongLe
    okio.BufferedSink writeDecimalLong(long) -> writeDecimalLong
    okio.BufferedSink writeHexadecimalUnsignedLong(long) -> writeHexadecimalUnsignedLong
    okio.BufferedSink emitCompleteSegments() -> emitCompleteSegments
    okio.BufferedSink emit() -> emit
    java.io.OutputStream outputStream() -> outputStream
    void flush() -> flush
    void close() -> close
    okio.Timeout timeout() -> timeout
    java.lang.String toString() -> toString
okio.RealBufferedSink$1 -> okio.RealBufferedSink$1:
    okio.RealBufferedSink this$0 -> this$0
    void <init>(okio.RealBufferedSink) -> <init>
    void write(int) -> write
    void write(byte[],int,int) -> write
    void flush() -> flush
    void close() -> close
    java.lang.String toString() -> toString
okio.RealBufferedSource -> okio.RealBufferedSource:
    okio.Buffer buffer -> buffer
    okio.Source source -> source
    boolean closed -> closed
    void <init>(okio.Source) -> <init>
    okio.Buffer buffer() -> buffer
    long read(okio.Buffer,long) -> read
    boolean exhausted() -> exhausted
    void require(long) -> require
    boolean request(long) -> request
    byte readByte() -> readByte
    okio.ByteString readByteString() -> readByteString
    okio.ByteString readByteString(long) -> readByteString
    int select(okio.Options) -> select
    byte[] readByteArray() -> readByteArray
    byte[] readByteArray(long) -> readByteArray
    int read(byte[]) -> read
    void readFully(byte[]) -> readFully
    int read(byte[],int,int) -> read
    void readFully(okio.Buffer,long) -> readFully
    long readAll(okio.Sink) -> readAll
    java.lang.String readUtf8() -> readUtf8
    java.lang.String readUtf8(long) -> readUtf8
    java.lang.String readString(java.nio.charset.Charset) -> readString
    java.lang.String readString(long,java.nio.charset.Charset) -> readString
    java.lang.String readUtf8Line() -> readUtf8Line
    java.lang.String readUtf8LineStrict() -> readUtf8LineStrict
    int readUtf8CodePoint() -> readUtf8CodePoint
    short readShort() -> readShort
    short readShortLe() -> readShortLe
    int readInt() -> readInt
    int readIntLe() -> readIntLe
    long readLong() -> readLong
    long readLongLe() -> readLongLe
    long readDecimalLong() -> readDecimalLong
    long readHexadecimalUnsignedLong() -> readHexadecimalUnsignedLong
    void skip(long) -> skip
    long indexOf(byte) -> indexOf
    long indexOf(byte,long) -> indexOf
    long indexOf(okio.ByteString) -> indexOf
    long indexOf(okio.ByteString,long) -> indexOf
    long indexOfElement(okio.ByteString) -> indexOfElement
    long indexOfElement(okio.ByteString,long) -> indexOfElement
    boolean rangeEquals(long,okio.ByteString) -> rangeEquals
    boolean rangeEquals(long,okio.ByteString,int,int) -> rangeEquals
    java.io.InputStream inputStream() -> inputStream
    void close() -> close
    okio.Timeout timeout() -> timeout
    java.lang.String toString() -> toString
okio.RealBufferedSource$1 -> okio.RealBufferedSource$1:
    okio.RealBufferedSource this$0 -> this$0
    void <init>(okio.RealBufferedSource) -> <init>
    int read() -> read
    int read(byte[],int,int) -> read
    int available() -> available
    void close() -> close
    java.lang.String toString() -> toString
okio.Segment -> okio.Segment:
    int SIZE -> SIZE
    int SHARE_MINIMUM -> SHARE_MINIMUM
    byte[] data -> data
    int pos -> pos
    int limit -> limit
    boolean shared -> shared
    boolean owner -> owner
    okio.Segment next -> next
    okio.Segment prev -> prev
    void <init>() -> <init>
    void <init>(okio.Segment) -> <init>
    void <init>(byte[],int,int) -> <init>
    okio.Segment pop() -> pop
    okio.Segment push(okio.Segment) -> push
    okio.Segment split(int) -> split
    void compact() -> compact
    void writeTo(okio.Segment,int) -> writeTo
okio.SegmentPool -> okio.SegmentPool:
    long MAX_SIZE -> MAX_SIZE
    okio.Segment next -> next
    long byteCount -> byteCount
    void <init>() -> <init>
    okio.Segment take() -> take
    void recycle(okio.Segment) -> recycle
okio.SegmentedByteString -> okio.SegmentedByteString:
    byte[][] segments -> segments
    int[] directory -> directory
    void <init>(okio.Buffer,int) -> <init>
    java.lang.String utf8() -> utf8
    java.lang.String base64() -> base64
    java.lang.String hex() -> hex
    okio.ByteString toAsciiLowercase() -> toAsciiLowercase
    okio.ByteString toAsciiUppercase() -> toAsciiUppercase
    okio.ByteString md5() -> md5
    okio.ByteString sha256() -> sha256
    java.lang.String base64Url() -> base64Url
    okio.ByteString substring(int) -> substring
    okio.ByteString substring(int,int) -> substring
    byte getByte(int) -> getByte
    int segment(int) -> segment
    int size() -> size
    byte[] toByteArray() -> toByteArray
    java.nio.ByteBuffer asByteBuffer() -> asByteBuffer
    void write(java.io.OutputStream) -> write
    void write(okio.Buffer) -> write
    boolean rangeEquals(int,okio.ByteString,int,int) -> rangeEquals
    boolean rangeEquals(int,byte[],int,int) -> rangeEquals
    int indexOf(byte[],int) -> indexOf
    int lastIndexOf(byte[],int) -> lastIndexOf
    okio.ByteString toByteString() -> toByteString
    byte[] internalArray() -> internalArray
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    java.lang.Object writeReplace() -> writeReplace
okio.Sink -> okio.Sink:
    void write(okio.Buffer,long) -> write
    void flush() -> flush
    okio.Timeout timeout() -> timeout
    void close() -> close
okio.Source -> okio.Source:
    long read(okio.Buffer,long) -> read
    okio.Timeout timeout() -> timeout
    void close() -> close
okio.Timeout -> okio.Timeout:
    okio.Timeout NONE -> NONE
    boolean hasDeadline -> hasDeadline
    long deadlineNanoTime -> deadlineNanoTime
    long timeoutNanos -> timeoutNanos
    void <init>() -> <init>
    okio.Timeout timeout(long,java.util.concurrent.TimeUnit) -> timeout
    long timeoutNanos() -> timeoutNanos
    boolean hasDeadline() -> hasDeadline
    long deadlineNanoTime() -> deadlineNanoTime
    okio.Timeout deadlineNanoTime(long) -> deadlineNanoTime
    okio.Timeout deadline(long,java.util.concurrent.TimeUnit) -> deadline
    okio.Timeout clearTimeout() -> clearTimeout
    okio.Timeout clearDeadline() -> clearDeadline
    void throwIfReached() -> throwIfReached
    void waitUntilNotified(java.lang.Object) -> waitUntilNotified
    void <clinit>() -> <clinit>
okio.Timeout$1 -> okio.Timeout$1:
    void <init>() -> <init>
    okio.Timeout timeout(long,java.util.concurrent.TimeUnit) -> timeout
    okio.Timeout deadlineNanoTime(long) -> deadlineNanoTime
    void throwIfReached() -> throwIfReached
okio.Util -> okio.Util:
    java.nio.charset.Charset UTF_8 -> UTF_8
    void <init>() -> <init>
    void checkOffsetAndCount(long,long,long) -> checkOffsetAndCount
    short reverseBytesShort(short) -> reverseBytesShort
    int reverseBytesInt(int) -> reverseBytesInt
    long reverseBytesLong(long) -> reverseBytesLong
    void sneakyRethrow(java.lang.Throwable) -> sneakyRethrow
    void sneakyThrow2(java.lang.Throwable) -> sneakyThrow2
    boolean arrayRangeEquals(byte[],int,byte[],int,int) -> arrayRangeEquals
    void <clinit>() -> <clinit>
org.qiyi.android.corejar.debug.CircularLogBuffer -> org.qiyi.android.corejar.a.a:
    int logSize -> dt
    int mInsertIndex -> du
    java.text.SimpleDateFormat formatter -> dv
    java.util.List mLogs -> dw
    boolean mFullBuffer -> dx
    boolean enabled -> enabled
    void <init>() -> <init>
    void <init>(int) -> <init>
    java.lang.String toString() -> toString
    void log(java.lang.String,java.lang.String,java.lang.String) -> b
    java.text.SimpleDateFormat access$000(org.qiyi.android.corejar.debug.CircularLogBuffer) -> a
org.qiyi.android.corejar.debug.CircularLogBuffer$CircularLog -> org.qiyi.android.corejar.a.b:
    java.lang.String tag -> tag
    java.lang.String prior -> dy
    java.lang.String msg -> dz
    int tid -> dA
    int pid -> pid
    long time -> time
    org.qiyi.android.corejar.debug.CircularLogBuffer this$0 -> dB
    void <init>(org.qiyi.android.corejar.debug.CircularLogBuffer) -> <init>
    java.lang.String toString() -> toString
org.qiyi.android.corejar.debug.DebugLog -> org.qiyi.android.corejar.a.c:
    boolean isDebug -> dC
    boolean isFirstTime -> dD
    org.qiyi.android.corejar.debug.LogInfo sLogInfo -> dE
    org.qiyi.android.corejar.debug.CircularLogBuffer logBuffer -> dF
    org.qiyi.android.corejar.debug.CircularLogBuffer viewTraceBuffer -> dG
    java.util.Map map -> map
    void <init>() -> <init>
    boolean isDebug() -> aV
    void log(java.lang.String,java.lang.Object) -> a
    void v(java.lang.String,java.lang.String) -> v
    void i(java.lang.String,java.lang.String) -> i
    void d(java.lang.String,java.lang.String) -> d
    void w(java.lang.String,java.lang.String) -> w
    void e(java.lang.String,java.lang.String) -> e
    void printLog(int,java.lang.String,java.lang.String,java.lang.Throwable,int) -> a
    void <clinit>() -> <clinit>
org.qiyi.android.corejar.debug.DebugLog$IGetLog -> org.qiyi.android.corejar.a.d:
    java.lang.String getLog() -> aW
org.qiyi.android.corejar.debug.DebugSettings -> org.qiyi.android.corejar.a.e:
    int methodCount -> dH
    boolean showThreadInfo -> dI
    int methodOffset -> dJ
    void <init>() -> <init>
    int getMethodCount() -> aX
    boolean isShowThreadInfo() -> aY
    int getMethodOffset() -> aZ
org.qiyi.android.corejar.debug.FormatLogger -> org.qiyi.android.corejar.a.f:
    org.qiyi.android.corejar.debug.DebugSettings SETTINGS -> dK
    java.lang.String TAG -> TAG
    java.lang.ThreadLocal LOCAL_METHOD_COUNT -> dL
    void <init>() -> <init>
    org.qiyi.android.corejar.debug.ILogPrinter t(int) -> i
    void d(java.lang.String,java.lang.String,java.lang.Object[]) -> d
    void e(java.lang.String,java.lang.String,java.lang.Object[]) -> e
    void e(java.lang.Throwable,java.lang.String,java.lang.String,java.lang.Object[]) -> a
    void w(java.lang.String,java.lang.String,java.lang.Object[]) -> w
    void i(java.lang.String,java.lang.String,java.lang.Object[]) -> i
    void v(java.lang.String,java.lang.String,java.lang.Object[]) -> v
    void log(int,java.lang.String,java.lang.String,java.lang.Object[]) -> a
    void logTopBorder(int,java.lang.String) -> a
    void logHeaderContent(int,java.lang.String,int) -> a
    void logBottomBorder(int,java.lang.String) -> b
    void logDivider(int,java.lang.String) -> c
    void logContent(int,java.lang.String,java.lang.String) -> b
    void logChunk(int,java.lang.String,java.lang.String) -> c
    java.lang.String getSimpleClassName(java.lang.String) -> D
    java.lang.String formatTag(java.lang.String) -> E
    java.lang.String createMessage(java.lang.String,java.lang.Object[]) -> a
    int getMethodCount() -> aX
    int getStackOffset(java.lang.StackTraceElement[]) -> a
    void <clinit>() -> <clinit>
org.qiyi.android.corejar.debug.ILogPrinter -> org.qiyi.android.corejar.a.g:
    void d(java.lang.String,java.lang.String,java.lang.Object[]) -> d
    void e(java.lang.String,java.lang.String,java.lang.Object[]) -> e
    void e(java.lang.Throwable,java.lang.String,java.lang.String,java.lang.Object[]) -> a
    void w(java.lang.String,java.lang.String,java.lang.Object[]) -> w
    void i(java.lang.String,java.lang.String,java.lang.Object[]) -> i
    void v(java.lang.String,java.lang.String,java.lang.Object[]) -> v
org.qiyi.android.corejar.debug.LogInfo -> org.qiyi.android.corejar.a.h:
    java.util.Map allLogs -> dM
    void <init>() -> <init>
org.qiyi.android.corejar.debug.Logger -> org.qiyi.android.corejar.a.i:
    org.qiyi.android.corejar.debug.NormalLogger NORMAL_LOGGER -> dN
    java.lang.ThreadLocal LOCAL_LOG_PRINTER -> dO
    org.qiyi.android.corejar.debug.ILogPrinter sPrinter -> dP
    void <init>() -> <init>
    void setTempMethodCount(int) -> j
    org.qiyi.android.corejar.debug.ILogPrinter getLogPrinter() -> ba
    void v(java.lang.String,java.lang.String) -> v
    void i(java.lang.String,java.lang.String) -> i
    void d(java.lang.String,java.lang.String) -> d
    void w(java.lang.String,java.lang.String) -> w
    void e(java.lang.String,java.lang.String) -> e
    void e(java.lang.String,java.lang.String,java.lang.Throwable) -> e
    void <clinit>() -> <clinit>
org.qiyi.android.corejar.debug.NormalLogger -> org.qiyi.android.corejar.a.j:
    org.qiyi.android.corejar.debug.DebugSettings SETTINGS -> dK
    void <init>() -> <init>
    void d(java.lang.String,java.lang.String,java.lang.Object[]) -> d
    void e(java.lang.String,java.lang.String,java.lang.Object[]) -> e
    void e(java.lang.Throwable,java.lang.String,java.lang.String,java.lang.Object[]) -> a
    void w(java.lang.String,java.lang.String,java.lang.Object[]) -> w
    void i(java.lang.String,java.lang.String,java.lang.Object[]) -> i
    void v(java.lang.String,java.lang.String,java.lang.Object[]) -> v
    java.lang.String createMessage(java.lang.String,java.lang.Object[]) -> a
    int getStackOffset(java.lang.StackTraceElement[]) -> a
    void <clinit>() -> <clinit>
org.qiyi.android.corejar.thread.IDataTask -> org.qiyi.android.corejar.thread.IDataTask:
org.qiyi.android.corejar.thread.IDataTask$AbsOnAnyTimeCallBack -> org.qiyi.android.corejar.thread.IDataTask$AbsOnAnyTimeCallBack:
    void <init>() -> <init>
    void onNetWorkException(java.lang.Object[]) -> onNetWorkException
    void onPreExecuteCallBack(java.lang.Object[]) -> onPreExecuteCallBack
    void onProgressUpdateCallBack(java.lang.Integer[]) -> onProgressUpdateCallBack
    void onCancelledCallBack(java.lang.Object[]) -> onCancelledCallBack
    void onPostExecuteCallBack(java.lang.Object[]) -> onPostExecuteCallBack
org.qiyi.android.corejar.thread.IParamName -> org.qiyi.android.corejar.thread.IParamName:
    java.lang.String EQ -> EQ
    java.lang.String AND -> AND
    java.lang.String Q -> Q
    java.lang.String ACP -> ACP
    java.lang.String KEY -> KEY
    java.lang.String DEVICE_ID -> DEVICE_ID
    java.lang.String NETWORK -> NETWORK
    java.lang.String UA -> UA
    java.lang.String OS -> OS
    java.lang.String VERSION -> VERSION
    java.lang.String CATEGORY_ID -> CATEGORY_ID
    java.lang.String F_PS -> F_PS
    java.lang.String S -> S
    java.lang.String PN -> PN
    java.lang.String PS -> PS
    java.lang.String F -> F
    java.lang.String TOPALBUMS -> TOPALBUMS
    java.lang.String DATE_TYPE -> DATE_TYPE
    java.lang.String ALL -> ALL
    java.lang.String II -> II
    java.lang.String SOLO -> SOLO
    java.lang.String PPID -> PPID
    java.lang.String ADAPPID -> ADAPPID
    java.lang.String CPU -> CPU
    java.lang.String GPU -> GPU
    java.lang.String SCDENSITY -> SCDENSITY
    java.lang.String SIZE -> SIZE
    java.lang.String ID -> ID
    java.lang.String ACCESS_TYPE -> ACCESS_TYPE
    java.lang.String ISLOGIN -> ISLOGIN
    java.lang.String LOGIN -> LOGIN
    java.lang.String RESOLUTION -> RESOLUTION
    java.lang.String INCLUDE_ALL -> INCLUDE_ALL
    java.lang.String INIT_TYPE -> INIT_TYPE
    java.lang.String TS -> TS
    java.lang.String TYPE -> TYPE
    java.lang.String JSON -> JSON
    java.lang.String TYPE_JSON -> TYPE_JSON
    java.lang.String DID -> DID
    java.lang.String EXCEPTION -> EXCEPTION
    java.lang.String TVID -> TVID
    java.lang.String ALBUMID -> ALBUMID
    java.lang.String AUTH -> AUTH
    java.lang.String EMAIL -> EMAIL
    java.lang.String PASSWD -> PASSWD
    java.lang.String VIP -> VIP
    java.lang.String ALL_EPISODE -> ALL_EPISODE
    java.lang.String NEED_VIDEO_IMG -> NEED_VIDEO_IMG
    java.lang.String KEYWORD -> KEYWORD
    java.lang.String PAGE_NUMBER -> PAGE_NUMBER
    java.lang.String PAGE_SIZE -> PAGE_SIZE
    java.lang.String SORT -> SORT
    java.lang.String CLIENT_TYPE -> CLIENT_TYPE
    java.lang.String SEARCH_TYPE -> SEARCH_TYPE
    java.lang.String BATCH_TYPE -> BATCH_TYPE
    java.lang.String V2_NET -> V2_NET
    java.lang.String UGC -> UGC
    java.lang.String IMEI -> IMEI
    java.lang.String LIMIT -> LIMIT
    java.lang.String PCAT -> PCAT
    java.lang.String AD_ID -> AD_ID
    java.lang.String AD_L_ID -> AD_L_ID
    java.lang.String FROM -> FROM
    java.lang.String SS -> SS
    java.lang.String REQ_TYPE -> REQ_TYPE
    java.lang.String FAV_AID -> FAV_AID
    java.lang.String MSGPUSH -> MSGPUSH
    java.lang.String MSGPUSH_TYPE -> MSGPUSH_TYPE
    java.lang.String PLATFORM -> PLATFORM
    java.lang.String API_PLATFORM -> API_PLATFORM
    java.lang.String OS_VERSION -> OS_VERSION
    java.lang.String GPhone -> GPhone
    java.lang.String GPad -> GPad
    java.lang.String MKEY -> MKEY
    java.lang.String CLI_VER -> CLI_VER
    java.lang.String IP -> IP
    java.lang.String UID -> UID
    java.lang.String PTYPE -> PTYPE
    java.lang.String FROM_TYPE -> FROM_TYPE
    java.lang.String SUBTYPE -> SUBTYPE
    java.lang.String CID -> CID
    java.lang.String PAY_VERSION -> PAY_VERSION
    java.lang.String PAY_PARAM_MOBILE -> PAY_PARAM_MOBILE
    java.lang.String PAY_TYPE -> PAY_TYPE
    java.lang.String P00001 -> P00001
    java.lang.String AREA_ID -> AREA_ID
    java.lang.String PLATFORM_VALUE -> PLATFORM_VALUE
    java.lang.String PLATFORM_CODE_GPHONE -> PLATFORM_CODE_GPHONE
    java.lang.String RESPONSE -> RESPONSE
    java.lang.String RESULT -> RESULT
    java.lang.String HEADER -> HEADER
    java.lang.String REASON -> REASON
    java.lang.String RESPCODE -> RESPCODE
    java.lang.String PRODUCT -> PRODUCT
    java.lang.String PID -> PID
    java.lang.String FEE -> FEE
    java.lang.String MOBILE_FEE -> MOBILE_FEE
    java.lang.String PNAME -> PNAME
    java.lang.String CODE -> CODE
    java.lang.String MSG -> MSG
    java.lang.String DATA -> DATA
    java.lang.String SELECTMOUTHS -> SELECTMOUTHS
    java.lang.String AMOUNT -> AMOUNT
    java.lang.String ORIGINPRICE -> ORIGINPRICE
    java.lang.String PRICE -> PRICE
    java.lang.String SCREEN_STATUS -> SCREEN_STATUS
    java.lang.String SLOTID -> SLOTID
    java.lang.String GPS -> GPS
    java.lang.String UDID -> UDID
    java.lang.String openUDID -> openUDID
    java.lang.String macAddress -> macAddress
    java.lang.String ALIPAY_PID -> ALIPAY_PID
    java.lang.String ALIPAY_AID -> ALIPAY_AID
    java.lang.String ALIPAY_AMOUNT -> ALIPAY_AMOUNT
    java.lang.String ALIPAY_PLATFORM -> ALIPAY_PLATFORM
    java.lang.String ALIPAY_CID -> ALIPAY_CID
    java.lang.String ALIPAY_VERSION -> ALIPAY_VERSION
    java.lang.String ALIPAY_PAYTYPE -> ALIPAY_PAYTYPE
    java.lang.String ALIPAY_P00001 -> ALIPAY_P00001
    java.lang.String ALIPAY_FC -> ALIPAY_FC
    java.lang.String ALIPAY_SIGN -> ALIPAY_SIGN
    java.lang.String ALIPAY_CONTENT -> ALIPAY_CONTENT
    java.lang.String ALIPAY_TYPE -> ALIPAY_TYPE
    java.lang.String WEIXIN_NOTIFY_ID -> WEIXIN_NOTIFY_ID
    java.lang.String WEIXIN_OUT_TRADE_NO -> WEIXIN_OUT_TRADE_NO
    java.lang.String WEIXIN_PARTNER -> WEIXIN_PARTNER
    java.lang.String TSH -> TSH
    java.lang.String HWD -> HWD
    java.lang.String USERTYPE -> USERTYPE
    java.lang.String UUID -> UUID
    java.lang.String OEM -> OEM
    java.lang.String MACADDRESS -> MACADDRESS
    java.lang.String LCD -> LCD
    java.lang.String PLATFORM_CLIENT -> PLATFORM_CLIENT
    java.lang.String IOSVERSION -> IOSVERSION
    java.lang.String NETTYPE -> NETTYPE
    java.lang.String BASEINFO -> BASEINFO
    java.lang.String APPVERSION -> APPVERSION
    java.lang.String DEVICEID -> DEVICEID
    java.lang.String OPERATOR -> OPERATOR
    java.lang.String TIMEAREA -> TIMEAREA
    java.lang.String IPAREA -> IPAREA
    java.lang.String BUNLDID -> BUNLDID
    java.lang.String BOARD -> BOARD
    java.lang.String BRAND -> BRAND
    java.lang.String ABI -> ABI
    java.lang.String DEVICE -> DEVICE
    java.lang.String DISPLAY -> DISPLAY
    java.lang.String HOST -> HOST
    java.lang.String LABEL -> LABEL
    java.lang.String MANUFACTURER -> MANUFACTURER
    java.lang.String PRODUCT_IR -> PRODUCT_IR
    java.lang.String TAGS -> TAGS
    java.lang.String TYPE_IR -> TYPE_IR
    java.lang.String USER -> USER
    java.lang.String MODEL -> MODEL
    java.lang.String ANDROID_ID -> ANDROID_ID
    java.lang.String ISJAILBREAK -> ISJAILBREAK
    java.lang.String USERAGENT -> USERAGENT
    java.lang.String AUTHCOOKIE_PASSPART -> AUTHCOOKIE_PASSPART
    java.lang.String EMAIL_PASSPART -> EMAIL_PASSPART
    java.lang.String PASSWD_PASSPART -> PASSWD_PASSPART
    java.lang.String AGENTTYPE_PASSPART -> AGENTTYPE_PASSPART
    java.lang.String ZHIFUTYPE -> ZHIFUTYPE
    java.lang.String PPS_GAME_ACTION -> PPS_GAME_ACTION
    java.lang.String PPS_GAME_PLATFORM -> PPS_GAME_PLATFORM
    java.lang.String CARTOON_UC_AREA -> CARTOON_UC_AREA
    java.lang.String RECORD_REMIND -> RECORD_REMIND
    java.lang.String RECORD_ISDOWNLOAD -> RECORD_ISDOWNLOAD
    java.lang.String TOKEN -> TOKEN
    java.lang.String CB -> CB
    java.lang.String API -> API
    java.lang.String QYID -> QYID
    java.lang.String APP_K -> APP_K
    java.lang.String APP_V -> APP_V
    java.lang.String APP_T -> APP_T
    java.lang.String DEV_OS -> DEV_OS
    java.lang.String DEV_UA -> DEV_UA
    java.lang.String DEV_HW -> DEV_HW
    java.lang.String NET_STS -> NET_STS
    java.lang.String NET_IP -> NET_IP
    java.lang.String SCRN_STS -> SCRN_STS
    java.lang.String SCRN_RES -> SCRN_RES
    java.lang.String SCRN_DPI -> SCRN_DPI
    java.lang.String CUPID_UID -> CUPID_UID
    java.lang.String CUPID_V -> CUPID_V
    java.lang.String PSP_UID -> PSP_UID
    java.lang.String PSP_CKI -> PSP_CKI
    java.lang.String SECURE_V -> SECURE_V
    java.lang.String SECURE_P -> SECURE_P
    java.lang.String REQ_SN -> REQ_SN
    java.lang.String PLATFORM_ID -> PLATFORM_ID
    java.lang.String ALBUM_ID -> ALBUM_ID
    java.lang.String TV_ID -> TV_ID
    java.lang.String PAGE -> PAGE
    java.lang.String CARDS -> CARDS
    java.lang.String BLOCK -> BLOCK
    java.lang.String BLOCK_MODE -> BLOCK_MODE
    java.lang.String ORDER -> ORDER
    java.lang.String FAKE_IDS -> FAKE_IDS
    java.lang.String PLIST_ID -> PLIST_ID
    java.lang.String PLT_FULL -> PLT_FULL
    java.lang.String DURATION_LEVEL -> DURATION_LEVEL
    java.lang.String PUBLISH_DATE -> PUBLISH_DATE
    java.lang.String BITRATE -> BITRATE
    java.lang.String MODE -> MODE
    java.lang.String DL_RES -> DL_RES
    java.lang.String BASE_URL -> BASE_URL
    java.lang.String LANG -> LANG
    java.lang.String APPLM -> APPLM
org.qiyi.android.corejar.thread.IfaceResultCode -> org.qiyi.android.corejar.thread.IfaceResultCode:
    int SUCCESS_RESPCODE -> SUCCESS_RESPCODE
    int NO_AD_SHOW_RESPCODE -> NO_AD_SHOW_RESPCODE
    int SERVICE_STOP_RESPCODE -> SERVICE_STOP_RESPCODE
    java.lang.String IFACE_CODE_A00000 -> IFACE_CODE_A00000
    java.lang.String IFACE_CODE_A00005 -> IFACE_CODE_A00005
    java.lang.String IFACE_CODE_P00105 -> IFACE_CODE_P00105
    java.lang.String IFACE_CODE_P00102 -> IFACE_CODE_P00102
    java.lang.String IFACE_CODE_P00104 -> IFACE_CODE_P00104
    java.lang.String IFACE_CODE_A00101 -> IFACE_CODE_A00101
    java.lang.String IFACE_CODE_Q00301 -> IFACE_CODE_Q00301
    java.lang.String IFACE_CODE_Q00302 -> IFACE_CODE_Q00302
    java.lang.String IFACE_CODE_Q00303 -> IFACE_CODE_Q00303
    java.lang.String IFACE_CODE_Q00304 -> IFACE_CODE_Q00304
    java.lang.String IFACE_CODE_Q00305 -> IFACE_CODE_Q00305
    java.lang.String IFACE_CODE_Q00317 -> IFACE_CODE_Q00317
    java.lang.String IFACE_CODE_Q00318 -> IFACE_CODE_Q00318
    java.lang.String IFACE_CODE_Q00324 -> IFACE_CODE_Q00324
    java.lang.String IFACE_CODE_Q00325 -> IFACE_CODE_Q00325
    java.lang.String IFACE_CODE_Q00327 -> IFACE_CODE_Q00327
    java.lang.String IFACE_CODE_Q00328 -> IFACE_CODE_Q00328
    java.lang.String IFACE_CODE_Q00329 -> IFACE_CODE_Q00329
    java.lang.String IFACE_CODE_Q00338 -> IFACE_CODE_Q00338
    java.lang.String IFACE_CODE_Q00335 -> IFACE_CODE_Q00335
    java.lang.String IFACE_CODE_Q00336 -> IFACE_CODE_Q00336
    java.lang.String IFACE_CODE_Q00337 -> IFACE_CODE_Q00337
    java.lang.String IFACE_CODE_Q00346 -> IFACE_CODE_Q00346
    java.lang.String IFACE_CODE_F00100 -> IFACE_CODE_F00100
    int IFACE_CODE_NEWADINFO_1 -> IFACE_CODE_NEWADINFO_1
    int IFACE_CODE_NEWADINFO_999 -> IFACE_CODE_NEWADINFO_999
    int IFACE_CODE_NEWADINFO_1000 -> IFACE_CODE_NEWADINFO_1000
    int IFACE_CODE_GETGPSINFO_122 -> IFACE_CODE_GETGPSINFO_122
    java.lang.String IFACE_CODE_P00501 -> IFACE_CODE_P00501
org.qiyi.android.gps.BiSharedPreferencesHelper -> org.qiyi.android.gps.a:
    org.qiyi.android.gps.BiSharedPreferencesHelper instance -> dQ
    android.content.Context context -> context
    org.qiyi.android.gps.BiSharedPreferencesHelper getInstance(android.content.Context) -> g
    void <init>(android.content.Context) -> <init>
    java.lang.String getStringValue(java.lang.String,java.lang.String) -> g
    void putStringValue(java.lang.String,java.lang.String) -> h
    void putLongValue(java.lang.String,long) -> a
org.qiyi.android.gps.GpsLocByBaiduSDK -> org.qiyi.android.gps.GpsLocByBaiduSDK:
    double mLocGPS_latitude -> mLocGPS_latitude
    double mLocGPS_longitude -> mLocGPS_longitude
    java.lang.String mLocGPS_province -> mLocGPS_province
    android.content.Context mContext -> mContext
    com.baidu.location.LocationClient mLocationClient -> mLocationClient
    org.qiyi.android.gps.GpsLocByBaiduSDK _instance -> _instance
    int TIMEOUT -> TIMEOUT
    int BAIDU_GPS_INTERVAL -> BAIDU_GPS_INTERVAL
    java.lang.String coorType -> coorType
    int getDataPriority -> getDataPriority
    org.qiyi.android.gps.GpsLocByBaiduSDK$Callback mAbsOnAnyTimeCallBack -> mAbsOnAnyTimeCallBack
    java.lang.String KEY_LOCATION_LATI -> KEY_LOCATION_LATI
    java.lang.String KEY_LOCATION_LONGTI -> KEY_LOCATION_LONGTI
    java.lang.String mLocGPS_separate -> mLocGPS_separate
    java.lang.String S_DEFAULT -> S_DEFAULT
    double mLocGps_invalidValue -> mLocGps_invalidValue
    java.lang.String TAG -> TAG
    void <init>(android.content.Context) -> <init>
    org.qiyi.android.gps.GpsLocByBaiduSDK getInstance(android.content.Context) -> getInstance
    java.lang.String getGPSLocationStr() -> getGPSLocationStr
    java.lang.String getGPSLocationStrForPlugin() -> getGPSLocationStrForPlugin
    void initLocationClient() -> initLocationClient
    void stopLocationClient() -> stopLocationClient
    void requestMyLoc() -> requestMyLoc
    void startLocationClient() -> startLocationClient
    void setmAbsOnAnyTimeCallBack(org.qiyi.android.gps.GpsLocByBaiduSDK$Callback) -> setmAbsOnAnyTimeCallBack
    java.lang.String getLocationStr() -> getLocationStr
    void resetLonAndLat() -> resetLonAndLat
    boolean isLocationValid(double,double) -> isLocationValid
    android.content.Context access$100(org.qiyi.android.gps.GpsLocByBaiduSDK) -> access$100
    java.lang.String access$200(org.qiyi.android.gps.GpsLocByBaiduSDK) -> access$200
    org.qiyi.android.gps.GpsLocByBaiduSDK$Callback access$300(org.qiyi.android.gps.GpsLocByBaiduSDK) -> access$300
    void <clinit>() -> <clinit>
org.qiyi.android.gps.GpsLocByBaiduSDK$1 -> org.qiyi.android.gps.b:
org.qiyi.android.gps.GpsLocByBaiduSDK$Callback -> org.qiyi.android.gps.c:
    void onPostExecuteCallBack(java.lang.Object[]) -> onPostExecuteCallBack
org.qiyi.android.gps.GpsLocByBaiduSDK$IGPSWebView -> org.qiyi.android.gps.GpsLocByBaiduSDK$IGPSWebView:
    void onLocationUpdated(java.lang.String,boolean) -> onLocationUpdated
org.qiyi.android.gps.GpsLocByBaiduSDK$MyBDLocationListener -> org.qiyi.android.gps.d:
    org.qiyi.android.gps.GpsLocByBaiduSDK this$0 -> dR
    void <init>(org.qiyi.android.gps.GpsLocByBaiduSDK) -> <init>
    void onReceiveLocation(com.baidu.location.BDLocation) -> onReceiveLocation
    void <init>(org.qiyi.android.gps.GpsLocByBaiduSDK,org.qiyi.android.gps.GpsLocByBaiduSDK$1) -> <init>
org.qiyi.basecore.R -> org.qiyi.basecore.R:
    void <init>() -> <init>
org.qiyi.basecore.R$attr -> org.qiyi.basecore.R$attr:
    int actualImageResource -> actualImageResource
    int actualImageScaleType -> actualImageScaleType
    int actualImageUri -> actualImageUri
    int actualPackageName -> actualPackageName
    int auto_animation -> auto_animation
    int backgroundImage -> backgroundImage
    int circle_ratio -> circle_ratio
    int color_round -> color_round
    int edge_color -> edge_color
    int edge_overlay -> edge_overlay
    int edge_width -> edge_width
    int fadeDuration -> fadeDuration
    int failureImage -> failureImage
    int failureImageScaleType -> failureImageScaleType
    int out_frame_bg -> out_frame_bg
    int out_frame_color -> out_frame_color
    int out_frame_line_width -> out_frame_line_width
    int outer_frame -> outer_frame
    int overlayImage -> overlayImage
    int padding_vertical -> padding_vertical
    int placeholderImage -> placeholderImage
    int placeholderImageScaleType -> placeholderImageScaleType
    int pressedStateOverlayImage -> pressedStateOverlayImage
    int progressBarAutoRotateInterval -> progressBarAutoRotateInterval
    int progressBarImage -> progressBarImage
    int progressBarImageScaleType -> progressBarImageScaleType
    int pstsDividerColor -> pstsDividerColor
    int pstsDividerPadding -> pstsDividerPadding
    int pstsIndicatorColor -> pstsIndicatorColor
    int pstsIndicatorHeight -> pstsIndicatorHeight
    int pstsIndicatorWidth -> pstsIndicatorWidth
    int pstsScrollOffset -> pstsScrollOffset
    int pstsScrollToCenter -> pstsScrollToCenter
    int pstsShouldExpand -> pstsShouldExpand
    int pstsTabBackground -> pstsTabBackground
    int pstsTabPaddingLeftRight -> pstsTabPaddingLeftRight
    int pstsTextAllCaps -> pstsTextAllCaps
    int pstsUnderlineColor -> pstsUnderlineColor
    int pstsUnderlineHeight -> pstsUnderlineHeight
    int ratio -> ratio
    int retryImage -> retryImage
    int retryImageScaleType -> retryImageScaleType
    int roundAsCircle -> roundAsCircle
    int roundBottomLeft -> roundBottomLeft
    int roundBottomRight -> roundBottomRight
    int roundTopLeft -> roundTopLeft
    int roundTopRight -> roundTopRight
    int roundWithOverlayColor -> roundWithOverlayColor
    int roundedCornerRadius -> roundedCornerRadius
    int roundingBorderColor -> roundingBorderColor
    int roundingBorderPadding -> roundingBorderPadding
    int roundingBorderWidth -> roundingBorderWidth
    int size -> size
    int static_play -> static_play
    int stroke_width -> stroke_width
    int viewAspectRatio -> viewAspectRatio
    int wh_ratio -> wh_ratio
    void <init>() -> <init>
org.qiyi.basecore.R$dimen -> org.qiyi.basecore.R$dimen:
    int pad_button_height_36dp -> pad_button_height_36dp
    int pad_button_width_88dp -> pad_button_width_88dp
    int pad_character_icon_height -> pad_character_icon_height
    int pad_character_icon_width -> pad_character_icon_width
    int pad_character_item_width -> pad_character_item_width
    int pad_icon_size_16dp -> pad_icon_size_16dp
    int pad_icon_size_24dp -> pad_icon_size_24dp
    int pad_icon_size_36dp -> pad_icon_size_36dp
    int pad_icon_size_48dp -> pad_icon_size_48dp
    int pad_icon_size_64dp -> pad_icon_size_64dp
    int pad_icon_size_72dp -> pad_icon_size_72dp
    int pad_image_height_101dp -> pad_image_height_101dp
    int pad_image_height_200dp -> pad_image_height_200dp
    int pad_image_width_128dp -> pad_image_width_128dp
    int pad_image_width_200dp -> pad_image_width_200dp
    int pad_my_bottom_tips_height -> pad_my_bottom_tips_height
    int pad_my_button_height -> pad_my_button_height
    int pad_my_title_height -> pad_my_title_height
    int pad_padding_100dp -> pad_padding_100dp
    int pad_padding_10dp -> pad_padding_10dp
    int pad_padding_12dp -> pad_padding_12dp
    int pad_padding_14dp -> pad_padding_14dp
    int pad_padding_168dp -> pad_padding_168dp
    int pad_padding_16dp -> pad_padding_16dp
    int pad_padding_18dp -> pad_padding_18dp
    int pad_padding_20dp -> pad_padding_20dp
    int pad_padding_22dp -> pad_padding_22dp
    int pad_padding_233dp -> pad_padding_233dp
    int pad_padding_24dp -> pad_padding_24dp
    int pad_padding_27dp -> pad_padding_27dp
    int pad_padding_28dp -> pad_padding_28dp
    int pad_padding_30dp -> pad_padding_30dp
    int pad_padding_32dp -> pad_padding_32dp
    int pad_padding_36dp -> pad_padding_36dp
    int pad_padding_3dp -> pad_padding_3dp
    int pad_padding_40dp -> pad_padding_40dp
    int pad_padding_48dp -> pad_padding_48dp
    int pad_padding_4dp -> pad_padding_4dp
    int pad_padding_52dp -> pad_padding_52dp
    int pad_padding_61dp -> pad_padding_61dp
    int pad_padding_64dp -> pad_padding_64dp
    int pad_padding_6dp -> pad_padding_6dp
    int pad_padding_70dp -> pad_padding_70dp
    int pad_padding_80dp -> pad_padding_80dp
    int pad_padding_8dp -> pad_padding_8dp
    int pad_passport_account_hint_height -> pad_passport_account_hint_height
    int pad_passport_button_height -> pad_passport_button_height
    int pad_passport_button_width -> pad_passport_button_width
    int pad_passport_edit_height -> pad_passport_edit_height
    int pad_passport_info_height -> pad_passport_info_height
    int pad_passport_input_height -> pad_passport_input_height
    int pad_passport_region_box_width -> pad_passport_region_box_width
    int pad_passport_region_item_height -> pad_passport_region_item_height
    int pad_passport_sns_height -> pad_passport_sns_height
    int pad_passport_sns_width -> pad_passport_sns_width
    int pad_passport_strength_height -> pad_passport_strength_height
    int pad_passport_strength_hint_height -> pad_passport_strength_hint_height
    int pad_passport_strength_width -> pad_passport_strength_width
    int pad_passport_vcode_height -> pad_passport_vcode_height
    int pad_passport_vcode_width -> pad_passport_vcode_width
    int pad_passport_window_height -> pad_passport_window_height
    int pad_passport_window_width -> pad_passport_window_width
    int pad_pay_frame_width_1dp -> pad_pay_frame_width_1dp
    int pad_pay_frame_width_2dp -> pad_pay_frame_width_2dp
    int pad_pay_title_height_24dp -> pad_pay_title_height_24dp
    int pad_pay_title_height_48dp -> pad_pay_title_height_48dp
    int pad_pay_title_height_54dp -> pad_pay_title_height_54dp
    int pad_pay_title_height_72dp -> pad_pay_title_height_72dp
    int pad_pay_title_height_80dp -> pad_pay_title_height_80dp
    int pad_pay_title_height_84dp -> pad_pay_title_height_84dp
    int pad_pay_title_height_pannel -> pad_pay_title_height_pannel
    int pad_pay_title_width_139dp -> pad_pay_title_width_139dp
    int pad_pay_title_width_167dp -> pad_pay_title_width_167dp
    int pad_pay_window_height -> pad_pay_window_height
    int pad_pay_window_width -> pad_pay_window_width
    int pad_text_size_12sp -> pad_text_size_12sp
    int pad_text_size_14sp -> pad_text_size_14sp
    int pad_text_size_16sp -> pad_text_size_16sp
    int pad_text_size_20sp -> pad_text_size_20sp
    int pad_toast_height_48dp -> pad_toast_height_48dp
    int pad_toast_radius_corner -> pad_toast_radius_corner
    int pad_toast_width_288dp -> pad_toast_width_288dp
    int pad_video_detail_poster_height -> pad_video_detail_poster_height
    int pad_video_detail_poster_width -> pad_video_detail_poster_width
    void <init>() -> <init>
org.qiyi.basecore.R$drawable -> org.qiyi.basecore.R$drawable:
    int alert_bg_scan -> alert_bg_scan
    int dialog_btn_cancle_scan -> dialog_btn_cancle_scan
    int dialog_btn_ok_scan -> dialog_btn_ok_scan
    int phone_navi_my_scan -> phone_navi_my_scan
    int phone_title_bar_back_normal_scan -> phone_title_bar_back_normal_scan
    int phone_title_bar_back_pressed_scan -> phone_title_bar_back_pressed_scan
    int scan_help_button_scan -> scan_help_button_scan
    int scan_icon_scan -> scan_icon_scan
    int title_bar_back_new_scan -> title_bar_back_new_scan
    void <init>() -> <init>
org.qiyi.basecore.R$id -> org.qiyi.basecore.R$id:
    int center -> center
    int centerCrop -> centerCrop
    int centerInside -> centerInside
    int dialog_cancel -> dialog_cancel
    int dialog_login -> dialog_login
    int dialog_title -> dialog_title
    int fitCenter -> fitCenter
    int fitEnd -> fitEnd
    int fitStart -> fitStart
    int fitXY -> fitXY
    int focusCrop -> focusCrop
    int icon -> icon
    int login_fail -> login_fail
    int non -> non
    int none -> none
    int phoneTitle -> phoneTitle
    int preview_view -> preview_view
    int rect -> rect
    int rect_padding -> rect_padding
    int round -> round
    int round_left -> round_left
    int round_padding -> round_padding
    int scan_help -> scan_help
    int scan_line -> scan_line
    int user_id -> user_id
    int viewfinder_view -> viewfinder_view
    void <init>() -> <init>
org.qiyi.basecore.R$layout -> org.qiyi.basecore.R$layout:
    int phone_login_dialog_view_scan -> phone_login_dialog_view_scan
    int phone_scan_main_layout_scan -> phone_scan_main_layout_scan
    void <init>() -> <init>
org.qiyi.basecore.R$string -> org.qiyi.basecore.R$string:
    int account_scanlogin_success2 -> account_scanlogin_success2
    int account_scanlogin_success_scan -> account_scanlogin_success_scan
    int btn_OK_scan -> btn_OK_scan
    int capture_and_upload_scan -> capture_and_upload_scan
    int login_scan -> login_scan
    int pcloading_login_scan -> pcloading_login_scan
    int phone_login_scan -> phone_login_scan
    int phone_my_setting_confirm_cancel_scan -> phone_my_setting_confirm_cancel_scan
    int phone_scan_help_scan -> phone_scan_help_scan
    int qrtype_not_supported_scan -> qrtype_not_supported_scan
    int scan_fail_text_scan -> scan_fail_text_scan
    int scanner_confirm_download_scan -> scanner_confirm_download_scan
    int scanner_confirm_login_with_this_account_scan -> scanner_confirm_login_with_this_account_scan
    int scanner_confirm_to_download_scan -> scanner_confirm_to_download_scan
    int scanner_login_failed_scan -> scanner_login_failed_scan
    int scanner_login_success_scan -> scanner_login_success_scan
    int scanner_network_error_scan -> scanner_network_error_scan
    int scanner_request_network_scan -> scanner_request_network_scan
    int scanner_title_scan -> scanner_title_scan
    int scanqr_fail_network_down_scan -> scanqr_fail_network_down_scan
    void <init>() -> <init>
org.qiyi.basecore.R$style -> org.qiyi.basecore.R$style:
    int top_base_item_new_scan -> top_base_item_new_scan
    int top_title_item_new_scan -> top_title_item_new_scan
    int top_title_new_scan -> top_title_new_scan
    void <init>() -> <init>
org.qiyi.basecore.R$styleable -> org.qiyi.basecore.R$styleable:
    int[] CircleImageView -> CircleImageView
    int CircleImageView_circle_ratio -> CircleImageView_circle_ratio
    int CircleImageView_edge_color -> CircleImageView_edge_color
    int CircleImageView_edge_overlay -> CircleImageView_edge_overlay
    int CircleImageView_edge_width -> CircleImageView_edge_width
    int[] CircleLoadingView -> CircleLoadingView
    int CircleLoadingView_auto_animation -> CircleLoadingView_auto_animation
    int CircleLoadingView_color_round -> CircleLoadingView_color_round
    int CircleLoadingView_padding_vertical -> CircleLoadingView_padding_vertical
    int CircleLoadingView_size -> CircleLoadingView_size
    int CircleLoadingView_static_play -> CircleLoadingView_static_play
    int CircleLoadingView_stroke_width -> CircleLoadingView_stroke_width
    int[] GenericDraweeView -> GenericDraweeView
    int GenericDraweeView_actualImageScaleType -> GenericDraweeView_actualImageScaleType
    int GenericDraweeView_backgroundImage -> GenericDraweeView_backgroundImage
    int GenericDraweeView_fadeDuration -> GenericDraweeView_fadeDuration
    int GenericDraweeView_failureImage -> GenericDraweeView_failureImage
    int GenericDraweeView_failureImageScaleType -> GenericDraweeView_failureImageScaleType
    int GenericDraweeView_overlayImage -> GenericDraweeView_overlayImage
    int GenericDraweeView_placeholderImage -> GenericDraweeView_placeholderImage
    int GenericDraweeView_placeholderImageScaleType -> GenericDraweeView_placeholderImageScaleType
    int GenericDraweeView_pressedStateOverlayImage -> GenericDraweeView_pressedStateOverlayImage
    int GenericDraweeView_progressBarAutoRotateInterval -> GenericDraweeView_progressBarAutoRotateInterval
    int GenericDraweeView_progressBarImage -> GenericDraweeView_progressBarImage
    int GenericDraweeView_progressBarImageScaleType -> GenericDraweeView_progressBarImageScaleType
    int GenericDraweeView_retryImage -> GenericDraweeView_retryImage
    int GenericDraweeView_retryImageScaleType -> GenericDraweeView_retryImageScaleType
    int GenericDraweeView_roundAsCircle -> GenericDraweeView_roundAsCircle
    int GenericDraweeView_roundBottomLeft -> GenericDraweeView_roundBottomLeft
    int GenericDraweeView_roundBottomRight -> GenericDraweeView_roundBottomRight
    int GenericDraweeView_roundTopLeft -> GenericDraweeView_roundTopLeft
    int GenericDraweeView_roundTopRight -> GenericDraweeView_roundTopRight
    int GenericDraweeView_roundWithOverlayColor -> GenericDraweeView_roundWithOverlayColor
    int GenericDraweeView_roundedCornerRadius -> GenericDraweeView_roundedCornerRadius
    int GenericDraweeView_roundingBorderColor -> GenericDraweeView_roundingBorderColor
    int GenericDraweeView_roundingBorderPadding -> GenericDraweeView_roundingBorderPadding
    int GenericDraweeView_roundingBorderWidth -> GenericDraweeView_roundingBorderWidth
    int GenericDraweeView_viewAspectRatio -> GenericDraweeView_viewAspectRatio
    int[] KeepHeightRatioImageView -> KeepHeightRatioImageView
    int KeepHeightRatioImageView_wh_ratio -> KeepHeightRatioImageView_wh_ratio
    int[] KeepRatioImageView -> KeepRatioImageView
    int KeepRatioImageView_ratio -> KeepRatioImageView_ratio
    int[] OuterFrameTextView -> OuterFrameTextView
    int OuterFrameTextView_out_frame_bg -> OuterFrameTextView_out_frame_bg
    int OuterFrameTextView_out_frame_color -> OuterFrameTextView_out_frame_color
    int OuterFrameTextView_out_frame_line_width -> OuterFrameTextView_out_frame_line_width
    int OuterFrameTextView_outer_frame -> OuterFrameTextView_outer_frame
    int[] PagerSlidingTabStrip -> PagerSlidingTabStrip
    int PagerSlidingTabStrip_pstsDividerColor -> PagerSlidingTabStrip_pstsDividerColor
    int PagerSlidingTabStrip_pstsDividerPadding -> PagerSlidingTabStrip_pstsDividerPadding
    int PagerSlidingTabStrip_pstsIndicatorColor -> PagerSlidingTabStrip_pstsIndicatorColor
    int PagerSlidingTabStrip_pstsIndicatorHeight -> PagerSlidingTabStrip_pstsIndicatorHeight
    int PagerSlidingTabStrip_pstsIndicatorWidth -> PagerSlidingTabStrip_pstsIndicatorWidth
    int PagerSlidingTabStrip_pstsScrollOffset -> PagerSlidingTabStrip_pstsScrollOffset
    int PagerSlidingTabStrip_pstsScrollToCenter -> PagerSlidingTabStrip_pstsScrollToCenter
    int PagerSlidingTabStrip_pstsShouldExpand -> PagerSlidingTabStrip_pstsShouldExpand
    int PagerSlidingTabStrip_pstsTabBackground -> PagerSlidingTabStrip_pstsTabBackground
    int PagerSlidingTabStrip_pstsTabPaddingLeftRight -> PagerSlidingTabStrip_pstsTabPaddingLeftRight
    int PagerSlidingTabStrip_pstsTextAllCaps -> PagerSlidingTabStrip_pstsTextAllCaps
    int PagerSlidingTabStrip_pstsUnderlineColor -> PagerSlidingTabStrip_pstsUnderlineColor
    int PagerSlidingTabStrip_pstsUnderlineHeight -> PagerSlidingTabStrip_pstsUnderlineHeight
    int[] SimpleDraweeView -> SimpleDraweeView
    int SimpleDraweeView_actualImageResource -> SimpleDraweeView_actualImageResource
    int SimpleDraweeView_actualImageUri -> SimpleDraweeView_actualImageUri
    int SimpleDraweeView_actualPackageName -> SimpleDraweeView_actualPackageName
    void <init>() -> <init>
    void <clinit>() -> <clinit>
org.qiyi.basecore.algorithm.AESAlgorithm -> org.qiyi.basecore.algorithm.AESAlgorithm:
    java.lang.String sKey -> sKey
    java.lang.String ivParameter -> ivParameter
    void <init>() -> <init>
    java.lang.String encrypt(java.lang.String) -> encrypt
    java.lang.String decrypt(java.lang.String) -> decrypt
    java.lang.String bytesToHexString(byte[]) -> bytesToHexString
    byte[] hexStringToBytes(java.lang.String) -> hexStringToBytes
    byte charToByte(char) -> charToByte
    void <clinit>() -> <clinit>
org.qiyi.basecore.algorithm.MD5Algorithm -> org.qiyi.basecore.algorithm.a:
    char[] HEX_DIGITS -> HEX_DIGITS
    java.lang.String md5(java.lang.String) -> F
    java.lang.String md5(java.lang.String,boolean) -> e
    void <clinit>() -> <clinit>
org.qiyi.basecore.db.QiyiContentProvider -> org.qiyi.basecore.a.a:
    boolean sInited -> dS
    java.lang.String AUTHORITY -> AUTHORITY
    java.util.Map sTables -> dT
    int currentTableIndex -> dU
    org.qiyi.basecore.db.QiyiContentProvider$AppAdapter mAppAdapter -> dV
    android.content.UriMatcher sURIMatcher -> dW
    void register(android.content.Context,java.lang.String,org.qiyi.basecore.db.QiyiContentProvider$ITable) -> a
    void onCreate(android.content.Context) -> onCreate
    boolean onCreate() -> onCreate
    android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String) -> query
    android.net.Uri insert(android.net.Uri,android.content.ContentValues) -> insert
    org.qiyi.basecore.db.QiyiContentProvider$TableInfo getTableInfo(android.net.Uri) -> a
    int delete(android.net.Uri,java.lang.String,java.lang.String[]) -> delete
    int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[]) -> update
    android.content.ContentProviderResult[] applyBatch(java.util.ArrayList) -> applyBatch
    java.lang.String getType(android.net.Uri) -> getType
    android.net.Uri createUri(java.lang.String) -> G
    java.util.Map access$100() -> bb
    void <clinit>() -> <clinit>
org.qiyi.basecore.db.QiyiContentProvider$AppAdapter -> org.qiyi.basecore.a.b:
    org.qiyi.basecore.db.QiyiContentProvider$AppAdapter$BaseDBHelper _helper -> dX
    android.content.Context _context -> dY
    android.database.sqlite.SQLiteDatabase _db -> dZ
    void <init>(android.content.Context) -> <init>
    void open(boolean) -> g
    void beginTransaction() -> beginTransaction
    void setTransactionSuccessful() -> setTransactionSuccessful
    void endTransaction() -> endTransaction
    long insert(java.lang.String,android.content.ContentValues) -> a
    int update(java.lang.String,android.content.ContentValues,java.lang.String,java.lang.String[]) -> update
    int delete(java.lang.String,java.lang.String,java.lang.String[]) -> delete
    android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String) -> a
    void openWithWriteMethod() -> bc
org.qiyi.basecore.db.QiyiContentProvider$AppAdapter$BaseDBHelper -> org.qiyi.basecore.a.c:
    org.qiyi.basecore.db.QiyiContentProvider$AppAdapter this$0 -> ea
    void <init>(org.qiyi.basecore.db.QiyiContentProvider$AppAdapter,android.content.Context,java.lang.String,android.database.sqlite.SQLiteDatabase$CursorFactory,int) -> <init>
    void execSQL(android.database.sqlite.SQLiteDatabase,java.lang.String) -> a
    void execSQL(android.database.sqlite.SQLiteDatabase,java.lang.String,java.lang.String) -> a
    void onOpen(android.database.sqlite.SQLiteDatabase) -> onOpen
    void onCreate(android.database.sqlite.SQLiteDatabase) -> onCreate
    void onUpgrade(android.database.sqlite.SQLiteDatabase,int,int) -> onUpgrade
org.qiyi.basecore.db.QiyiContentProvider$ITable -> org.qiyi.basecore.a.d:
    java.lang.String getSelectionForUpdate(android.content.ContentValues) -> getSelectionForUpdate
    java.lang.String[] getSelectionArgsForUpdate(android.content.ContentValues) -> getSelectionArgsForUpdate
    void onUpgrade(android.database.sqlite.SQLiteDatabase,int,int,org.qiyi.basecore.db.QiyiContentProvider$AppAdapter$BaseDBHelper) -> onUpgrade
    void onCreate(android.database.sqlite.SQLiteDatabase,org.qiyi.basecore.db.QiyiContentProvider$AppAdapter$BaseDBHelper) -> onCreate
    boolean endRegister() -> endRegister
org.qiyi.basecore.db.QiyiContentProvider$TableInfo -> org.qiyi.basecore.a.e:
    java.lang.String tableName -> eb
    org.qiyi.basecore.db.QiyiContentProvider$ITable iTable -> ec
    void <init>(java.lang.String,org.qiyi.basecore.db.QiyiContentProvider$ITable) -> <init>
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String access$000(org.qiyi.basecore.db.QiyiContentProvider$TableInfo) -> a
org.qiyi.basecore.filedownload.AutoDownloadConfigPolicy -> org.qiyi.basecore.filedownload.a:
    java.util.ArrayList mBlackList -> ed
    int getCpuNum() -> getCpuNum
    long getTotalMemo() -> getTotalMemo
    boolean isLowQualityDevice() -> bd
    boolean isBelowKitkatVersion() -> be
    boolean canAutoDownloadPlugin(android.content.Context) -> h
    void <clinit>() -> <clinit>
org.qiyi.basecore.filedownload.FileDownloadCallback -> org.qiyi.basecore.filedownload.FileDownloadCallback:
    void onDownloadListChanged(java.util.List) -> onDownloadListChanged
    void onDownloadProgress(org.qiyi.basecore.filedownload.FileDownloadStatus) -> onDownloadProgress
    void onPaused(org.qiyi.basecore.filedownload.FileDownloadStatus) -> onPaused
    void onFailed(org.qiyi.basecore.filedownload.FileDownloadStatus) -> onFailed
    void onCompleted(org.qiyi.basecore.filedownload.FileDownloadStatus) -> onCompleted
org.qiyi.basecore.filedownload.FileDownloadCallback$Stub -> org.qiyi.basecore.filedownload.FileDownloadCallback$Stub:
    java.lang.String DESCRIPTOR -> DESCRIPTOR
    int TRANSACTION_onDownloadListChanged -> TRANSACTION_onDownloadListChanged
    int TRANSACTION_onDownloadProgress -> TRANSACTION_onDownloadProgress
    int TRANSACTION_onPaused -> TRANSACTION_onPaused
    int TRANSACTION_onFailed -> TRANSACTION_onFailed
    int TRANSACTION_onCompleted -> TRANSACTION_onCompleted
    void <init>() -> <init>
    org.qiyi.basecore.filedownload.FileDownloadCallback asInterface(android.os.IBinder) -> asInterface
    android.os.IBinder asBinder() -> asBinder
    boolean onTransact(int,android.os.Parcel,android.os.Parcel,int) -> onTransact
org.qiyi.basecore.filedownload.FileDownloadCallback$Stub$Proxy -> org.qiyi.basecore.filedownload.b:
    android.os.IBinder mRemote -> ck
    void <init>(android.os.IBinder) -> <init>
    android.os.IBinder asBinder() -> asBinder
    void onDownloadListChanged(java.util.List) -> onDownloadListChanged
    void onDownloadProgress(org.qiyi.basecore.filedownload.FileDownloadStatus) -> onDownloadProgress
    void onPaused(org.qiyi.basecore.filedownload.FileDownloadStatus) -> onPaused
    void onFailed(org.qiyi.basecore.filedownload.FileDownloadStatus) -> onFailed
    void onCompleted(org.qiyi.basecore.filedownload.FileDownloadStatus) -> onCompleted
org.qiyi.basecore.filedownload.FileDownloadCallbackHelper -> org.qiyi.basecore.filedownload.c:
    java.util.List mFileDownloadCallbacks -> ee
    void <init>() -> <init>
    void onDownloadListChanged(java.util.List) -> onDownloadListChanged
    void addCallback(android.util.Pair) -> a
    void onDownloadListChanged(android.util.Pair,java.util.List) -> a
    void remove(org.qiyi.basecore.filedownload.FileDownloadCallback,java.lang.String) -> a
    void onPaused(org.qiyi.basecore.filedownload.FileDownloadStatus) -> onPaused
    void onFailed(org.qiyi.basecore.filedownload.FileDownloadStatus) -> onFailed
    void onCompleted(org.qiyi.basecore.filedownload.FileDownloadStatus) -> onCompleted
    void onDownloadProgress(org.qiyi.basecore.filedownload.FileDownloadStatus) -> onDownloadProgress
    void removeAll() -> removeAll
org.qiyi.basecore.filedownload.FileDownloadCallbackImp -> org.qiyi.basecore.filedownload.FileDownloadCallbackImp:
    org.qiyi.basecore.filedownload.FileDownloadCallback$Stub stub -> stub
    android.os.Handler handler -> handler
    void <init>() -> <init>
    void onPaused(org.qiyi.basecore.filedownload.FileDownloadStatus) -> onPaused
    void onFailed(org.qiyi.basecore.filedownload.FileDownloadStatus) -> onFailed
    void onDownloadListChanged(java.util.List) -> onDownloadListChanged
    void onDownloadProgress(org.qiyi.basecore.filedownload.FileDownloadStatus) -> onDownloadProgress
    void onCompleted(org.qiyi.basecore.filedownload.FileDownloadStatus) -> onCompleted
    org.qiyi.basecore.filedownload.FileDownloadCallback$Stub getInvokeThreadCallback() -> getInvokeThreadCallback
    android.os.Handler getHandler(org.qiyi.basecore.filedownload.FileDownloadCallbackImp) -> getHandler
org.qiyi.basecore.filedownload.FileDownloadCallbackImp$1 -> org.qiyi.basecore.filedownload.d:
    org.qiyi.basecore.filedownload.FileDownloadCallbackImp this$0 -> ef
    void <init>(org.qiyi.basecore.filedownload.FileDownloadCallbackImp) -> <init>
    void onPaused(org.qiyi.basecore.filedownload.FileDownloadStatus) -> onPaused
    void onFailed(org.qiyi.basecore.filedownload.FileDownloadStatus) -> onFailed
    void onDownloadListChanged(java.util.List) -> onDownloadListChanged
    void onDownloadProgress(org.qiyi.basecore.filedownload.FileDownloadStatus) -> onDownloadProgress
    void onCompleted(org.qiyi.basecore.filedownload.FileDownloadStatus) -> onCompleted
org.qiyi.basecore.filedownload.FileDownloadCallbackImp$MyHandler -> org.qiyi.basecore.filedownload.e:
    org.qiyi.basecore.filedownload.FileDownloadCallbackImp this$0 -> ef
    void <init>(org.qiyi.basecore.filedownload.FileDownloadCallbackImp,android.os.Looper) -> <init>
    void <init>(org.qiyi.basecore.filedownload.FileDownloadCallbackImp) -> <init>
    void handleMessage(android.os.Message) -> handleMessage
org.qiyi.basecore.filedownload.FileDownloadConstant -> org.qiyi.basecore.filedownload.FileDownloadConstant:
    int MAX_LOAD -> MAX_LOAD
    int TRY_START_DOWNLOAD_FOR_ADD -> TRY_START_DOWNLOAD_FOR_ADD
    int STATUS_PENDING -> STATUS_PENDING
    int STATUS_RUNNING -> STATUS_RUNNING
    int STATUS_PAUSED -> STATUS_PAUSED
    int STATUS_SUCCESSFUL -> STATUS_SUCCESSFUL
    int STATUS_FAILED -> STATUS_FAILED
    int ERROR_UNABLE_TO_CREATE_FILE -> ERROR_UNABLE_TO_CREATE_FILE
    int ERROR_DOWNLOAD_URL_INVALID -> ERROR_DOWNLOAD_URL_INVALID
    int ERROR_HTTP_ERROR -> ERROR_HTTP_ERROR
    int ERROR_DOWNLOAD_FILE_NOT_FOUND -> ERROR_DOWNLOAD_FILE_NOT_FOUND
    int ERROR_WRITING_DOWNLOAD_FILE -> ERROR_WRITING_DOWNLOAD_FILE
    int ERROR_NETWORK_NO_INPUT_STREAM -> ERROR_NETWORK_NO_INPUT_STREAM
    int ERROR_NETWORK_RESPONSE_CODE_ERROR -> ERROR_NETWORK_RESPONSE_CODE_ERROR
    int ERROR_NETWORK_CONNECTION_TIMEOUT -> ERROR_NETWORK_CONNECTION_TIMEOUT
    int ERROR_NETWORK_SOCKET_TIMEOUT -> ERROR_NETWORK_SOCKET_TIMEOUT
    int ERROR_FROM_RESTORE -> ERROR_FROM_RESTORE
    int ERROR_VALIDATE_FAILED -> ERROR_VALIDATE_FAILED
    int ERROR_UNKNOWN -> ERROR_UNKNOWN
    int PAUSED_WAITING_FOR_NETWORK -> PAUSED_WAITING_FOR_NETWORK
    int PAUSED_QUEUED_FOR_WIFI -> PAUSED_QUEUED_FOR_WIFI
    int PAUSED_INSUFFICIENT_SPACE -> PAUSED_INSUFFICIENT_SPACE
    int PAUSED_MANUALLY -> PAUSED_MANUALLY
    int PAUSED_BY_DELETED -> PAUSED_BY_DELETED
    int PAUSED_BY_OTHER_EXECUTE -> PAUSED_BY_OTHER_EXECUTE
    int PAUSED_REACH_MAX_LOAD -> PAUSED_REACH_MAX_LOAD
    void <init>() -> <init>
    java.lang.String getPausedReasonStr(int) -> getPausedReasonStr
    java.lang.CharSequence getFailedReasonStr(int) -> getFailedReasonStr
    boolean pausedByNet(int) -> pausedByNet
    boolean failedForNet(int) -> failedForNet
org.qiyi.basecore.filedownload.FileDownloadDBHelper -> org.qiyi.basecore.filedownload.f:
    java.lang.String TAG -> TAG
    java.lang.Object lockObj -> eg
    int CURRENT_DATABASE_VERSION -> eh
    void <init>(android.content.Context) -> <init>
    void onCreate(android.database.sqlite.SQLiteDatabase) -> onCreate
    void onUpgrade(android.database.sqlite.SQLiteDatabase,int,int) -> onUpgrade
    void insertOrUpdate(org.qiyi.basecore.filedownload.FileDownloadStatus,org.qiyi.basecore.filedownload.FileDownloadDBHelper$DBHelperCallback) -> a
    void insertOrUpdate(java.util.List,org.qiyi.basecore.filedownload.FileDownloadDBHelper$DBHelperCallback) -> a
    void query(org.qiyi.basecore.filedownload.FileDownloadDBHelper$DBHelperCallback) -> a
    void delete(java.util.List) -> q
    byte[] getBytes(java.io.Serializable) -> a
    java.io.Serializable getSerializable(byte[]) -> c
    byte[] access$200(java.io.Serializable) -> b
    java.io.Serializable access$300(byte[]) -> d
    java.lang.String access$400() -> access$400
    java.lang.Object access$500(org.qiyi.basecore.filedownload.FileDownloadDBHelper) -> a
    void <clinit>() -> <clinit>
org.qiyi.basecore.filedownload.FileDownloadDBHelper$1 -> org.qiyi.basecore.filedownload.g:
    java.util.List val$list -> ei
    org.qiyi.basecore.filedownload.FileDownloadDBHelper$DBHelperCallback val$dbHelperCallback -> ej
    org.qiyi.basecore.filedownload.FileDownloadDBHelper this$0 -> ek
    void <init>(org.qiyi.basecore.filedownload.FileDownloadDBHelper,java.util.List,org.qiyi.basecore.filedownload.FileDownloadDBHelper$DBHelperCallback) -> <init>
    java.lang.Void doInBackground(java.lang.Void[]) -> a
    void onPostExecute(java.lang.Void) -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
org.qiyi.basecore.filedownload.FileDownloadDBHelper$2 -> org.qiyi.basecore.filedownload.h:
    org.qiyi.basecore.filedownload.FileDownloadDBHelper$DBHelperCallback val$dbHelperCallback -> ej
    org.qiyi.basecore.filedownload.FileDownloadDBHelper this$0 -> ek
    void <init>(org.qiyi.basecore.filedownload.FileDownloadDBHelper,org.qiyi.basecore.filedownload.FileDownloadDBHelper$DBHelperCallback) -> <init>
    java.util.List doInBackground(java.lang.Void[]) -> b
    void onPostExecute(java.util.List) -> r
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
org.qiyi.basecore.filedownload.FileDownloadDBHelper$3 -> org.qiyi.basecore.filedownload.i:
    java.util.List val$list -> ei
    org.qiyi.basecore.filedownload.FileDownloadDBHelper this$0 -> ek
    void <init>(org.qiyi.basecore.filedownload.FileDownloadDBHelper,java.util.List) -> <init>
    java.lang.Void doInBackground(java.lang.Void[]) -> a
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
org.qiyi.basecore.filedownload.FileDownloadDBHelper$DBHelperCallback -> org.qiyi.basecore.filedownload.j:
    void onInsertOrUpdateCompleted() -> bf
    void onQueryCompleted(java.util.List) -> s
org.qiyi.basecore.filedownload.FileDownloadDBHelper$FileDownloadEntry -> org.qiyi.basecore.filedownload.k:
    java.lang.String TABLE_NAME -> TABLE_NAME
    java.lang.String SQL_CREATE_ENTRIES -> SQL_CREATE_ENTRIES
    java.lang.String access$000() -> bg
    java.lang.String access$100() -> bh
    void <clinit>() -> <clinit>
org.qiyi.basecore.filedownload.FileDownloadInterface -> org.qiyi.basecore.filedownload.FileDownloadInterface:
    org.qiyi.basecore.filedownload.FileDownloadInterface$RemoteServiceConnection mServiceConnection -> mServiceConnection
    org.qiyi.basecore.filedownload.FileDownloadCallback fileDownloadCallback -> fileDownloadCallback
    java.util.List fileDownloadCallbacks -> fileDownloadCallbacks
    int typeInt -> typeInt
    java.lang.String typeStr -> typeStr
    boolean isInited -> isInited
    java.util.concurrent.Executor executorService -> executorService
    void <init>(org.qiyi.basecore.filedownload.FileDownloadCallback) -> <init>
    void <init>(org.qiyi.basecore.filedownload.FileDownloadCallback,java.lang.String) -> <init>
    void unRegist() -> unRegist
    void initFileDownloadService(android.content.Context,org.qiyi.basecore.filedownload.FileDownloadCallback) -> initFileDownloadService
    void initFileDownloadService(android.content.Context) -> initFileDownloadService
    void addDownloads(java.util.List) -> addDownloads
    void addDownload(org.qiyi.basecore.filedownload.FileDownloadStatus$DownloadConfiguration) -> addDownload
    void deleteDownloads(java.util.List) -> deleteDownloads
    void onUserOperateDownload(org.qiyi.basecore.filedownload.FileDownloadStatus) -> onUserOperateDownload
    java.util.List getDownloads() -> getDownloads
    void createDownloadService(android.content.Context,org.qiyi.basecore.filedownload.FileDownloadCallback) -> createDownloadService
    void doCreateDownloadService(android.content.Context) -> doCreateDownloadService
    android.content.ServiceConnection initServiceConnection(org.qiyi.basecore.filedownload.FileDownloadCallback) -> initServiceConnection
    void destroyDownloadService(android.content.Context) -> destroyDownloadService
    boolean isInited() -> isInited
    void setInited(boolean) -> setInited
    void access$000(android.content.Context) -> access$000
    org.qiyi.basecore.filedownload.FileDownloadInterface$RemoteServiceConnection access$100() -> access$100
    java.util.List access$200() -> access$200
    java.util.List access$202(java.util.List) -> access$202
    void <clinit>() -> <clinit>
org.qiyi.basecore.filedownload.FileDownloadInterface$1 -> org.qiyi.basecore.filedownload.l:
    java.util.List val$downloadStatusList -> el
    org.qiyi.basecore.filedownload.FileDownloadInterface this$0 -> em
    void <init>(org.qiyi.basecore.filedownload.FileDownloadInterface,java.util.List) -> <init>
    java.lang.Void doInBackground(java.lang.Void[]) -> a
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
org.qiyi.basecore.filedownload.FileDownloadInterface$2 -> org.qiyi.basecore.filedownload.m:
    void <init>() -> <init>
    void onDownloadListChanged(java.util.List) -> onDownloadListChanged
org.qiyi.basecore.filedownload.FileDownloadInterface$3 -> org.qiyi.basecore.filedownload.n:
    org.qiyi.basecore.filedownload.FileDownloadCallback val$fileDownloadCallback -> en
    void <init>(org.qiyi.basecore.filedownload.FileDownloadCallback) -> <init>
    void onServiceDisconnected(android.content.ComponentName) -> onServiceDisconnected
    void onServiceConnected(android.content.ComponentName,android.os.IBinder) -> onServiceConnected
org.qiyi.basecore.filedownload.FileDownloadInterface$DelayWorker -> org.qiyi.basecore.filedownload.o:
    android.content.Context mCT -> eo
    void <init>(android.content.Context) -> <init>
    void run() -> run
org.qiyi.basecore.filedownload.FileDownloadInterface$RemoteServiceConnection -> org.qiyi.basecore.filedownload.p:
    org.qiyi.basecore.filedownload.FileDownloadRemoteServiceInterface downloadRemoteServiceInterface -> ep
    void <init>() -> <init>
    void <init>(org.qiyi.basecore.filedownload.FileDownloadInterface$1) -> <init>
org.qiyi.basecore.filedownload.FileDownloadManager -> org.qiyi.basecore.filedownload.q:
    org.qiyi.basecore.filedownload.FileDownloadManager mInstance -> eq
    java.util.List mDownloadTaskList -> er
    java.util.concurrent.locks.ReentrantReadWriteLock lock -> es
    org.qiyi.basecore.filedownload.FileDownloadCallbackHelper fileDownloadCallbackHelper -> et
    org.qiyi.basecore.filedownload.FileDownloadDBHelper mDbHelper -> eu
    org.qiyi.basecore.filedownload.FileDownloadManager getInstance() -> bi
    void <init>() -> <init>
    void addDownload(android.content.Context,java.util.List,android.util.Pair) -> a
    java.util.List taskToStatus(java.util.List) -> t
    org.qiyi.basecore.filedownload.FileDownloadTask getTaskByStatus(org.qiyi.basecore.filedownload.FileDownloadStatus) -> a
    org.qiyi.basecore.filedownload.FileDownloadTask reachMaxLoad(org.qiyi.basecore.filedownload.FileDownloadTask) -> a
    boolean checkDownloadConfiguration(org.qiyi.basecore.filedownload.FileDownloadStatus) -> b
    void resumeDownload(org.qiyi.basecore.filedownload.FileDownloadTask,boolean) -> a
    void resumeDownload(org.qiyi.basecore.filedownload.FileDownloadStatus) -> c
    void registerCallback(android.content.Context,org.qiyi.basecore.filedownload.FileDownloadCallback,java.lang.String) -> a
    void pauseDownload(org.qiyi.basecore.filedownload.FileDownloadStatus) -> d
    java.util.List getDownloads() -> getDownloads
    void deleteDownloads(java.util.List) -> deleteDownloads
    void unRegist(org.qiyi.basecore.filedownload.FileDownloadCallback,java.lang.String) -> b
    void onDestroy() -> onDestroy
    void startDownload(org.qiyi.basecore.filedownload.FileDownloadTask,int,android.content.Context) -> a
    void startDownload(org.qiyi.basecore.filedownload.FileDownloadTask,int) -> a
    org.qiyi.basecore.filedownload.FileDownloadManager$FileDownloadNetChange getFileDownloadNetChange() -> bj
    org.qiyi.basecore.filedownload.FileDownloadDBHelper access$000(org.qiyi.basecore.filedownload.FileDownloadManager) -> a
    java.util.concurrent.locks.ReentrantReadWriteLock access$100(org.qiyi.basecore.filedownload.FileDownloadManager) -> b
    java.util.List access$200(org.qiyi.basecore.filedownload.FileDownloadManager) -> c
org.qiyi.basecore.filedownload.FileDownloadManager$1 -> org.qiyi.basecore.filedownload.r:
    android.content.Context val$context -> ev
    android.util.Pair val$callbackPair -> ew
    org.qiyi.basecore.filedownload.FileDownloadManager this$0 -> ex
    void <init>(org.qiyi.basecore.filedownload.FileDownloadManager,android.content.Context,android.util.Pair) -> <init>
    void onQueryCompleted(java.util.List) -> s
    void onInsertOrUpdateCompleted() -> bf
org.qiyi.basecore.filedownload.FileDownloadManager$2 -> org.qiyi.basecore.filedownload.s:
    org.qiyi.basecore.filedownload.FileDownloadManager this$0 -> ex
    void <init>(org.qiyi.basecore.filedownload.FileDownloadManager) -> <init>
    void onQueryCompleted(java.util.List) -> s
    void onInsertOrUpdateCompleted() -> bf
org.qiyi.basecore.filedownload.FileDownloadManager$FileDownloadNetChange -> org.qiyi.basecore.filedownload.t:
    org.qiyi.basecore.filedownload.FileDownloadManager this$0 -> ex
    void <init>(org.qiyi.basecore.filedownload.FileDownloadManager) -> <init>
    void onChangeToOff(org.qiyi.basecore.utils.NetworkStatus) -> onChangeToOff
    void onChangeToWIFI(org.qiyi.basecore.utils.NetworkStatus) -> onChangeToWIFI
    void onChangeToNotWIFI(org.qiyi.basecore.utils.NetworkStatus) -> onChangeToNotWIFI
org.qiyi.basecore.filedownload.FileDownloadNotification -> org.qiyi.basecore.filedownload.u:
    android.content.Context mContext -> mContext
    android.app.NotificationManager notificationManager -> ey
    android.widget.RemoteViews contentView -> contentView
    android.app.Notification notification -> ez
    int lastDownloadPercent -> eA
    org.qiyi.basecore.filedownload.FileDownloadNotificationConfiguration downloadNotificationConfiguration -> eB
    void <init>(android.content.Context,org.qiyi.basecore.filedownload.FileDownloadNotificationConfiguration) -> <init>
    void notify(int,android.app.Notification) -> notify
    void setLastDownloadPercent(int) -> k
    void onDownloadProgress(org.qiyi.basecore.filedownload.FileDownloadStatus) -> onDownloadProgress
    void onPaused(org.qiyi.basecore.filedownload.FileDownloadStatus) -> onPaused
    void onFailed(org.qiyi.basecore.filedownload.FileDownloadStatus) -> onFailed
    void onCompleted(java.io.File,org.qiyi.basecore.filedownload.FileDownloadStatus) -> a
    android.app.Notification getNotification(java.lang.String,org.qiyi.basecore.filedownload.FileDownloadStatus) -> a
    void onDismiss(org.qiyi.basecore.filedownload.FileDownloadStatus) -> e
org.qiyi.basecore.filedownload.FileDownloadNotificationConfiguration -> org.qiyi.basecore.filedownload.FileDownloadNotificationConfiguration:
    long serialVersionUID -> serialVersionUID
    java.lang.String INTENT_KEY_FOR_FILE_DOWNLOAD_STATUS -> INTENT_KEY_FOR_FILE_DOWNLOAD_STATUS
    int resIdForContentView -> resIdForContentView
    java.lang.String downloadingStr -> downloadingStr
    int resIdForStatus -> resIdForStatus
    int resIdForPercent -> resIdForPercent
    int resIdForProgress -> resIdForProgress
    int resIdForContent -> resIdForContent
    int thumbnail -> thumbnail
    int resIdForLeftIcon -> resIdForLeftIcon
    int leftDrawable -> leftDrawable
    java.lang.String pausedStr -> pausedStr
    java.lang.String completedTitleStr -> completedTitleStr
    java.lang.String completedContentStr -> completedContentStr
    java.lang.String failedStr -> failedStr
    java.lang.Class pendingIntentClass -> pendingIntentClass
    void <init>(int,java.lang.String,int,int,int,int,int,int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.Class) -> <init>
org.qiyi.basecore.filedownload.FileDownloadRemoteService -> org.qiyi.basecore.filedownload.FileDownloadRemoteService:
    java.lang.String TAG -> TAG
    org.qiyi.basecore.filedownload.FileDownloadRemoteServiceInterface$Stub mBinder -> eC
    org.qiyi.basecore.utils.NetworkChangeReceiver networkChangeReceiver -> eD
    void <init>() -> <init>
    void onCreate() -> onCreate
    android.os.IBinder onBind(android.content.Intent) -> onBind
    int onStartCommand(android.content.Intent,int,int) -> onStartCommand
    void onDestroy() -> onDestroy
    org.qiyi.basecore.filedownload.FileDownloadRemoteServiceInterface$Stub initBinder() -> bk
    void <clinit>() -> <clinit>
org.qiyi.basecore.filedownload.FileDownloadRemoteService$1 -> org.qiyi.basecore.filedownload.v:
    org.qiyi.basecore.filedownload.FileDownloadRemoteService this$0 -> eE
    void <init>(org.qiyi.basecore.filedownload.FileDownloadRemoteService) -> <init>
    boolean onTransact(int,android.os.Parcel,android.os.Parcel,int) -> onTransact
    void unregisterCallback(org.qiyi.basecore.filedownload.FileDownloadCallback,java.lang.String) -> c
    void resumeDownload(org.qiyi.basecore.filedownload.FileDownloadStatus) -> c
    void registerCallback(org.qiyi.basecore.filedownload.FileDownloadCallback,java.lang.String) -> d
    void pauseDownload(org.qiyi.basecore.filedownload.FileDownloadStatus) -> d
    java.util.List getDownloads() -> getDownloads
    void deleteDownloads(java.util.List) -> deleteDownloads
    void addDownload(java.util.List) -> u
org.qiyi.basecore.filedownload.FileDownloadRemoteServiceInterface -> org.qiyi.basecore.filedownload.FileDownloadRemoteServiceInterface:
    void registerCallback(org.qiyi.basecore.filedownload.FileDownloadCallback,java.lang.String) -> d
    void unregisterCallback(org.qiyi.basecore.filedownload.FileDownloadCallback,java.lang.String) -> c
    void addDownload(java.util.List) -> u
    void pauseDownload(org.qiyi.basecore.filedownload.FileDownloadStatus) -> d
    void resumeDownload(org.qiyi.basecore.filedownload.FileDownloadStatus) -> c
    void deleteDownloads(java.util.List) -> deleteDownloads
    java.util.List getDownloads() -> getDownloads
org.qiyi.basecore.filedownload.FileDownloadRemoteServiceInterface$Stub -> org.qiyi.basecore.filedownload.FileDownloadRemoteServiceInterface$Stub:
    void <init>() -> <init>
    org.qiyi.basecore.filedownload.FileDownloadRemoteServiceInterface asInterface(android.os.IBinder) -> b
    android.os.IBinder asBinder() -> asBinder
    boolean onTransact(int,android.os.Parcel,android.os.Parcel,int) -> onTransact
org.qiyi.basecore.filedownload.FileDownloadRemoteServiceInterface$Stub$Proxy -> org.qiyi.basecore.filedownload.w:
    android.os.IBinder mRemote -> ck
    void <init>(android.os.IBinder) -> <init>
    android.os.IBinder asBinder() -> asBinder
    void registerCallback(org.qiyi.basecore.filedownload.FileDownloadCallback,java.lang.String) -> d
    void unregisterCallback(org.qiyi.basecore.filedownload.FileDownloadCallback,java.lang.String) -> c
    void addDownload(java.util.List) -> u
    void pauseDownload(org.qiyi.basecore.filedownload.FileDownloadStatus) -> d
    void resumeDownload(org.qiyi.basecore.filedownload.FileDownloadStatus) -> c
    void deleteDownloads(java.util.List) -> deleteDownloads
    java.util.List getDownloads() -> getDownloads
org.qiyi.basecore.filedownload.FileDownloadStatus -> org.qiyi.basecore.filedownload.FileDownloadStatus:
    long serialVersionUID -> serialVersionUID
    int MOBILE_4G -> MOBILE_4G
    int MOBILE_4G_OR_3G -> MOBILE_4G_OR_3G
    long bytes_downloaded_so_far -> bytes_downloaded_so_far
    long total_size_bytes -> total_size_bytes
    int status -> status
    int reason -> reason
    org.qiyi.basecore.filedownload.FileDownloadStatus$DownloadConfiguration mDownloadConfiguration -> mDownloadConfiguration
    java.lang.String realDownloadUrl -> realDownloadUrl
    java.lang.String downloadedFileAbsolutePath -> downloadedFileAbsolutePath
    android.os.Parcelable$Creator CREATOR -> CREATOR
    void <init>(org.qiyi.basecore.filedownload.FileDownloadStatus$DownloadConfiguration) -> <init>
    void <init>(android.os.Parcel) -> <init>
    void <init>() -> <init>
    java.io.File getDownloadedFile() -> getDownloadedFile
    float getDownloadPercent() -> getDownloadPercent
    java.lang.String getDownloadedFileAbsolutePath(android.content.Context) -> getDownloadedFileAbsolutePath
    boolean checkDownloadDirectory() -> checkDownloadDirectory
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    org.qiyi.basecore.filedownload.FileDownloadNotification getDownloadNotification(android.content.Context) -> getDownloadNotification
    java.lang.Boolean canDownload(org.qiyi.basecore.utils.NetworkStatus) -> canDownload
    java.lang.String getDownloadUrl() -> getDownloadUrl
    void setDownloadUrl(java.lang.String) -> setDownloadUrl
    int getIdAsInteger() -> getIdAsInteger
    java.lang.String getId() -> getId
    java.lang.String toString() -> toString
    boolean needPersistant() -> needPersistant
    void <clinit>() -> <clinit>
org.qiyi.basecore.filedownload.FileDownloadStatus$1 -> org.qiyi.basecore.filedownload.x:
    void <init>() -> <init>
    org.qiyi.basecore.filedownload.FileDownloadStatus createFromParcel(android.os.Parcel) -> b
    org.qiyi.basecore.filedownload.FileDownloadStatus[] newArray(int) -> l
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
org.qiyi.basecore.filedownload.FileDownloadStatus$DownloadConfiguration -> org.qiyi.basecore.filedownload.FileDownloadStatus$DownloadConfiguration:
    long serialVersionUID -> serialVersionUID
    int DEFAULT_MAX_RETRY_FOR_NET -> DEFAULT_MAX_RETRY_FOR_NET
    long targetSize -> targetSize
    int mobileNetType -> mobileNetType
    int priority -> priority
    int INTER_PRIORITY_UPPER_BOUND -> INTER_PRIORITY_UPPER_BOUND
    int currentInterPriority -> currentInterPriority
    int interPriority -> interPriority
    java.lang.String downloadUrl -> downloadUrl
    java.lang.String downloadedFilePath -> downloadedFilePath
    java.lang.String downloadedFileName -> downloadedFileName
    org.qiyi.basecore.filedownload.FileDownloadNotificationConfiguration fileDownloadNotification -> fileDownloadNotification
    boolean allowedDownloadNotUnderWifi -> allowedDownloadNotUnderWifi
    boolean forceToResume -> forceToResume
    boolean isSupportResume -> isSupportResume
    java.lang.String type -> type
    int maxRetryForNet -> maxRetryForNet
    java.io.Serializable customObj -> customObj
    void <init>(java.lang.String,java.lang.String,java.lang.String,org.qiyi.basecore.filedownload.FileDownloadNotificationConfiguration,boolean,boolean,boolean,java.io.Serializable,int,int,long,int) -> <init>
    void <init>(java.lang.String,java.lang.String,java.lang.String,org.qiyi.basecore.filedownload.FileDownloadNotificationConfiguration,boolean,boolean,boolean,java.io.Serializable) -> <init>
    void <init>(java.lang.String,java.lang.String,java.lang.String,org.qiyi.basecore.filedownload.FileDownloadNotificationConfiguration,boolean,boolean,boolean,java.io.Serializable,int,int) -> <init>
    java.lang.String getId() -> getId
    java.lang.String getType() -> getType
    void setType(java.lang.String) -> setType
    int getMaxLoad() -> getMaxLoad
    boolean isValid() -> isValid
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    int access$000(org.qiyi.basecore.filedownload.FileDownloadStatus$DownloadConfiguration) -> access$000
org.qiyi.basecore.filedownload.FileDownloadStatus$IOnCompleted -> org.qiyi.basecore.filedownload.y:
    void onCompleted(android.content.Context,org.qiyi.basecore.filedownload.FileDownloadStatus) -> a
org.qiyi.basecore.filedownload.FileDownloadTask -> org.qiyi.basecore.filedownload.z:
    java.util.concurrent.ThreadFactory sThreadFactory -> eF
    int CPU_COUNT -> aC
    int MAXIMUM_POOL_SIZE -> eG
    java.util.concurrent.BlockingQueue sPoolWorkQueue -> eH
    long lastOnDownloadProgressSize -> eI
    long lastOnDownloadProgressTime -> eJ
    java.util.concurrent.Future currentFuture -> eK
    java.util.concurrent.ThreadPoolExecutor THREAD_POOL_EXECUTOR -> eL
    org.qiyi.basecore.filedownload.FileDownloadNotification downloadNotification -> eM
    org.qiyi.basecore.filedownload.FileDownloadDBHelper mDbHelper -> eu
    android.content.Context mContext -> mContext
    int currentRetryForNet -> eN
    boolean priorityChangedInQueue -> eO
    org.qiyi.basecore.filedownload.FileDownloadCallbackHelper fileDownloadCallbackHelper -> et
    org.qiyi.basecore.filedownload.FileDownloadStatus fileDownloadStatus -> eP
    void <init>(android.content.Context,org.qiyi.basecore.filedownload.FileDownloadStatus,org.qiyi.basecore.filedownload.FileDownloadCallbackHelper,org.qiyi.basecore.filedownload.FileDownloadDBHelper) -> <init>
    void execute() -> execute
    boolean canExecute(int) -> m
    void onPaused(android.util.Pair,boolean) -> a
    void onFailed(android.util.Pair,boolean) -> b
    void onCompleted(boolean) -> h
    void onDownloadProgress(long,boolean) -> a
    boolean checkOnProgressFrequency() -> bl
    boolean isSameType(org.qiyi.basecore.filedownload.FileDownloadTask) -> b
    void pause(android.util.Pair,boolean) -> c
    boolean isDownloading() -> bm
    void updateDownloadConfiguration(android.content.Context,org.qiyi.basecore.filedownload.FileDownloadStatus$DownloadConfiguration) -> a
    boolean shouldRestartForNet(org.qiyi.basecore.utils.NetworkStatus) -> b
    boolean getIsRestartAndSet() -> bn
    void <clinit>() -> <clinit>
org.qiyi.basecore.filedownload.FileDownloadTask$1 -> org.qiyi.basecore.filedownload.aa:
    java.util.concurrent.atomic.AtomicInteger mCount -> cJ
    void <init>() -> <init>
    java.lang.Thread newThread(java.lang.Runnable) -> newThread
org.qiyi.basecore.filedownload.FileDownloadTask$2 -> org.qiyi.basecore.filedownload.ab:
    void <init>() -> <init>
    int compare(java.lang.Runnable,java.lang.Runnable) -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
org.qiyi.basecore.filedownload.FileDownloadTask$3 -> org.qiyi.basecore.filedownload.ac:
    void <init>(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue,java.util.concurrent.ThreadFactory) -> <init>
    java.util.concurrent.RunnableFuture newTaskFor(java.util.concurrent.Callable) -> newTaskFor
org.qiyi.basecore.filedownload.FileDownloadThread -> org.qiyi.basecore.filedownload.ad:
    org.qiyi.basecore.filedownload.FileDownloadStatus fileDownloadStatus -> eP
    android.content.Context mContext -> mContext
    org.qiyi.basecore.filedownload.IChangeImp mIChange -> eQ
    void <init>(org.qiyi.basecore.filedownload.FileDownloadStatus,android.content.Context,org.qiyi.basecore.filedownload.IChangeImp) -> <init>
    java.lang.Object call() -> call
    void execute() -> execute
    boolean clearFile(java.io.File) -> c
    boolean transferData(java.net.HttpURLConnection,boolean,java.io.File) -> a
    void beforeReturn(java.io.InputStream,java.io.OutputStream) -> a
    boolean checkAvailableSpace() -> bo
    void addRequestHeaders(java.net.HttpURLConnection,long) -> a
    android.util.Pair checkNetwork() -> bp
    boolean checkIfKeepExecute(android.content.Context) -> i
    java.lang.String getUserAgentInfo() -> getUserAgentInfo
    int getPriority() -> getPriority
org.qiyi.basecore.filedownload.FileDownloadTools -> org.qiyi.basecore.filedownload.ae:
    java.io.File getDownloadPath(android.content.Context) -> j
    java.io.File fixDownloadFile(android.content.Context,java.lang.String) -> d
    java.lang.String hashKeyForDisk(java.lang.String) -> H
    java.lang.String bytesToHexString(byte[]) -> bytesToHexString
org.qiyi.basecore.filedownload.IChangeImp -> org.qiyi.basecore.filedownload.af:
    java.util.concurrent.Callable currentThread -> eR
    void <init>() -> <init>
    void onPaused(android.util.Pair,boolean) -> a
    void onFailed(android.util.Pair,boolean) -> b
    void onCompleted(boolean) -> h
    void onDownloadUrlRedirect(java.lang.String,org.qiyi.basecore.filedownload.FileDownloadStatus) -> b
    void onDownloadProgress(long,boolean) -> a
org.qiyi.basecore.filedownload.PriorityFutureTask -> org.qiyi.basecore.filedownload.ag:
    java.util.concurrent.Callable callable -> eS
    void <init>(java.util.concurrent.Callable) -> <init>
    int getPriority() -> getPriority
org.qiyi.basecore.filedownload.PriorityFutureTask$PriorityCallable -> org.qiyi.basecore.filedownload.ah:
    int getPriority() -> getPriority
org.qiyi.basecore.imageloader.CustomRunnable -> org.qiyi.basecore.imageloader.a:
    void <init>() -> <init>
    java.lang.Object getIdentity() -> bq
    void run() -> run
    java.lang.String getSubIdentity() -> br
    void onResult(org.qiyi.basecore.imageloader.Resource,boolean) -> a
    org.qiyi.basecore.imageloader.Resource getResult() -> bs
org.qiyi.basecore.imageloader.CustomThreadPoolExecutor -> org.qiyi.basecore.imageloader.b:
    java.util.concurrent.ConcurrentHashMap mRunningTaskMap -> eT
    java.util.Map mSameIdentityTaskMap -> mSameIdentityTaskMap
    void <init>(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue,java.util.concurrent.ThreadFactory,java.util.concurrent.RejectedExecutionHandler,java.util.Map) -> <init>
    void afterExecute(java.lang.Runnable,java.lang.Throwable) -> afterExecute
    void beforeExecute(java.lang.Thread,java.lang.Runnable) -> beforeExecute
    void execute(java.lang.Runnable) -> execute
org.qiyi.basecore.imageloader.DiskCache -> org.qiyi.basecore.imageloader.c:
    android.util.SparseArray mCacheDirMap -> eU
    android.util.SparseArray mExternalCacheDirMap -> eV
    java.lang.String CACHE_DIR_DEFAULT -> eW
    java.lang.String CACHE_DIR_AD -> eX
    long mSize -> mSize
    java.lang.Thread mDeleteThread -> eY
    android.util.SparseArray xxx -> eZ
    android.util.SparseArray sDirNameTypePairs -> fa
    android.util.SparseArray sDirMaxSizePairs -> fb
    void <init>() -> <init>
    void updateMaxSize(int,int) -> b
    void checkSize(android.content.Context,int) -> a
    void putBitmapToDisk(android.content.Context,java.lang.String,org.qiyi.basecore.imageloader.Resource,org.qiyi.basecore.imageloader.ImageLoader$ImageType,int) -> a
    org.qiyi.basecore.imageloader.Resource getBitmapFromDisk(android.content.Context,java.lang.String,org.qiyi.basecore.imageloader.ImageLoader$ImageType,boolean,int,boolean) -> a
    org.qiyi.basecore.imageloader.Resource getBitmapFromDisk(android.content.Context,java.lang.String,org.qiyi.basecore.imageloader.ImageLoader$ImageType,boolean,int) -> a
    boolean hasResource(android.content.Context,java.lang.String,int) -> a
    java.io.File getDir(android.content.Context,int) -> b
    java.lang.String getDirNameByType(int) -> n
    long getDirMaxSizeByType(int) -> o
    java.io.File getRFile(android.content.Context,java.lang.String,int) -> b
    java.io.File getWFile(android.content.Context,java.lang.String,int) -> c
    java.io.File getFile(android.content.Context,java.lang.String,int) -> d
    java.lang.String hashKeyForDisk(java.lang.String) -> H
    java.lang.String bytesToHexString(byte[]) -> bytesToHexString
    java.io.File access$000(org.qiyi.basecore.imageloader.DiskCache,android.content.Context,int) -> a
    long access$102(org.qiyi.basecore.imageloader.DiskCache,long) -> a
    long access$100(org.qiyi.basecore.imageloader.DiskCache) -> a
    long access$200(org.qiyi.basecore.imageloader.DiskCache,int) -> a
    java.lang.Thread access$302(org.qiyi.basecore.imageloader.DiskCache,java.lang.Thread) -> a
    void <clinit>() -> <clinit>
org.qiyi.basecore.imageloader.DiskCache$1 -> org.qiyi.basecore.imageloader.d:
    android.content.Context val$context -> ev
    int val$diskCacheType -> fc
    org.qiyi.basecore.imageloader.DiskCache this$0 -> fd
    void <init>(org.qiyi.basecore.imageloader.DiskCache,android.content.Context,int) -> <init>
    void run() -> run
org.qiyi.basecore.imageloader.DiskCache$2 -> org.qiyi.basecore.imageloader.e:
    int[] $SwitchMap$org$qiyi$basecore$imageloader$ImageLoader$ImageType -> fe
    void <clinit>() -> <clinit>
org.qiyi.basecore.imageloader.DiskCache$Sorter -> org.qiyi.basecore.imageloader.f:
    void <init>() -> <init>
    int compare(java.io.File,java.io.File) -> c
    int compare(java.lang.Object,java.lang.Object) -> compare
org.qiyi.basecore.imageloader.ImageLoader -> org.qiyi.basecore.imageloader.ImageLoader:
    org.qiyi.basecore.imageloader.ImageLoader$ImageLoadTracker sImageLoadTracker -> sImageLoadTracker
    org.qiyi.basecore.imageloader.ImageLoader$IGetFrescoSwitch sIGetFrescoSwitch -> sIGetFrescoSwitch
    java.lang.String TAG -> TAG
    java.util.concurrent.ThreadFactory sThreadFactoryDisk -> sThreadFactoryDisk
    java.util.concurrent.ThreadFactory sThreadFactoryNet -> sThreadFactoryNet
    java.util.Map mSameIdentityTaskMap -> mSameIdentityTaskMap
    org.qiyi.basecore.imageloader.CustomThreadPoolExecutor EXECUTOR_FOR_DISK -> EXECUTOR_FOR_DISK
    org.qiyi.basecore.imageloader.CustomThreadPoolExecutor EXECUTOR_FOR_NETWORK -> EXECUTOR_FOR_NETWORK
    org.qiyi.basecore.imageloader.ImageLoader$MessageMonitor mMessageMonitor -> mMessageMonitor
    org.qiyi.basecore.imageloader.ImageLoader$BitmapToDiskMonitor mMessageMonitor2 -> mMessageMonitor2
    org.qiyi.basecore.imageloader.ImgCacheMap mImageCacheMap -> mImageCacheMap
    org.qiyi.basecore.imageloader.DiskCache mDiskCache -> mDiskCache
    org.qiyi.basecore.imageloader.ImageLoader mImageLoader -> mImageLoader
    java.lang.Object sInitLock -> sInitLock
    long sTotalLoadImageCount -> sTotalLoadImageCount
    long sLoadImageFromNetCount -> sLoadImageFromNetCount
    long sLoadImageFromDiskCount -> sLoadImageFromDiskCount
    org.qiyi.basecore.imageloader.ImageLoader$IGetFrescoSwitch getsIGetFrescoSwitch() -> getsIGetFrescoSwitch
    void setsIGetFrescoSwitch(org.qiyi.basecore.imageloader.ImageLoader$IGetFrescoSwitch) -> setsIGetFrescoSwitch
    void <init>() -> <init>
    org.qiyi.basecore.imageloader.ImageLoader getInstance() -> getInstance
    void updateDiskCacheMaxSize(int) -> updateDiskCacheMaxSize
    java.lang.Boolean isGIf(java.lang.String) -> isGIf
    void loadImage(android.widget.ImageView) -> loadImage
    void loadGifImage(android.widget.ImageView) -> loadGifImage
    void loadImageFromLocalExistImg(android.widget.ImageView) -> loadImageFromLocalExistImg
    void loadImage(android.widget.ImageView,int) -> loadImage
    void loadImageWithPNG(android.widget.ImageView) -> loadImageWithPNG
    void loadImageCircle(android.widget.ImageView) -> loadImageCircle
    java.lang.Object getBigMap(java.lang.String,org.qiyi.basecore.imageloader.ImageLoader$ImageType) -> getBigMap
    void loadImage(android.content.Context,java.lang.String,org.qiyi.basecore.imageloader.ImageLoader$ImageListener,boolean) -> loadImage
    void loadImage(android.widget.ImageView,org.qiyi.basecore.imageloader.ImageLoader$ImageListener,boolean) -> loadImage
    void loadImage(android.content.Context,java.lang.String,android.widget.ImageView,org.qiyi.basecore.imageloader.ImageLoader$ImageType,boolean,org.qiyi.basecore.imageloader.ImageLoader$ImageListener,int,boolean) -> loadImage
    void loadImage(android.content.Context,java.lang.String,android.widget.ImageView,org.qiyi.basecore.imageloader.ImageLoader$ImageType,boolean,org.qiyi.basecore.imageloader.ImageLoader$ImageListener,int) -> loadImage
    void setPauseWork(boolean) -> setPauseWork
    org.qiyi.basecore.imageloader.Resource getBitmapFromMemory(java.lang.String,org.qiyi.basecore.imageloader.ImageLoader$ImageType) -> getBitmapFromMemory
    void putResourceToMemory(java.lang.String,org.qiyi.basecore.imageloader.Resource,org.qiyi.basecore.imageloader.ImageLoader$ImageType) -> putResourceToMemory
    void getBitmapFromDisk(android.content.Context,android.widget.ImageView,org.qiyi.basecore.imageloader.ImageLoader$ImageType,boolean,org.qiyi.basecore.imageloader.ImageLoader$ImageListener,int,boolean) -> getBitmapFromDisk
    void getBitmapFromDisk(android.content.Context,java.lang.String,org.qiyi.basecore.imageloader.ImageLoader$ImageType,boolean,org.qiyi.basecore.imageloader.ImageLoader$ImageListener,int,boolean) -> getBitmapFromDisk
    org.qiyi.basecore.imageloader.Resource parseImage(java.io.InputStream,org.qiyi.basecore.imageloader.ImageLoader$ImageType,android.content.Context) -> parseImage
    byte[] toByteArray(java.io.InputStream) -> toByteArray
    void getBitmapRawData(android.content.Context,java.lang.String,boolean,org.qiyi.basecore.imageloader.ImageLoader$ImageListener) -> getBitmapRawData
    void getBitmapRawData(android.content.Context,java.lang.String,boolean,org.qiyi.basecore.imageloader.ImageLoader$ImageListener,boolean,boolean) -> getBitmapRawData
    void putBitmapToCache(android.content.Context,java.lang.String,android.graphics.Bitmap) -> putBitmapToCache
    org.qiyi.basecore.imageloader.ImageLoader$IGetFrescoSwitch access$000() -> access$000
    org.qiyi.basecore.imageloader.DiskCache access$400(org.qiyi.basecore.imageloader.ImageLoader) -> access$400
    void access$500(org.qiyi.basecore.imageloader.ImageLoader,java.lang.String,org.qiyi.basecore.imageloader.Resource,org.qiyi.basecore.imageloader.ImageLoader$ImageType) -> access$500
    long access$608() -> access$608
    long access$600() -> access$600
    org.qiyi.basecore.imageloader.ImageLoader$MessageMonitor access$700(org.qiyi.basecore.imageloader.ImageLoader) -> access$700
    long access$808() -> access$808
    long access$800() -> access$800
    org.qiyi.basecore.imageloader.ImageLoader$BitmapToDiskMonitor access$900(org.qiyi.basecore.imageloader.ImageLoader) -> access$900
    org.qiyi.basecore.imageloader.CustomThreadPoolExecutor access$1000(org.qiyi.basecore.imageloader.ImageLoader) -> access$1000
    void <clinit>() -> <clinit>
org.qiyi.basecore.imageloader.ImageLoader$1 -> org.qiyi.basecore.imageloader.g:
    java.util.concurrent.atomic.AtomicInteger mCount -> cJ
    org.qiyi.basecore.imageloader.ImageLoader this$0 -> ff
    void <init>(org.qiyi.basecore.imageloader.ImageLoader) -> <init>
    java.lang.Thread newThread(java.lang.Runnable) -> newThread
org.qiyi.basecore.imageloader.ImageLoader$2 -> org.qiyi.basecore.imageloader.h:
    java.util.concurrent.atomic.AtomicInteger mCount -> cJ
    org.qiyi.basecore.imageloader.ImageLoader this$0 -> ff
    void <init>(org.qiyi.basecore.imageloader.ImageLoader) -> <init>
    java.lang.Thread newThread(java.lang.Runnable) -> newThread
org.qiyi.basecore.imageloader.ImageLoader$3 -> org.qiyi.basecore.imageloader.i:
    long serialVersionUID -> serialVersionUID
    org.qiyi.basecore.imageloader.ImageLoader this$0 -> ff
    void <init>(org.qiyi.basecore.imageloader.ImageLoader) -> <init>
    boolean removeEldestEntry(java.util.Map$Entry) -> removeEldestEntry
org.qiyi.basecore.imageloader.ImageLoader$4 -> org.qiyi.basecore.imageloader.j:
    boolean val$isFullQuality -> fg
    android.content.Context val$context -> ev
    void <init>(boolean,android.content.Context) -> <init>
    android.graphics.Bitmap convert(byte[],java.lang.String) -> a
    boolean isSuccessData(android.graphics.Bitmap) -> a
    boolean isSuccessData(java.lang.Object) -> isSuccessData
    java.lang.Object convert(byte[],java.lang.String) -> convert
org.qiyi.basecore.imageloader.ImageLoader$5 -> org.qiyi.basecore.imageloader.k:
    org.qiyi.basecore.imageloader.ImageLoader$ImageListener val$listener -> fh
    java.lang.String val$url -> fi
    void <init>(org.qiyi.basecore.imageloader.ImageLoader$ImageListener,java.lang.String) -> <init>
    void onResponse(android.graphics.Bitmap) -> b
    void onErrorResponse(org.qiyi.net.exception.HttpException) -> onErrorResponse
    void onResponse(java.lang.Object) -> onResponse
org.qiyi.basecore.imageloader.ImageLoader$6 -> org.qiyi.basecore.imageloader.l:
    org.qiyi.basecore.imageloader.ImageLoader$ImageListener val$listener -> fh
    boolean val$needRequest -> fj
    android.content.Context val$context -> ev
    java.lang.String val$url -> fi
    boolean val$isFullQuality -> fg
    void <init>(org.qiyi.basecore.imageloader.ImageLoader$ImageListener,boolean,android.content.Context,java.lang.String,boolean) -> <init>
    void onSuccessResponse(android.graphics.Bitmap,java.lang.String,boolean) -> onSuccessResponse
    void onErrorResponse(int) -> onErrorResponse
org.qiyi.basecore.imageloader.ImageLoader$6$1 -> org.qiyi.basecore.imageloader.m:
    org.qiyi.basecore.imageloader.ImageLoader$6 this$0 -> fk
    void <init>(org.qiyi.basecore.imageloader.ImageLoader$6) -> <init>
    void onSuccessResponse(android.graphics.Bitmap,java.lang.String,boolean) -> onSuccessResponse
    void onErrorResponse(int) -> onErrorResponse
org.qiyi.basecore.imageloader.ImageLoader$7 -> org.qiyi.basecore.imageloader.n:
    boolean val$needCache -> fl
    android.content.Context val$context -> ev
    org.qiyi.basecore.imageloader.ImageLoader$ImageListener val$listener -> fh
    void <init>(boolean,android.content.Context,org.qiyi.basecore.imageloader.ImageLoader$ImageListener) -> <init>
    void onSuccessResponse(android.graphics.Bitmap,java.lang.String,boolean) -> onSuccessResponse
    void onErrorResponse(int) -> onErrorResponse
org.qiyi.basecore.imageloader.ImageLoader$BitmapToDiskMonitor -> org.qiyi.basecore.imageloader.o:
    java.util.concurrent.LinkedBlockingDeque mMsgQueue -> fm
    java.lang.Boolean mStop -> fn
    org.qiyi.basecore.imageloader.ImageLoader this$0 -> ff
    void <init>(org.qiyi.basecore.imageloader.ImageLoader) -> <init>
    void addRequest(android.content.Context,java.lang.String,org.qiyi.basecore.imageloader.Resource,org.qiyi.basecore.imageloader.ImageLoader$ImageType,int) -> b
    void run() -> run
    void <init>(org.qiyi.basecore.imageloader.ImageLoader,org.qiyi.basecore.imageloader.ImageLoader$1) -> <init>
org.qiyi.basecore.imageloader.ImageLoader$BitmapToDiskMonitor$BitmapInfo -> org.qiyi.basecore.imageloader.p:
    android.content.Context mContext -> mContext
    java.lang.String mUrl -> mUrl
    org.qiyi.basecore.imageloader.Resource mResource -> fo
    org.qiyi.basecore.imageloader.ImageLoader$ImageType mType -> fp
    int mDiskCacheType -> fq
    org.qiyi.basecore.imageloader.ImageLoader$BitmapToDiskMonitor this$1 -> fr
    void <init>(org.qiyi.basecore.imageloader.ImageLoader$BitmapToDiskMonitor,android.content.Context,java.lang.String,org.qiyi.basecore.imageloader.Resource,org.qiyi.basecore.imageloader.ImageLoader$ImageType,int) -> <init>
    android.content.Context access$1100(org.qiyi.basecore.imageloader.ImageLoader$BitmapToDiskMonitor$BitmapInfo) -> a
    java.lang.String access$1200(org.qiyi.basecore.imageloader.ImageLoader$BitmapToDiskMonitor$BitmapInfo) -> b
    org.qiyi.basecore.imageloader.Resource access$1300(org.qiyi.basecore.imageloader.ImageLoader$BitmapToDiskMonitor$BitmapInfo) -> c
    org.qiyi.basecore.imageloader.ImageLoader$ImageType access$1400(org.qiyi.basecore.imageloader.ImageLoader$BitmapToDiskMonitor$BitmapInfo) -> d
    int access$1500(org.qiyi.basecore.imageloader.ImageLoader$BitmapToDiskMonitor$BitmapInfo) -> e
org.qiyi.basecore.imageloader.ImageLoader$CustomRunnableImp -> org.qiyi.basecore.imageloader.q:
    java.lang.ref.WeakReference mImageView -> fs
    java.lang.String mUrl -> mUrl
    org.qiyi.basecore.imageloader.ImageLoader$ImageType mImageType -> ft
    java.lang.ref.WeakReference bitmapWR -> fu
    boolean mIsFullQuality -> fv
    org.qiyi.basecore.imageloader.ImageLoader$ImageListener mImgListener -> fw
    int mDiskCacheType -> fq
    android.content.Context mAppContext -> mAppContext
    boolean mIsLoadLocalExistImage -> fx
    android.os.Handler mMainHandler -> fy
    void <init>(android.content.Context,android.widget.ImageView,org.qiyi.basecore.imageloader.ImageLoader$ImageType,boolean,org.qiyi.basecore.imageloader.ImageLoader$ImageListener,int,boolean) -> <init>
    void <init>(android.content.Context,java.lang.String,org.qiyi.basecore.imageloader.ImageLoader$ImageType,boolean,org.qiyi.basecore.imageloader.ImageLoader$ImageListener,int,boolean) -> <init>
    java.lang.Object getIdentity() -> bq
    java.lang.String getSubIdentity() -> br
    boolean isViewValide() -> bt
    void onResult(org.qiyi.basecore.imageloader.Resource,boolean) -> a
    org.qiyi.basecore.imageloader.Resource getResult() -> bs
    boolean validateProcess() -> bu
org.qiyi.basecore.imageloader.ImageLoader$CustomRunnableImp$1 -> org.qiyi.basecore.imageloader.r:
    org.qiyi.basecore.imageloader.Resource val$bt -> fz
    boolean val$isCached -> fA
    org.qiyi.basecore.imageloader.ImageLoader$CustomRunnableImp this$0 -> fB
    void <init>(org.qiyi.basecore.imageloader.ImageLoader$CustomRunnableImp,org.qiyi.basecore.imageloader.Resource,boolean) -> <init>
    void run() -> run
org.qiyi.basecore.imageloader.ImageLoader$DiskLoader -> org.qiyi.basecore.imageloader.s:
    org.qiyi.basecore.imageloader.ImageLoader this$0 -> ff
    void <init>(org.qiyi.basecore.imageloader.ImageLoader,android.content.Context,android.widget.ImageView,org.qiyi.basecore.imageloader.ImageLoader$ImageType,boolean,org.qiyi.basecore.imageloader.ImageLoader$ImageListener,int,boolean) -> <init>
    void <init>(org.qiyi.basecore.imageloader.ImageLoader,android.content.Context,java.lang.String,org.qiyi.basecore.imageloader.ImageLoader$ImageType,boolean,org.qiyi.basecore.imageloader.ImageLoader$ImageListener,int,boolean) -> <init>
    void run() -> run
    void processDiskBitmap() -> bv
org.qiyi.basecore.imageloader.ImageLoader$IGetFrescoSwitch -> org.qiyi.basecore.imageloader.t:
    boolean frescoEnabled() -> bw
    void sendStatistic() -> bx
org.qiyi.basecore.imageloader.ImageLoader$ImageDownloader -> org.qiyi.basecore.imageloader.u:
    org.qiyi.basecore.imageloader.ImageLoader this$0 -> ff
    void <init>(org.qiyi.basecore.imageloader.ImageLoader,android.content.Context,android.widget.ImageView,org.qiyi.basecore.imageloader.ImageLoader$ImageType,boolean,org.qiyi.basecore.imageloader.ImageLoader$ImageListener,int) -> <init>
    void <init>(org.qiyi.basecore.imageloader.ImageLoader,android.content.Context,java.lang.String,org.qiyi.basecore.imageloader.ImageLoader$ImageType,boolean,org.qiyi.basecore.imageloader.ImageLoader$ImageListener,int) -> <init>
    void run() -> run
    void processDownload() -> by
    void getBitmapStream(android.content.Context,java.lang.String,org.qiyi.basecore.imageloader.ImageLoader$ImageType) -> a
    void processResource(org.qiyi.basecore.imageloader.Resource) -> a
org.qiyi.basecore.imageloader.ImageLoader$ImageListener -> org.qiyi.basecore.imageloader.ImageLoader$ImageListener:
    void onSuccessResponse(android.graphics.Bitmap,java.lang.String,boolean) -> onSuccessResponse
    void onErrorResponse(int) -> onErrorResponse
org.qiyi.basecore.imageloader.ImageLoader$ImageLoadTracker -> org.qiyi.basecore.imageloader.v:
    java.util.Map record -> fC
    int mQiyiCount -> fD
    int mFrescoCount -> fE
    long mTotalTakes -> fF
    boolean hasPosted -> fG
    void <init>() -> <init>
    void updateTotalTakes(long) -> g
    void onAddTask(java.lang.String,boolean) -> f
    void onTaskComplete(java.lang.String,boolean,int) -> a
    java.lang.String getFromStr(int) -> p
org.qiyi.basecore.imageloader.ImageLoader$ImageLoadTracker$1 -> org.qiyi.basecore.imageloader.w:
    org.qiyi.basecore.imageloader.ImageLoader$ImageLoadTracker this$0 -> fH
    void <init>(org.qiyi.basecore.imageloader.ImageLoader$ImageLoadTracker) -> <init>
    boolean removeEldestEntry(java.util.Map$Entry) -> removeEldestEntry
org.qiyi.basecore.imageloader.ImageLoader$ImageType -> org.qiyi.basecore.imageloader.x:
    org.qiyi.basecore.imageloader.ImageLoader$ImageType PNG -> fI
    org.qiyi.basecore.imageloader.ImageLoader$ImageType JPG -> fJ
    org.qiyi.basecore.imageloader.ImageLoader$ImageType CIRCLE -> fK
    org.qiyi.basecore.imageloader.ImageLoader$ImageType GIF -> fL
    org.qiyi.basecore.imageloader.ImageLoader$ImageType[] $VALUES -> fM
    org.qiyi.basecore.imageloader.ImageLoader$ImageType[] values() -> values
    org.qiyi.basecore.imageloader.ImageLoader$ImageType valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
org.qiyi.basecore.imageloader.ImageLoader$MessageMonitor -> org.qiyi.basecore.imageloader.y:
    java.util.concurrent.LinkedBlockingDeque mMsgQueue -> fm
    java.util.concurrent.LinkedBlockingDeque mMsgQueue2 -> fN
    java.lang.Object mLockForWait -> fO
    java.lang.Boolean mStop -> fn
    java.lang.Boolean mPause -> fP
    org.qiyi.basecore.imageloader.ImageLoader this$0 -> ff
    void <init>(org.qiyi.basecore.imageloader.ImageLoader) -> <init>
    void setPause(java.lang.Boolean) -> a
    void addRunnable(java.lang.Runnable) -> a
    void requestWait() -> bz
    void cancelWait() -> bA
    void run() -> run
    void <init>(org.qiyi.basecore.imageloader.ImageLoader,org.qiyi.basecore.imageloader.ImageLoader$1) -> <init>
    void access$300(org.qiyi.basecore.imageloader.ImageLoader$MessageMonitor,java.lang.Boolean) -> a
org.qiyi.basecore.imageloader.ImgCacheMap -> org.qiyi.basecore.imageloader.z:
    org.qiyi.basecore.imageloader.ImgCacheMap$KiloByteBitmapCache mLruMemCache -> fQ
    void <init>(int,boolean) -> <init>
    org.qiyi.basecore.imageloader.Resource putResource(java.lang.String,org.qiyi.basecore.imageloader.Resource) -> a
    org.qiyi.basecore.imageloader.Resource getResource(java.lang.String) -> I
org.qiyi.basecore.imageloader.ImgCacheMap$KiloByteBitmapCache -> org.qiyi.basecore.imageloader.aa:
    void <init>(int) -> <init>
    org.qiyi.basecore.imageloader.ImgCacheMap$KiloByteBitmapCache create(int,boolean) -> b
org.qiyi.basecore.imageloader.Resource -> org.qiyi.basecore.imageloader.ab:
    java.lang.Object resource -> fR
    void <init>() -> <init>
    void setResource(java.lang.Object) -> h
    java.lang.Object getResource() -> bB
org.qiyi.basecore.imageloader.gif.GifDecode.GifDecoder -> org.qiyi.basecore.imageloader.a.a.a:
    java.lang.String TAG -> TAG
    android.graphics.Bitmap$Config BITMAP_CONFIG -> fS
    int[] act -> fT
    java.nio.ByteBuffer rawData -> fU
    byte[] block -> fV
    short[] prefix -> fW
    byte[] suffix -> fX
    byte[] pixelStack -> fY
    byte[] mainPixels -> fZ
    int[] mainScratch -> ga
    int framePointer -> gb
    byte[] data -> data
    org.qiyi.basecore.imageloader.gif.GifHeader header -> gc
    android.graphics.Bitmap previousImage -> gd
    boolean savePrevious -> ge
    int status -> status
    void <init>() -> <init>
    byte[] getData() -> getData
    void advance() -> advance
    int getDelay(int) -> q
    int getFrameCount() -> getFrameCount
    int getCurrentFrameIndex() -> bC
    void resetFrameIndex() -> bD
    android.graphics.Bitmap getNextFrame() -> bE
    void clear() -> clear
    void setData(org.qiyi.basecore.imageloader.gif.GifHeader,byte[]) -> a
    android.graphics.Bitmap setPixels(org.qiyi.basecore.imageloader.gif.GifFrame,org.qiyi.basecore.imageloader.gif.GifFrame) -> a
    void decodeBitmapData(org.qiyi.basecore.imageloader.gif.GifFrame) -> a
    int read() -> read
    int readBlock() -> bF
    android.graphics.Bitmap getNextBitmap() -> bG
    void setAlpha(android.graphics.Bitmap) -> c
    void <clinit>() -> <clinit>
org.qiyi.basecore.imageloader.gif.GifDecode.GifDrawableDecode -> org.qiyi.basecore.imageloader.a.a.b:
    java.lang.String TAG -> TAG
    org.qiyi.basecore.imageloader.gif.GifDecode.GifDrawableDecode$GifHeaderParserPool PARSER_POOL -> gf
    org.qiyi.basecore.imageloader.gif.GifDecode.GifDrawableDecode$GifDecoderPool DECODER_POOL -> gg
    org.qiyi.basecore.imageloader.gif.GifDecode.GifDrawableDecode$GifHeaderParserPool parserPool -> gh
    org.qiyi.basecore.imageloader.gif.GifDecode.GifDrawableDecode$GifDecoderPool decoderPool -> gi
    android.content.Context context -> context
    void <init>(android.content.Context) -> <init>
    org.qiyi.basecore.imageloader.gif.GifDrawable decode(java.io.InputStream,int,int) -> a
    byte[] inputStreamToBytes(java.io.InputStream) -> a
    org.qiyi.basecore.imageloader.gif.GifDrawable decode(byte[],int,int,org.qiyi.basecore.imageloader.gif.GifDecode.GifHeaderParser,org.qiyi.basecore.imageloader.gif.GifDecode.GifDecoder) -> a
    android.graphics.Bitmap decodeFirstFrame(org.qiyi.basecore.imageloader.gif.GifDecode.GifDecoder,org.qiyi.basecore.imageloader.gif.GifHeader,byte[]) -> a
    void <clinit>() -> <clinit>
org.qiyi.basecore.imageloader.gif.GifDecode.GifDrawableDecode$GifDecoderPool -> org.qiyi.basecore.imageloader.a.a.c:
    java.util.Queue pool -> gj
    void <init>() -> <init>
    org.qiyi.basecore.imageloader.gif.GifDecode.GifDecoder obtain() -> bH
    void release(org.qiyi.basecore.imageloader.gif.GifDecode.GifDecoder) -> a
org.qiyi.basecore.imageloader.gif.GifDecode.GifDrawableDecode$GifHeaderParserPool -> org.qiyi.basecore.imageloader.a.a.d:
    java.util.Queue pool -> gj
    void <init>() -> <init>
    org.qiyi.basecore.imageloader.gif.GifDecode.GifHeaderParser obtain(byte[]) -> e
    void release(org.qiyi.basecore.imageloader.gif.GifDecode.GifHeaderParser) -> a
org.qiyi.basecore.imageloader.gif.GifDecode.GifHeaderParser -> org.qiyi.basecore.imageloader.a.a.e:
    byte[] block -> fV
    java.nio.ByteBuffer rawData -> fU
    org.qiyi.basecore.imageloader.gif.GifHeader header -> gc
    int blockSize -> gk
    void <init>() -> <init>
    org.qiyi.basecore.imageloader.gif.GifDecode.GifHeaderParser setData(byte[]) -> f
    void clear() -> clear
    void reset() -> reset
    org.qiyi.basecore.imageloader.gif.GifHeader parseHeader() -> bI
    void readContents() -> bJ
    void readGraphicControlExt() -> bK
    void readBitmap() -> bL
    void readNetscapeExt() -> bM
    void readHeader() -> bN
    void readLSD() -> bO
    int[] readColorTable(int) -> r
    void skipImageData() -> bP
    void skip() -> bQ
    int readBlock() -> bF
    int read() -> read
    int readShort() -> bR
    boolean err() -> bS
org.qiyi.basecore.imageloader.gif.GifDecode.Util -> org.qiyi.basecore.imageloader.a.a.f:
    char[] HEX_CHAR_ARRAY -> gl
    char[] SHA_256_CHARS -> gm
    char[] SHA_1_CHARS -> gn
    java.util.Queue createQueue(int) -> s
    void <clinit>() -> <clinit>
org.qiyi.basecore.imageloader.gif.GifDrawable -> org.qiyi.basecore.imageloader.a.a:
    java.lang.String DEBUGKEY -> go
    android.graphics.Paint paint -> paint
    android.graphics.Rect destRect -> gp
    org.qiyi.basecore.imageloader.gif.GifDrawable$GifState state -> gq
    org.qiyi.basecore.imageloader.gif.GifDecode.GifDecoder decoder -> gr
    java.lang.Boolean isRunning -> gs
    java.lang.Boolean isRecycled -> gt
    int gifStatus -> gu
    int loopCount -> gv
    int maxLoopCount -> gw
    int PLAY_FOREVER -> gx
    boolean applyGravity -> gy
    long delayTime -> gz
    long currentInvalidateTime -> gA
    long nextTargetTime -> gB
    int currentindex -> gC
    android.graphics.Bitmap currentFrame -> gD
    int totlaFrames -> gE
    java.lang.Runnable invaliteTask -> gF
    void <init>(android.content.Context,int,int,org.qiyi.basecore.imageloader.gif.GifHeader,byte[],android.graphics.Bitmap,boolean) -> <init>
    void <init>(org.qiyi.basecore.imageloader.gif.GifDrawable$GifState) -> <init>
    byte[] getData() -> getData
    int getFrameCount() -> getFrameCount
    void start() -> start
    void stop() -> stop
    boolean isRunning() -> isRunning
    boolean setVisible(boolean,boolean) -> setVisible
    int getIntrinsicWidth() -> getIntrinsicWidth
    int getIntrinsicHeight() -> getIntrinsicHeight
    void onBoundsChange(android.graphics.Rect) -> onBoundsChange
    boolean onLevelChange(int) -> onLevelChange
    void setStatus(int) -> setStatus
    void checkStatus() -> bT
    void draw(android.graphics.Canvas) -> draw
    void setAlpha(int) -> setAlpha
    void setColorFilter(android.graphics.ColorFilter) -> setColorFilter
    int getOpacity() -> getOpacity
    void reset() -> reset
    android.graphics.drawable.Drawable$ConstantState getConstantState() -> getConstantState
    void <clinit>() -> <clinit>
org.qiyi.basecore.imageloader.gif.GifDrawable$1 -> org.qiyi.basecore.imageloader.a.b:
    org.qiyi.basecore.imageloader.gif.GifDrawable this$0 -> gG
    void <init>(org.qiyi.basecore.imageloader.gif.GifDrawable) -> <init>
    void run() -> run
org.qiyi.basecore.imageloader.gif.GifDrawable$GifState -> org.qiyi.basecore.imageloader.a.c:
    org.qiyi.basecore.imageloader.gif.GifHeader gifHeader -> gH
    byte[] data -> data
    android.content.Context context -> context
    int targetWidth -> gI
    int targetHeight -> gJ
    android.graphics.Bitmap firstFrame -> gK
    void <init>(org.qiyi.basecore.imageloader.gif.GifHeader,byte[],android.content.Context,int,int,android.graphics.Bitmap) -> <init>
    android.graphics.drawable.Drawable newDrawable(android.content.res.Resources) -> newDrawable
    android.graphics.drawable.Drawable newDrawable() -> newDrawable
    int getChangingConfigurations() -> getChangingConfigurations
org.qiyi.basecore.imageloader.gif.GifFrame -> org.qiyi.basecore.imageloader.a.d:
    int ix -> gL
    int iy -> gM
    int iw -> gN
    int ih -> gO
    boolean interlace -> gP
    boolean transparency -> gQ
    int dispose -> gR
    int transIndex -> gS
    int delay -> delay
    int bufferFrameStart -> gT
    int[] lct -> gU
    void <init>() -> <init>
org.qiyi.basecore.imageloader.gif.GifHeader -> org.qiyi.basecore.imageloader.a.e:
    int[] gct -> gV
    int status -> status
    int frameCount -> gW
    org.qiyi.basecore.imageloader.gif.GifFrame currentFrame -> gX
    java.util.List frames -> gY
    int width -> width
    int height -> height
    boolean gctFlag -> gZ
    int gctSize -> ha
    int bgIndex -> hb
    int pixelAspect -> hc
    int bgColor -> bgColor
    int loopCount -> gv
    void <init>() -> <init>
    int getNumFrames() -> bU
    int getStatus() -> getStatus
org.qiyi.basecore.jobquequ.AsyncJob -> org.qiyi.basecore.jobquequ.AsyncJob:
    void <init>(java.lang.Class) -> <init>
    void onAdded() -> bV
    void onCancel() -> onCancel
    boolean shouldReRunOnThrowable(java.lang.Throwable) -> b
    org.qiyi.basecore.jobquequ.AsyncJob priority(int) -> t
    org.qiyi.basecore.jobquequ.AsyncJob delayInMs(long) -> h
    org.qiyi.basecore.jobquequ.AsyncJob groupId(java.lang.String) -> J
    org.qiyi.basecore.jobquequ.AsyncJob jobTag(java.lang.String) -> K
    long execute(java.lang.Object[]) -> b
    void onPostExecutor(java.lang.Object) -> i
org.qiyi.basecore.jobquequ.BaseJob -> org.qiyi.basecore.jobquequ.a:
    int retryTimes -> hd
    java.lang.String groupId -> he
    java.lang.Object[] params -> hf
    java.lang.Class resultClassType -> hg
    long jobId -> hh
    boolean isCancel -> hi
    boolean ensureToMain -> hj
    java.lang.String jobTag -> hk
    int currentRunCount -> hl
    org.qiyi.basecore.jobquequ.DefaultJobHandler mJobHandler -> hm
    void <init>(java.lang.String,java.lang.Class) -> <init>
    void writeObject(java.io.ObjectOutputStream) -> writeObject
    void readObject(java.io.ObjectInputStream) -> readObject
    boolean isPersistent() -> isPersistent
    void onAdded() -> bV
    java.lang.Object onRun(java.lang.Object[]) -> c
    void onCallback(java.lang.Object) -> onCallback
    void onPostExecutor(java.lang.Object) -> i
    void onCancel() -> onCancel
    boolean shouldReRunOnThrowable(java.lang.Throwable) -> b
    org.qiyi.basecore.jobquequ.JobHolder$JobCallbackResult safeRun(int) -> u
    java.lang.String getRunGroupId() -> bW
    int getRetryLimit() -> bX
    org.qiyi.basecore.jobquequ.IJobHandler getJobHandler() -> bY
org.qiyi.basecore.jobquequ.BaseJob$1 -> org.qiyi.basecore.jobquequ.b:
    org.qiyi.basecore.jobquequ.BaseJob this$0 -> hn
    void <init>(org.qiyi.basecore.jobquequ.BaseJob,boolean) -> <init>
    void postSuccess(java.lang.Object) -> j
    void postFailed() -> bZ
org.qiyi.basecore.jobquequ.CachedJobQueue -> org.qiyi.basecore.jobquequ.c:
    org.qiyi.basecore.jobquequ.JobQueue delegate -> ho
    org.qiyi.basecore.jobquequ.CachedJobQueue$Cache cache -> hp
    void <init>(org.qiyi.basecore.jobquequ.JobQueue) -> <init>
    long insert(org.qiyi.basecore.jobquequ.JobHolder) -> a
    long insertOrReplace(org.qiyi.basecore.jobquequ.JobHolder) -> b
    void remove(org.qiyi.basecore.jobquequ.JobHolder) -> c
    int count() -> ca
    int countReadyJobs(boolean,java.util.Collection) -> a
    org.qiyi.basecore.jobquequ.JobHolder nextJobAndIncRunCount(boolean,java.util.Collection) -> b
    java.lang.Long getNextJobDelayUntilNs(boolean) -> i
org.qiyi.basecore.jobquequ.CachedJobQueue$1 -> org.qiyi.basecore.jobquequ.d:
org.qiyi.basecore.jobquequ.CachedJobQueue$Cache -> org.qiyi.basecore.jobquequ.e:
    java.lang.Integer count -> count
    org.qiyi.basecore.jobquequ.CachedJobQueue$Cache$DelayUntil delayUntil -> hq
    void <init>() -> <init>
    void invalidateAll() -> cb
    void <init>(org.qiyi.basecore.jobquequ.CachedJobQueue$1) -> <init>
org.qiyi.basecore.jobquequ.CachedJobQueue$Cache$DelayUntil -> org.qiyi.basecore.jobquequ.f:
    java.lang.Long value -> hr
    boolean hasNetwork -> hs
    void <init>(boolean,java.lang.Long) -> <init>
    boolean isValid(boolean) -> j
    void set(boolean,java.lang.Long) -> a
    void <init>(boolean,java.lang.Long,org.qiyi.basecore.jobquequ.CachedJobQueue$1) -> <init>
    boolean access$200(org.qiyi.basecore.jobquequ.CachedJobQueue$Cache$DelayUntil,boolean) -> a
org.qiyi.basecore.jobquequ.Configuration -> org.qiyi.basecore.jobquequ.g:
    boolean SHOWLOG -> ht
    java.lang.String id -> id
    int maxConsumerCount -> hu
    int minConsumerCount -> hv
    int consumerKeepAlive -> hw
    int loadFactor -> hx
    org.qiyi.basecore.jobquequ.QueueFactory queueFactory -> hy
    org.qiyi.basecore.jobquequ.DependencyInjector dependencyInjector -> hz
    void <init>() -> <init>
    java.lang.String getId() -> getId
    org.qiyi.basecore.jobquequ.QueueFactory getQueueFactory() -> cc
    org.qiyi.basecore.jobquequ.DependencyInjector getDependencyInjector() -> cd
    int getConsumerKeepAlive() -> ce
    int getMaxConsumerCount() -> cf
    int getMinConsumerCount() -> cg
    int getLoadFactor() -> ch
    void <init>(org.qiyi.basecore.jobquequ.Configuration$1) -> <init>
    int access$202(org.qiyi.basecore.jobquequ.Configuration,int) -> a
    org.qiyi.basecore.jobquequ.QueueFactory access$300(org.qiyi.basecore.jobquequ.Configuration) -> a
    org.qiyi.basecore.jobquequ.QueueFactory access$302(org.qiyi.basecore.jobquequ.Configuration,org.qiyi.basecore.jobquequ.QueueFactory) -> a
    int access$502(org.qiyi.basecore.jobquequ.Configuration,int) -> b
    int access$602(org.qiyi.basecore.jobquequ.Configuration,int) -> c
    int access$702(org.qiyi.basecore.jobquequ.Configuration,int) -> d
    void <clinit>() -> <clinit>
org.qiyi.basecore.jobquequ.Configuration$1 -> org.qiyi.basecore.jobquequ.h:
org.qiyi.basecore.jobquequ.Configuration$Builder -> org.qiyi.basecore.jobquequ.i:
    org.qiyi.basecore.jobquequ.Configuration configuration -> hA
    void <init>() -> <init>
    org.qiyi.basecore.jobquequ.Configuration$Builder consumerKeepAlive(int) -> v
    org.qiyi.basecore.jobquequ.Configuration$Builder maxConsumerCount(int) -> w
    org.qiyi.basecore.jobquequ.Configuration$Builder minConsumerCount(int) -> x
    org.qiyi.basecore.jobquequ.Configuration$Builder loadFactor(int) -> y
    org.qiyi.basecore.jobquequ.Configuration$Builder showLog() -> ci
    org.qiyi.basecore.jobquequ.Configuration build() -> cj
org.qiyi.basecore.jobquequ.ConsistentTimedComparator -> org.qiyi.basecore.jobquequ.j:
    java.util.Comparator baseComparator -> hB
    void <init>(java.util.Comparator) -> <init>
    int compare(org.qiyi.basecore.jobquequ.JobHolder,org.qiyi.basecore.jobquequ.JobHolder) -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
org.qiyi.basecore.jobquequ.CopyOnWriteGroupSet -> org.qiyi.basecore.jobquequ.k:
    java.util.ArrayList publicClone -> hC
    java.util.TreeSet internalSet -> hD
    void <init>() -> <init>
    java.util.Collection getSafe() -> ck
    void add(java.lang.String) -> L
    void remove(java.lang.String) -> remove
org.qiyi.basecore.jobquequ.CountWithGroupIdsResult -> org.qiyi.basecore.jobquequ.l:
    int count -> count
    java.util.Set groupIds -> hE
    void <init>(int,java.util.Set) -> <init>
    int getCount() -> getCount
    org.qiyi.basecore.jobquequ.CountWithGroupIdsResult mergeWith(org.qiyi.basecore.jobquequ.CountWithGroupIdsResult) -> a
org.qiyi.basecore.jobquequ.DefaultJobHandler -> org.qiyi.basecore.jobquequ.m:
    void <init>(boolean) -> <init>
    void postResult(int,java.lang.Object) -> c
    void postSuccess(java.lang.Object) -> j
    void postFailed() -> bZ
    void handleMessage(android.os.Message) -> handleMessage
org.qiyi.basecore.jobquequ.DependencyInjector -> org.qiyi.basecore.jobquequ.n:
    void inject(org.qiyi.basecore.jobquequ.BaseJob) -> a
org.qiyi.basecore.jobquequ.IJobHandler -> org.qiyi.basecore.jobquequ.o:
    void postResult(int,java.lang.Object) -> c
org.qiyi.basecore.jobquequ.Job -> org.qiyi.basecore.jobquequ.p:
    long serialVersionUID -> serialVersionUID
    int priority -> priority
    long delayInMs -> hF
    void <init>(java.lang.String,java.lang.Class) -> <init>
    int getPriority() -> getPriority
    long getDelayInMs() -> cl
org.qiyi.basecore.jobquequ.JobConsumerExecutor -> org.qiyi.basecore.jobquequ.q:
    int maxConsumerSize -> hG
    int minConsumerSize -> hH
    int loadFactor -> hx
    java.lang.ThreadGroup threadGroup -> hI
    org.qiyi.basecore.jobquequ.JobConsumerExecutor$Contract contract -> hJ
    int keepAliveSeconds -> hK
    java.util.concurrent.atomic.AtomicInteger activeConsumerCount -> hL
    java.util.concurrent.ConcurrentHashMap runningJobHolders -> hM
    void <init>(org.qiyi.basecore.jobquequ.Configuration,org.qiyi.basecore.jobquequ.JobConsumerExecutor$Contract) -> <init>
    void considerAddingConsumer() -> cm
    boolean canIDie() -> cn
    boolean doINeedANewThread(boolean,boolean) -> a
    void addConsumer() -> co
    boolean canAddMoreConsumers() -> cp
    boolean isAboveLoadFactor(boolean) -> k
    void onBeforeRun(org.qiyi.basecore.jobquequ.JobHolder) -> d
    void onAfterRun(org.qiyi.basecore.jobquequ.JobHolder) -> e
    java.lang.String createRunningJobHolderKey(org.qiyi.basecore.jobquequ.JobHolder) -> f
    java.lang.String createRunningJobHolderKey(long,boolean) -> b
    int access$000(org.qiyi.basecore.jobquequ.JobConsumerExecutor) -> a
    void access$100(org.qiyi.basecore.jobquequ.JobConsumerExecutor,org.qiyi.basecore.jobquequ.JobHolder) -> a
    void access$200(org.qiyi.basecore.jobquequ.JobConsumerExecutor,org.qiyi.basecore.jobquequ.JobHolder) -> b
    boolean access$300(org.qiyi.basecore.jobquequ.JobConsumerExecutor) -> b
org.qiyi.basecore.jobquequ.JobConsumerExecutor$Contract -> org.qiyi.basecore.jobquequ.r:
    boolean isRunning() -> isRunning
    void insertOrReplace(org.qiyi.basecore.jobquequ.JobHolder) -> g
    void removeJob(org.qiyi.basecore.jobquequ.JobHolder) -> h
    org.qiyi.basecore.jobquequ.JobHolder getNextJob(int,java.util.concurrent.TimeUnit) -> a
    int countRemainingReadyJobs() -> cq
org.qiyi.basecore.jobquequ.JobConsumerExecutor$FutureJob -> org.qiyi.basecore.jobquequ.s:
    org.qiyi.basecore.jobquequ.JobHolder jobHolder -> hN
    org.qiyi.basecore.jobquequ.JobConsumerExecutor$Contract mContract -> hO
    void <init>(org.qiyi.basecore.jobquequ.JobConsumerExecutor$Contract,org.qiyi.basecore.jobquequ.JobHolder,java.util.concurrent.Callable) -> <init>
    void done() -> done
org.qiyi.basecore.jobquequ.JobConsumerExecutor$JobConsumer -> org.qiyi.basecore.jobquequ.t:
    org.qiyi.basecore.jobquequ.JobConsumerExecutor$Contract contract -> hJ
    org.qiyi.basecore.jobquequ.JobConsumerExecutor executor -> hP
    boolean didRunOnce -> hQ
    org.qiyi.basecore.jobquequ.JobConsumerExecutor this$0 -> hR
    void <init>(org.qiyi.basecore.jobquequ.JobConsumerExecutor,org.qiyi.basecore.jobquequ.JobConsumerExecutor$Contract,org.qiyi.basecore.jobquequ.JobConsumerExecutor) -> <init>
    void run() -> run
org.qiyi.basecore.jobquequ.JobConsumerExecutor$Worker -> org.qiyi.basecore.jobquequ.u:
    org.qiyi.basecore.jobquequ.JobHolder jobHolder -> hN
    void <init>(org.qiyi.basecore.jobquequ.JobHolder) -> <init>
    java.lang.Object call() -> call
org.qiyi.basecore.jobquequ.JobHolder -> org.qiyi.basecore.jobquequ.v:
    java.lang.Long id -> hS
    int priority -> priority
    java.lang.String groupId -> he
    int runCount -> hT
    long delayUntilNs -> hU
    long createdNs -> hV
    long runningSessionId -> hW
    org.qiyi.basecore.jobquequ.BaseJob baseJob -> hX
    void <init>(java.lang.Long,int,java.lang.String,int,org.qiyi.basecore.jobquequ.BaseJob,long,long,long) -> <init>
    void <init>(int,org.qiyi.basecore.jobquequ.BaseJob,long,long) -> <init>
    org.qiyi.basecore.jobquequ.JobHolder$JobCallbackResult safeRun(int) -> u
    java.lang.Long getId() -> cr
    void setId(java.lang.Long) -> b
    int getPriority() -> getPriority
    int getRunCount() -> getRunCount
    void setRunCount(int) -> z
    long getCreatedNs() -> cs
    void setRunningSessionId(long) -> i
    long getDelayUntilNs() -> ct
    org.qiyi.basecore.jobquequ.BaseJob getBaseJob() -> cu
    java.lang.String getGroupId() -> cv
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
org.qiyi.basecore.jobquequ.JobHolder$JobCallbackResult -> org.qiyi.basecore.jobquequ.w:
    boolean isSafe -> hY
    java.lang.Object resultObject -> hZ
    void <init>() -> <init>
org.qiyi.basecore.jobquequ.JobManager -> org.qiyi.basecore.jobquequ.x:
    long sessionId -> ia
    boolean running -> ib
    org.qiyi.basecore.jobquequ.DependencyInjector dependencyInjector -> hz
    org.qiyi.basecore.jobquequ.JobQueue nonPersistentJobQueue -> ic
    org.qiyi.basecore.jobquequ.CopyOnWriteGroupSet runningJobGroups -> ie
    org.qiyi.basecore.jobquequ.JobConsumerExecutor jobConsumerExecutor -> if
    java.lang.Object newJobListeners -> ig
    java.util.concurrent.ConcurrentHashMap nonPersistentOnAddedLocks -> ih
    java.util.concurrent.ScheduledExecutorService timedExecutor -> ii
    java.lang.Object getNextJobLock -> ij
    java.util.concurrent.ConcurrentHashMap jobTagMapForQueryStatus -> ik
    java.lang.Runnable notifyRunnable -> il
    org.qiyi.basecore.jobquequ.JobConsumerExecutor$Contract consumerContract -> im
    void <init>(org.qiyi.basecore.jobquequ.Configuration) -> <init>
    void start() -> start
    int countReadyJobs(boolean) -> l
    long addJob(org.qiyi.basecore.jobquequ.Job) -> a
    void addOnAddedLock(java.util.concurrent.ConcurrentHashMap,long) -> a
    void waitForOnAddedLock(java.util.concurrent.ConcurrentHashMap,long) -> b
    void clearOnAddedLock(java.util.concurrent.ConcurrentHashMap,long) -> c
    long ensureConsumerWhenNeeded(java.lang.Boolean) -> b
    void notifyJobConsumer() -> cw
    void ensureConsumerOnTime(long) -> j
    boolean hasNetwork() -> cx
    org.qiyi.basecore.jobquequ.JobHolder getNextJob() -> cy
    void reAddJob(org.qiyi.basecore.jobquequ.JobHolder) -> i
    void removeJob(org.qiyi.basecore.jobquequ.JobHolder) -> h
    long addJob(int,long,org.qiyi.basecore.jobquequ.BaseJob) -> a
    void addjobTag(java.lang.String,java.lang.Long) -> a
    void access$000(org.qiyi.basecore.jobquequ.JobManager) -> a
    boolean access$100(org.qiyi.basecore.jobquequ.JobManager) -> b
    void access$200(org.qiyi.basecore.jobquequ.JobManager,org.qiyi.basecore.jobquequ.JobHolder) -> a
    void access$300(org.qiyi.basecore.jobquequ.JobManager,org.qiyi.basecore.jobquequ.JobHolder) -> b
    org.qiyi.basecore.jobquequ.JobHolder access$400(org.qiyi.basecore.jobquequ.JobManager) -> c
    long access$500(org.qiyi.basecore.jobquequ.JobManager,java.lang.Boolean) -> a
    java.lang.Object access$600(org.qiyi.basecore.jobquequ.JobManager) -> d
    boolean access$700(org.qiyi.basecore.jobquequ.JobManager) -> e
    int access$800(org.qiyi.basecore.jobquequ.JobManager,boolean) -> a
org.qiyi.basecore.jobquequ.JobManager$1 -> org.qiyi.basecore.jobquequ.y:
    org.qiyi.basecore.jobquequ.JobManager this$0 -> in
    void <init>(org.qiyi.basecore.jobquequ.JobManager) -> <init>
    void run() -> run
org.qiyi.basecore.jobquequ.JobManager$2 -> org.qiyi.basecore.jobquequ.z:
    org.qiyi.basecore.jobquequ.JobManager this$0 -> in
    void <init>(org.qiyi.basecore.jobquequ.JobManager) -> <init>
    boolean isRunning() -> isRunning
    void insertOrReplace(org.qiyi.basecore.jobquequ.JobHolder) -> g
    void removeJob(org.qiyi.basecore.jobquequ.JobHolder) -> h
    org.qiyi.basecore.jobquequ.JobHolder getNextJob(int,java.util.concurrent.TimeUnit) -> a
    int countRemainingReadyJobs() -> cq
org.qiyi.basecore.jobquequ.JobManager$DefaultQueueFactory -> org.qiyi.basecore.jobquequ.aa:
    void <init>() -> <init>
    org.qiyi.basecore.jobquequ.JobQueue createNonPersistent(android.content.Context,java.lang.Long,java.lang.String) -> a
org.qiyi.basecore.jobquequ.JobManagerUtils -> org.qiyi.basecore.jobquequ.JobManagerUtils:
    int CPU_COUNT -> aC
    org.qiyi.basecore.jobquequ.JobManager sJobManager -> io
    void <init>() -> <init>
    void init() -> init
    long addJob(org.qiyi.basecore.jobquequ.Job) -> a
    org.qiyi.basecore.jobquequ.AsyncJob postRunnable(java.lang.Runnable) -> b
    org.qiyi.basecore.jobquequ.AsyncJob post(java.lang.Runnable,int,long,java.lang.String,java.lang.String) -> a
    void <clinit>() -> <clinit>
org.qiyi.basecore.jobquequ.JobManagerUtils$1 -> org.qiyi.basecore.jobquequ.ab:
    java.lang.Runnable val$runnable -> val$runnable
    void <init>(java.lang.Class,java.lang.Runnable) -> <init>
    java.lang.Object onRun(java.lang.Object[]) -> c
org.qiyi.basecore.jobquequ.JobQueue -> org.qiyi.basecore.jobquequ.ac:
    long insert(org.qiyi.basecore.jobquequ.JobHolder) -> a
    long insertOrReplace(org.qiyi.basecore.jobquequ.JobHolder) -> b
    void remove(org.qiyi.basecore.jobquequ.JobHolder) -> c
    int count() -> ca
    int countReadyJobs(boolean,java.util.Collection) -> a
    org.qiyi.basecore.jobquequ.JobHolder nextJobAndIncRunCount(boolean,java.util.Collection) -> b
    java.lang.Long getNextJobDelayUntilNs(boolean) -> i
org.qiyi.basecore.jobquequ.JobSet -> org.qiyi.basecore.jobquequ.ad:
    org.qiyi.basecore.jobquequ.JobHolder peek(java.util.Collection) -> a
    boolean offer(org.qiyi.basecore.jobquequ.JobHolder) -> j
    boolean remove(org.qiyi.basecore.jobquequ.JobHolder) -> k
    int size() -> size
    org.qiyi.basecore.jobquequ.CountWithGroupIdsResult countReadyJobs(long,java.util.Collection) -> a
    org.qiyi.basecore.jobquequ.CountWithGroupIdsResult countReadyJobs(java.util.Collection) -> b
org.qiyi.basecore.jobquequ.JqLog -> org.qiyi.basecore.jobquequ.ae:
    boolean DBG -> ip
    boolean isDebugEnabled() -> cz
    void d(java.lang.String,java.lang.Object[]) -> b
    void e(java.lang.Throwable,java.lang.String,java.lang.Object[]) -> a
    void e(java.lang.String,java.lang.Object[]) -> c
    void <clinit>() -> <clinit>
org.qiyi.basecore.jobquequ.MergedQueue -> org.qiyi.basecore.jobquequ.af:
    org.qiyi.basecore.jobquequ.JobSet queue0 -> iq
    org.qiyi.basecore.jobquequ.JobSet queue1 -> ir
    java.util.Comparator comparator -> is
    java.util.Comparator retrieveComparator -> it
    void <init>(int,java.util.Comparator,java.util.Comparator) -> <init>
    boolean offer(org.qiyi.basecore.jobquequ.JobHolder) -> j
    org.qiyi.basecore.jobquequ.JobHolder peek(java.util.Collection) -> a
    boolean remove(org.qiyi.basecore.jobquequ.JobHolder) -> k
    int size() -> size
    org.qiyi.basecore.jobquequ.MergedQueue$SetId decideQueue(org.qiyi.basecore.jobquequ.JobHolder) -> l
    org.qiyi.basecore.jobquequ.JobSet createQueue(org.qiyi.basecore.jobquequ.MergedQueue$SetId,int,java.util.Comparator) -> a
    org.qiyi.basecore.jobquequ.CountWithGroupIdsResult countReadyJobs(org.qiyi.basecore.jobquequ.MergedQueue$SetId,long,java.util.Collection) -> a
    org.qiyi.basecore.jobquequ.CountWithGroupIdsResult countReadyJobs(org.qiyi.basecore.jobquequ.MergedQueue$SetId,java.util.Collection) -> a
org.qiyi.basecore.jobquequ.MergedQueue$SetId -> org.qiyi.basecore.jobquequ.ag:
    org.qiyi.basecore.jobquequ.MergedQueue$SetId S0 -> iu
    org.qiyi.basecore.jobquequ.MergedQueue$SetId S1 -> iv
    org.qiyi.basecore.jobquequ.MergedQueue$SetId[] $VALUES -> iw
    org.qiyi.basecore.jobquequ.MergedQueue$SetId[] values() -> values
    org.qiyi.basecore.jobquequ.MergedQueue$SetId valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
org.qiyi.basecore.jobquequ.NonPersistentJobSet -> org.qiyi.basecore.jobquequ.ah:
    java.util.TreeSet set -> ix
    java.util.Map existingGroups -> iy
    java.util.Map idCache -> iz
    void <init>(java.util.Comparator) -> <init>
    org.qiyi.basecore.jobquequ.JobHolder safeFirst() -> cA
    org.qiyi.basecore.jobquequ.JobHolder peek(java.util.Collection) -> a
    boolean offer(org.qiyi.basecore.jobquequ.JobHolder) -> j
    void incGroupCount(java.lang.String) -> M
    void decGroupCount(java.lang.String) -> N
    boolean remove(org.qiyi.basecore.jobquequ.JobHolder) -> k
    int size() -> size
    org.qiyi.basecore.jobquequ.CountWithGroupIdsResult countReadyJobs(long,java.util.Collection) -> a
    org.qiyi.basecore.jobquequ.CountWithGroupIdsResult countReadyJobs(java.util.Collection) -> b
org.qiyi.basecore.jobquequ.NonPersistentPriorityQueue -> org.qiyi.basecore.jobquequ.ai:
    long nonPersistentJobIdGenerator -> iA
    org.qiyi.basecore.jobquequ.TimeAwarePriorityQueue jobs -> iB
    java.lang.String id -> id
    long sessionId -> ia
    java.util.Comparator jobComparator -> iC
    void <init>(long,java.lang.String) -> <init>
    long insert(org.qiyi.basecore.jobquequ.JobHolder) -> a
    long insertOrReplace(org.qiyi.basecore.jobquequ.JobHolder) -> b
    void remove(org.qiyi.basecore.jobquequ.JobHolder) -> c
    int count() -> ca
    int countReadyJobs(boolean,java.util.Collection) -> a
    org.qiyi.basecore.jobquequ.JobHolder nextJobAndIncRunCount(boolean,java.util.Collection) -> b
    java.lang.Long getNextJobDelayUntilNs(boolean) -> i
    int compareInt(int,int) -> c
    int compareLong(long,long) -> b
    int access$000(int,int) -> d
    int access$100(long,long) -> c
org.qiyi.basecore.jobquequ.NonPersistentPriorityQueue$1 -> org.qiyi.basecore.jobquequ.aj:
    org.qiyi.basecore.jobquequ.NonPersistentPriorityQueue this$0 -> iD
    void <init>(org.qiyi.basecore.jobquequ.NonPersistentPriorityQueue) -> <init>
    int compare(org.qiyi.basecore.jobquequ.JobHolder,org.qiyi.basecore.jobquequ.JobHolder) -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
org.qiyi.basecore.jobquequ.QueueFactory -> org.qiyi.basecore.jobquequ.ak:
    org.qiyi.basecore.jobquequ.JobQueue createNonPersistent(android.content.Context,java.lang.Long,java.lang.String) -> a
org.qiyi.basecore.jobquequ.TimeAwareComparator -> org.qiyi.basecore.jobquequ.al:
    java.util.Comparator baseComparator -> hB
    void <init>(java.util.Comparator) -> <init>
    int compare(org.qiyi.basecore.jobquequ.JobHolder,org.qiyi.basecore.jobquequ.JobHolder) -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
org.qiyi.basecore.jobquequ.TimeAwarePriorityQueue -> org.qiyi.basecore.jobquequ.am:
    void <init>(int,java.util.Comparator) -> <init>
    org.qiyi.basecore.jobquequ.MergedQueue$SetId decideQueue(org.qiyi.basecore.jobquequ.JobHolder) -> l
    org.qiyi.basecore.jobquequ.JobSet createQueue(org.qiyi.basecore.jobquequ.MergedQueue$SetId,int,java.util.Comparator) -> a
    org.qiyi.basecore.jobquequ.CountWithGroupIdsResult countReadyJobs(long,java.util.Collection) -> a
    org.qiyi.basecore.jobquequ.CountWithGroupIdsResult countReadyJobs(java.util.Collection) -> b
org.qiyi.basecore.storage.Environment4 -> org.qiyi.basecore.b.a:
    org.qiyi.basecore.storage.Environment4$Device[] devices -> iE
    org.qiyi.basecore.storage.Environment4$Device[] externalstorage -> iF
    org.qiyi.basecore.storage.Environment4$Device[] storage -> iG
    java.lang.String userDir -> iH
    org.qiyi.basecore.storage.Environment4$Device[] getDevices(android.content.Context) -> k
    void initDevices(android.content.Context) -> l
org.qiyi.basecore.storage.Environment4$Device -> org.qiyi.basecore.b.b:
    java.lang.String mUserLabel -> iI
    java.lang.String mUuid -> iJ
    java.lang.String mState -> iK
    java.lang.String mWriteState -> iL
    java.lang.String mType -> iM
    boolean mPrimary -> iN
    boolean mRemovable -> iO
    boolean mEmulated -> iP
    boolean mAllowMassStorage -> iQ
    long mMaxFileSize -> iR
    java.io.File mFiles -> iS
    java.io.File mCache -> iT
    void <init>(android.content.Context) -> <init>
    void <init>(java.lang.Object,android.content.Context) -> <init>
    boolean isAvailable(android.content.Context) -> m
    java.lang.String getState(android.content.Context) -> n
    boolean isPrimary() -> cB
org.qiyi.basecore.storage.NoPermissionException -> org.qiyi.basecore.b.c:
    java.lang.String PREFIX_TAG -> iU
    void <init>() -> <init>
    void <init>(java.lang.String) -> <init>
    void <clinit>() -> <clinit>
org.qiyi.basecore.storage.StorageCheckor -> org.qiyi.basecore.b.d:
    java.lang.Object mScanLock -> iV
    java.util.List sdCardItems -> iW
    boolean isInit -> bX
    boolean isScanning -> iX
    java.lang.String userDefaultPath -> iY
    java.util.List getAvailableStorageItems(android.content.Context) -> o
    void scanSDCards(android.content.Context) -> p
    void ensureSDCardScan(android.content.Context) -> q
    void startScanSdcardTask(android.content.Context) -> r
    boolean checkSpaceEnough(java.lang.String) -> O
    boolean checkSpaceEnough(java.lang.String,long) -> b
    org.qiyi.basecore.storage.StorageItem getMaxStorageItem(android.content.Context) -> s
    java.io.File getInternalStorageFilesDir(android.content.Context,java.lang.String) -> e
    java.io.File getUserPreferFilesDir(android.content.Context,java.lang.String) -> f
    java.io.File getStoragePublicDir(android.content.Context,java.lang.String,boolean) -> a
    java.io.File getStoragePublicDir(android.content.Context,java.lang.String) -> g
    java.io.File ensureDirExist(android.content.Context,java.lang.String,java.lang.String) -> a
    java.lang.String getCurrentRootPath(android.content.Context) -> t
    void setCurrentRootPath(android.content.Context,java.lang.String) -> h
    void <clinit>() -> <clinit>
org.qiyi.basecore.storage.StorageCheckor$1 -> org.qiyi.basecore.b.e:
    android.content.Context val$mContext -> iZ
    void <init>(android.content.Context) -> <init>
    void run() -> run
org.qiyi.basecore.storage.StorageDetect -> org.qiyi.basecore.b.f:
    java.lang.String FINGERPRINT_DIRECTORY -> ja
    java.lang.String[] FILE_TYPE_ARRAY -> jb
    int FILE_TYPE_MAX_STR_LEN -> jc
    int FILE_TYPE_MIN_STR_LEN -> jd
    java.lang.String getStoragePath(java.lang.String[]) -> b
    java.lang.String getFileType(java.lang.String[]) -> c
    java.lang.String getExternalPath() -> cC
    java.lang.String SperatorStr(java.lang.String) -> P
    int getSdkVer() -> cD
    boolean checkExternalSd(java.util.ArrayList) -> a
    boolean checksize(long) -> k
    boolean checksize(java.lang.String,long) -> c
    java.util.ArrayList processStorageList(java.util.ArrayList) -> b
    void createfingerprint(android.content.Context) -> u
    void filterStorageList(java.util.ArrayList,android.content.Context) -> a
    int getRepeatCount(java.util.List,java.lang.String) -> a
    boolean checkPath(java.lang.String) -> Q
    void computeTypeStrRange() -> cE
    java.util.ArrayList scanSDAPI(android.content.Context) -> v
    java.util.ArrayList scanSDMount(android.content.Context) -> w
    java.util.ArrayList getStorageList(android.content.Context) -> x
    void <clinit>() -> <clinit>
org.qiyi.basecore.storage.StorageItem -> org.qiyi.basecore.b.g:
    java.lang.String path -> path
    java.lang.String file_type -> je
    long usedsize -> jf
    long totalsize -> jg
    long availsize -> jh
    int priority -> priority
    int type -> type
    boolean mRemovable -> iO
    boolean mPrimary -> iN
    java.lang.String mState -> iK
    void <init>(java.lang.String,java.lang.String,int) -> <init>
    org.qiyi.basecore.storage.StorageItem$StorageSize getStorageSize() -> cF
    boolean checkPathCanWrite(android.content.Context,java.lang.String) -> i
    boolean canWrite(android.content.Context) -> canWrite
    java.lang.String getState(android.content.Context) -> n
    long getTotalSize() -> cG
    long getAvailSize() -> cH
    void createHideFile(android.content.Context) -> y
    boolean checkHideFileExist(android.content.Context) -> z
    java.lang.String toString() -> toString
org.qiyi.basecore.storage.StorageItem$StorageSize -> org.qiyi.basecore.b.h:
    long usedsize -> jf
    long totalsize -> jg
    org.qiyi.basecore.storage.StorageItem this$0 -> ji
    void <init>(org.qiyi.basecore.storage.StorageItem,long,long) -> <init>
org.qiyi.basecore.utils.AbsNetworkChangeCallback -> org.qiyi.basecore.utils.AbsNetworkChangeCallback:
    boolean mNeedRetrieveBySelf -> mNeedRetrieveBySelf
    void <init>() -> <init>
    void onNetWorkChange(boolean) -> onNetWorkChange
    void onNetworkChange(org.qiyi.basecore.utils.NetworkStatus) -> onNetworkChange
    void onChangeToOff(org.qiyi.basecore.utils.NetworkStatus) -> onChangeToOff
    void onChangeToWIFI(org.qiyi.basecore.utils.NetworkStatus) -> onChangeToWIFI
    void onChangeToNotWIFI(org.qiyi.basecore.utils.NetworkStatus) -> onChangeToNotWIFI
    void onChangeToConnected(org.qiyi.basecore.utils.NetworkStatus) -> onChangeToConnected
    void onChangeToMobile2GAnd3GAnd4G(org.qiyi.basecore.utils.NetworkStatus) -> onChangeToMobile2GAnd3GAnd4G
    void onChangeToMobile2G(org.qiyi.basecore.utils.NetworkStatus) -> onChangeToMobile2G
    void onChangeToMobile3G(org.qiyi.basecore.utils.NetworkStatus) -> onChangeToMobile3G
    void onChangeToMobile4G(org.qiyi.basecore.utils.NetworkStatus) -> onChangeToMobile4G
    void onDestroy() -> onDestroy
org.qiyi.basecore.utils.ApkUtil -> org.qiyi.basecore.utils.ApkUtil:
    void <init>() -> <init>
    android.content.pm.PackageInfo getApkFileInfo(android.content.Context,java.io.File) -> getApkFileInfo
    boolean isAppInstalled(android.content.Context,java.lang.String) -> isAppInstalled
    boolean isAppInstalled(android.content.Context,java.lang.String,int) -> isAppInstalled
    int getAppVersionCode(android.content.Context,java.lang.String) -> getAppVersionCode
    int getVersionCode(android.content.Context) -> getVersionCode
    java.lang.String getAppVersionName(android.content.Context,java.lang.String) -> getAppVersionName
    java.lang.String getVersionName(android.content.Context) -> getVersionName
    long getAppInstallTime(android.content.Context) -> getAppInstallTime
    long getAppUpdateTime(android.content.Context) -> getAppUpdateTime
org.qiyi.basecore.utils.ApplicationContext -> org.qiyi.basecore.utils.ApplicationContext:
    android.app.Application app -> app
    boolean mIsHostPorcess -> mIsHostPorcess
    void <init>() -> <init>
    void <clinit>() -> <clinit>
org.qiyi.basecore.utils.BitmapUtils -> org.qiyi.basecore.utils.BitmapUtils:
    void <init>() -> <init>
    android.graphics.Bitmap compressImage(android.graphics.Bitmap) -> compressImage
    android.graphics.Bitmap centerCrop(android.graphics.Bitmap,android.graphics.Point) -> centerCrop
    void saveBitmap(java.lang.String,android.graphics.Bitmap) -> saveBitmap
    android.graphics.Bitmap createBlurBitmap(android.graphics.Bitmap,int) -> createBlurBitmap
    void addMask(android.graphics.Bitmap,int) -> addMask
    void compressBitmapToFile(android.graphics.Bitmap,java.io.File,int,int,int) -> compressBitmapToFile
org.qiyi.basecore.utils.Callback -> org.qiyi.basecore.utils.Callback:
    void onCallback(java.lang.Object) -> onCallback
org.qiyi.basecore.utils.ColorUtil -> org.qiyi.basecore.utils.ColorUtil:
    void <init>() -> <init>
    int parseColor(java.lang.String) -> parseColor
    int parseColor(java.lang.String,int) -> parseColor
    int alphaColor(float,int) -> alphaColor
    int getColor(android.content.res.Resources,int,int) -> getColor
    void setAlpha(android.view.View,int) -> setAlpha
org.qiyi.basecore.utils.CommonUtils -> org.qiyi.basecore.utils.CommonUtils:
    java.lang.String TAG -> TAG
    java.lang.String KEY_DEBUG -> KEY_DEBUG
    void <init>() -> <init>
    boolean scanSDDoubleAndMerge(android.content.Context) -> scanSDDoubleAndMerge
    void setScanSDType(android.content.Context,int) -> setScanSDType
    void savePhoneId(android.content.Context,java.lang.String,java.lang.String) -> savePhoneId
    java.lang.String getPhoneId(android.content.Context,java.lang.String) -> getPhoneId
    boolean debugUseProxyMode(android.content.Context) -> debugUseProxyMode
    void debugSetProxyMode(android.content.Context,boolean) -> debugSetProxyMode
    boolean isBeliveCertificate(android.content.Context) -> isBeliveCertificate
    void setBeliveCertificate(android.content.Context,boolean) -> setBeliveCertificate
    boolean isAvailableDebug(android.content.Context) -> isAvailableDebug
    void writeStringIntoFile(java.lang.String,java.lang.String,android.content.Context,java.lang.String,java.lang.String) -> writeStringIntoFile
    java.lang.String getDirPath(android.content.Context) -> getDirPath
    java.lang.String getCurrentDateTime() -> getCurrentDateTime
    java.lang.String getJSONString(java.lang.String,java.lang.String,java.lang.String) -> getJSONString
    java.lang.Object byteArray2Object(byte[]) -> byteArray2Object
    byte[] object2ByteArray(java.io.Serializable) -> object2ByteArray
org.qiyi.basecore.utils.ConfigurationHelper -> org.qiyi.basecore.utils.ConfigurationHelper:
    java.lang.String TAG -> TAG
    long DEFAULT_SAVE_PERIOD -> DEFAULT_SAVE_PERIOD
    int ACTION_FOR_SAVE_PREFS -> ACTION_FOR_SAVE_PREFS
    int ACTION_FOR_KEY_LISTENER -> ACTION_FOR_KEY_LISTENER
    int CRASH_REPORT_PERCENT -> CRASH_REPORT_PERCENT
    java.lang.Object sInitLock -> sInitLock
    java.util.Map sPreferences -> sPreferences
    java.util.List sDoNotMigrateValueList -> sDoNotMigrateValueList
    java.util.concurrent.ConcurrentMap mCurrentConfigurations -> mCurrentConfigurations
    android.content.SharedPreferences mPref -> mPref
    android.content.SharedPreferences$Editor mEditor -> mEditor
    java.util.Vector mDirty -> mDirty
    android.content.Context mAppContext -> mAppContext
    java.lang.String mAppDataDir -> mAppDataDir
    java.lang.String mPrefName -> mPrefName
    java.lang.Object mModifyLock -> mModifyLock
    long mCurrentModifyTimer -> mCurrentModifyTimer
    android.os.Handler mHandler -> mHandler
    java.util.WeakHashMap listenersMap -> listenersMap
    org.qiyi.basecore.utils.ConfigurationHelper getInstance(android.content.Context,java.lang.String) -> getInstance
    void addOnSharedPreferenceChangListener(java.lang.String,org.qiyi.basecore.utils.ConfigurationHelper$IOnSharedChangeListener) -> addOnSharedPreferenceChangListener
    void save(boolean) -> save
    void <init>(android.content.Context,java.lang.String) -> <init>
    void initCurrentConfigurations(java.lang.String) -> initCurrentConfigurations
    java.lang.String doMigrate(java.lang.String) -> doMigrate
    java.lang.String getString(java.lang.String,java.lang.String) -> getString
    boolean getBoolean(java.lang.String,boolean) -> getBoolean
    int getInt(java.lang.String,int) -> getInt
    float getFloat(java.lang.String,float) -> getFloat
    long getLong(java.lang.String,long) -> getLong
    void putString(java.lang.String,java.lang.String,boolean) -> putString
    void putBoolean(java.lang.String,boolean,boolean) -> putBoolean
    void putInt(java.lang.String,int,boolean) -> putInt
    void putLong(java.lang.String,long,boolean) -> putLong
    void putFloat(java.lang.String,float,boolean) -> putFloat
    void remove(java.lang.String,boolean) -> remove
    void clear() -> clear
    boolean hasKey(java.lang.String) -> hasKey
    void commit(boolean) -> commit
    void asyncCommit() -> asyncCommit
    boolean isExistSharedPreferenceFile(android.content.Context,java.lang.String,java.lang.String) -> isExistSharedPreferenceFile
    boolean deleteSharedPreferenceFile(android.content.Context,java.lang.String,java.lang.String) -> deleteSharedPreferenceFile
    java.io.File getPreferenceFile(android.content.Context,java.lang.String,java.lang.String) -> getPreferenceFile
    void access$000(org.qiyi.basecore.utils.ConfigurationHelper,boolean) -> access$000
    android.content.SharedPreferences$Editor access$100(org.qiyi.basecore.utils.ConfigurationHelper) -> access$100
    void <clinit>() -> <clinit>
org.qiyi.basecore.utils.ConfigurationHelper$1 -> org.qiyi.basecore.utils.a:
    org.qiyi.basecore.utils.ConfigurationHelper this$0 -> jj
    void <init>(org.qiyi.basecore.utils.ConfigurationHelper,android.os.Looper) -> <init>
    void handleMessage(android.os.Message) -> handleMessage
org.qiyi.basecore.utils.ConfigurationHelper$2 -> org.qiyi.basecore.utils.b:
    java.util.concurrent.CountDownLatch val$commitWait -> jk
    org.qiyi.basecore.utils.ConfigurationHelper this$0 -> jj
    void <init>(org.qiyi.basecore.utils.ConfigurationHelper,java.util.concurrent.CountDownLatch) -> <init>
    void run() -> run
org.qiyi.basecore.utils.ConfigurationHelper$IOnSharedChangeListener -> org.qiyi.basecore.utils.ConfigurationHelper$IOnSharedChangeListener:
    void onSharedPreferenceChanged(java.lang.String) -> onSharedPreferenceChanged
org.qiyi.basecore.utils.ConfigurationHelper$QueueWork -> org.qiyi.basecore.utils.c:
    java.util.concurrent.ConcurrentLinkedQueue sPendingWorkFinishers -> jl
    void add(java.util.concurrent.CountDownLatch) -> a
    void remove(java.util.concurrent.CountDownLatch) -> b
    void waitToFinish() -> cI
    void <clinit>() -> <clinit>
org.qiyi.basecore.utils.ConsistencyContentObserver -> org.qiyi.basecore.utils.ConsistencyContentObserver:
    java.util.List mListenList -> mListenList
    java.lang.String mObserverKey -> mObserverKey
    void <init>(java.lang.String,android.os.Handler) -> <init>
    void onChange(boolean,android.net.Uri) -> onChange
    void clearListener() -> clearListener
    void addListener(org.qiyi.basecore.utils.ConsistencyContentObserver$ICrossProcessDataChangeListener) -> addListener
    void removeListener(org.qiyi.basecore.utils.ConsistencyContentObserver$ICrossProcessDataChangeListener) -> removeListener
org.qiyi.basecore.utils.ConsistencyContentObserver$ICrossProcessDataChangeListener -> org.qiyi.basecore.utils.ConsistencyContentObserver$ICrossProcessDataChangeListener:
    void onChange() -> onChange
org.qiyi.basecore.utils.ConsistencyDataOperator -> org.qiyi.basecore.utils.ConsistencyDataOperator:
    java.lang.String TAG -> TAG
    java.lang.String PERMISSION -> PERMISSION
    java.lang.String TABLE_NAME -> TABLE_NAME
    java.lang.String[] TABLE_COLUMNS -> TABLE_COLUMNS
    java.lang.String CREATE_TABLE_SQL -> CREATE_TABLE_SQL
    org.qiyi.basecore.utils.ConsistencyDataOperator instance -> instance
    java.util.concurrent.ConcurrentHashMap mContentObserverMap -> mContentObserverMap
    android.os.Handler mHandler -> mHandler
    android.content.Context mContext -> mContext
    void <init>(android.content.Context) -> <init>
    java.lang.String get(java.lang.String,java.lang.String) -> get
    int put(java.lang.String,java.lang.String) -> put
    int put(java.util.Map) -> put
    int reMove(java.lang.String) -> reMove
    java.lang.String cursor2Value(android.database.Cursor,java.lang.String) -> cursor2Value
    android.content.ContentValues toContentValue(java.lang.String,java.lang.String) -> toContentValue
    java.lang.String getSelectionForUpdate(android.content.ContentValues) -> getSelectionForUpdate
    java.lang.String[] getSelectionArgsForUpdate(android.content.ContentValues) -> getSelectionArgsForUpdate
    void onUpgrade(android.database.sqlite.SQLiteDatabase,int,int,org.qiyi.basecore.db.QiyiContentProvider$AppAdapter$BaseDBHelper) -> onUpgrade
    void onCreate(android.database.sqlite.SQLiteDatabase,org.qiyi.basecore.db.QiyiContentProvider$AppAdapter$BaseDBHelper) -> onCreate
    boolean endRegister() -> endRegister
    void registerContentObserver(java.lang.String,org.qiyi.basecore.utils.ConsistencyContentObserver$ICrossProcessDataChangeListener) -> registerContentObserver
    void unregisterContentObserver(java.lang.String) -> unregisterContentObserver
    void unregisterContentObserver(java.lang.String,org.qiyi.basecore.utils.ConsistencyContentObserver$ICrossProcessDataChangeListener) -> unregisterContentObserver
    void <clinit>() -> <clinit>
org.qiyi.basecore.utils.ConsistencyDataUtils -> org.qiyi.basecore.utils.ConsistencyDataUtils:
    java.lang.String TAG -> TAG
    java.util.concurrent.ConcurrentMap sCurrentLocks -> sCurrentLocks
    void <init>() -> <init>
    void setValue(android.content.Context,java.lang.String,java.lang.String) -> setValue
    java.lang.String getValueSync(android.content.Context,java.lang.String,java.lang.String) -> getValueSync
    void getValueAsync(android.content.Context,java.lang.String,java.lang.String,org.qiyi.basecore.utils.ConsistencyDataUtils$IQueryDataCallback) -> getValueAsync
    void removeValue(android.content.Context,java.lang.String) -> removeValue
    void registerKeyObserver(android.content.Context,java.lang.String,org.qiyi.basecore.utils.ConsistencyContentObserver$ICrossProcessDataChangeListener) -> registerKeyObserver
    void unregisterKeyObserver(android.content.Context,java.lang.String) -> unregisterKeyObserver
    void unregisterKeyObserver(android.content.Context,java.lang.String,org.qiyi.basecore.utils.ConsistencyContentObserver$ICrossProcessDataChangeListener) -> unregisterKeyObserver
    java.util.concurrent.locks.ReentrantReadWriteLock createOrGetLock(java.lang.String) -> createOrGetLock
    void tryToRemoveLock(java.lang.String) -> tryToRemoveLock
    java.util.concurrent.locks.ReentrantReadWriteLock access$000(java.lang.String) -> access$000
    void access$100(java.lang.String) -> access$100
    void <clinit>() -> <clinit>
org.qiyi.basecore.utils.ConsistencyDataUtils$1 -> org.qiyi.basecore.utils.d:
    android.content.Context val$context -> ev
    java.lang.String val$_key -> jm
    java.lang.String val$value -> jn
    void <init>(android.content.Context,java.lang.String,java.lang.String) -> <init>
    void run() -> run
org.qiyi.basecore.utils.ConsistencyDataUtils$1$1 -> org.qiyi.basecore.utils.e:
    org.qiyi.basecore.utils.ConsistencyDataUtils$1 this$0 -> jo
    void <init>(org.qiyi.basecore.utils.ConsistencyDataUtils$1,android.content.Context) -> <init>
    boolean endRegister() -> endRegister
org.qiyi.basecore.utils.ConsistencyDataUtils$2 -> org.qiyi.basecore.utils.f:
    void <init>(android.content.Context) -> <init>
    boolean endRegister() -> endRegister
org.qiyi.basecore.utils.ConsistencyDataUtils$3 -> org.qiyi.basecore.utils.g:
    android.content.Context val$context -> ev
    java.lang.String val$_key -> jm
    java.lang.String val$defaultValue -> jp
    org.qiyi.basecore.utils.ConsistencyDataUtils$IQueryDataCallback val$callback -> jq
    void <init>(java.lang.Class,android.content.Context,java.lang.String,java.lang.String,org.qiyi.basecore.utils.ConsistencyDataUtils$IQueryDataCallback) -> <init>
    java.lang.String onRun(java.lang.Object[]) -> d
    void onPostExecutor(java.lang.String) -> R
    void onPostExecutor(java.lang.Object) -> i
    java.lang.Object onRun(java.lang.Object[]) -> c
org.qiyi.basecore.utils.ConsistencyDataUtils$4 -> org.qiyi.basecore.utils.h:
    android.content.Context val$context -> ev
    java.lang.String val$_key -> jm
    void <init>(android.content.Context,java.lang.String) -> <init>
    void run() -> run
org.qiyi.basecore.utils.ConsistencyDataUtils$4$1 -> org.qiyi.basecore.utils.i:
    org.qiyi.basecore.utils.ConsistencyDataUtils$4 this$0 -> jr
    void <init>(org.qiyi.basecore.utils.ConsistencyDataUtils$4,android.content.Context) -> <init>
    boolean endRegister() -> endRegister
org.qiyi.basecore.utils.ConsistencyDataUtils$5 -> org.qiyi.basecore.utils.j:
    void <init>(android.content.Context) -> <init>
    boolean endRegister() -> endRegister
org.qiyi.basecore.utils.ConsistencyDataUtils$6 -> org.qiyi.basecore.utils.k:
    void <init>(android.content.Context) -> <init>
    boolean endRegister() -> endRegister
org.qiyi.basecore.utils.ConsistencyDataUtils$7 -> org.qiyi.basecore.utils.l:
    void <init>(android.content.Context) -> <init>
    boolean endRegister() -> endRegister
org.qiyi.basecore.utils.ConsistencyDataUtils$IQueryDataCallback -> org.qiyi.basecore.utils.ConsistencyDataUtils$IQueryDataCallback:
    void onCallBack(java.lang.String) -> onCallBack
org.qiyi.basecore.utils.DeviceUtil -> org.qiyi.basecore.utils.DeviceUtil:
    java.lang.String TAG -> TAG
    java.util.List FAILMAC -> FAILMAC
    void <init>() -> <init>
    java.lang.String getDeviceName() -> getDeviceName
    java.lang.String getDeviceName2() -> getDeviceName2
    java.lang.String getOSVersionInfo() -> getOSVersionInfo
    java.lang.String getMobileModel() -> getMobileModel
    java.lang.String getUserAgentInfo() -> getUserAgentInfo
    boolean isJailBreak() -> isJailBreak
    boolean isHuaweiEmui() -> isHuaweiEmui
    java.lang.String getIMEI(android.content.Context) -> getIMEI
    java.lang.String getMacAddress(android.content.Context) -> getMacAddress
    java.lang.String getMacByConfig() -> getMacByConfig
    java.lang.String getMacAddrByInterfaceName(java.lang.String) -> getMacAddrByInterfaceName
    long getAvailMemorySize() -> getAvailMemorySize
    java.lang.String getCurrentProcessName(android.content.Context) -> getCurrentProcessName
    void <clinit>() -> <clinit>
org.qiyi.basecore.utils.DynamicIconResolver -> org.qiyi.basecore.utils.DynamicIconResolver:
    java.util.concurrent.ConcurrentHashMap sIconsMap -> sIconsMap
    void <init>() -> <init>
    java.lang.String getIconCachedUrl(android.content.Context,java.lang.String) -> getIconCachedUrl
    java.lang.String getIconCachedUrl(android.content.Context,java.lang.String,boolean) -> getIconCachedUrl
    java.lang.String selectIconUrl(java.lang.String,boolean) -> selectIconUrl
    void parseMarkJson(org.json.JSONArray) -> parseMarkJson
org.qiyi.basecore.utils.DynamicIconResolver$1 -> org.qiyi.basecore.utils.m:
org.qiyi.basecore.utils.DynamicIconResolver$ICON -> org.qiyi.basecore.utils.n:
    java.lang.String w -> js
    java.lang.String h -> h
    java.lang.String k -> k
    java.lang.String v -> jt
    java.lang.String twv -> ju
    void <init>() -> <init>
    void <init>(org.qiyi.basecore.utils.DynamicIconResolver$1) -> <init>
org.qiyi.basecore.utils.ExceptionUtils -> org.qiyi.basecore.utils.ExceptionUtils:
    java.lang.String TAG -> TAG
    void <init>() -> <init>
    void printStackTrace(java.lang.Exception) -> printStackTrace
    void printStackTrace(java.lang.String,java.lang.Exception) -> printStackTrace
    void printStackTrace(java.lang.Error) -> printStackTrace
    void printStackTrace(java.lang.Throwable) -> printStackTrace
org.qiyi.basecore.utils.FileThreadPoolExecutor -> org.qiyi.basecore.utils.o:
    boolean hasFinish -> jv
    java.lang.Object mLock -> mLock
    void <init>(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue) -> <init>
    void afterExecute(java.lang.Runnable,java.lang.Throwable) -> afterExecute
    void doWaitFinishTask() -> cJ
org.qiyi.basecore.utils.FileUtils -> org.qiyi.basecore.utils.FileUtils:
    java.util.concurrent.ConcurrentMap sCurrentLocks -> sCurrentLocks
    java.lang.String TAG -> TAG
    java.lang.String FILE_EXTENSION_SEPARATOR -> FILE_EXTENSION_SEPARATOR
    java.lang.String DOWNLOAD_ERROR_CODE_FILE_NAME -> DOWNLOAD_ERROR_CODE_FILE_NAME
    java.lang.String CUBE_ERROR_FILE_NAME -> CUBE_ERROR_FILE_NAME
    java.lang.String APP_CRASH_LOG_FILE -> APP_CRASH_LOG_FILE
    java.lang.String APP_MOBILE_PLAY_KEY_EVENT -> APP_MOBILE_PLAY_KEY_EVENT
    long CUBE_FEEDBACK_SEEK_LENGTH -> CUBE_FEEDBACK_SEEK_LENGTH
    java.lang.String ROOT_FILE_PATH -> ROOT_FILE_PATH
    void <init>() -> <init>
    java.io.File getFile(android.content.Context,java.lang.String,java.lang.String) -> getFile
    java.lang.String file2String(java.io.File,java.lang.String) -> file2String
    boolean renameFile(java.lang.String,java.lang.String,boolean) -> renameFile
    boolean renameFile(java.io.File,java.io.File,boolean) -> renameFile
    boolean string2File(java.lang.String,java.lang.String) -> string2File
    boolean string2File(java.lang.String,java.lang.String,boolean) -> string2File
    java.util.concurrent.locks.ReentrantReadWriteLock createOrGetLock(java.lang.String) -> createOrGetLock
    void tryToRemoveLock(java.lang.String) -> tryToRemoveLock
    boolean bytesToFile(byte[],java.lang.String) -> bytesToFile
    byte[] fileToBytes(java.io.File) -> fileToBytes
    boolean copyToFile(java.io.File,java.io.File) -> copyToFile
    java.lang.String readFileFromRow(android.content.Context,java.lang.String) -> readFileFromRow
    java.lang.String readGzipDataFromRowFile(android.content.Context,java.lang.String) -> readGzipDataFromRowFile
    byte[] readGzipFromRowFile(android.content.Context,java.lang.String) -> readGzipFromRowFile
    byte[] File2byte(java.lang.String) -> File2byte
    void silentlyCloseCloseable(java.io.Closeable) -> silentlyCloseCloseable
    void installApkFile(android.content.Context,java.io.File) -> installApkFile
    android.net.Uri getFileProviderUriFormFile(android.content.Context,java.io.File) -> getFileProviderUriFormFile
    android.net.Uri getFileProviderUriFormPathName(android.content.Context,java.lang.String) -> getFileProviderUriFormPathName
    void applyUriPermission(android.content.Context,android.content.Intent,android.net.Uri) -> applyUriPermission
    java.lang.String getFileNameWithoutExtension(java.lang.String) -> getFileNameWithoutExtension
    java.lang.String getFileExtension(java.lang.String) -> getFileExtension
    boolean isFileExist(java.lang.String) -> isFileExist
    boolean deleteFiles(java.io.File) -> deleteFiles
    boolean deleteFile(java.io.File) -> deleteFile
    long getFileSize(java.lang.String) -> getFileSize
    boolean makeDirs(java.lang.String) -> makeDirs
    java.lang.String getFolderName(java.lang.String) -> getFolderName
    void writeSerObjectToFile(java.lang.Object,java.lang.String) -> writeSerObjectToFile
    java.lang.Object readSerObjectFromFile(java.lang.String) -> readSerObjectFromFile
    java.io.File makeDIRAndCreateFile(java.lang.String) -> makeDIRAndCreateFile
    void stringToFile(android.content.Context,java.lang.String,java.lang.String) -> stringToFile
    java.lang.String fileToString(java.lang.String) -> fileToString
    void storeJson2File(java.lang.String,java.lang.String,java.lang.String) -> storeJson2File
    java.util.HashMap getJson2File(java.lang.String,java.lang.String) -> getJson2File
    java.lang.String selectDir(android.content.Context) -> selectDir
    void storeOnlySign2File(android.content.Context,java.lang.String) -> storeOnlySign2File
    java.util.HashMap getOnlySign(android.content.Context) -> getOnlySign
    void errorCodeToAccessFile(java.lang.String,java.lang.String) -> errorCodeToAccessFile
    java.lang.String readRandomAccessFile(java.lang.String,long) -> readRandomAccessFile
    java.lang.String getDownloadVideoErrorCodePath(android.content.Context,java.lang.String) -> getDownloadVideoErrorCodePath
    long getSDCardFreeSpace() -> getSDCardFreeSpace
    int getDiskCacheSize() -> getDiskCacheSize
    java.util.ArrayList getFilelist(java.lang.String) -> getFilelist
    void mobilePlayEventToFile(android.content.Context,java.lang.String) -> mobilePlayEventToFile
    void <clinit>() -> <clinit>
org.qiyi.basecore.utils.FloatUtils -> org.qiyi.basecore.utils.FloatUtils:
    float EPSILON -> EPSILON
    void <init>() -> <init>
    boolean floatsEqual(float,float) -> floatsEqual
org.qiyi.basecore.utils.GetFaviconUtil -> org.qiyi.basecore.utils.GetFaviconUtil:
    java.lang.String TAG -> TAG
    org.qiyi.basecore.utils.GetFaviconUtil instance -> instance
    java.lang.String url -> url
    org.qiyi.basecore.utils.GetFaviconUtil$ICallBack iCallBack -> iCallBack
    java.util.regex.Pattern IMAGE_PATTERN -> IMAGE_PATTERN
    void <init>() -> <init>
    org.qiyi.basecore.utils.GetFaviconUtil getInstance() -> getInstance
    void getFaviconByUrl(java.lang.String,org.qiyi.basecore.utils.GetFaviconUtil$ICallBack) -> getFaviconByUrl
    java.lang.String getIconUrlString(java.lang.String) -> getIconUrlString
    java.lang.String getFinalUrl(java.lang.String) -> getFinalUrl
    java.lang.String getIconUrlByRegex(java.lang.String) -> getIconUrlByRegex
    java.lang.String getImageTag(java.lang.String) -> getImageTag
    java.net.HttpURLConnection getConnection(java.lang.String) -> getConnection
    java.lang.String getIconJS() -> getIconJS
    java.lang.String access$000(org.qiyi.basecore.utils.GetFaviconUtil) -> access$000
    java.lang.String access$100(org.qiyi.basecore.utils.GetFaviconUtil,java.lang.String) -> access$100
    org.qiyi.basecore.utils.GetFaviconUtil$ICallBack access$200(org.qiyi.basecore.utils.GetFaviconUtil) -> access$200
    void <clinit>() -> <clinit>
org.qiyi.basecore.utils.GetFaviconUtil$1 -> org.qiyi.basecore.utils.p:
    org.qiyi.basecore.utils.GetFaviconUtil this$0 -> jw
    void <init>(org.qiyi.basecore.utils.GetFaviconUtil) -> <init>
    void run() -> run
org.qiyi.basecore.utils.GetFaviconUtil$ICallBack -> org.qiyi.basecore.utils.GetFaviconUtil$ICallBack:
    void onResponse(java.lang.String) -> onResponse
org.qiyi.basecore.utils.HardwareConfigurationUtils -> org.qiyi.basecore.utils.HardwareConfigurationUtils:
    long sMaxCPUFreq -> sMaxCPUFreq
    long sTotalDeviceMem -> sTotalDeviceMem
    java.lang.String sIMEI -> sIMEI
    java.lang.String sEncodedMacAddress -> sEncodedMacAddress
    java.lang.String sOriginalMacAddress -> sOriginalMacAddress
    void <init>() -> <init>
    boolean isSupportGyro(android.content.Context) -> isSupportGyro
    int getCpuNum() -> getCpuNum
    java.lang.String getCPUFreq() -> getCPUFreq
    long getPhoneCPUFreqPrivate() -> getPhoneCPUFreqPrivate
    long getTotalMemo() -> getTotalMemo
    java.lang.String getPhoneGpuFreq() -> getPhoneGpuFreq
    java.lang.String getImei(android.content.Context) -> getImei
    java.lang.String getMacAddress(android.content.Context,boolean) -> getMacAddress
    void <clinit>() -> <clinit>
org.qiyi.basecore.utils.HttpUrl -> org.qiyi.basecore.utils.HttpUrl:
    char[] HEX_DIGITS -> HEX_DIGITS
    java.lang.String USERNAME_ENCODE_SET -> USERNAME_ENCODE_SET
    java.lang.String PASSWORD_ENCODE_SET -> PASSWORD_ENCODE_SET
    java.lang.String PATH_SEGMENT_ENCODE_SET -> PATH_SEGMENT_ENCODE_SET
    java.lang.String QUERY_ENCODE_SET -> QUERY_ENCODE_SET
    java.lang.String FRAGMENT_ENCODE_SET -> FRAGMENT_ENCODE_SET
    java.lang.String scheme -> scheme
    java.lang.String username -> username
    java.lang.String password -> password
    java.lang.String host -> host
    int port -> port
    java.util.List queryNamesAndValues -> queryNamesAndValues
    java.lang.String url -> url
    void <init>(org.qiyi.basecore.utils.HttpUrl$Builder) -> <init>
    java.lang.String encodedUsername() -> encodedUsername
    java.lang.String encodedPassword() -> encodedPassword
    java.lang.String host() -> host
    int defaultPort(java.lang.String) -> defaultPort
    void pathSegmentsToString(java.lang.StringBuilder,java.util.List) -> pathSegmentsToString
    java.util.List encodedPathSegments() -> encodedPathSegments
    java.lang.String encodedQuery() -> encodedQuery
    void namesAndValuesToQueryString(java.lang.StringBuilder,java.util.List) -> namesAndValuesToQueryString
    java.util.List queryStringToNamesAndValues(java.lang.String) -> queryStringToNamesAndValues
    org.qiyi.basecore.utils.HttpUrl parse(java.lang.String,java.lang.String) -> parse
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    java.lang.String percentDecode(java.lang.String,boolean) -> percentDecode
    java.util.List percentDecode(java.util.List,boolean) -> percentDecode
    java.lang.String percentDecode(java.lang.String,int,int,boolean) -> percentDecode
    void percentDecode(okio.Buffer,java.lang.String,int,int,boolean) -> percentDecode
    boolean percentEncoded(java.lang.String,int,int) -> percentEncoded
    int decodeHexDigit(char) -> decodeHexDigit
    java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean) -> canonicalize
    void canonicalize(okio.Buffer,java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean) -> canonicalize
    java.lang.String canonicalize(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean) -> canonicalize
    int delimiterOffset(java.lang.String,int,int,java.lang.String) -> delimiterOffset
    int delimiterOffset(java.lang.String,int,int,char) -> delimiterOffset
    int skipLeadingAsciiWhitespace(java.lang.String,int,int) -> skipLeadingAsciiWhitespace
    int skipTrailingAsciiWhitespace(java.lang.String,int,int) -> skipTrailingAsciiWhitespace
    java.lang.String domainToAscii(java.lang.String) -> domainToAscii
    boolean containsInvalidHostnameAsciiCodes(java.lang.String) -> containsInvalidHostnameAsciiCodes
    void <init>(org.qiyi.basecore.utils.HttpUrl$Builder,org.qiyi.basecore.utils.HttpUrl$1) -> <init>
    java.lang.String access$100(org.qiyi.basecore.utils.HttpUrl) -> access$100
    java.lang.String access$200(org.qiyi.basecore.utils.HttpUrl) -> access$200
    int access$300(org.qiyi.basecore.utils.HttpUrl) -> access$300
    void <clinit>() -> <clinit>
org.qiyi.basecore.utils.HttpUrl$1 -> org.qiyi.basecore.utils.q:
org.qiyi.basecore.utils.HttpUrl$Builder -> org.qiyi.basecore.utils.HttpUrl$Builder:
    java.lang.String scheme -> scheme
    java.lang.String encodedUsername -> encodedUsername
    java.lang.String encodedPassword -> encodedPassword
    java.lang.String host -> host
    int port -> port
    java.util.List encodedPathSegments -> encodedPathSegments
    java.util.List encodedQueryNamesAndValues -> encodedQueryNamesAndValues
    java.lang.String encodedFragment -> encodedFragment
    void <init>() -> <init>
    int effectivePort() -> effectivePort
    org.qiyi.basecore.utils.HttpUrl$Builder encodedQuery(java.lang.String) -> encodedQuery
    org.qiyi.basecore.utils.HttpUrl build() -> build
    java.lang.String toString() -> toString
    org.qiyi.basecore.utils.HttpUrl$Builder$ParseResult parse(org.qiyi.basecore.utils.HttpUrl,java.lang.String) -> parse
    void resolvePath(java.lang.String,int,int) -> resolvePath
    void push(java.lang.String,int,int,boolean,boolean) -> push
    boolean isDot(java.lang.String) -> isDot
    boolean isDotDot(java.lang.String) -> isDotDot
    void pop() -> pop
    int schemeDelimiterOffset(java.lang.String,int,int) -> schemeDelimiterOffset
    int slashCount(java.lang.String,int,int) -> slashCount
    int portColonOffset(java.lang.String,int,int) -> portColonOffset
    java.lang.String canonicalizeHost(java.lang.String,int,int) -> canonicalizeHost
    java.net.InetAddress decodeIpv6(java.lang.String,int,int) -> decodeIpv6
    boolean decodeIpv4Suffix(java.lang.String,int,int,byte[],int) -> decodeIpv4Suffix
    java.lang.String inet6AddressToAscii(byte[]) -> inet6AddressToAscii
    int parsePort(java.lang.String,int,int) -> parsePort
org.qiyi.basecore.utils.HttpUrl$Builder$ParseResult -> org.qiyi.basecore.utils.r:
    org.qiyi.basecore.utils.HttpUrl$Builder$ParseResult SUCCESS -> jx
    org.qiyi.basecore.utils.HttpUrl$Builder$ParseResult MISSING_SCHEME -> jy
    org.qiyi.basecore.utils.HttpUrl$Builder$ParseResult UNSUPPORTED_SCHEME -> jz
    org.qiyi.basecore.utils.HttpUrl$Builder$ParseResult INVALID_PORT -> jA
    org.qiyi.basecore.utils.HttpUrl$Builder$ParseResult INVALID_HOST -> jB
    org.qiyi.basecore.utils.HttpUrl$Builder$ParseResult[] $VALUES -> jC
    org.qiyi.basecore.utils.HttpUrl$Builder$ParseResult[] values() -> values
    org.qiyi.basecore.utils.HttpUrl$Builder$ParseResult valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
org.qiyi.basecore.utils.INetChangeCallBack -> org.qiyi.basecore.utils.INetChangeCallBack:
    void onNetWorkChange(boolean) -> onNetWorkChange
org.qiyi.basecore.utils.IntentUtils -> org.qiyi.basecore.utils.IntentUtils:
    void <init>() -> <init>
    boolean getBooleanExtra(android.content.Intent,java.lang.String,boolean) -> getBooleanExtra
    boolean getBooleanExtra(android.os.Bundle,java.lang.String,boolean) -> getBooleanExtra
    java.lang.String getStringExtra(android.content.Intent,java.lang.String) -> getStringExtra
    java.lang.String getStringExtra(android.os.Bundle,java.lang.String) -> getStringExtra
    int getIntExtra(android.content.Intent,java.lang.String,int) -> getIntExtra
    int getIntExtra(android.os.Bundle,java.lang.String,int) -> getIntExtra
    java.io.Serializable getSerializableExtra(android.content.Intent,java.lang.String) -> getSerializableExtra
    android.os.Parcelable getParcelableExtra(android.content.Intent,java.lang.String) -> getParcelableExtra
    long getLongExtra(android.content.Intent,java.lang.String,long) -> getLongExtra
    byte[] getByteArrayExtra(android.content.Intent,java.lang.String) -> getByteArrayExtra
    java.util.ArrayList getStringArrayListExtra(android.content.Intent,java.lang.String) -> getStringArrayListExtra
    android.os.Bundle getBundleExtra(android.content.Intent,java.lang.String) -> getBundleExtra
    android.net.Uri getData(android.content.Intent) -> getData
org.qiyi.basecore.utils.InteractTool -> org.qiyi.basecore.utils.InteractTool:
    org.qiyi.basecore.utils.InteractTool$ICrashReporter iCrashReporter -> iCrashReporter
    void <init>() -> <init>
    void setCrashReporter(org.qiyi.basecore.utils.InteractTool$ICrashReporter) -> setCrashReporter
    void randomReportException(org.qiyi.android.corejar.debug.DebugLog$IGetLog) -> randomReportException
    void randomReportException(java.lang.String,int) -> randomReportException
    void reportJsException(java.lang.String,java.lang.String,java.lang.String) -> reportJsException
org.qiyi.basecore.utils.InteractTool$ICrashReporter -> org.qiyi.basecore.utils.InteractTool$ICrashReporter:
    void randomReportException(java.lang.String) -> randomReportException
    void randomReportException(java.lang.String,int) -> randomReportException
    void reportJsException(java.lang.String,java.lang.String,java.lang.String) -> reportJsException
org.qiyi.basecore.utils.JsonUtil -> org.qiyi.basecore.utils.JsonUtil:
    java.lang.String TAG -> TAG
    void <init>() -> <init>
    int readInt(org.json.JSONObject,java.lang.String) -> readInt
    int readInt(org.json.JSONObject,java.lang.String,int) -> readInt
    long readLong(org.json.JSONObject,java.lang.String) -> readLong
    long readLong(org.json.JSONObject,java.lang.String,long) -> readLong
    double readDouble(org.json.JSONObject,java.lang.String) -> readDouble
    double readDouble(org.json.JSONObject,java.lang.String,double) -> readDouble
    java.lang.String readString(org.json.JSONObject,java.lang.String) -> readString
    java.lang.String readString(org.json.JSONObject,java.lang.String,java.lang.String) -> readString
    boolean readBoolean(org.json.JSONObject,java.lang.String,boolean) -> readBoolean
    org.json.JSONObject readObj(org.json.JSONObject,java.lang.String) -> readObj
    org.json.JSONObject readObj(org.json.JSONArray,int) -> readObj
    org.json.JSONArray readArray(org.json.JSONObject,java.lang.String) -> readArray
org.qiyi.basecore.utils.NetWorkTypeUtils -> org.qiyi.basecore.utils.NetWorkTypeUtils:
    int NETWORK_TYPE_HSPAP -> NETWORK_TYPE_HSPAP
    void <init>() -> <init>
    android.net.NetworkInfo getAvailableNetWorkInfo(android.content.Context) -> getAvailableNetWorkInfo
    boolean isNetAvailable(android.content.Context) -> isNetAvailable
    java.lang.String getNetWorkType(android.content.Context) -> getNetWorkType
    org.qiyi.basecore.utils.NetworkStatus getNetworkStatus(android.content.Context) -> getNetworkStatus
    org.qiyi.basecore.utils.NetworkStatus getNetworkStatusFor4G(android.content.Context) -> getNetworkStatusFor4G
    boolean isMobileNetwork(android.content.Context) -> isMobileNetwork
    java.lang.String getNetWorkApnType(android.content.Context) -> getNetWorkApnType
org.qiyi.basecore.utils.NetworkChangeReceiver -> org.qiyi.basecore.utils.NetworkChangeReceiver:
    java.lang.String TAG -> TAG
    int MSG_NETWORK_CHANGED -> MSG_NETWORK_CHANGED
    int MSG_RETRIEVE_NETWORK_STATUS -> MSG_RETRIEVE_NETWORK_STATUS
    long RETRIEVE_STEP -> RETRIEVE_STEP
    org.qiyi.basecore.utils.NetworkChangeReceiver sNetworkChangeReceiver -> sNetworkChangeReceiver
    android.content.Context mContext -> mContext
    org.qiyi.basecore.utils.NetworkStatus mCurrentNetworkStatus -> mCurrentNetworkStatus
    java.util.Map mCallbackMap -> mCallbackMap
    java.util.concurrent.CopyOnWriteArraySet mNeedAutoRetrieveTag -> mNeedAutoRetrieveTag
    android.os.Handler mHandler -> mHandler
    void <init>() -> <init>
    org.qiyi.basecore.utils.NetworkChangeReceiver getNetworkChangeReceiver(android.content.Context) -> getNetworkChangeReceiver
    boolean hasInstance() -> hasInstance
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
    void sendRetrieveMsg(android.os.Handler) -> sendRetrieveMsg
    void cleanRetrieveMsg(android.os.Handler) -> cleanRetrieveMsg
    boolean canLoopRetrieveMsg() -> canLoopRetrieveMsg
    void handleNetStatusChange(org.qiyi.basecore.utils.NetworkStatus) -> handleNetStatusChange
    boolean ensureMainThread(org.qiyi.basecore.utils.NetworkStatus,org.qiyi.basecore.utils.INetChangeCallBack) -> ensureMainThread
    void handleMessageChangeCallback(org.qiyi.basecore.utils.NetworkStatus,org.qiyi.basecore.utils.INetChangeCallBack) -> handleMessageChangeCallback
    void handleMessageChangeCallback(org.qiyi.basecore.utils.NetworkStatus,org.qiyi.basecore.utils.AbsNetworkChangeCallback) -> handleMessageChangeCallback
    void registReceiver(java.lang.String,org.qiyi.basecore.utils.AbsNetworkChangeCallback) -> registReceiver
    void registReceiver(org.qiyi.basecore.utils.INetChangeCallBack) -> registReceiver
    void registerNetworkChangObserver(java.lang.String,org.qiyi.basecore.utils.AbsNetworkChangeCallback,boolean) -> registerNetworkChangObserver
    void register(android.content.Context) -> register
    void unRegister() -> unRegister
    void unRegistReceiver(java.lang.String) -> unRegistReceiver
    void unRegistReceiver(org.qiyi.basecore.utils.INetChangeCallBack) -> unRegistReceiver
    void access$000(org.qiyi.basecore.utils.NetworkChangeReceiver,org.qiyi.basecore.utils.NetworkStatus) -> access$000
    boolean access$100(org.qiyi.basecore.utils.NetworkChangeReceiver) -> access$100
    void access$200(org.qiyi.basecore.utils.NetworkChangeReceiver,android.os.Handler) -> access$200
    void access$300(org.qiyi.basecore.utils.NetworkChangeReceiver,android.os.Handler) -> access$300
    android.content.Context access$400(org.qiyi.basecore.utils.NetworkChangeReceiver) -> access$400
    void access$500(org.qiyi.basecore.utils.NetworkChangeReceiver,org.qiyi.basecore.utils.NetworkStatus,org.qiyi.basecore.utils.INetChangeCallBack) -> access$500
    void <clinit>() -> <clinit>
org.qiyi.basecore.utils.NetworkChangeReceiver$1 -> org.qiyi.basecore.utils.s:
    org.qiyi.basecore.utils.NetworkChangeReceiver this$0 -> jD
    void <init>(org.qiyi.basecore.utils.NetworkChangeReceiver,android.os.Looper) -> <init>
    void handleMessage(android.os.Message) -> handleMessage
org.qiyi.basecore.utils.NetworkChangeReceiver$2 -> org.qiyi.basecore.utils.t:
    org.qiyi.basecore.utils.NetworkStatus val$status -> jE
    org.qiyi.basecore.utils.INetChangeCallBack val$callback -> jF
    org.qiyi.basecore.utils.NetworkChangeReceiver this$0 -> jD
    void <init>(org.qiyi.basecore.utils.NetworkChangeReceiver,org.qiyi.basecore.utils.NetworkStatus,org.qiyi.basecore.utils.INetChangeCallBack) -> <init>
    void run() -> run
org.qiyi.basecore.utils.NetworkStatus -> org.qiyi.basecore.utils.NetworkStatus:
    org.qiyi.basecore.utils.NetworkStatus OFF -> OFF
    org.qiyi.basecore.utils.NetworkStatus MOBILE_3G -> MOBILE_3G
    org.qiyi.basecore.utils.NetworkStatus MOBILE_2G -> MOBILE_2G
    org.qiyi.basecore.utils.NetworkStatus WIFI -> WIFI
    org.qiyi.basecore.utils.NetworkStatus OTHER -> OTHER
    org.qiyi.basecore.utils.NetworkStatus MOBILE_4G -> MOBILE_4G
    org.qiyi.basecore.utils.NetworkStatus[] $VALUES -> $VALUES
    org.qiyi.basecore.utils.NetworkStatus[] values() -> values
    org.qiyi.basecore.utils.NetworkStatus valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
org.qiyi.basecore.utils.PageDataHolder -> org.qiyi.basecore.utils.PageDataHolder:
    java.lang.String TAG -> TAG
    java.util.Map cardCacheMap -> cardCacheMap
    java.util.Map pageDataCacheMap -> pageDataCacheMap
    org.qiyi.basecore.utils.PageDataHolder instance -> instance
    org.qiyi.basecore.utils.PageDataHolder$TimeTickReceiver tickReceiver -> tickReceiver
    android.content.IntentFilter tickFilter -> tickFilter
    void <init>() -> <init>
    org.qiyi.basecore.utils.PageDataHolder getInstance() -> getInstance
    java.lang.Object putPageDataCache(java.lang.String,java.lang.Object) -> putPageDataCache
    java.lang.Object getPageDataCache(java.lang.String) -> getPageDataCache
    java.util.List putCardModels(java.lang.String,java.util.List) -> putCardModels
    void removeCardModels(java.lang.String,java.lang.Object) -> removeCardModels
    java.util.List getCardModels(java.lang.String) -> getCardModels
    java.util.List clearCache(java.lang.String) -> clearCache
    void clearPrefixCache(java.lang.String) -> clearPrefixCache
    void clearCache() -> clearCache
    void startClearTask() -> startClearTask
    void stopClearTask() -> stopClearTask
    java.util.Map access$000(org.qiyi.basecore.utils.PageDataHolder) -> access$000
org.qiyi.basecore.utils.PageDataHolder$TimeTickReceiver -> org.qiyi.basecore.utils.PageDataHolder$TimeTickReceiver:
    org.qiyi.basecore.utils.PageDataHolder this$0 -> this$0
    void <init>(org.qiyi.basecore.utils.PageDataHolder) -> <init>
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
org.qiyi.basecore.utils.PageDataHolder$TimeTickReceiver$1 -> org.qiyi.basecore.utils.u:
    org.qiyi.basecore.utils.PageDataHolder$TimeTickReceiver this$1 -> jG
    void <init>(org.qiyi.basecore.utils.PageDataHolder$TimeTickReceiver) -> <init>
    java.util.List doInBackground(java.lang.Void[]) -> b
    void onPostExecute(java.util.List) -> r
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
org.qiyi.basecore.utils.PermissionUtil -> org.qiyi.basecore.utils.PermissionUtil:
    int PERMISSION_PHONE_STATE -> PERMISSION_PHONE_STATE
    int PERMISSION_CAMEAR -> PERMISSION_CAMEAR
    int PERMISSION_LOCATION -> PERMISSION_LOCATION
    int PERMISSION_STORAGE -> PERMISSION_STORAGE
    int PERMISSION_RECORD_AUDIO -> PERMISSION_RECORD_AUDIO
    int PERMISSION_PLAYER_CAPTURE_STORE -> PERMISSION_PLAYER_CAPTURE_STORE
    java.lang.String TAG -> TAG
    void <init>() -> <init>
    boolean hasSelfPermission(android.content.Context,java.lang.String) -> hasSelfPermission
    boolean requestPhoneStateInWelcomeActivity(android.app.Application) -> requestPhoneStateInWelcomeActivity
    boolean isNewPermissionModel(android.app.Application) -> isNewPermissionModel
org.qiyi.basecore.utils.ResourcesTool -> org.qiyi.basecore.utils.ResourcesTool:
    java.lang.String DRAWABLE -> DRAWABLE
    java.lang.String STRING -> STRING
    java.lang.String STYLE -> STYLE
    java.lang.String LAYOUT -> LAYOUT
    java.lang.String ID -> ID
    java.lang.String COLOR -> COLOR
    java.lang.String RAW -> RAW
    java.lang.String ANIM -> ANIM
    java.lang.String ATTR -> ATTR
    java.lang.String DIMEN -> DIMEN
    java.lang.String mPackageName -> mPackageName
    android.content.res.Resources mResources -> mResources
    java.lang.Object sInitLock -> sInitLock
    void <init>() -> <init>
    void init(android.content.Context) -> init
    int getResourceId(java.lang.String,java.lang.String) -> getResourceId
    int getResourceIdForString(java.lang.String) -> getResourceIdForString
    int getResourceIdForID(java.lang.String) -> getResourceIdForID
    int getResourceIdForLayout(java.lang.String) -> getResourceIdForLayout
    int getResourceIdForDrawable(java.lang.String) -> getResourceIdForDrawable
    int getResourceIdForStyle(java.lang.String) -> getResourceIdForStyle
    int getResourceIdForColor(java.lang.String) -> getResourceIdForColor
    int getResourceIdForRaw(java.lang.String) -> getResourceIdForRaw
    int getResourceForAnim(java.lang.String) -> getResourceForAnim
    int getResourceForAttr(java.lang.String) -> getResourceForAttr
    int getResourceForDimen(java.lang.String) -> getResourceForDimen
    int getResourceIdForDimen(java.lang.String) -> getResourceIdForDimen
    float getDimention(java.lang.String,int) -> getDimention
    int getResourceIdForDrawable(android.content.Context,java.lang.String) -> getResourceIdForDrawable
    int getResourceIdForLayout(android.content.Context,java.lang.String) -> getResourceIdForLayout
    void assetContext() -> assetContext
    void assetContext(android.content.Context) -> assetContext
    java.lang.String getmPackageName() -> getmPackageName
    void <clinit>() -> <clinit>
org.qiyi.basecore.utils.SPBigStringFileFactory -> org.qiyi.basecore.utils.SPBigStringFileFactory:
    java.lang.String TAG -> TAG
    int MEMORY_CACHE_SIZE -> MEMORY_CACHE_SIZE
    int THREAD_POOL_MIN_SIZE -> THREAD_POOL_MIN_SIZE
    int THREAD_POOL_MAX_SIZE -> THREAD_POOL_MAX_SIZE
    int VERSION -> VERSION
    java.lang.String ENCODING -> ENCODING
    java.lang.Long DELAY_TIME -> DELAY_TIME
    java.util.Map sMapList -> sMapList
    android.content.Context sContext -> sContext
    android.os.Handler sUIHandler -> sUIHandler
    java.util.concurrent.ConcurrentMap sCurrentLocks -> sCurrentLocks
    org.qiyi.basecore.utils.FileThreadPoolExecutor mFileThreadPool -> mFileThreadPool
    android.support.v4.util.LruCache mMemoryCache -> mMemoryCache
    java.lang.String SP_NAME_FOR_PLUGIN_JSON -> SP_NAME_FOR_PLUGIN_JSON
    java.lang.String SP_KEY_FOR_PLUGIN_JSON -> SP_KEY_FOR_PLUGIN_JSON
    org.qiyi.basecore.utils.SPBigStringFileFactory mInstance -> mInstance
    void <init>(android.content.Context) -> <init>
    org.qiyi.basecore.utils.SPBigStringFileFactory getInstance(android.content.Context) -> getInstance
    boolean hasKeySync(java.lang.String) -> hasKeySync
    boolean addKeySync(java.lang.String,java.lang.String) -> addKeySync
    void addKeyAsync(java.lang.String,java.lang.String) -> addKeyAsync
    void addKeyAsync(java.lang.String,java.lang.String,boolean,org.qiyi.basecore.utils.SPBigStringFileFactory$ISPStringFileListener) -> addKeyAsync
    java.lang.String getKeyMergeFromSPSync(java.lang.String,java.lang.String,java.lang.String) -> getKeyMergeFromSPSync
    java.lang.String getKeySync(java.lang.String,java.lang.String) -> getKeySync
    java.lang.String getKeyFileSyncDetail(java.lang.String,java.lang.String) -> getKeyFileSyncDetail
    void getKeyAsyncWithCallBackDetail(java.lang.String,java.lang.String,boolean,org.qiyi.basecore.utils.SPBigStringFileFactory$ISPStringFileListener) -> getKeyAsyncWithCallBackDetail
    void getKeyAsyncWithCallBack(java.lang.String,java.lang.String,boolean,org.qiyi.basecore.utils.SPBigStringFileFactory$ISPStringFileListener) -> getKeyAsyncWithCallBack
    void getKeyMergeFromSPAsyncWithCallBack(java.lang.String,java.lang.String,java.lang.String,boolean,org.qiyi.basecore.utils.SPBigStringFileFactory$ISPStringFileListener) -> getKeyMergeFromSPAsyncWithCallBack
    void doLoaderCallback(java.lang.String,org.qiyi.basecore.utils.SPBigStringFileFactory$ISPStringFileListener,boolean,java.lang.String) -> doLoaderCallback
    void removeKeyAsync(java.lang.String) -> removeKeyAsync
    boolean removeKeySync(java.lang.String) -> removeKeySync
    void removeKeyAsyncWithCallBack(java.lang.String,boolean,org.qiyi.basecore.utils.SPBigStringFileFactory$ISPStringFileListener) -> removeKeyAsyncWithCallBack
    void addOrRemoveKeyCallback(java.lang.String,org.qiyi.basecore.utils.SPBigStringFileFactory$ISPStringFileListener,boolean,boolean,boolean) -> addOrRemoveKeyCallback
    java.io.File getSPFile(java.lang.String,android.content.Context,boolean) -> getSPFile
    void addFileToMemoryCache(java.lang.String,java.lang.String) -> addFileToMemoryCache
    void removeFromMemoryCache(java.lang.String) -> removeFromMemoryCache
    java.lang.String getFileFromMemCache(java.lang.String) -> getFileFromMemCache
    java.util.concurrent.locks.ReentrantReadWriteLock createOrGetLock(java.lang.String) -> createOrGetLock
    void tryToRemoveLock(java.lang.String) -> tryToRemoveLock
    void syncFileToData() -> syncFileToData
    void initConfig() -> initConfig
    void doBatchMove() -> doBatchMove
    boolean moveStringKeyFromDefaultToFileFactory(java.lang.String) -> moveStringKeyFromDefaultToFileFactory
    boolean moveStringKeyToFileFactory(java.lang.String,java.lang.String) -> moveStringKeyToFileFactory
    java.util.concurrent.locks.ReentrantReadWriteLock access$000(java.lang.String) -> access$000
    android.content.Context access$100(org.qiyi.basecore.utils.SPBigStringFileFactory) -> access$100
    java.io.File access$200(org.qiyi.basecore.utils.SPBigStringFileFactory,java.lang.String,android.content.Context,boolean) -> access$200
    android.support.v4.util.LruCache access$300(org.qiyi.basecore.utils.SPBigStringFileFactory) -> access$300
    java.lang.String access$400() -> access$400
    void access$500(java.lang.String) -> access$500
    void access$600(org.qiyi.basecore.utils.SPBigStringFileFactory,java.lang.String,org.qiyi.basecore.utils.SPBigStringFileFactory$ISPStringFileListener,boolean,java.lang.String) -> access$600
    void access$700(org.qiyi.basecore.utils.SPBigStringFileFactory,java.lang.String,java.lang.String) -> access$700
    void access$800(org.qiyi.basecore.utils.SPBigStringFileFactory,java.lang.String) -> access$800
    java.util.Map access$900() -> access$900
    org.qiyi.basecore.utils.FileThreadPoolExecutor access$1000(org.qiyi.basecore.utils.SPBigStringFileFactory) -> access$1000
    void <clinit>() -> <clinit>
org.qiyi.basecore.utils.SPBigStringFileFactory$1 -> org.qiyi.basecore.utils.v:
    org.qiyi.basecore.utils.SPBigStringFileFactory this$0 -> jH
    void <init>(org.qiyi.basecore.utils.SPBigStringFileFactory,int) -> <init>
org.qiyi.basecore.utils.SPBigStringFileFactory$10 -> org.qiyi.basecore.utils.w:
    org.qiyi.basecore.utils.SPBigStringFileFactory this$0 -> jH
    void <init>(org.qiyi.basecore.utils.SPBigStringFileFactory) -> <init>
    void run() -> run
org.qiyi.basecore.utils.SPBigStringFileFactory$10$1 -> org.qiyi.basecore.utils.x:
    org.qiyi.basecore.utils.SPBigStringFileFactory$10 this$1 -> jI
    void <init>(org.qiyi.basecore.utils.SPBigStringFileFactory$10) -> <init>
    void run() -> run
org.qiyi.basecore.utils.SPBigStringFileFactory$2 -> org.qiyi.basecore.utils.y:
    java.lang.String val$key -> jJ
    java.lang.String val$value -> jn
    org.qiyi.basecore.utils.SPBigStringFileFactory$ISPStringFileListener val$listener -> jK
    boolean val$callBackOnUIThread -> jL
    org.qiyi.basecore.utils.SPBigStringFileFactory this$0 -> jH
    void <init>(org.qiyi.basecore.utils.SPBigStringFileFactory,java.lang.String,java.lang.String,org.qiyi.basecore.utils.SPBigStringFileFactory$ISPStringFileListener,boolean) -> <init>
    void run() -> run
org.qiyi.basecore.utils.SPBigStringFileFactory$3 -> org.qiyi.basecore.utils.z:
    java.lang.String val$key -> jJ
    org.qiyi.basecore.utils.SPBigStringFileFactory$ISPStringFileListener val$listener -> jK
    boolean val$callBackOnUIThread -> jL
    java.lang.String val$defaultValue -> jp
    org.qiyi.basecore.utils.SPBigStringFileFactory this$0 -> jH
    void <init>(org.qiyi.basecore.utils.SPBigStringFileFactory,java.lang.String,org.qiyi.basecore.utils.SPBigStringFileFactory$ISPStringFileListener,boolean,java.lang.String) -> <init>
    void run() -> run
org.qiyi.basecore.utils.SPBigStringFileFactory$4 -> org.qiyi.basecore.utils.aa:
    org.qiyi.basecore.utils.SPBigStringFileFactory$ISPStringFileListener val$listener -> jK
    java.lang.String val$key -> jJ
    java.lang.String val$value -> jn
    org.qiyi.basecore.utils.SPBigStringFileFactory this$0 -> jH
    void <init>(org.qiyi.basecore.utils.SPBigStringFileFactory,org.qiyi.basecore.utils.SPBigStringFileFactory$ISPStringFileListener,java.lang.String,java.lang.String) -> <init>
    void run() -> run
org.qiyi.basecore.utils.SPBigStringFileFactory$5 -> org.qiyi.basecore.utils.ab:
    org.qiyi.basecore.utils.SPBigStringFileFactory$ISPStringFileListener val$listener -> jK
    java.lang.String val$key -> jJ
    java.lang.String val$value -> jn
    org.qiyi.basecore.utils.SPBigStringFileFactory this$0 -> jH
    void <init>(org.qiyi.basecore.utils.SPBigStringFileFactory,org.qiyi.basecore.utils.SPBigStringFileFactory$ISPStringFileListener,java.lang.String,java.lang.String) -> <init>
    void run() -> run
org.qiyi.basecore.utils.SPBigStringFileFactory$6 -> org.qiyi.basecore.utils.ac:
    java.lang.String val$key -> jJ
    org.qiyi.basecore.utils.SPBigStringFileFactory this$0 -> jH
    void <init>(org.qiyi.basecore.utils.SPBigStringFileFactory,java.lang.String) -> <init>
    void run() -> run
org.qiyi.basecore.utils.SPBigStringFileFactory$7 -> org.qiyi.basecore.utils.ad:
    java.lang.String val$key -> jJ
    org.qiyi.basecore.utils.SPBigStringFileFactory$ISPStringFileListener val$listener -> jK
    boolean val$callBackOnUIThread -> jL
    org.qiyi.basecore.utils.SPBigStringFileFactory this$0 -> jH
    void <init>(org.qiyi.basecore.utils.SPBigStringFileFactory,java.lang.String,org.qiyi.basecore.utils.SPBigStringFileFactory$ISPStringFileListener,boolean) -> <init>
    void run() -> run
org.qiyi.basecore.utils.SPBigStringFileFactory$8 -> org.qiyi.basecore.utils.ae:
    boolean val$isAdd -> jM
    org.qiyi.basecore.utils.SPBigStringFileFactory$ISPStringFileListener val$listener -> jK
    java.lang.String val$key -> jJ
    boolean val$value -> jN
    org.qiyi.basecore.utils.SPBigStringFileFactory this$0 -> jH
    void <init>(org.qiyi.basecore.utils.SPBigStringFileFactory,boolean,org.qiyi.basecore.utils.SPBigStringFileFactory$ISPStringFileListener,java.lang.String,boolean) -> <init>
    void run() -> run
org.qiyi.basecore.utils.SPBigStringFileFactory$9 -> org.qiyi.basecore.utils.af:
    boolean val$isAdd -> jM
    org.qiyi.basecore.utils.SPBigStringFileFactory$ISPStringFileListener val$listener -> jK
    java.lang.String val$key -> jJ
    boolean val$value -> jN
    org.qiyi.basecore.utils.SPBigStringFileFactory this$0 -> jH
    void <init>(org.qiyi.basecore.utils.SPBigStringFileFactory,boolean,org.qiyi.basecore.utils.SPBigStringFileFactory$ISPStringFileListener,java.lang.String,boolean) -> <init>
    void run() -> run
org.qiyi.basecore.utils.SPBigStringFileFactory$ISPStringFileListener -> org.qiyi.basecore.utils.SPBigStringFileFactory$ISPStringFileListener:
    void onLoaderKey(java.lang.String,java.lang.String) -> onLoaderKey
    void onRemoveKey(java.lang.String,java.lang.Boolean) -> onRemoveKey
    void onAddKey(java.lang.String,java.lang.Boolean) -> onAddKey
org.qiyi.basecore.utils.SPBigStringFileFactory$MoveModule -> org.qiyi.basecore.utils.ag:
    java.lang.String mKey -> mKey
    java.lang.String mOldSPName -> jO
    boolean mMoveStatus -> jP
    void <init>(java.lang.String,java.lang.String) -> <init>
    java.lang.String getmKey() -> cK
    java.lang.String getmOldSPName() -> cL
    boolean ismMoveStatus() -> cM
    void setmMoveStatus(boolean) -> m
org.qiyi.basecore.utils.ScreenTool -> org.qiyi.basecore.utils.ScreenTool:
    int sNaviBarHeight -> sNaviBarHeight
    int sHasNaviBar -> sHasNaviBar
    int IMAGE_WIDTH -> IMAGE_WIDTH
    int IMAGE_HIGH -> IMAGE_HIGH
    void <init>() -> <init>
    int getWidth(android.app.Activity) -> getWidth
    int getHeight(android.app.Activity) -> getHeight
    java.lang.String getResolution(android.content.Context,java.lang.String) -> getResolution
    java.lang.String getResolution_IR(android.content.Context,java.lang.String) -> getResolution_IR
    int getWidth(android.content.Context) -> getWidth
    int getHeight(android.content.Context) -> getHeight
    int getScreenDpi(android.content.Context) -> getScreenDpi
    float getScreenDensity(android.content.Context) -> getScreenDensity
    int getScreenScale(android.content.Context) -> getScreenScale
    boolean isLandScape(android.content.Context) -> isLandScape
    float getScreenSize(android.content.Context) -> getScreenSize
    float getScreenRealSize(android.content.Context) -> getScreenRealSize
    int getStatusBarHeight(android.content.Context) -> getStatusBarHeight
    int getNavigationBarHeight(android.content.Context) -> getNavigationBarHeight
    boolean hasNavigationBar(android.content.Context) -> hasNavigationBar
    boolean isTablet(android.content.Context) -> isTablet
    void resizeItemIcon(android.widget.ImageView) -> resizeItemIcon
    void <clinit>() -> <clinit>
org.qiyi.basecore.utils.SharedPreferencesConstants -> org.qiyi.basecore.utils.SharedPreferencesConstants:
    java.lang.String DEFAULT_SHAREPREFERENCE_NAME -> DEFAULT_SHAREPREFERENCE_NAME
    java.lang.String LAUNCH_SHAREPREFERENCE_NAME -> LAUNCH_SHAREPREFERENCE_NAME
    java.lang.String DEFAULT_PLAY_STAT_NAME -> DEFAULT_PLAY_STAT_NAME
    java.lang.String DEFAULT_DOWNLOAD_PREFERENCE_NAME -> DEFAULT_DOWNLOAD_PREFERENCE_NAME
    java.lang.String KEY_AD_TIMES -> KEY_AD_TIMES
    java.lang.String KEY_STARTED_TIMES -> KEY_STARTED_TIMES
    java.lang.String DEFAULT_CACHE_FOLDER -> DEFAULT_CACHE_FOLDER
    java.lang.String KEY_IQIYI_PUSH_UUID -> KEY_IQIYI_PUSH_UUID
    java.lang.String DOWNLOADED_VIDEO -> DOWNLOADED_VIDEO
    java.lang.String DOWNLOADING_VIDEO -> DOWNLOADING_VIDEO
    java.lang.String DOWNLOADED_ALBUM -> DOWNLOADED_ALBUM
    java.lang.String DOWNLOADING_ALBUM -> DOWNLOADING_ALBUM
    java.lang.String DOWNLOAD_STAT_LAST_TIME -> DOWNLOAD_STAT_LAST_TIME
    java.lang.String IS_FIRST_TIME_SCAN_HELP_LAUCH -> IS_FIRST_TIME_SCAN_HELP_LAUCH
    java.lang.String KEY_SETTING_SKIP -> KEY_SETTING_SKIP
    java.lang.String VALUE_SETTING_SKIP -> VALUE_SETTING_SKIP
    java.lang.String KEY_SETTING_ALLOW -> KEY_SETTING_ALLOW
    java.lang.String VALUE_SETTING_ALLOW -> VALUE_SETTING_ALLOW
    java.lang.String KEY_SETTING_REMIND -> KEY_SETTING_REMIND
    java.lang.String VALUE_SETTING_REMIND_EACH -> VALUE_SETTING_REMIND_EACH
    java.lang.String VALUE_SETTING_REMIND_ONCE -> VALUE_SETTING_REMIND_ONCE
    java.lang.String KEY_SETTING_MODE -> KEY_SETTING_MODE
    java.lang.String KEY_CHANGE_MODE -> KEY_CHANGE_MODE
    java.lang.String VALUE_SETTING_MODE_LIST -> VALUE_SETTING_MODE_LIST
    java.lang.String VALUE_SETTING_MODE_GRID -> VALUE_SETTING_MODE_GRID
    java.lang.String VALUE_SETTING_REMIND_NEVER -> VALUE_SETTING_REMIND_NEVER
    java.lang.String KEY_SETTING_CUSTOM_SERVICE -> KEY_SETTING_CUSTOM_SERVICE
    java.lang.String ID_QIXIU -> ID_QIXIU
    java.lang.String ID_GAMECENTER -> ID_GAMECENTER
    java.lang.String ID_APPSTORE -> ID_APPSTORE
    java.lang.String VALUE_SETTING_DEFAULT_SERVICE -> VALUE_SETTING_DEFAULT_SERVICE
    java.lang.String VALUE_SETTING_CUSTOM_SERVICE -> VALUE_SETTING_CUSTOM_SERVICE
    java.lang.String KEY_LAST_CUSTOM_SERVICE_PINGBACK_TIME -> KEY_LAST_CUSTOM_SERVICE_PINGBACK_TIME
    java.lang.String KEY_CUSTOM_SERVICE_PWD -> KEY_CUSTOM_SERVICE_PWD
    java.lang.String KEY_SETTING_FLOATING_SHOW -> KEY_SETTING_FLOATING_SHOW
    java.lang.String KEY_SETTING_PUSH_MSG_OFF -> KEY_SETTING_PUSH_MSG_OFF
    java.lang.String VALUE_PUSH_MSG_OFF -> VALUE_PUSH_MSG_OFF
    java.lang.String KEY_SETTING_KUAPINGGOU -> KEY_SETTING_KUAPINGGOU
    java.lang.String VALUE_KUAPINGGOU_OFF -> VALUE_KUAPINGGOU_OFF
    java.lang.String KEY_SETTING_GPS_LOC_OFF -> KEY_SETTING_GPS_LOC_OFF
    java.lang.String KEY_CREATE_SHORT -> KEY_CREATE_SHORT
    java.lang.String KEY_VERSION_UPGRADE -> KEY_VERSION_UPGRADE
    java.lang.String DEFAULT_VALUE_VERSION_UPGRADE -> DEFAULT_VALUE_VERSION_UPGRADE
    java.lang.String VALUE_CREATE_SHORT -> VALUE_CREATE_SHORT
    java.lang.String KEY_NEW_UPDATA_VERSION -> KEY_NEW_UPDATA_VERSION
    java.lang.String KEY_BOTTOM_TIPS_FLAG -> KEY_BOTTOM_TIPS_FLAG
    java.lang.String KEY_BOTTOM_TIPS_SHOW_TIME -> KEY_BOTTOM_TIPS_SHOW_TIME
    java.lang.String KEY_BOTTOM_TIPS_AD_TIME -> KEY_BOTTOM_TIPS_AD_TIME
    java.lang.String KEY_ALREADY_REMIND -> KEY_ALREADY_REMIND
    java.lang.String VALUE_ALREADY_REMIND -> VALUE_ALREADY_REMIND
    java.lang.String VALUE_INIT_REMIND -> VALUE_INIT_REMIND
    java.lang.String SCAN_CFG -> SCAN_CFG
    java.lang.String KEY_QIYI_COM -> KEY_QIYI_COM
    java.lang.String PUSH_MSG_ID -> PUSH_MSG_ID
    java.lang.String KEY_CHASE_REMIND -> KEY_CHASE_REMIND
    java.lang.String CHASE_REMINDED_LIST -> CHASE_REMINDED_LIST
    java.lang.String CLEINT_VERSION_CODE -> CLEINT_VERSION_CODE
    java.lang.String KEY_CLIENT_OPEN_MESSAGE -> KEY_CLIENT_OPEN_MESSAGE
    java.lang.String KEY_CLIENT_TYPE -> KEY_CLIENT_TYPE
    int VALUE_CHASE_REMIND -> VALUE_CHASE_REMIND
    java.lang.String CATEGORY_TAG_UPTIME -> CATEGORY_TAG_UPTIME
    java.lang.String KEY_DOWNLOAD_SUCCESS_FIRST -> KEY_DOWNLOAD_SUCCESS_FIRST
    java.lang.String SHOW_CHASE_PROMPT -> SHOW_CHASE_PROMPT
    java.lang.String USER_CURRENT_RATE_TYPE -> USER_CURRENT_RATE_TYPE
    java.lang.String USER_DOWNLOAD_RATE_TYPE -> USER_DOWNLOAD_RATE_TYPE
    java.lang.String USER_DOWNLOAD_ROUTER_TYPE -> USER_DOWNLOAD_ROUTER_TYPE
    java.lang.String KEY_INIT_SETTING -> KEY_INIT_SETTING
    java.lang.String VALUE_INIT_SETTING_ALREADY -> VALUE_INIT_SETTING_ALREADY
    java.lang.String VALUE_SUBSCRIPT_LOCATION -> VALUE_SUBSCRIPT_LOCATION
    java.lang.String KEY_AD_DOWNLOAD_URL -> KEY_AD_DOWNLOAD_URL
    java.lang.String KEY_INITAPP_ISCRASH -> KEY_INITAPP_ISCRASH
    java.lang.String VALUE_INITAPP_ISCRASH_CRASH_NORMALEXIT -> VALUE_INITAPP_ISCRASH_CRASH_NORMALEXIT
    java.lang.String VALUE_IDFV_INFO -> VALUE_IDFV_INFO
    java.lang.String VALUE_REMIND_INFO -> VALUE_REMIND_INFO
    java.lang.String BAIDU_PUSH_USER_ID -> BAIDU_PUSH_USER_ID
    java.lang.String XIAO_MI_PUSH_USE_ID -> XIAO_MI_PUSH_USE_ID
    java.lang.String HUA_WEI_PUSH_USE_ID -> HUA_WEI_PUSH_USE_ID
    java.lang.String OFFLINE_DOWNLOAD_DIR -> OFFLINE_DOWNLOAD_DIR
    java.lang.String AD_FALG -> AD_FALG
    java.lang.String IS_ERROR_RESTART_COUNT -> IS_ERROR_RESTART_COUNT
    java.lang.String TEST_PID -> TEST_PID
    java.lang.String IS_IN_VIPPAY_FROM_PUSH -> IS_IN_VIPPAY_FROM_PUSH
    java.lang.String QIYI_DISCLAIMER -> QIYI_DISCLAIMER
    java.lang.String KEY_MYMAIN_MENU -> KEY_MYMAIN_MENU
    java.lang.String KEY_MYMAIN_MENU_GRID -> KEY_MYMAIN_MENU_GRID
    java.lang.String KEY_MYMAIN_MENU_TW -> KEY_MYMAIN_MENU_TW
    java.lang.String VIP_MESSAGE_COUNT -> VIP_MESSAGE_COUNT
    java.lang.String TW_MINE_MESSAGE_COUNT -> TW_MINE_MESSAGE_COUNT
    java.lang.String MY_MAIN_NEW_SKIN_FLAG -> MY_MAIN_NEW_SKIN_FLAG
    java.lang.String SERVER_MANAGER_CUSTOM_ORDER -> SERVER_MANAGER_CUSTOM_ORDER
    java.lang.String DISCOVERY_MENU -> DISCOVERY_MENU
    java.lang.String MYMAIN_MENU_UP_TIME -> MYMAIN_MENU_UP_TIME
    java.lang.String MYMAIN_MENU_VERSION -> MYMAIN_MENU_VERSION
    java.lang.String DISCOVERY_MENU_UP_TIME -> DISCOVERY_MENU_UP_TIME
    java.lang.String UPDATE_DISCOVERY_TIME -> UPDATE_DISCOVERY_TIME
    java.lang.String BOOT_IMAGE_SOURCE -> BOOT_IMAGE_SOURCE
    java.lang.String BOOT_IMAGE_SOURCE_UPDATE_TIME -> BOOT_IMAGE_SOURCE_UPDATE_TIME
    java.lang.String HAVE_CLICK_UGC_LOGIN -> HAVE_CLICK_UGC_LOGIN
    java.lang.String PHONE_WELCOME_LUNCH_TIMES -> PHONE_WELCOME_LUNCH_TIMES
    java.lang.String PHONE_PUSH_SWITCH -> PHONE_PUSH_SWITCH
    java.lang.String PHONE_EXITDIALOG_ACT_SHOW_TIMES -> PHONE_EXITDIALOG_ACT_SHOW_TIMES
    java.lang.String PHONE_EXITDIALOG_ACT_SHOW_TIMES_DATA -> PHONE_EXITDIALOG_ACT_SHOW_TIMES_DATA
    java.lang.String SHARE_A_KEY_SETTINGS -> SHARE_A_KEY_SETTINGS
    java.lang.String QIYI_ID -> QIYI_ID
    java.lang.String CUP_ID -> CUP_ID
    java.lang.String SAVE_CHECK_STATE -> SAVE_CHECK_STATE
    java.lang.String LOGIN_USER_RC_MERGED -> LOGIN_USER_RC_MERGED
    java.lang.String LOGIN_USER_COLLECTION_MERGED -> LOGIN_USER_COLLECTION_MERGED
    java.lang.String PPS_IP_MESSAGE -> PPS_IP_MESSAGE
    java.lang.String SHAKE_COUNT -> SHAKE_COUNT
    java.lang.String KEY_PAUSE_VV_STAUS -> KEY_PAUSE_VV_STAUS
    java.lang.String PHONE_SEARCH_LAST_PROMOTE_THIRD_BROWSER_TIME -> PHONE_SEARCH_LAST_PROMOTE_THIRD_BROWSER_TIME
    java.lang.String PHONE_SEARCH_THIRD_BROWSER_PROMOTED_TIMES -> PHONE_SEARCH_THIRD_BROWSER_PROMOTED_TIMES
    java.lang.String PROMOTE_PAD_TIMES -> PROMOTE_PAD_TIMES
    java.lang.String PROMOTE_PAD_LAST_DOWNLOAD_URL -> PROMOTE_PAD_LAST_DOWNLOAD_URL
    java.lang.String MY_SETTING_PPQ_ADD_FRD_SETTING -> MY_SETTING_PPQ_ADD_FRD_SETTING
    java.lang.String MY_SETTING_PPQ_VIDEO_SETTING -> MY_SETTING_PPQ_VIDEO_SETTING
    java.lang.String PHONE_TICKETS_CITY_ID -> PHONE_TICKETS_CITY_ID
    java.lang.String PHONE_TICKETS_GPS_INFO -> PHONE_TICKETS_GPS_INFO
    java.lang.String APP_VERION_FOR_DYNAMOCSO -> APP_VERION_FOR_DYNAMOCSO
    java.lang.String ANGLE_ICONS2_IN_INIT_APP -> ANGLE_ICONS2_IN_INIT_APP
    java.lang.String KEY_HOLIDAY_SKIN_SWITCH -> KEY_HOLIDAY_SKIN_SWITCH
    java.lang.String BULLET_CH_DEFAULT -> BULLET_CH_DEFAULT
    java.lang.String KEY_VIP_SKIN_SWITCH -> KEY_VIP_SKIN_SWITCH
    java.lang.String KEY_SHOW_PPS2QY_MODE -> KEY_SHOW_PPS2QY_MODE
    java.lang.String KEY_FOR_UPLOAD_NS_COUNT -> KEY_FOR_UPLOAD_NS_COUNT
    java.lang.String KEY_FOR_UPLOAD_ARID -> KEY_FOR_UPLOAD_ARID
    java.lang.String KEY_FOR_SHOW_LAUNCH_ANIMATION -> KEY_FOR_SHOW_LAUNCH_ANIMATION
    java.lang.String KEY_OPERATOR_JSON -> KEY_OPERATOR_JSON
    java.lang.String KEY_VR_GESTURE_GUAID -> KEY_VR_GESTURE_GUAID
    java.lang.String KEY_VR_GYRO_ENABLE -> KEY_VR_GYRO_ENABLE
    java.lang.String HOME_PAGE_CACHE_SHOULD_DELETE -> HOME_PAGE_CACHE_SHOULD_DELETE
    java.lang.String ERROR_CODES_LAST_TIMESTAMP -> ERROR_CODES_LAST_TIMESTAMP
    java.lang.String HOME_TOP_MENU -> HOME_TOP_MENU
    java.lang.String IS_NEED_SHOW_VIP_EXPIRATION_TIME_REMINDER -> IS_NEED_SHOW_VIP_EXPIRATION_TIME_REMINDER
    java.lang.String TIMESTAMP_LAST_CLICK_TAB_ME_MESSAGE -> TIMESTAMP_LAST_CLICK_TAB_ME_MESSAGE
    java.lang.String FIRST_USE_QIMO_KEY_VOLUME_GUID -> FIRST_USE_QIMO_KEY_VOLUME_GUID
    java.lang.String FIRST_USE_DLAN -> FIRST_USE_DLAN
    java.lang.String QIMO_CHANGERATE_GUID_KEY -> QIMO_CHANGERATE_GUID_KEY
    java.lang.String SKIN_TIME -> SKIN_TIME
    java.lang.String HOME_BOTTOM_MENU -> HOME_BOTTOM_MENU
    java.lang.String KEY_DOWNLOAD_VIP_TIPS -> KEY_DOWNLOAD_VIP_TIPS
    java.lang.String KEY_AUTO_DOWNLOAD -> KEY_AUTO_DOWNLOAD
    java.lang.String LOCAL_VIDEO_IS_FIRST_DELETED -> LOCAL_VIDEO_IS_FIRST_DELETED
    java.lang.String KEY_APPLICATION_LAUNCH_TIME -> KEY_APPLICATION_LAUNCH_TIME
    java.lang.String KEY_CURRENT_DAY_DOWNLOAD_COUNT -> KEY_CURRENT_DAY_DOWNLOAD_COUNT
    java.lang.String KEY_CURRENT_DAY -> KEY_CURRENT_DAY
    java.lang.String KEY_V_CODEC_TYPE -> KEY_V_CODEC_TYPE
    boolean mShowHistoryTipsAtStart -> mShowHistoryTipsAtStart
    java.lang.String KEY_PLAYER_ADS_SLIENCE -> KEY_PLAYER_ADS_SLIENCE
    java.lang.String MY_SETTING_PUSH_FEED -> MY_SETTING_PUSH_FEED
    java.lang.String NAVIBAR_EMBEDDED_PLAYER -> NAVIBAR_EMBEDDED_PLAYER
    java.lang.String AD_PIBAO -> AD_PIBAO
    java.lang.String AD_PPSGAME -> AD_PPSGAME
    java.lang.String MY_SETTING_SHOW_NOTIFICATION -> MY_SETTING_SHOW_NOTIFICATION
    java.lang.String USER_PLAYER_CATRANK -> USER_PLAYER_CATRANK
    java.lang.String AREA_MODE_TAIWAN -> AREA_MODE_TAIWAN
    java.lang.String AREA_MODE_NOTIFY_NEXT -> AREA_MODE_NOTIFY_NEXT
    java.lang.String USER_DECODE_TYPE -> USER_DECODE_TYPE
    java.lang.String NATIVE_VIDEO_DATA_UPDATE -> NATIVE_VIDEO_DATA_UPDATE
    java.lang.String QIMO_ICON_FIRST_SHOW -> QIMO_ICON_FIRST_SHOW
    java.lang.String NATIVE_VIDEO_DATA -> NATIVE_VIDEO_DATA
    java.lang.String TIMER_OPERATE -> TIMER_OPERATE
    java.lang.String KEY_TIPS_MOVIE_LASTTIME -> KEY_TIPS_MOVIE_LASTTIME
    java.lang.String KEY_IS_TAIWAN_IP -> KEY_IS_TAIWAN_IP
    java.lang.String QIYI_DEBUG_KEY -> QIYI_DEBUG_KEY
    java.lang.String KEY_TIME_INSTALL_APP -> KEY_TIME_INSTALL_APP
    java.lang.String KEY_TIME_UPDATE_APP -> KEY_TIME_UPDATE_APP
    java.lang.String KEY_SUBSCRIBE_FIRST -> KEY_SUBSCRIBE_FIRST
    java.lang.String KEY_OLYMPIC_POP_NOT_SHOW_ALL -> KEY_OLYMPIC_POP_NOT_SHOW_ALL
    java.lang.String KEY_OLYMPIC_POP_NOT_SHOW_SLOT_ID -> KEY_OLYMPIC_POP_NOT_SHOW_SLOT_ID
    java.lang.String KEY_COCOS_UPDATE_TIME_LAST_START -> KEY_COCOS_UPDATE_TIME_LAST_START
    java.lang.String KEY_COCOS_UPDATE_TIME_THIS_TIME -> KEY_COCOS_UPDATE_TIME_THIS_TIME
    java.lang.String KEY_SO_ZIP_CRC -> KEY_SO_ZIP_CRC
    java.lang.String KEY_SUBSCRIBE_LAST_TIP_TIME -> KEY_SUBSCRIBE_LAST_TIP_TIME
    java.lang.String KEY_RECIPROCAL_TIME_AD_LIMIT -> KEY_RECIPROCAL_TIME_AD_LIMIT
    java.lang.String OLD_URL_FOR_PAY -> OLD_URL_FOR_PAY
    java.lang.String NAVI_MY_MESSAGE_SHOWFLAG -> NAVI_MY_MESSAGE_SHOWFLAG
    java.lang.String SEARCH_DEFAULT_WORD -> SEARCH_DEFAULT_WORD
    java.lang.String SNS_LOGIN_TYPE -> SNS_LOGIN_TYPE
    java.lang.String KEY_IS_HALF_SCREEN -> KEY_IS_HALF_SCREEN
    java.lang.String KEY_LAST_UPLOAD_PUSH_TOKEN_TIME -> KEY_LAST_UPLOAD_PUSH_TOKEN_TIME
    java.lang.String SP_FEEDBACK_DATA -> SP_FEEDBACK_DATA
    void <init>() -> <init>
    void <clinit>() -> <clinit>
org.qiyi.basecore.utils.SharedPreferencesFactory -> org.qiyi.basecore.utils.SharedPreferencesFactory:
    void <init>() -> <init>
    boolean hasKey(android.content.Context,java.lang.String) -> hasKey
    boolean hasKey(android.content.Context,java.lang.String,java.lang.String) -> hasKey
    void set(android.content.Context,java.lang.String,java.lang.String) -> set
    void set(android.content.Context,java.lang.String,java.lang.String,boolean) -> set
    void set(android.content.Context,java.lang.String,long) -> set
    void set(android.content.Context,java.lang.String,float) -> set
    void set(android.content.Context,java.lang.String,float,java.lang.String) -> set
    void set(android.content.Context,java.lang.String,float,java.lang.String,boolean) -> set
    float get(android.content.Context,java.lang.String,float) -> get
    float get(android.content.Context,java.lang.String,float,java.lang.String) -> get
    void set(android.content.Context,java.lang.String,long,boolean) -> set
    void set(android.content.Context,java.lang.String,float,boolean) -> set
    void set(android.content.Context,java.lang.String,int) -> set
    void set(android.content.Context,java.lang.String,int,boolean) -> set
    void set(android.content.Context,java.lang.String,boolean) -> set
    void set(android.content.Context,java.lang.String,boolean,boolean) -> set
    java.lang.String get(android.content.Context,java.lang.String,java.lang.String) -> get
    long get(android.content.Context,java.lang.String,long) -> get
    int get(android.content.Context,java.lang.String,int) -> get
    boolean get(android.content.Context,java.lang.String,boolean) -> get
    android.content.SharedPreferences getSharedPrefs(android.content.Context,java.lang.String) -> getSharedPrefs
    void addOnSharedPreferenceChangListener(android.content.Context,java.lang.String,org.qiyi.basecore.utils.ConfigurationHelper$IOnSharedChangeListener) -> addOnSharedPreferenceChangListener
    void addOnSharedPreferenceChangListener(android.content.Context,java.lang.String,java.lang.String,org.qiyi.basecore.utils.ConfigurationHelper$IOnSharedChangeListener) -> addOnSharedPreferenceChangListener
    void clearAllData(android.content.Context,java.lang.String) -> clearAllData
    java.util.HashMap getAppVersion(java.lang.String) -> getAppVersion
    void set(android.content.Context,java.lang.String,int,java.lang.String) -> set
    void set(android.content.Context,java.lang.String,int,java.lang.String,boolean) -> set
    int get(android.content.Context,java.lang.String,int,java.lang.String) -> get
    void set(android.content.Context,java.lang.String,java.lang.String,java.lang.String) -> set
    void set(android.content.Context,java.lang.String,java.lang.String,java.lang.String,boolean) -> set
    java.lang.String get(android.content.Context,java.lang.String,java.lang.String,java.lang.String) -> get
    void set(android.content.Context,java.lang.String,boolean,java.lang.String) -> set
    void set(android.content.Context,java.lang.String,boolean,java.lang.String,boolean) -> set
    boolean get(android.content.Context,java.lang.String,boolean,java.lang.String) -> get
    void set(android.content.Context,java.lang.String,long,java.lang.String) -> set
    void set(android.content.Context,java.lang.String,long,java.lang.String,boolean) -> set
    long get(android.content.Context,java.lang.String,long,java.lang.String) -> get
    void remove(android.content.Context,java.lang.String,java.lang.String) -> remove
    void remove(android.content.Context,java.lang.String,java.lang.String,boolean) -> remove
    void remove(android.content.Context,java.lang.String) -> remove
    void remove(android.content.Context,java.lang.String,boolean) -> remove
org.qiyi.basecore.utils.StringUtils -> org.qiyi.basecore.utils.StringUtils:
    java.text.DecimalFormat dFormat -> dFormat
    char[] HEX_DIGITS -> HEX_DIGITS
    void <init>() -> <init>
    java.lang.String encoding(java.lang.String) -> encoding
    java.lang.String decoding(java.lang.String) -> decoding
    java.lang.String getValue(java.lang.String) -> getValue
    java.lang.String maskNull(java.lang.String) -> maskNull
    java.lang.String maskHttpUrl(java.lang.String) -> maskHttpUrl
    android.net.Uri maskHttpUri(java.lang.String) -> maskHttpUri
    java.util.HashMap getQueryParams(java.lang.String) -> getQueryParams
    java.lang.String getQueryParams(java.lang.String,java.lang.String) -> getQueryParams
    boolean isEmpty(java.lang.String) -> isEmpty
    boolean isEmpty(int) -> isEmpty
    boolean isEmpty(int,int) -> isEmpty
    boolean isEmptyStr(java.lang.String) -> isEmptyStr
    java.lang.String toStr(java.lang.Object,java.lang.String) -> toStr
    boolean equals(java.lang.CharSequence,java.lang.CharSequence) -> equals
    java.lang.String[] split(java.lang.String,java.lang.String) -> split
    int toInt(java.lang.Object,int) -> toInt
    boolean toBoolean(java.lang.Object,boolean) -> toBoolean
    int getInt(java.lang.String,int) -> getInt
    float toFloat(java.lang.Object,float) -> toFloat
    double toDouble(java.lang.Object,double) -> toDouble
    java.lang.String decimalFormat(java.lang.Object,double) -> decimalFormat
    long toLong(java.lang.Object,long) -> toLong
    boolean isEmptyList(java.util.List) -> isEmptyList
    boolean isEmpty(java.util.Collection) -> isEmpty
    boolean isEmpty(java.lang.Object[]) -> isEmpty
    boolean isEmpty(java.lang.Object[],int) -> isEmpty
    boolean isEmpty(java.util.Map) -> isEmpty
    boolean isEmpty(java.util.Collection,int) -> isEmpty
    boolean isEmpty(java.util.Map,int) -> isEmpty
    boolean isEmptyList(java.util.List,int) -> isEmptyList
    boolean isEmptyMap(java.util.Map) -> isEmptyMap
    boolean isEmptyArray(java.lang.Object[]) -> isEmptyArray
    boolean isEmptyArray(java.lang.Object) -> isEmptyArray
    boolean isEmptyArray(java.lang.Object[],int) -> isEmptyArray
    java.lang.String dateString2String(java.lang.String,java.lang.String) -> dateString2String
    java.util.Date string2Date(java.lang.String) -> string2Date
    java.util.Date string2Date(java.lang.String,java.lang.String) -> string2Date
    java.lang.String dataFormat(java.util.Date,java.lang.String) -> dataFormat
    java.lang.String dateFormat(java.util.Date) -> dateFormat
    java.lang.Double string2DoubleScale(java.lang.String,int) -> string2DoubleScale
    java.lang.Integer toDoubleScale(java.lang.String,int) -> toDoubleScale
    java.lang.String byte2XB(long) -> byte2XB
    java.lang.String calXB(float) -> calXB
    java.lang.String stringForTime(int) -> stringForTime
    boolean isInteger(java.lang.String) -> isInteger
    java.lang.String getDataUtil(long,long) -> getDataUtil
    java.lang.String processPlayTimes(int) -> processPlayTimes
    boolean isUGC(java.lang.String,java.lang.String) -> isUGC
    java.lang.String getBillionStyledText(java.lang.String) -> getBillionStyledText
    java.lang.String readString(org.json.JSONObject,java.lang.String) -> readString
    java.lang.String readString(org.json.JSONObject,java.lang.String,java.lang.String) -> readString
    org.json.JSONObject readObj(org.json.JSONObject,java.lang.String) -> readObj
    org.json.JSONArray readArr(org.json.JSONObject,java.lang.String) -> readArr
    java.lang.String timeInSecToString(java.lang.String) -> timeInSecToString
    java.lang.String appendUserInfo(java.lang.String,java.lang.String,java.lang.String) -> appendUserInfo
    java.lang.String findUrlFromString(java.lang.String) -> findUrlFromString
    java.lang.String getStringFromParas(java.lang.Object[],int) -> getStringFromParas
    java.lang.String getStringFromParas(java.lang.Object[],int,java.lang.String) -> getStringFromParas
    java.lang.String appendGateway(java.lang.String,int,int) -> appendGateway
    java.lang.String replaceUserInfo(java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> replaceUserInfo
    java.lang.String appendOrReplaceUrlParameter(java.lang.String,java.util.LinkedHashMap) -> appendOrReplaceUrlParameter
    java.lang.String appendParam(java.lang.String,java.util.LinkedHashMap) -> appendParam
    java.lang.String getNumString(java.lang.String,int) -> getNumString
    boolean isNumber(java.lang.String) -> isNumber
    float parseFloat(java.lang.String,float) -> parseFloat
    int parseInt(java.lang.String,int) -> parseInt
    android.net.Uri parseUri(java.lang.String) -> parseUri
    int parseInt(java.lang.Object,int) -> parseInt
    long parseLong(java.lang.String,long) -> parseLong
    long parseLong(java.lang.Object,long) -> parseLong
    java.lang.String getHost(java.lang.String) -> getHost
    java.lang.String str2md5(java.lang.String) -> str2md5
    java.lang.String getCountDisplay(long) -> getCountDisplay
    java.lang.String urlEncoderString(java.lang.String,java.lang.String) -> urlEncoderString
    java.lang.String removeLastSign(java.lang.String,java.lang.String) -> removeLastSign
    int parseInt(java.lang.String) -> parseInt
    org.json.JSONObject optJSONObject(java.lang.String) -> optJSONObject
    int compareVersion(java.lang.String,java.lang.String) -> compareVersion
    boolean isNotEmpty(java.util.Collection) -> isNotEmpty
    boolean isNotEmpty(java.lang.Object[]) -> isNotEmpty
    boolean isNotEmpty(java.util.Map) -> isNotEmpty
    boolean isNotEmpty(java.lang.String) -> isNotEmpty
    java.lang.String getFormatLargeNum(double) -> getFormatLargeNum
    java.lang.String getFormatLargeNum(java.lang.String) -> getFormatLargeNum
    int indexOf(java.lang.Object,java.lang.Object[]) -> indexOf
    java.lang.String encodingUTF8(java.lang.String) -> encodingUTF8
    java.lang.String getBackgroundInterval(java.lang.String,long,int,java.lang.String) -> getBackgroundInterval
    void <clinit>() -> <clinit>
org.qiyi.basecore.utils.TimeRecorder2 -> org.qiyi.basecore.utils.TimeRecorder2:
    java.util.Map mTagStart -> mTagStart
    java.util.Map mTagEnd -> mTagEnd
    java.util.Map mTagCost -> mTagCost
    void <init>() -> <init>
    void onTaskStart(java.lang.String,java.lang.String) -> onTaskStart
    long onTaskEnd(java.lang.String,java.lang.String) -> onTaskEnd
    java.lang.String getTagByUrl(java.lang.String) -> getTagByUrl
    long getCost(java.lang.String) -> getCost
    long getStart(java.lang.String) -> getStart
    long getEnd(java.lang.String) -> getEnd
    void <clinit>() -> <clinit>
org.qiyi.basecore.utils.TimeUtils -> org.qiyi.basecore.utils.TimeUtils:
    java.lang.String DEFAULT_DATE_PATTERN -> DEFAULT_DATE_PATTERN
    void <init>() -> <init>
    java.lang.String formatDate() -> formatDate
    java.lang.String formatDate(java.lang.String) -> formatDate
    java.lang.String getTimeArea() -> getTimeArea
    java.lang.String getDuration(java.lang.String) -> getDuration
    java.lang.String convertSecondsToDuration(long) -> convertSecondsToDuration
org.qiyi.basecore.utils.UIUtils -> org.qiyi.basecore.utils.UIUtils:
    android.content.Context sContext -> sContext
    void <init>() -> <init>
    void init(android.content.Context) -> init
    android.graphics.Bitmap resource2Bitmap(android.content.Context,int) -> resource2Bitmap
    org.qiyi.basecore.utils.UIUtils$BitmapNull resource2BitmapNull(android.content.Context,int) -> resource2BitmapNull
    int computeSampleSize(android.graphics.BitmapFactory$Options,int,int) -> computeSampleSize
    int computeInitialSampleSize(android.graphics.BitmapFactory$Options,int,int) -> computeInitialSampleSize
    android.graphics.Bitmap zoomBitmap(android.content.Context,byte[]) -> zoomBitmap
    android.view.View inflateView(android.content.Context,int,android.view.ViewGroup) -> inflateView
    int dip2px(android.content.Context,float) -> dip2px
    int dip2px(float) -> dip2px
    int px2dip(android.content.Context,float) -> px2dip
    int px2dip(float) -> px2dip
    android.graphics.BitmapFactory$Options getBitmapOption(android.content.Context) -> getBitmapOption
    byte[] Bitmap2Bytes(android.graphics.Bitmap) -> Bitmap2Bytes
    android.graphics.Bitmap drawable2Bitmap(android.graphics.drawable.Drawable) -> drawable2Bitmap
    android.graphics.Bitmap byteArray2ImgBitmap(android.content.Context,byte[]) -> byteArray2ImgBitmap
    android.graphics.Bitmap resizeImage(android.graphics.Bitmap,int,int) -> resizeImage
    void showSoftKeyboard(android.app.Activity) -> showSoftKeyboard
    void hideSoftkeyboard(android.app.Activity) -> hideSoftkeyboard
    android.net.Uri getImageUri(android.app.Activity) -> getImageUri
    int readPictureDegree(java.lang.String) -> readPictureDegree
    android.graphics.Bitmap rotaingImageView(int,android.graphics.Bitmap) -> rotaingImageView
    android.graphics.Bitmap toRoundBitmap(android.graphics.Bitmap) -> toRoundBitmap
    boolean isKeyboardShowing(android.content.Context) -> isKeyboardShowing
    int getNaviHeight(android.content.Context) -> getNaviHeight
    int getStatusBarHeight(android.app.Activity) -> getStatusBarHeight
    void <clinit>() -> <clinit>
org.qiyi.basecore.utils.UIUtils$BitmapNull -> org.qiyi.basecore.utils.UIUtils$BitmapNull:
    int mWidth -> mWidth
    int mHeight -> mHeight
    void <init>(int,int) -> <init>
    int getWidth() -> getWidth
    int getHeight() -> getHeight
org.qiyi.basecore.utils.WorkHandler -> org.qiyi.basecore.utils.WorkHandler:
    android.os.HandlerThread mWorkThread -> mWorkThread
    android.os.Handler mWorkHandler -> mWorkHandler
    void <init>(java.lang.String,android.os.Handler$Callback,int) -> <init>
    void <init>(java.lang.String,android.os.Handler$Callback) -> <init>
    void <init>(java.lang.String,int) -> <init>
    void <init>(java.lang.String) -> <init>
    android.os.Handler getWorkHandler() -> getWorkHandler
    boolean isAlive() -> isAlive
    boolean quit() -> quit
org.qiyi.net.HttpLog -> org.qiyi.net.a:
    java.lang.String TAG -> TAG
    boolean DEBUG -> DEBUG
    void <init>() -> <init>
    void v(java.lang.String,java.lang.Object[]) -> d
    void d(java.lang.String,java.lang.Object[]) -> b
    void e(java.lang.String,java.lang.Object[]) -> c
    void e(java.lang.Throwable,java.lang.String,java.lang.Object[]) -> a
    java.lang.String buildMessage(java.lang.String,java.lang.Object[]) -> e
    void <clinit>() -> <clinit>
org.qiyi.net.HttpLog$MarkerLog -> org.qiyi.net.b:
    boolean ENABLED -> jQ
    java.util.List mMarkers -> jR
    boolean mFinished -> mFinished
    void <init>() -> <init>
    void add(java.lang.String,long) -> d
    void finish(java.lang.String) -> finish
    void finalize() -> finalize
    long getTotalDuration() -> cN
    void <clinit>() -> <clinit>
org.qiyi.net.HttpLog$MarkerLog$Marker -> org.qiyi.net.c:
    java.lang.String name -> name
    long thread -> jS
    long time -> time
    void <init>(java.lang.String,long,long) -> <init>
org.qiyi.net.HttpManager -> org.qiyi.net.HttpManager:
    org.qiyi.net.cache.Cache mCache -> jT
    java.util.Set pingbackUrls -> jU
    java.util.Set whiteListUrls -> jV
    boolean enableWhiteList -> jW
    java.util.Map priorityMap -> priorityMap
    java.util.Set permanentCacheKey -> jX
    org.qiyi.net.dispatcher.RequestQueue mRequestQueue -> mRequestQueue
    java.util.List mConvertFactorys -> mConvertFactorys
    org.qiyi.net.dispatcher.BasicNetwork mNetwork -> jY
    java.util.concurrent.atomic.AtomicBoolean hasInit -> jZ
    org.qiyi.net.callback.IStatisticsCallback mStatisticsCallback -> mStatisticsCallback
    org.qiyi.net.callback.IAutoAddParamHandler mParamHandler -> ka
    org.qiyi.net.callback.IOnPreExecuteLister mPreExecuterListener -> kb
    org.qiyi.net.callback.IOnPreCancelListener mPreCancelListener -> kc
    android.content.Context mGlobalContext -> kd
    long mGlobalExpired -> ke
    void <init>() -> <init>
    org.qiyi.net.HttpManager getInstance() -> getInstance
    void setGlobalExpired(long) -> setGlobalExpired
    long getGlobalExpired() -> getGlobalExpired
    void setGlobalTimeOut(int) -> setGlobalTimeOut
    void clearCache(java.io.File) -> clearCache
    void initHttpEnvironment(android.content.Context,org.qiyi.net.HttpManager$Builder) -> initHttpEnvironment
    void addHttpException(org.qiyi.net.Request,org.qiyi.net.exception.HttpException) -> addHttpException
    android.content.Context getContext() -> getContext
    void sendRequest(org.qiyi.net.Request) -> sendRequest
    org.qiyi.net.adapter.NetworkResponse execute(org.qiyi.net.Request) -> execute
    void addInterceptor(org.qiyi.net.dispatcher.IHttpInterceptor) -> addInterceptor
    void addParamHandler(org.qiyi.net.callback.IAutoAddParamHandler) -> addParamHandler
    void setPreExecuteListener(org.qiyi.net.callback.IOnPreExecuteLister) -> setPreExecuteListener
    void setPreCancelListener(org.qiyi.net.callback.IOnPreCancelListener) -> setPreCancelListener
    void enableWhiteList(boolean) -> enableWhiteList
    void cancelRequestByTag(java.lang.String) -> cancelRequestByTag
    org.qiyi.net.convert.IResponseConvert getConvert(org.qiyi.net.convert.ConvertFactory,java.lang.Class) -> getConvert
    java.util.Set getPermanentKey() -> getPermanentKey
org.qiyi.net.HttpManager$Builder -> org.qiyi.net.HttpManager$Builder:
    int DEFAULT_CORE_NET_POOL_SIZE -> DEFAULT_CORE_NET_POOL_SIZE
    int DEFAULT_MAX_NET_POOL_SIZE -> DEFAULT_MAX_NET_POOL_SIZE
    int DEFAULT_CORE_PINGBACK_POOL_SIZE -> DEFAULT_CORE_PINGBACK_POOL_SIZE
    int DEFAULT_MAX_PINGBACK_POOL_SIZE -> DEFAULT_MAX_PINGBACK_POOL_SIZE
    int DEFAULT_CACHE_SIZE -> DEFAULT_CACHE_SIZE
    java.io.File cacheDir -> cacheDir
    int cacheSize -> cacheSize
    int maxNetThreadNum -> maxNetThreadNum
    int coreNetThreadNum -> coreNetThreadNum
    int maxPingbackThreadNum -> maxPingbackThreadNum
    int corePingBackThreadNum -> corePingBackThreadNum
    java.util.List mConvertFactorys -> mConvertFactorys
    org.qiyi.net.callback.IStatisticsCallback mStatisticsCallback -> mStatisticsCallback
    java.io.InputStream[] mCertificate -> mCertificate
    java.io.InputStream bksFile -> bksFile
    java.lang.String password -> password
    java.util.HashSet pingBackUrl -> pingBackUrl
    java.util.HashSet whiteListUrl -> whiteListUrl
    java.util.Map priorityMap -> priorityMap
    java.util.HashSet permanentCacheKey -> permanentCacheKey
    boolean onlyProxy -> onlyProxy
    void <init>() -> <init>
    org.qiyi.net.HttpManager$Builder cacheDir(java.io.File) -> cacheDir
    org.qiyi.net.HttpManager$Builder cacheSize(int) -> cacheSize
    org.qiyi.net.HttpManager$Builder netThreadPoolSize(int,int) -> netThreadPoolSize
    org.qiyi.net.HttpManager$Builder pingbackThreadPoolSize(int,int) -> pingbackThreadPoolSize
    org.qiyi.net.HttpManager$Builder addConvertFactory(org.qiyi.net.convert.ConvertFactory) -> addConvertFactory
    org.qiyi.net.HttpManager$Builder beliveCertificate(java.io.InputStream[]) -> beliveCertificate
    org.qiyi.net.HttpManager$Builder selfCertificate(java.io.InputStream,java.lang.String) -> selfCertificate
    org.qiyi.net.HttpManager$Builder statisticsCallback(org.qiyi.net.callback.IStatisticsCallback) -> statisticsCallback
    org.qiyi.net.HttpManager$Builder addPingBackUrl(java.util.HashSet) -> addPingBackUrl
    org.qiyi.net.HttpManager$Builder addWhiteListUrl(java.util.HashSet) -> addWhiteListUrl
    org.qiyi.net.HttpManager$Builder addPermanentCacheKey(java.util.HashSet) -> addPermanentCacheKey
    org.qiyi.net.HttpManager$Builder specifyPriorityForUrl(java.util.Map) -> specifyPriorityForUrl
    java.io.InputStream[] getBeliveCertificate() -> getBeliveCertificate
    java.io.InputStream getSelfCertificate() -> getSelfCertificate
    java.lang.String getSelfCertificatePwd() -> getSelfCertificatePwd
    int getCPUCount() -> getCPUCount
    java.io.File access$000(org.qiyi.net.HttpManager$Builder) -> access$000
    java.util.List access$100(org.qiyi.net.HttpManager$Builder) -> access$100
    java.util.HashSet access$200(org.qiyi.net.HttpManager$Builder) -> access$200
    java.util.HashSet access$300(org.qiyi.net.HttpManager$Builder) -> access$300
    java.util.HashSet access$400(org.qiyi.net.HttpManager$Builder) -> access$400
    java.util.Map access$500(org.qiyi.net.HttpManager$Builder) -> access$500
    org.qiyi.net.callback.IStatisticsCallback access$600(org.qiyi.net.HttpManager$Builder) -> access$600
    int access$700(org.qiyi.net.HttpManager$Builder) -> access$700
    int access$800(org.qiyi.net.HttpManager$Builder) -> access$800
    int access$900(org.qiyi.net.HttpManager$Builder) -> access$900
    int access$1000(org.qiyi.net.HttpManager$Builder) -> access$1000
    int access$1100(org.qiyi.net.HttpManager$Builder) -> access$1100
org.qiyi.net.HttpManager$SingleHolder -> org.qiyi.net.d:
    org.qiyi.net.HttpManager INSTANCE -> kf
    void <clinit>() -> <clinit>
org.qiyi.net.Request -> org.qiyi.net.Request:
    org.qiyi.net.HttpLog$MarkerLog mEventLog -> mEventLog
    org.qiyi.net.Request$Method mMethod -> mMethod
    java.lang.String mUrl -> mUrl
    org.qiyi.net.Request$Priority mPriority -> mPriority
    int mThreadPriority -> mThreadPriority
    int mDefaultTrafficStatsTag -> mDefaultTrafficStatsTag
    java.lang.Integer mSequence -> mSequence
    org.qiyi.net.dispatcher.RequestQueue mRequestQueue -> mRequestQueue
    org.qiyi.net.Request$CACHE_MODE mCacheMode -> mCacheMode
    boolean mCanceled -> mCanceled
    boolean mResponseDelivered -> mResponseDelivered
    org.qiyi.net.dispatcher.RetryPolicy mRetryPolicy -> mRetryPolicy
    org.qiyi.net.cache.Cache$Entry mCacheEntry -> mCacheEntry
    java.lang.String mTag -> mTag
    org.qiyi.net.callback.IHttpCallback mHttpCallback -> mHttpCallback
    java.util.Map headers -> headers
    java.lang.String mParamEncode -> mParamEncode
    java.lang.Class genericType -> genericType
    java.lang.String cacheKey -> cacheKey
    boolean shouldRetryServerErrors -> shouldRetryServerErrors
    long expiredTime -> expiredTime
    android.os.Looper mLooper -> mLooper
    boolean isPingBack -> isPingBack
    boolean runOnWorkThrad -> runOnWorkThrad
    boolean autoAddSomeParam -> autoAddSomeParam
    int action -> action
    org.qiyi.net.convert.IResponseConvert mConvert -> mConvert
    java.util.Map mParams -> mParams
    java.lang.String mContentType -> mContentType
    java.lang.String mJsonBody -> mJsonBody
    java.lang.String mModule -> mModule
    org.qiyi.net.Request$REPEATTYPE mRepeatType -> mRepeatType
    void <init>(org.qiyi.net.Request$Builder,java.lang.Class) -> <init>
    android.os.Looper getLooper() -> getLooper
    boolean isDefault() -> isDefault
    void setModule(java.lang.String) -> setModule
    java.lang.String getModule() -> getModule
    org.qiyi.net.callback.IHttpCallback getHttpCallBack() -> getHttpCallBack
    org.qiyi.net.convert.IResponseConvert getConvert() -> getConvert
    java.lang.Class getGenericType() -> getGenericType
    boolean autoAddSomeParam() -> autoAddSomeParam
    boolean isCallBackOnWorkThread() -> isCallBackOnWorkThread
    boolean isStreamType() -> isStreamType
    void setAction(int) -> setAction
    int getAction() -> getAction
    void sendRequest(org.qiyi.net.callback.IHttpCallback) -> sendRequest
    org.qiyi.net.Response execute() -> execute
    org.qiyi.net.Request$Method getMethod() -> getMethod
    java.lang.String getTag() -> getTag
    int getTrafficStatsTag() -> getTrafficStatsTag
    int findDefaultTrafficStatsTag(java.lang.String) -> findDefaultTrafficStatsTag
    void addMarker(java.lang.String) -> addMarker
    void addHeader(java.lang.String,java.lang.String) -> addHeader
    void addHeaderIfNotExist(java.lang.String,java.lang.String) -> addHeaderIfNotExist
    void setPingBack(boolean) -> setPingBack
    boolean isPingBack() -> isPingBack
    void setPriority(org.qiyi.net.Request$Priority) -> setPriority
    void setThreadPriority(int) -> setThreadPriority
    int getThreadPriority() -> getThreadPriority
    void finish(java.lang.String) -> finish
    void setRequestQueue(org.qiyi.net.dispatcher.RequestQueue) -> setRequestQueue
    void setSequence(int) -> setSequence
    java.lang.String getUrl() -> getUrl
    void reBuildUrl(java.lang.String) -> reBuildUrl
    java.lang.String getCacheKey() -> getCacheKey
    long getCacheExpiredTime() -> getCacheExpiredTime
    org.qiyi.net.Request setCacheEntry(org.qiyi.net.cache.Cache$Entry) -> setCacheEntry
    org.qiyi.net.cache.Cache$Entry getCacheEntry() -> getCacheEntry
    void cancel() -> cancel
    boolean isCanceled() -> isCanceled
    java.util.Map getHeaders() -> getHeaders
    java.util.Map getParams() -> getParams
    java.lang.String getParamsEncoding() -> getParamsEncoding
    void setParamEncode(java.lang.String) -> setParamEncode
    java.lang.String getBodyContentType() -> getBodyContentType
    void setBodyContentType(java.lang.String) -> setBodyContentType
    void setJsonBody(java.lang.String) -> setJsonBody
    byte[] getBody() -> getBody
    byte[] encodeParameters(java.util.Map,java.lang.String) -> encodeParameters
    boolean shouldCache() -> shouldCache
    org.qiyi.net.Request$CACHE_MODE getCacheMode() -> getCacheMode
    org.qiyi.net.Request$Priority getPriority() -> getPriority
    int getTimeoutMs() -> getTimeoutMs
    org.qiyi.net.dispatcher.RetryPolicy getRetryPolicy() -> getRetryPolicy
    org.qiyi.net.Request$REPEATTYPE getRepeatType() -> getRepeatType
    void markDelivered() -> markDelivered
    boolean hasHadResponseDelivered() -> hasHadResponseDelivered
    org.qiyi.net.Response parseNetworkResponse(org.qiyi.net.adapter.NetworkResponse) -> parseNetworkResponse
    org.qiyi.net.exception.HttpException parseNetworkError(org.qiyi.net.exception.HttpException) -> parseNetworkError
    boolean shouldRetryServerErrors() -> shouldRetryServerErrors
    void deliverResponse(org.qiyi.net.Response) -> deliverResponse
    void deliverError(org.qiyi.net.exception.HttpException) -> deliverError
    int compareTo(org.qiyi.net.Request) -> compareTo
    java.lang.String toString() -> toString
    int compareTo(java.lang.Object) -> compareTo
    org.qiyi.net.HttpLog$MarkerLog access$1700(org.qiyi.net.Request) -> access$1700
org.qiyi.net.Request$1 -> org.qiyi.net.e:
    java.lang.String val$tag -> kg
    long val$threadId -> kh
    org.qiyi.net.Request this$0 -> ki
    void <init>(org.qiyi.net.Request,java.lang.String,long) -> <init>
    void run() -> run
org.qiyi.net.Request$Builder -> org.qiyi.net.Request$Builder:
    java.lang.String DEFAULT_PARAMS_ENCODING -> DEFAULT_PARAMS_ENCODING
    java.lang.String mUrl -> mUrl
    org.qiyi.net.Request$Method mMethod -> mMethod
    org.qiyi.net.Request$CACHE_MODE mCacheMode -> mCacheMode
    boolean mShouldRetryServerErrors -> mShouldRetryServerErrors
    org.qiyi.net.dispatcher.RetryPolicy mRetryPolicy -> mRetryPolicy
    java.lang.String mTag -> mTag
    org.qiyi.net.Request$Priority mPriority -> mPriority
    java.lang.String mParmEncode -> mParmEncode
    java.util.Map headers -> headers
    java.util.Map params -> params
    java.lang.String cacheKey -> cacheKey
    long expiredTime -> expiredTime
    boolean runOnWorkThread -> runOnWorkThread
    boolean autoAddSomeParam -> autoAddSomeParam
    org.qiyi.net.convert.IResponseConvert mConvert -> mConvert
    org.qiyi.net.Request$REPEATTYPE mRepeatType -> mRepeatType
    boolean shouldKeepAlive -> shouldKeepAlive
    void <init>() -> <init>
    org.qiyi.net.Request$Builder url(java.lang.String) -> url
    org.qiyi.net.Request$Builder tag(java.lang.String) -> tag
    org.qiyi.net.Request$Builder antiDnsHiJack(boolean) -> antiDnsHiJack
    org.qiyi.net.Request$Builder method(org.qiyi.net.Request$Method) -> method
    org.qiyi.net.Request$Builder cacheMode(org.qiyi.net.Request$CACHE_MODE,java.lang.String,long) -> cacheMode
    org.qiyi.net.Request$Builder shouldRetryServerErrors(boolean) -> shouldRetryServerErrors
    org.qiyi.net.Request$Builder priority(org.qiyi.net.Request$Priority) -> priority
    org.qiyi.net.Request$Builder paramEncode(java.lang.String) -> paramEncode
    org.qiyi.net.Request$Builder connectTimeOut(int) -> connectTimeOut
    org.qiyi.net.Request$Builder readTimeOut(int) -> readTimeOut
    org.qiyi.net.Request$Builder writeTimeOut(int) -> writeTimeOut
    org.qiyi.net.Request$Builder maxRetry(int) -> maxRetry
    org.qiyi.net.Request$Builder retryOnSslError(boolean) -> retryOnSslError
    org.qiyi.net.Request$Builder addHeader(java.lang.String,java.lang.String) -> addHeader
    org.qiyi.net.Request$Builder addParam(java.lang.String,java.lang.String) -> addParam
    org.qiyi.net.Request$Builder backoffMultiplier(float) -> backoffMultiplier
    org.qiyi.net.Request$Builder timeOut(int,int,int) -> timeOut
    org.qiyi.net.Request$Builder parser(org.qiyi.net.convert.IResponseConvert) -> parser
    org.qiyi.net.Request$Builder callBackOnWorkThread() -> callBackOnWorkThread
    org.qiyi.net.Request$Builder disableAutoAddParams() -> disableAutoAddParams
    org.qiyi.net.Request$Builder repeatType(org.qiyi.net.Request$REPEATTYPE) -> repeatType
    org.qiyi.net.Request$Builder shouldKeepAlive(boolean) -> shouldKeepAlive
    org.qiyi.net.Request build(java.lang.Class) -> build
    org.qiyi.net.Request$Method access$000(org.qiyi.net.Request$Builder) -> access$000
    java.lang.String access$100(org.qiyi.net.Request$Builder) -> access$100
    org.qiyi.net.dispatcher.RetryPolicy access$200(org.qiyi.net.Request$Builder) -> access$200
    org.qiyi.net.Request$CACHE_MODE access$300(org.qiyi.net.Request$Builder) -> access$300
    java.lang.String access$400(org.qiyi.net.Request$Builder) -> access$400
    org.qiyi.net.Request$Priority access$500(org.qiyi.net.Request$Builder) -> access$500
    java.util.Map access$600(org.qiyi.net.Request$Builder) -> access$600
    java.lang.String access$700(org.qiyi.net.Request$Builder) -> access$700
    java.lang.String access$800(org.qiyi.net.Request$Builder) -> access$800
    long access$900(org.qiyi.net.Request$Builder) -> access$900
    boolean access$1000(org.qiyi.net.Request$Builder) -> access$1000
    boolean access$1100(org.qiyi.net.Request$Builder) -> access$1100
    boolean access$1200(org.qiyi.net.Request$Builder) -> access$1200
    org.qiyi.net.convert.IResponseConvert access$1300(org.qiyi.net.Request$Builder) -> access$1300
    java.util.Map access$1400(org.qiyi.net.Request$Builder) -> access$1400
    org.qiyi.net.Request$REPEATTYPE access$1500(org.qiyi.net.Request$Builder) -> access$1500
    boolean access$1600(org.qiyi.net.Request$Builder) -> access$1600
org.qiyi.net.Request$CACHE_MODE -> org.qiyi.net.Request$CACHE_MODE:
    org.qiyi.net.Request$CACHE_MODE ONLY_NET -> ONLY_NET
    org.qiyi.net.Request$CACHE_MODE CACHE_AND_NET -> CACHE_AND_NET
    org.qiyi.net.Request$CACHE_MODE ONLY_CACHE -> ONLY_CACHE
    org.qiyi.net.Request$CACHE_MODE[] $VALUES -> $VALUES
    org.qiyi.net.Request$CACHE_MODE[] values() -> values
    org.qiyi.net.Request$CACHE_MODE valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
org.qiyi.net.Request$Method -> org.qiyi.net.Request$Method:
    org.qiyi.net.Request$Method GET -> GET
    org.qiyi.net.Request$Method POST -> POST
    org.qiyi.net.Request$Method PUT -> PUT
    org.qiyi.net.Request$Method DELETE -> DELETE
    org.qiyi.net.Request$Method HEAD -> HEAD
    org.qiyi.net.Request$Method[] $VALUES -> $VALUES
    org.qiyi.net.Request$Method[] values() -> values
    org.qiyi.net.Request$Method valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
org.qiyi.net.Request$Priority -> org.qiyi.net.Request$Priority:
    org.qiyi.net.Request$Priority LOW -> LOW
    org.qiyi.net.Request$Priority NORMAL -> NORMAL
    org.qiyi.net.Request$Priority HIGH -> HIGH
    org.qiyi.net.Request$Priority IMMEDIATE -> IMMEDIATE
    org.qiyi.net.Request$Priority[] $VALUES -> $VALUES
    org.qiyi.net.Request$Priority[] values() -> values
    org.qiyi.net.Request$Priority valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
org.qiyi.net.Request$REPEATTYPE -> org.qiyi.net.Request$REPEATTYPE:
    org.qiyi.net.Request$REPEATTYPE DEFAULT -> DEFAULT
    org.qiyi.net.Request$REPEATTYPE ABORT -> ABORT
    org.qiyi.net.Request$REPEATTYPE[] $VALUES -> $VALUES
    org.qiyi.net.Request$REPEATTYPE[] values() -> values
    org.qiyi.net.Request$REPEATTYPE valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
org.qiyi.net.Response -> org.qiyi.net.f:
    java.lang.Object result -> result
    int statusCode -> statusCode
    long contentLength -> contentLength
    org.qiyi.net.cache.Cache$Entry cacheEntry -> kj
    org.qiyi.net.exception.HttpException error -> kk
    boolean intermediate -> kl
    boolean fromCache -> km
    org.qiyi.net.Response success(java.lang.Object,org.qiyi.net.cache.Cache$Entry,int,long) -> a
    org.qiyi.net.Response error(org.qiyi.net.exception.HttpException,int) -> a
    boolean isSuccess() -> cO
    void <init>(java.lang.Object,org.qiyi.net.cache.Cache$Entry,int,long) -> <init>
    void <init>(org.qiyi.net.exception.HttpException,int) -> <init>
    void setCacheTimestamp(long) -> l
org.qiyi.net.adapter.NetworkResponse -> org.qiyi.net.a.a:
    int statusCode -> statusCode
    byte[] data -> data
    java.util.Map headers -> headers
    boolean notModified -> kn
    long networkTimeMs -> networkTimeMs
    java.io.InputStream content -> ko
    long contentLength -> contentLength
    void <init>(int,byte[],java.util.Map,boolean,long) -> <init>
    void <init>(int,java.io.InputStream,java.util.Map,boolean,long,long) -> <init>
    void <init>(byte[]) -> <init>
    void <init>(byte[],java.util.Map) -> <init>
org.qiyi.net.adapter.ResponseEntity -> org.qiyi.net.a.b:
    java.io.InputStream content -> ko
    long length -> kp
    int statusCode -> statusCode
    java.util.Map headers -> headers
    void <init>(int) -> <init>
org.qiyi.net.cache.Cache -> org.qiyi.net.b.a:
    java.text.SimpleDateFormat mFormat -> kq
    org.qiyi.net.cache.Cache$Entry get(java.lang.String) -> S
    void put(java.lang.String,org.qiyi.net.cache.Cache$Entry) -> a
    void initialize() -> initialize
    void remove(java.lang.String) -> remove
    void clear() -> clear
    void <clinit>() -> <clinit>
org.qiyi.net.cache.Cache$Entry -> org.qiyi.net.b.b:
    byte[] data -> data
    java.lang.String etag -> etag
    long serverDate -> kr
    long lastModified -> ks
    long ttl -> kt
    long softTtl -> ku
    long cacheTime -> kv
    java.util.Map responseHeaders -> kw
    void <init>() -> <init>
    boolean isExpired(long) -> m
org.qiyi.net.cache.DiskBasedCache -> org.qiyi.net.b.c:
    java.util.Map mEntries -> kx
    long mTotalSize -> ky
    java.io.File mRootDirectory -> mRootDirectory
    int mMaxCacheSizeInBytes -> kz
    void <init>(java.io.File,int) -> <init>
    void clear() -> clear
    boolean isPermanent(java.lang.String) -> T
    org.qiyi.net.cache.Cache$Entry get(java.lang.String) -> S
    void initialize() -> initialize
    void put(java.lang.String,org.qiyi.net.cache.Cache$Entry) -> a
    void remove(java.lang.String) -> remove
    java.lang.String getFilenameForKey(java.lang.String) -> U
    java.io.File getFileForKey(java.lang.String) -> V
    void pruneIfNeeded(int) -> A
    void putEntry(java.lang.String,org.qiyi.net.cache.DiskBasedCache$CacheHeader) -> a
    void removeEntry(java.lang.String) -> removeEntry
    byte[] streamToBytes(java.io.InputStream,int) -> a
    int read(java.io.InputStream) -> b
    void writeInt(java.io.OutputStream,int) -> a
    int readInt(java.io.InputStream) -> c
    void writeLong(java.io.OutputStream,long) -> a
    long readLong(java.io.InputStream) -> d
    void writeString(java.io.OutputStream,java.lang.String) -> a
    java.lang.String readString(java.io.InputStream) -> e
    void writeStringStringMap(java.util.Map,java.io.OutputStream) -> a
    java.util.Map readStringStringMap(java.io.InputStream) -> f
org.qiyi.net.cache.DiskBasedCache$1 -> org.qiyi.net.b.d:
org.qiyi.net.cache.DiskBasedCache$CacheHeader -> org.qiyi.net.b.e:
    long size -> size
    java.lang.String key -> key
    java.lang.String etag -> etag
    long serverDate -> kr
    long lastModified -> ks
    long ttl -> kt
    long softTtl -> ku
    long cacheTime -> kv
    java.util.Map responseHeaders -> kw
    void <init>() -> <init>
    void <init>(java.lang.String,org.qiyi.net.cache.Cache$Entry) -> <init>
    org.qiyi.net.cache.DiskBasedCache$CacheHeader readHeader(java.io.InputStream) -> g
    org.qiyi.net.cache.Cache$Entry toCacheEntry(byte[]) -> h
    boolean writeHeader(java.io.OutputStream) -> a
org.qiyi.net.cache.DiskBasedCache$CountingInputStream -> org.qiyi.net.b.f:
    int bytesRead -> kA
    void <init>(java.io.InputStream) -> <init>
    int read() -> read
    int read(byte[],int,int) -> read
    void <init>(java.io.InputStream,org.qiyi.net.cache.DiskBasedCache$1) -> <init>
    int access$100(org.qiyi.net.cache.DiskBasedCache$CountingInputStream) -> a
org.qiyi.net.cache.ExpiredTimeCache -> org.qiyi.net.b.g:
    boolean DEBUG -> DEBUG
    org.qiyi.net.cache.Cache mCache -> jT
    void setCache(org.qiyi.net.cache.Cache) -> a
    void <clinit>() -> <clinit>
org.qiyi.net.cache.ICacheTime -> org.qiyi.net.b.h:
    void setCacheTimestamp(long) -> l
org.qiyi.net.callback.BaseHttpCallBack -> org.qiyi.net.callback.BaseHttpCallBack:
    void <init>() -> <init>
    void onResponse(java.lang.Object,java.util.Map) -> onResponse
    void onResponse(org.qiyi.net.Response) -> onResponse
    void onResponse(java.lang.Object) -> onResponse
    void onErrorResponse(org.qiyi.net.exception.HttpException) -> onErrorResponse
org.qiyi.net.callback.IAutoAddParamHandler -> org.qiyi.net.callback.a:
    java.lang.String appendCommonParamsToUrl(android.content.Context,org.qiyi.net.Request) -> a
org.qiyi.net.callback.IHttpCallback -> org.qiyi.net.callback.IHttpCallback:
    void onResponse(java.lang.Object) -> onResponse
    void onErrorResponse(org.qiyi.net.exception.HttpException) -> onErrorResponse
org.qiyi.net.callback.IOnPreCancelListener -> org.qiyi.net.callback.b:
    void onPreCancel(java.lang.String) -> W
org.qiyi.net.callback.IOnPreExecuteLister -> org.qiyi.net.callback.c:
    boolean onPreExecute(org.qiyi.net.Request) -> a
org.qiyi.net.callback.IStatisticsCallback -> org.qiyi.net.callback.d:
    void onHttpRequestError(org.qiyi.net.Request,org.qiyi.net.exception.HttpException) -> a
org.qiyi.net.convert.BaseResponseConvert -> org.qiyi.net.convert.a:
    void <init>() -> <init>
    boolean isSuccessData(java.lang.Object) -> isSuccessData
org.qiyi.net.convert.BuildInConvertFactory -> org.qiyi.net.convert.b:
    java.util.Map mConvertCache -> kB
    org.qiyi.net.convert.BuildInConvertFactory create() -> cP
    void <init>() -> <init>
    org.qiyi.net.convert.IResponseConvert getConvert(java.lang.Class) -> a
org.qiyi.net.convert.ConvertFactory -> org.qiyi.net.convert.c:
    void <init>() -> <init>
    org.qiyi.net.convert.IResponseConvert getConvert(java.lang.Class) -> a
org.qiyi.net.convert.IResponseConvert -> org.qiyi.net.convert.IResponseConvert:
    java.lang.Object convert(byte[],java.lang.String) -> convert
    boolean isSuccessData(java.lang.Object) -> isSuccessData
org.qiyi.net.convert.JSONConvert -> org.qiyi.net.convert.d:
    void <init>() -> <init>
    org.json.JSONObject convert(byte[],java.lang.String) -> b
    java.lang.Object convert(byte[],java.lang.String) -> convert
org.qiyi.net.convert.StringConvert -> org.qiyi.net.convert.e:
    void <init>() -> <init>
    java.lang.String convert(byte[],java.lang.String) -> c
    java.lang.Object convert(byte[],java.lang.String) -> convert
org.qiyi.net.dispatcher.BasicNetwork -> org.qiyi.net.c.a:
    boolean DEBUG -> DEBUG
    int SLOW_REQUEST_THRESHOLD_MS -> kC
    int DEFAULT_POOL_SIZE -> kD
    org.qiyi.net.httpengine.HttpStack mHttpStack -> kE
    org.qiyi.net.toolbox.ByteArrayPool mPool -> kF
    void <init>(org.qiyi.net.httpengine.HttpStack) -> <init>
    void <init>(org.qiyi.net.httpengine.HttpStack,org.qiyi.net.toolbox.ByteArrayPool) -> <init>
    org.qiyi.net.adapter.NetworkResponse performRequest(org.qiyi.net.Request) -> b
    void logSlowRequests(long,org.qiyi.net.Request,byte[],int) -> a
    void attemptRetryOnException(java.lang.String,org.qiyi.net.Request,org.qiyi.net.exception.HttpException) -> a
    void addCacheHeaders(java.util.Map,org.qiyi.net.cache.Cache$Entry) -> a
    byte[] responseToBytes(org.qiyi.net.adapter.ResponseEntity) -> a
    void addInterceptor(org.qiyi.net.dispatcher.IHttpInterceptor) -> addInterceptor
    void addParameters(org.qiyi.net.Request) -> c
    void <clinit>() -> <clinit>
org.qiyi.net.dispatcher.CacheDispatcher -> org.qiyi.net.c.b:
    java.util.concurrent.BlockingQueue mCacheQueue -> kG
    java.util.concurrent.BlockingQueue mNetworkQueue -> kH
    org.qiyi.net.cache.Cache mCache -> jT
    org.qiyi.net.dispatcher.ResponseDelivery mDelivery -> kI
    boolean mQuit -> kJ
    void <init>(java.util.concurrent.BlockingQueue,java.util.concurrent.BlockingQueue,org.qiyi.net.cache.Cache,org.qiyi.net.dispatcher.ResponseDelivery) -> <init>
    void quit() -> quit
    void run() -> run
    boolean netWorkIsEnable() -> cQ
org.qiyi.net.dispatcher.IHttpInterceptor -> org.qiyi.net.c.c:
    void intercept(org.qiyi.net.Request) -> d
org.qiyi.net.dispatcher.NetworkDispatcher -> org.qiyi.net.c.d:
    java.util.concurrent.BlockingQueue mQueue -> kK
    org.qiyi.net.dispatcher.BasicNetwork mNetwork -> jY
    org.qiyi.net.cache.Cache mCache -> jT
    org.qiyi.net.dispatcher.ResponseDelivery mDelivery -> kI
    boolean mQuit -> kJ
    java.util.concurrent.Executor mParseExecutor -> kL
    boolean isCoreThread -> kM
    int keepAliveSeconds -> hK
    org.qiyi.net.dispatcher.RequestQueue mRequestQueue -> mRequestQueue
    void <init>(org.qiyi.net.dispatcher.RequestQueue,java.util.concurrent.BlockingQueue,org.qiyi.net.dispatcher.BasicNetwork,org.qiyi.net.cache.Cache,org.qiyi.net.dispatcher.ResponseDelivery,int) -> <init>
    void quit() -> quit
    void setCoreThread(boolean) -> n
    boolean isCoreThread() -> cR
    void addTrafficStatsTag(org.qiyi.net.Request) -> e
    void run() -> run
    void parseHttpResponse(org.qiyi.net.Request,org.qiyi.net.adapter.NetworkResponse) -> a
    void parseAndDeliverNetworkError(org.qiyi.net.Request,org.qiyi.net.exception.HttpException) -> b
    void access$000(org.qiyi.net.dispatcher.NetworkDispatcher,org.qiyi.net.Request,org.qiyi.net.adapter.NetworkResponse) -> a
org.qiyi.net.dispatcher.NetworkDispatcher$1 -> org.qiyi.net.c.e:
    org.qiyi.net.Request val$mRequest -> kN
    org.qiyi.net.adapter.NetworkResponse val$networkResponse -> kO
    org.qiyi.net.dispatcher.NetworkDispatcher this$0 -> kP
    void <init>(org.qiyi.net.dispatcher.NetworkDispatcher,org.qiyi.net.Request,org.qiyi.net.adapter.NetworkResponse) -> <init>
    void run() -> run
org.qiyi.net.dispatcher.OtherBusinessDispatcher -> org.qiyi.net.c.f:
    java.util.concurrent.BlockingQueue mQueue -> kK
    org.qiyi.net.dispatcher.BasicNetwork mNetwork -> jY
    org.qiyi.net.dispatcher.ResponseDelivery mDelivery -> kI
    boolean mQuit -> kJ
    void <init>(java.util.concurrent.BlockingQueue,org.qiyi.net.dispatcher.BasicNetwork,org.qiyi.net.dispatcher.ResponseDelivery) -> <init>
    void quit() -> quit
    void run() -> run
org.qiyi.net.dispatcher.PingBackRunnable -> org.qiyi.net.c.g:
    org.qiyi.net.dispatcher.BasicNetwork mNetwork -> jY
    org.qiyi.net.dispatcher.ResponseDelivery mDelivery -> kI
    org.qiyi.net.Request request -> kQ
    void <init>(org.qiyi.net.Request,org.qiyi.net.dispatcher.BasicNetwork,org.qiyi.net.dispatcher.ResponseDelivery) -> <init>
    void addTrafficStatsTag(org.qiyi.net.Request) -> e
    void run() -> run
    void parseHttpResponse(org.qiyi.net.Request,org.qiyi.net.adapter.NetworkResponse) -> a
    void parseAndDeliverNetworkError(org.qiyi.net.Request,org.qiyi.net.exception.HttpException) -> b
org.qiyi.net.dispatcher.RequestQueue -> org.qiyi.net.c.h:
    java.util.concurrent.atomic.AtomicInteger mSequenceGenerator -> kR
    java.util.Map mWaitingRequests -> kS
    java.util.Set mCurrentRequests -> kT
    java.util.concurrent.PriorityBlockingQueue mCacheQueue -> kU
    java.util.concurrent.PriorityBlockingQueue mNetworkQueue -> kV
    java.util.concurrent.PriorityBlockingQueue mPingBackQueue -> kW
    java.util.concurrent.atomic.AtomicInteger mCurrentThreadCount -> kX
    org.qiyi.net.cache.Cache mCache -> jT
    org.qiyi.net.dispatcher.BasicNetwork mNetwork -> jY
    org.qiyi.net.dispatcher.ResponseDelivery mDelivery -> kI
    java.util.List mDispatchers -> kY
    org.qiyi.net.dispatcher.CacheDispatcher mCacheDispatcher -> kZ
    org.qiyi.net.dispatcher.OtherBusinessDispatcher mOtherDispatcher -> la
    int maxNetWorkThreadNum -> lb
    int coreNetWorkThreadNum -> lc
    int mFactor -> ld
    void <init>(org.qiyi.net.cache.Cache,org.qiyi.net.dispatcher.BasicNetwork,int,int) -> <init>
    void start() -> start
    void createAndStartNetThread() -> cS
    void stop() -> stop
    int getSequenceNumber() -> getSequenceNumber
    void cancelAll(org.qiyi.net.dispatcher.RequestQueue$RequestFilter) -> a
    void cancelAll(java.lang.String) -> X
    org.qiyi.net.Request add(org.qiyi.net.Request) -> f
    int incrementActiveNum() -> cT
    int decrementActiveNum() -> cU
    void removeNetWorkDispatcher(org.qiyi.net.dispatcher.NetworkDispatcher) -> a
    boolean canAddMoreThread() -> cV
    boolean canDieThread(org.qiyi.net.dispatcher.NetworkDispatcher) -> b
    void finish(org.qiyi.net.Request) -> g
org.qiyi.net.dispatcher.RequestQueue$1 -> org.qiyi.net.c.i:
    java.lang.String val$tag -> kg
    org.qiyi.net.dispatcher.RequestQueue this$0 -> le
    void <init>(org.qiyi.net.dispatcher.RequestQueue,java.lang.String) -> <init>
    boolean apply(org.qiyi.net.Request) -> h
org.qiyi.net.dispatcher.RequestQueue$RequestFilter -> org.qiyi.net.c.j:
    boolean apply(org.qiyi.net.Request) -> h
org.qiyi.net.dispatcher.ResponseDelivery -> org.qiyi.net.c.k:
    java.util.concurrent.Executor mResponseUIThread -> lf
    void <init>(android.os.Handler) -> <init>
    void postResponse(org.qiyi.net.Request,org.qiyi.net.Response) -> a
    void postResponse(org.qiyi.net.Request,org.qiyi.net.Response,java.lang.Runnable) -> a
    void deliverResult(org.qiyi.net.Request,org.qiyi.net.Response,java.lang.Runnable) -> b
    void postError(org.qiyi.net.Request,org.qiyi.net.exception.HttpException) -> c
org.qiyi.net.dispatcher.ResponseDelivery$1 -> org.qiyi.net.c.l:
    android.os.Handler val$handler -> lg
    org.qiyi.net.dispatcher.ResponseDelivery this$0 -> lh
    void <init>(org.qiyi.net.dispatcher.ResponseDelivery,android.os.Handler) -> <init>
    void execute(java.lang.Runnable) -> execute
org.qiyi.net.dispatcher.ResponseDelivery$ResponseDeliveryRunnable -> org.qiyi.net.c.m:
    org.qiyi.net.Request mRequest -> li
    org.qiyi.net.Response mResponse -> lj
    java.lang.Runnable mRunnable -> lk
    org.qiyi.net.dispatcher.ResponseDelivery this$0 -> lh
    void <init>(org.qiyi.net.dispatcher.ResponseDelivery,org.qiyi.net.Request,org.qiyi.net.Response,java.lang.Runnable) -> <init>
    void run() -> run
org.qiyi.net.dispatcher.RetryPolicy -> org.qiyi.net.c.n:
    int mCurrentConnectTimeoutMs -> ll
    int mCurrentReadTimeoutMs -> lm
    int mCurrentWriteTimeoutMs -> ln
    int mCurrentRetryCount -> lo
    int mMaxNumRetries -> lp
    float mBackoffMultiplier -> lq
    boolean dnsHiJack -> lr
    boolean currentIsDnsHiJackRequest -> ls
    boolean retryOnSslError -> lt
    boolean currentIsSslRetryRequest -> lu
    int sDefaultTimeOut -> lv
    void <init>() -> <init>
    int getCurrentConnectTimeout() -> cW
    int getCurrentReadTimeout() -> cX
    int getCurrentWriteTimeout() -> cY
    int getCurrentRetryCount() -> cZ
    void setCurrentConnectTimeout(int) -> B
    void setCurrentReadTimeout(int) -> C
    void setCurrentWriteTimeout(int) -> D
    void setMaxRetryTimes(int) -> E
    boolean isDefault() -> isDefault
    float setBackoffMultiplier(float) -> a
    void retry(org.qiyi.net.exception.HttpException) -> a
    void setDnsHiJack(boolean) -> o
    boolean isCurrentIsDnsHiJackRequest() -> da
    void setRetryOnSslError(boolean) -> p
    boolean isCurrentSslErrorRetryRequest() -> db
    boolean hasAttemptRemaining() -> dc
    void <clinit>() -> <clinit>
org.qiyi.net.exception.AuthFailureException -> org.qiyi.net.exception.AuthFailureException:
    android.content.Intent mResolutionIntent -> mResolutionIntent
    void <init>() -> <init>
    void <init>(android.content.Intent) -> <init>
    void <init>(org.qiyi.net.adapter.NetworkResponse) -> <init>
    void <init>(java.lang.String) -> <init>
    void <init>(java.lang.String,java.lang.Throwable) -> <init>
    android.content.Intent getResolutionIntent() -> getResolutionIntent
    java.lang.String getMessage() -> getMessage
org.qiyi.net.exception.HttpException -> org.qiyi.net.exception.HttpException:
    org.qiyi.net.adapter.NetworkResponse networkResponse -> networkResponse
    long networkTimeMs -> networkTimeMs
    void <init>() -> <init>
    void <init>(org.qiyi.net.adapter.NetworkResponse) -> <init>
    void <init>(org.qiyi.net.adapter.NetworkResponse,java.lang.String) -> <init>
    void <init>(java.lang.String) -> <init>
    void <init>(java.lang.String,java.lang.Throwable) -> <init>
    void <init>(java.lang.Throwable) -> <init>
    void setNetworkTimeMs(long) -> setNetworkTimeMs
    long getNetworkTimeMs() -> getNetworkTimeMs
    org.qiyi.net.adapter.NetworkResponse getNetworkResponse() -> getNetworkResponse
org.qiyi.net.httpengine.HttpStack -> org.qiyi.net.d.a:
    org.qiyi.net.adapter.ResponseEntity performRequest(org.qiyi.net.Request,java.util.Map) -> a
    void addInterceptor(org.qiyi.net.dispatcher.IHttpInterceptor) -> addInterceptor
org.qiyi.net.httpengine.impl.DnsResolver -> org.qiyi.net.d.a.a:
    java.lang.String server -> lw
    java.lang.String preferServer -> lx
    java.lang.String httpDnsDomain -> ly
    java.util.Random rand -> lz
    void <init>(java.lang.String,java.lang.String) -> <init>
    java.lang.String httpGet(java.lang.String) -> Y
    java.lang.String getDomainIp(java.lang.String) -> Z
org.qiyi.net.httpengine.impl.OkHttpStackThirdX -> org.qiyi.net.d.a.b:
    java.lang.String DEFAULT_VALUE -> lA
    okhttp3.OkHttpClient mClient -> lB
    org.qiyi.net.httpengine.impl.DnsResolver mResolver -> lC
    javax.net.ssl.SSLSocketFactory mSslSocketFactory -> lD
    java.util.List interceptorList -> lE
    void <init>(android.content.Context,org.qiyi.net.HttpManager$Builder) -> <init>
    org.qiyi.net.adapter.ResponseEntity performRequest(org.qiyi.net.Request,java.util.Map) -> a
    void addInterceptor(org.qiyi.net.dispatcher.IHttpInterceptor) -> addInterceptor
    void setConnectionParametersForRequest(okhttp3.Request$Builder,org.qiyi.net.Request) -> a
    okhttp3.RequestBody createRequestBody(org.qiyi.net.Request) -> i
    java.util.Map convertHeaders(okhttp3.Headers) -> a
    java.lang.String access$100() -> bh
    org.qiyi.net.httpengine.impl.DnsResolver access$200(org.qiyi.net.httpengine.impl.OkHttpStackThirdX) -> a
    void <clinit>() -> <clinit>
org.qiyi.net.httpengine.impl.OkHttpStackThirdX$1 -> org.qiyi.net.d.a.c:
    org.qiyi.net.httpengine.impl.OkHttpStackThirdX this$0 -> lF
    void <init>(org.qiyi.net.httpengine.impl.OkHttpStackThirdX) -> <init>
    okhttp3.Response intercept(okhttp3.Interceptor$Chain) -> intercept
org.qiyi.net.httpengine.impl.OkHttpStackThirdX$2 -> org.qiyi.net.d.a.d:
    org.qiyi.net.Request val$request -> lG
    org.qiyi.net.httpengine.impl.OkHttpStackThirdX this$0 -> lF
    void <init>(org.qiyi.net.httpengine.impl.OkHttpStackThirdX,org.qiyi.net.Request) -> <init>
    java.util.List lookup(java.lang.String) -> lookup
org.qiyi.net.httpengine.impl.OkHttpStackThirdX$3 -> org.qiyi.net.d.a.e:
    int[] $SwitchMap$org$qiyi$net$Request$Method -> lH
    void <clinit>() -> <clinit>
org.qiyi.net.httpengine.impl.OkHttpStackThirdX$OkHttpLoggingInterceptor -> org.qiyi.net.d.a.f:
    void <init>() -> <init>
    okhttp3.Response intercept(okhttp3.Interceptor$Chain) -> intercept
    java.lang.String getStackTrace(java.lang.Throwable) -> c
    void <init>(org.qiyi.net.httpengine.impl.OkHttpStackThirdX$1) -> <init>
org.qiyi.net.thread.ThreadPoolManager -> org.qiyi.net.e.a:
    java.util.concurrent.BlockingQueue sPoolWorkQueue -> eH
    java.util.concurrent.ThreadPoolExecutor mPingBackThreadPool -> lI
    java.util.concurrent.ThreadPoolExecutor mCommonThreadPool -> lJ
    java.util.concurrent.ThreadPoolExecutor mParserThreadPool -> lK
    java.util.concurrent.ThreadFactory sThreadFactory_PingBack -> lL
    java.util.concurrent.ThreadFactory sThreadFactory_Parser -> lM
    void <init>() -> <init>
    org.qiyi.net.thread.ThreadPoolManager getInstance() -> dd
    void buildThreadPool(int,int) -> e
    void buildPingBackThreadPool(int,int) -> f
    void buildCommonThreadPool() -> de
    java.util.concurrent.ThreadPoolExecutor getPingBackThreadPool() -> df
    java.util.concurrent.ThreadPoolExecutor getParserThreadPool() -> dg
    void <init>(org.qiyi.net.thread.ThreadPoolManager$1) -> <init>
    java.util.concurrent.ThreadPoolExecutor access$200(org.qiyi.net.thread.ThreadPoolManager) -> a
    void access$300(org.qiyi.net.thread.ThreadPoolManager) -> b
    java.util.concurrent.ThreadPoolExecutor access$400(org.qiyi.net.thread.ThreadPoolManager) -> c
    void <clinit>() -> <clinit>
org.qiyi.net.thread.ThreadPoolManager$1 -> org.qiyi.net.e.b:
    java.util.concurrent.atomic.AtomicInteger mCount -> cJ
    void <init>() -> <init>
    java.lang.Thread newThread(java.lang.Runnable) -> newThread
org.qiyi.net.thread.ThreadPoolManager$2 -> org.qiyi.net.e.c:
    java.util.concurrent.atomic.AtomicInteger mCount -> cJ
    void <init>() -> <init>
    java.lang.Thread newThread(java.lang.Runnable) -> newThread
org.qiyi.net.thread.ThreadPoolManager$3 -> org.qiyi.net.e.d:
    org.qiyi.net.thread.ThreadPoolManager this$0 -> lN
    void <init>(org.qiyi.net.thread.ThreadPoolManager) -> <init>
    void rejectedExecution(java.lang.Runnable,java.util.concurrent.ThreadPoolExecutor) -> rejectedExecution
org.qiyi.net.thread.ThreadPoolManager$4 -> org.qiyi.net.e.e:
    java.util.concurrent.atomic.AtomicInteger mCount -> cJ
    org.qiyi.net.thread.ThreadPoolManager this$0 -> lN
    void <init>(org.qiyi.net.thread.ThreadPoolManager) -> <init>
    java.lang.Thread newThread(java.lang.Runnable) -> newThread
org.qiyi.net.thread.ThreadPoolManager$SingletonHolder -> org.qiyi.net.e.f:
    org.qiyi.net.thread.ThreadPoolManager mInstance -> lO
    org.qiyi.net.thread.ThreadPoolManager access$100() -> dh
    void <clinit>() -> <clinit>
org.qiyi.net.toolbox.ByteArrayPool -> org.qiyi.net.f.a:
    java.util.List mBuffersByLastUse -> lP
    java.util.List mBuffersBySize -> lQ
    int mCurrentSize -> lR
    int mSizeLimit -> lS
    java.util.Comparator BUF_COMPARATOR -> lT
    void <init>(int) -> <init>
    byte[] getBuf(int) -> F
    void returnBuf(byte[]) -> i
    void trim() -> di
    void <clinit>() -> <clinit>
org.qiyi.net.toolbox.ByteArrayPool$1 -> org.qiyi.net.f.b:
    void <init>() -> <init>
    int compare(byte[],byte[]) -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
org.qiyi.net.toolbox.ConvertTool -> org.qiyi.net.f.c:
    org.json.JSONObject convertToJSONObject(byte[],java.lang.String) -> d
    java.lang.String convertToString(byte[],java.lang.String) -> e
org.qiyi.net.toolbox.DateUtils -> org.qiyi.net.f.d:
    java.lang.String[] DEFAULT_PATTERNS -> lU
    java.util.Date DEFAULT_TWO_DIGIT_YEAR_START -> lV
    java.util.TimeZone GMT -> lW
    java.util.Date parseDate(java.lang.String) -> aa
    java.util.Date parseDate(java.lang.String,java.lang.String[],java.util.Date) -> a
    java.lang.String formatDate(java.util.Date) -> a
    java.lang.String formatDate(java.util.Date,java.lang.String) -> a
    void <clinit>() -> <clinit>
org.qiyi.net.toolbox.DateUtils$DateFormatHolder -> org.qiyi.net.f.e:
    java.lang.ThreadLocal THREADLOCAL_FORMATS -> lX
    java.text.SimpleDateFormat formatFor(java.lang.String) -> ab
    void <clinit>() -> <clinit>
org.qiyi.net.toolbox.DateUtils$DateFormatHolder$1 -> org.qiyi.net.f.f:
    void <init>() -> <init>
    java.lang.ref.SoftReference initialValue() -> dj
    java.lang.Object initialValue() -> initialValue
org.qiyi.net.toolbox.HttpHeaderParser -> org.qiyi.net.f.g:
    org.qiyi.net.cache.Cache$Entry parseCacheHeaders(org.qiyi.net.adapter.NetworkResponse) -> a
    long parseDateAsEpoch(java.lang.String) -> ac
    java.lang.String parseCharset(java.util.Map,java.lang.String) -> a
    java.lang.String parseCharset(java.util.Map) -> a
org.qiyi.net.toolbox.HttpsTool -> org.qiyi.net.f.h:
    javax.net.ssl.SSLSocketFactory getSslSocketFactory(java.io.InputStream[],java.io.InputStream,java.lang.String) -> a
    javax.net.ssl.TrustManager[] prepareTrustManager(java.io.InputStream[]) -> a
    javax.net.ssl.KeyManager[] prepareKeyManager(java.io.InputStream,java.lang.String) -> a
    javax.net.ssl.X509TrustManager chooseTrustManager(javax.net.ssl.TrustManager[]) -> a
    javax.net.ssl.X509TrustManager access$100(javax.net.ssl.TrustManager[]) -> b
org.qiyi.net.toolbox.HttpsTool$1 -> org.qiyi.net.f.i:
org.qiyi.net.toolbox.HttpsTool$CustomTrustManager -> org.qiyi.net.f.j:
    javax.net.ssl.X509TrustManager defaultTrustManager -> lY
    javax.net.ssl.X509TrustManager localTrustManager -> lZ
    void <init>(javax.net.ssl.X509TrustManager) -> <init>
    void checkClientTrusted(java.security.cert.X509Certificate[],java.lang.String) -> checkClientTrusted
    void checkServerTrusted(java.security.cert.X509Certificate[],java.lang.String) -> checkServerTrusted
    java.security.cert.X509Certificate[] getAcceptedIssuers() -> getAcceptedIssuers
org.qiyi.net.toolbox.HttpsTool$UnSafeTrustManager -> org.qiyi.net.f.k:
    void <init>() -> <init>
    void checkClientTrusted(java.security.cert.X509Certificate[],java.lang.String) -> checkClientTrusted
    void checkServerTrusted(java.security.cert.X509Certificate[],java.lang.String) -> checkServerTrusted
    java.security.cert.X509Certificate[] getAcceptedIssuers() -> getAcceptedIssuers
    void <init>(org.qiyi.net.toolbox.HttpsTool$1) -> <init>
org.qiyi.net.toolbox.PoolingByteArrayOutputStream -> org.qiyi.net.f.l:
    org.qiyi.net.toolbox.ByteArrayPool mPool -> kF
    void <init>(org.qiyi.net.toolbox.ByteArrayPool,int) -> <init>
    void close() -> close
    void finalize() -> finalize
    void expand(int) -> G
    void write(byte[],int,int) -> write
    void write(int) -> write
org.qiyi.net.toolbox.StringTool -> org.qiyi.net.f.m:
    java.lang.String modifyUri(java.lang.String,int) -> a
    java.lang.String appendOrReplaceUrlParameter(java.lang.String,java.util.LinkedHashMap) -> appendOrReplaceUrlParameter
    java.lang.String appendParam(java.lang.String,java.util.LinkedHashMap) -> appendParam
org.qiyi.pluginlibrary.ActivityJumpUtil -> org.qiyi.pluginlibrary.a:
    java.lang.String TAG -> TAG
    void <init>() -> <init>
    java.lang.String getProxyActivityClsName(java.lang.String,android.content.pm.ActivityInfo,java.lang.String) -> a
    java.lang.String getProxyActivityClsName(java.lang.String,boolean,boolean,boolean,java.lang.String) -> a
    boolean isChangedIntent(android.content.Intent) -> a
    void setPluginIntent(android.content.Intent,java.lang.String,java.lang.String) -> a
    android.content.Intent handleStartActivityIntent(java.lang.String,android.content.Intent,int,android.os.Bundle,android.content.Context) -> a
    void <clinit>() -> <clinit>
org.qiyi.pluginlibrary.ActivityOverrider -> org.qiyi.pluginlibrary.b:
    java.lang.String tag -> tag
    void <init>() -> <init>
    void changeActivityInfo(android.app.Activity,java.lang.String,java.lang.String) -> a
    void <clinit>() -> <clinit>
org.qiyi.pluginlibrary.ApkTargetMappingNew -> org.qiyi.pluginlibrary.ApkTargetMappingNew:
    java.lang.String versionName -> versionName
    int versionCode -> versionCode
    java.lang.String packageName -> packageName
    java.lang.String applicationClassName -> ma
    java.lang.String defaultActivityName -> mb
    android.content.pm.PermissionInfo[] permissions -> permissions
    android.content.pm.PackageInfo packageInfo -> mc
    android.os.Bundle metaData -> metaData
    java.lang.String dataDir -> dataDir
    java.lang.String nativeLibraryDir -> nativeLibraryDir
    boolean mIsClassInject -> md
    boolean mUsePluginAppInfo -> me
    boolean mUsePluginCodePath -> mf
    java.util.Map mActivitiyIntentInfos -> mg
    java.util.Map mServiceIntentInfos -> mh
    java.util.Map mReceiverIntentInfos -> mi
    android.os.Parcelable$Creator CREATOR -> CREATOR
    void <init>(android.content.Context,java.io.File) -> <init>
    void <init>(android.os.Parcel) -> <init>
    boolean isValidate() -> dk
    void init(android.content.Context,java.io.File) -> a
    java.lang.String getDataDir() -> dl
    java.lang.String getnativeLibraryDir() -> dm
    boolean usePluginApplicationInfo() -> dn
    boolean usePluginCodePath() -> do
    android.content.pm.ActivityInfo findActivityByClassName(java.lang.String) -> ad
    android.content.pm.ActivityInfo resolveActivity(android.content.Intent) -> b
    android.content.pm.ActivityInfo findReceiverByClassName(java.lang.String) -> ae
    android.content.pm.ServiceInfo findServiceByClassName(java.lang.String) -> af
    boolean isClassNeedInject() -> dp
    java.lang.String getPackageName() -> getPackageName
    java.lang.String getApplicationClassName() -> dq
    java.lang.String getDefaultActivityName() -> dr
    android.content.pm.PackageInfo getPackageInfo() -> ds
    int getThemeResource(java.lang.String) -> ag
    android.content.pm.ActivityInfo getActivityInfo(java.lang.String) -> ah
    android.content.pm.ServiceInfo getServiceInfo(java.lang.String) -> ai
    android.os.Bundle getMetaData() -> dt
    void addActivity(org.qiyi.pluginlibrary.ApkTargetMappingNew$ActivityIntentInfo) -> a
    void addReceiver(org.qiyi.pluginlibrary.ApkTargetMappingNew$ReceiverIntentInfo) -> a
    void addService(org.qiyi.pluginlibrary.ApkTargetMappingNew$ServiceIntentInfo) -> a
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
    void <clinit>() -> <clinit>
org.qiyi.pluginlibrary.ApkTargetMappingNew$1 -> org.qiyi.pluginlibrary.c:
    void <init>() -> <init>
    org.qiyi.pluginlibrary.ApkTargetMappingNew createFromParcel(android.os.Parcel) -> c
    org.qiyi.pluginlibrary.ApkTargetMappingNew[] newArray(int) -> H
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
org.qiyi.pluginlibrary.ApkTargetMappingNew$ActivityIntentInfo -> org.qiyi.pluginlibrary.ApkTargetMappingNew$ActivityIntentInfo:
    android.content.pm.ActivityInfo mInfo -> mj
    android.os.Parcelable$Creator CREATOR -> CREATOR
    void <init>(android.content.pm.ActivityInfo) -> <init>
    void <init>(android.os.Parcel) -> <init>
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
    void <clinit>() -> <clinit>
org.qiyi.pluginlibrary.ApkTargetMappingNew$ActivityIntentInfo$1 -> org.qiyi.pluginlibrary.d:
    void <init>() -> <init>
    org.qiyi.pluginlibrary.ApkTargetMappingNew$ActivityIntentInfo createFromParcel(android.os.Parcel) -> d
    org.qiyi.pluginlibrary.ApkTargetMappingNew$ActivityIntentInfo[] newArray(int) -> I
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
org.qiyi.pluginlibrary.ApkTargetMappingNew$IntentInfo -> org.qiyi.pluginlibrary.ApkTargetMappingNew$IntentInfo:
    java.util.List mFilter -> mk
    android.os.Parcelable$Creator CREATOR -> CREATOR
    void <init>() -> <init>
    void <init>(android.os.Parcel) -> <init>
    void setFilter(java.util.List) -> v
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
    void <clinit>() -> <clinit>
org.qiyi.pluginlibrary.ApkTargetMappingNew$IntentInfo$1 -> org.qiyi.pluginlibrary.e:
    void <init>() -> <init>
    org.qiyi.pluginlibrary.ApkTargetMappingNew$IntentInfo createFromParcel(android.os.Parcel) -> e
    org.qiyi.pluginlibrary.ApkTargetMappingNew$IntentInfo[] newArray(int) -> J
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
org.qiyi.pluginlibrary.ApkTargetMappingNew$ReceiverIntentInfo -> org.qiyi.pluginlibrary.ApkTargetMappingNew$ReceiverIntentInfo:
    android.content.pm.ActivityInfo mInfo -> mj
    android.os.Parcelable$Creator CREATOR -> CREATOR
    void <init>(android.content.pm.ActivityInfo) -> <init>
    void <init>(android.os.Parcel) -> <init>
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
    void <clinit>() -> <clinit>
org.qiyi.pluginlibrary.ApkTargetMappingNew$ReceiverIntentInfo$1 -> org.qiyi.pluginlibrary.f:
    void <init>() -> <init>
    org.qiyi.pluginlibrary.ApkTargetMappingNew$ReceiverIntentInfo createFromParcel(android.os.Parcel) -> f
    org.qiyi.pluginlibrary.ApkTargetMappingNew$ReceiverIntentInfo[] newArray(int) -> K
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
org.qiyi.pluginlibrary.ApkTargetMappingNew$ServiceIntentInfo -> org.qiyi.pluginlibrary.ApkTargetMappingNew$ServiceIntentInfo:
    android.content.pm.ServiceInfo mInfo -> ml
    android.os.Parcelable$Creator CREATOR -> CREATOR
    void <init>(android.content.pm.ServiceInfo) -> <init>
    void <init>(android.os.Parcel) -> <init>
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
    void <clinit>() -> <clinit>
org.qiyi.pluginlibrary.ApkTargetMappingNew$ServiceIntentInfo$1 -> org.qiyi.pluginlibrary.g:
    void <init>() -> <init>
    org.qiyi.pluginlibrary.ApkTargetMappingNew$ServiceIntentInfo createFromParcel(android.os.Parcel) -> g
    org.qiyi.pluginlibrary.ApkTargetMappingNew$ServiceIntentInfo[] newArray(int) -> L
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
org.qiyi.pluginlibrary.PActivityStackSupervisor -> org.qiyi.pluginlibrary.h:
    java.lang.String TAG -> TAG
    java.util.concurrent.ConcurrentMap sIntentCacheMap -> mm
    java.util.concurrent.ConcurrentMap sIntentLoadingMap -> mn
    java.util.concurrent.CopyOnWriteArrayList sAllActivityStack -> mo
    java.util.LinkedList mActivityStack -> mp
    org.qiyi.pluginlibrary.manager.ProxyEnvironment mEnv -> mq
    java.util.LinkedList getActivityStack() -> du
    void clearActivityStack() -> dv
    android.app.Activity pollActivityStack() -> dw
    void dealLaunchMode(android.content.Intent) -> c
    void handleOtherPluginActivityStack(android.app.Activity) -> a
    void pushActivityToStack(android.app.Activity) -> b
    boolean popActivityFromStack(android.app.Activity) -> c
    void addCachedIntent(java.lang.String,java.util.concurrent.LinkedBlockingQueue) -> a
    java.util.concurrent.LinkedBlockingQueue getCachedIntent(java.lang.String) -> aj
    void clearLoadingIntent(java.lang.String) -> ak
    void addLoadingIntent(java.lang.String,android.content.Intent) -> a
    void removeLoadingIntent(java.lang.String) -> al
    void removeLoadingIntent(java.lang.String,android.content.Intent) -> b
    java.lang.String getActivityStackKey(android.app.Activity,java.lang.String) -> a
    void <clinit>() -> <clinit>
org.qiyi.pluginlibrary.PServiceSupervisor -> org.qiyi.pluginlibrary.i:
    java.util.concurrent.ConcurrentMap sAliveServices -> mr
    java.util.concurrent.ConcurrentMap sAliveServiceConnection -> ms
    java.util.concurrent.ConcurrentMap getAliveServices() -> dx
    org.qiyi.pluginlibrary.PluginServiceWrapper getServiceByIdentifer(java.lang.String) -> am
    void removeServiceByIdentifer(java.lang.String) -> an
    void addServiceByIdentifer(java.lang.String,org.qiyi.pluginlibrary.PluginServiceWrapper) -> a
    void clearServices() -> clearServices
    android.content.ServiceConnection getConnection(java.lang.String) -> ao
    void addServiceConnectionByIdentifer(java.lang.String,android.content.ServiceConnection) -> a
    void removeServiceConnection(android.content.ServiceConnection) -> a
    void <clinit>() -> <clinit>
org.qiyi.pluginlibrary.PluginActivityControl -> org.qiyi.pluginlibrary.j:
    java.util.concurrent.ConcurrentMap sMethods -> mt
    android.app.Activity mProxy -> mu
    android.app.Activity mPlugin -> mv
    org.qiyi.pluginlibrary.utils.ReflectionUtils mProxyRef -> mw
    org.qiyi.pluginlibrary.utils.ReflectionUtils mPluginRef -> mx
    android.app.Application mApplication -> my
    android.app.Instrumentation mHostInstr -> mz
    void <init>(android.app.Activity,android.app.Activity,android.app.Application,android.app.Instrumentation) -> <init>
    void dispatchProxyToPlugin(android.app.Instrumentation,android.content.Context,java.lang.String) -> a
    android.app.Activity getPlugin() -> dy
    org.qiyi.pluginlibrary.utils.ReflectionUtils getPluginRef() -> dz
    void callOnCreate(android.os.Bundle) -> a
    void callOnPostCreate(android.os.Bundle) -> b
    void callOnStart() -> dA
    void callOnResume() -> dB
    void callOnDestroy() -> dC
    void callOnStop() -> dD
    void callOnRestart() -> dE
    void callOnSaveInstanceState(android.os.Bundle) -> c
    void callOnRestoreInstanceState(android.os.Bundle) -> d
    void callOnPause() -> dF
    void callOnBackPressed() -> dG
    boolean callOnKeyDown(int,android.view.KeyEvent) -> a
    void callDump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> a
    void callOnConfigurationChanged(android.content.res.Configuration) -> a
    void callOnPostResume() -> dH
    void callOnDetachedFromWindow() -> dI
    android.view.View callOnCreateView(java.lang.String,android.content.Context,android.util.AttributeSet) -> a
    android.view.View callOnCreateView(android.view.View,java.lang.String,android.content.Context,android.util.AttributeSet) -> a
    void callOnNewIntent(android.content.Intent) -> d
    void <clinit>() -> <clinit>
org.qiyi.pluginlibrary.PluginInstrument -> org.qiyi.pluginlibrary.k:
    java.util.concurrent.ConcurrentMap sMethods -> mt
    java.lang.String mPkgName -> mA
    android.app.Instrumentation mHostInstr -> mz
    org.qiyi.pluginlibrary.utils.ReflectionUtils mInstrumentRef -> mB
    void <init>(android.app.Instrumentation,java.lang.String) -> <init>
    android.app.Instrumentation$ActivityResult execStartActivity(android.content.Context,android.os.IBinder,android.os.IBinder,android.app.Activity,android.content.Intent,int,android.os.Bundle) -> execStartActivity
    android.app.Instrumentation$ActivityResult execStartActivity(android.content.Context,android.os.IBinder,android.os.IBinder,android.app.Activity,android.content.Intent,int) -> execStartActivity
    android.app.Instrumentation$ActivityResult execStartActivityAsCaller(android.content.Context,android.os.IBinder,android.os.IBinder,android.app.Activity,android.content.Intent,int,android.os.Bundle,int) -> execStartActivityAsCaller
    android.app.Instrumentation$ActivityResult execStartActivityAsCaller(android.content.Context,android.os.IBinder,android.os.IBinder,android.app.Activity,android.content.Intent,int,android.os.Bundle,boolean,int) -> execStartActivityAsCaller
    void execStartActivitiesAsUser(android.content.Context,android.os.IBinder,android.os.IBinder,android.app.Activity,android.content.Intent[],android.os.Bundle,int) -> execStartActivitiesAsUser
    android.app.Instrumentation$ActivityResult execStartActivity(android.content.Context,android.os.IBinder,android.os.IBinder,android.app.Fragment,android.content.Intent,int,android.os.Bundle) -> execStartActivity
    android.app.Instrumentation$ActivityResult execStartActivity(android.content.Context,android.os.IBinder,android.os.IBinder,java.lang.String,android.content.Intent,int,android.os.Bundle) -> execStartActivity
    void <clinit>() -> <clinit>
org.qiyi.pluginlibrary.PluginServiceWrapper -> org.qiyi.pluginlibrary.l:
    int mState -> mD
    java.lang.String mServiceClassName -> mE
    java.lang.String mPkgName -> mA
    android.app.Service mParentService -> mF
    android.app.Service mCurrentService -> mG
    int mBindCounter -> mH
    int mStartCounter -> mI
    boolean mNeedSelfLaunch -> mJ
    void <init>(java.lang.String,java.lang.String,android.app.Service,android.app.Service) -> <init>
    void updateServiceState(int) -> M
    java.lang.String getPkgName() -> dJ
    java.lang.String getServiceClassName() -> dK
    android.app.Service getCurrentService() -> dL
    void updateBindCounter(int) -> N
    void updateStartStatus(int) -> O
    boolean shouldDestroy() -> dM
    void tryToDestroyService(android.content.Intent) -> e
    java.lang.String getIndeitfy(java.lang.String,java.lang.String) -> j
org.qiyi.pluginlibrary.ProxyComponentMappingByProcess -> org.qiyi.pluginlibrary.m:
    org.qiyi.pluginlibrary.ProxyComponentMappingByProcess$MappingProcessIndex sProcessMapping -> mK
    java.lang.String getDefaultPlugProcessName() -> dN
    java.lang.String mappingActivity(boolean,boolean,boolean,java.lang.String) -> a
    java.lang.String mappingService(java.lang.String) -> ap
org.qiyi.pluginlibrary.ProxyComponentMappingByProcess$MappingProcessIndex -> org.qiyi.pluginlibrary.n:
    int getProcessIndex(java.lang.String) -> aq
    java.lang.String getDefaultProcessName() -> dO
org.qiyi.pluginlibrary.ServiceJumpUtil -> org.qiyi.pluginlibrary.o:
    void remapStartServiceIntent(org.qiyi.pluginlibrary.manager.ProxyEnvironment,android.content.Intent) -> a
    void remapStartServiceIntent(org.qiyi.pluginlibrary.manager.ProxyEnvironment,android.content.Intent,java.lang.String) -> a
org.qiyi.pluginlibrary.component.InstrActivityProxy -> org.qiyi.pluginlibrary.component.a:
    java.lang.String TAG -> TAG
    org.qiyi.pluginlibrary.manager.ProxyEnvironment mPluginEnv -> mL
    org.qiyi.pluginlibrary.PluginActivityControl mPluginContrl -> mM
    org.qiyi.pluginlibrary.context.CMContextWrapperNew mPluginContextWrapper -> mN
    java.lang.String mProxyPkg -> mO
    boolean mNeedUpdateConfiguration -> mP
    void <init>() -> <init>
    android.app.Activity fillPluginActivity(org.qiyi.pluginlibrary.manager.ProxyEnvironment,java.lang.String) -> a
    java.lang.String[] getPkgAndCls() -> dP
    boolean tryToInitEnvironment(java.lang.String) -> ar
    void onCreate(android.os.Bundle) -> onCreate
    void processError(java.lang.Exception) -> d
    org.qiyi.pluginlibrary.PluginActivityControl getController() -> dQ
    android.content.res.Resources getResources() -> getResources
    void setTheme(int) -> setTheme
    android.content.res.Resources$Theme getTheme() -> getTheme
    boolean isOppoStyle() -> isOppoStyle
    android.content.res.AssetManager getAssets() -> getAssets
    java.io.File getFilesDir() -> getFilesDir
    java.io.File getCacheDir() -> getCacheDir
    java.io.File getFileStreamPath(java.lang.String) -> getFileStreamPath
    java.io.File getDir(java.lang.String,int) -> getDir
    java.io.FileInputStream openFileInput(java.lang.String) -> openFileInput
    java.io.FileOutputStream openFileOutput(java.lang.String,int) -> openFileOutput
    java.io.File getDatabasePath(java.lang.String) -> getDatabasePath
    boolean deleteFile(java.lang.String) -> deleteFile
    android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String,int,android.database.sqlite.SQLiteDatabase$CursorFactory) -> openOrCreateDatabase
    android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String,int,android.database.sqlite.SQLiteDatabase$CursorFactory,android.database.DatabaseErrorHandler) -> openOrCreateDatabase
    boolean deleteDatabase(java.lang.String) -> deleteDatabase
    java.lang.String[] databaseList() -> databaseList
    java.lang.ClassLoader getClassLoader() -> getClassLoader
    android.content.Context getApplicationContext() -> getApplicationContext
    void onResume() -> onResume
    void onStart() -> onStart
    void onPostCreate(android.os.Bundle) -> onPostCreate
    void onDestroy() -> onDestroy
    void onPause() -> onPause
    void onBackPressed() -> onBackPressed
    void onStop() -> onStop
    void onRestart() -> onRestart
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
    android.content.ComponentName startService(android.content.Intent) -> startService
    boolean stopService(android.content.Intent) -> stopService
    boolean bindService(android.content.Intent,android.content.ServiceConnection,int) -> bindService
    void startActivityForResult(android.content.Intent,int) -> startActivityForResult
    void startActivityForResult(android.content.Intent,int,android.os.Bundle) -> startActivityForResult
    android.content.SharedPreferences getSharedPreferences(java.lang.String,int) -> getSharedPreferences
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> dump
    void onConfigurationChanged(android.content.res.Configuration) -> onConfigurationChanged
    void onPostResume() -> onPostResume
    void onDetachedFromWindow() -> onDetachedFromWindow
    android.view.View onCreateView(java.lang.String,android.content.Context,android.util.AttributeSet) -> onCreateView
    android.view.View onCreateView(android.view.View,java.lang.String,android.content.Context,android.util.AttributeSet) -> onCreateView
    void onNewIntent(android.content.Intent) -> onNewIntent
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    void onAttachFragment(android.app.Fragment) -> onAttachFragment
    android.view.View onCreatePanelView(int) -> onCreatePanelView
    void onOptionsMenuClosed(android.view.Menu) -> onOptionsMenuClosed
    void onPanelClosed(int,android.view.Menu) -> onPanelClosed
    boolean onKeyUp(int,android.view.KeyEvent) -> onKeyUp
    void onAttachedToWindow() -> onAttachedToWindow
    java.lang.CharSequence onCreateDescription() -> onCreateDescription
    boolean onGenericMotionEvent(android.view.MotionEvent) -> onGenericMotionEvent
    void onContentChanged() -> onContentChanged
    boolean onCreateThumbnail(android.graphics.Bitmap,android.graphics.Canvas) -> onCreateThumbnail
    void onRestoreInstanceState(android.os.Bundle) -> onRestoreInstanceState
    void onSaveInstanceState(android.os.Bundle) -> onSaveInstanceState
    void onRequestPermissionsResult(int,java.lang.String[],int[]) -> onRequestPermissionsResult
    void onStateNotSaved() -> onStateNotSaved
    boolean onSearchRequested(android.view.SearchEvent) -> onSearchRequested
    boolean onSearchRequested() -> onSearchRequested
    void onProvideAssistContent(android.app.assist.AssistContent) -> onProvideAssistContent
    android.content.Context getOriginalContext() -> dR
    org.qiyi.pluginlibrary.utils.ResourcesToolForPlugin getHostResourceTool() -> dS
    void exitApp() -> dT
    java.lang.String getPluginPackageName() -> dU
    java.lang.String dump() -> dV
    android.content.pm.ApplicationInfo getApplicationInfo() -> getApplicationInfo
    java.lang.String getPackageCodePath() -> getPackageCodePath
    void <clinit>() -> <clinit>
org.qiyi.pluginlibrary.component.InstrActivityProxyHandleConfigChange -> org.qiyi.pluginlibrary.component.b:
    void <init>() -> <init>
org.qiyi.pluginlibrary.component.InstrActivityProxyLandscape -> org.qiyi.pluginlibrary.component.c:
    void <init>() -> <init>
org.qiyi.pluginlibrary.component.InstrActivityProxyTranslucent -> org.qiyi.pluginlibrary.component.d:
    void <init>() -> <init>
org.qiyi.pluginlibrary.component.ServiceProxy -> org.qiyi.pluginlibrary.component.ServiceProxy:
    java.lang.String TAG -> TAG
    java.util.concurrent.ConcurrentMap sMethods -> mt
    boolean mKillProcessOnDestroy -> mQ
    void <init>() -> <init>
    void onCreate() -> onCreate
    void handleSlefLaunchPluginService() -> dW
    org.qiyi.pluginlibrary.PluginServiceWrapper findPluginService(java.lang.String,java.lang.String) -> k
    org.qiyi.pluginlibrary.PluginServiceWrapper loadTargetService(java.lang.String,java.lang.String) -> l
    android.os.IBinder onBind(android.content.Intent) -> onBind
    void onConfigurationChanged(android.content.res.Configuration) -> onConfigurationChanged
    void onDestroy() -> onDestroy
    void onLowMemory() -> onLowMemory
    int onStartCommand(android.content.Intent,int,int) -> onStartCommand
    boolean onUnbind(android.content.Intent) -> onUnbind
    void onStart(android.content.Intent,int) -> onStart
    void onTrimMemory(int) -> onTrimMemory
    void onRebind(android.content.Intent) -> onRebind
    void onTaskRemoved(android.content.Intent) -> onTaskRemoved
    void <clinit>() -> <clinit>
org.qiyi.pluginlibrary.component.ServiceProxy1 -> org.qiyi.pluginlibrary.component.ServiceProxy1:
    void <init>() -> <init>
org.qiyi.pluginlibrary.component.ServiceProxy2 -> org.qiyi.pluginlibrary.component.ServiceProxy2:
    void <init>() -> <init>
org.qiyi.pluginlibrary.component.ServiceProxy3 -> org.qiyi.pluginlibrary.component.ServiceProxy3:
    void <init>() -> <init>
org.qiyi.pluginlibrary.component.ServiceProxy4 -> org.qiyi.pluginlibrary.component.ServiceProxy4:
    void <init>() -> <init>
org.qiyi.pluginlibrary.component.ServiceProxy5 -> org.qiyi.pluginlibrary.component.ServiceProxy5:
    void <init>() -> <init>
org.qiyi.pluginlibrary.component.ServiceProxy6 -> org.qiyi.pluginlibrary.component.ServiceProxy6:
    void <init>() -> <init>
org.qiyi.pluginlibrary.component.ServiceProxy7 -> org.qiyi.pluginlibrary.component.ServiceProxy7:
    void <init>() -> <init>
org.qiyi.pluginlibrary.component.ServiceProxy8 -> org.qiyi.pluginlibrary.component.ServiceProxy8:
    void <init>() -> <init>
org.qiyi.pluginlibrary.component.ServiceProxy9 -> org.qiyi.pluginlibrary.component.ServiceProxy9:
    void <init>() -> <init>
org.qiyi.pluginlibrary.context.CMContextWrapperNew -> org.qiyi.pluginlibrary.a.a:
    java.lang.String mPackagename -> mR
    android.content.res.Resources$Theme mTargetTheme -> mS
    void <init>(android.content.Context,java.lang.String) -> <init>
    android.content.res.Resources$Theme getTheme() -> getTheme
    void setTheme(int) -> setTheme
    java.lang.String getPluginPackageName() -> dU
    org.qiyi.pluginlibrary.manager.ProxyEnvironment getEnvironment() -> dX
    java.lang.String getLogTag() -> dY
org.qiyi.pluginlibrary.context.CustomContextWrapper -> org.qiyi.pluginlibrary.a.b:
    java.lang.String S_SHARED_PREFS -> mT
    java.util.concurrent.ConcurrentMap sMethods -> mt
    android.content.pm.ApplicationInfo mApplicationInfo -> mU
    void <init>(android.content.Context) -> <init>
    java.lang.ClassLoader getClassLoader() -> getClassLoader
    android.content.Context getApplicationContext() -> getApplicationContext
    android.content.pm.ApplicationInfo getApplicationInfo() -> getApplicationInfo
    android.content.res.Resources getResources() -> getResources
    android.content.res.AssetManager getAssets() -> getAssets
    android.content.ComponentName startService(android.content.Intent) -> startService
    boolean stopService(android.content.Intent) -> stopService
    boolean bindService(android.content.Intent,android.content.ServiceConnection,int) -> bindService
    void unbindService(android.content.ServiceConnection) -> unbindService
    void startActivity(android.content.Intent) -> startActivity
    void startActivity(android.content.Intent,android.os.Bundle) -> startActivity
    java.io.File getFilesDir() -> getFilesDir
    java.io.File getCacheDir() -> getCacheDir
    java.io.File getFileStreamPath(java.lang.String) -> getFileStreamPath
    java.io.File getDir(java.lang.String,int) -> getDir
    java.io.File getDatabasePath(java.lang.String) -> getDatabasePath
    java.io.FileInputStream openFileInput(java.lang.String) -> openFileInput
    java.io.FileOutputStream openFileOutput(java.lang.String,int) -> openFileOutput
    java.io.File makeFilename(java.io.File,java.lang.String) -> c
    boolean deleteFile(java.lang.String) -> deleteFile
    android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String,int,android.database.sqlite.SQLiteDatabase$CursorFactory) -> openOrCreateDatabase
    void checkBackupDB(java.lang.String) -> as
    android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String,int,android.database.sqlite.SQLiteDatabase$CursorFactory,android.database.DatabaseErrorHandler) -> openOrCreateDatabase
    boolean deleteDatabase(java.lang.String) -> deleteDatabase
    java.lang.String[] databaseList() -> databaseList
    java.io.File getSharedPrefsFile(java.lang.String) -> at
    java.io.File makeBackupFile(java.io.File) -> d
    android.content.SharedPreferences getSharedPreferecesForPlugin(java.lang.String,int) -> b
    android.content.SharedPreferences getSharedPreferences(java.lang.String,int) -> getSharedPreferences
    void backupSharedPreference(java.lang.String) -> au
    boolean isOppoStyle() -> isOppoStyle
    android.content.Context getOriginalContext() -> dR
    java.lang.String getPackageCodePath() -> getPackageCodePath
    org.qiyi.pluginlibrary.utils.ResourcesToolForPlugin getHostResourceTool() -> dS
    void exitApp() -> dT
    org.qiyi.pluginlibrary.manager.ProxyEnvironment getEnvironment() -> dX
    java.lang.String getLogTag() -> dY
    void <clinit>() -> <clinit>
org.qiyi.pluginlibrary.debug.IPluginDebugHelper -> org.qiyi.pluginlibrary.b.a:
    void savePluginActivityAndServiceJump(android.content.Context,java.lang.String,java.lang.String) -> b
    java.lang.String getCurrentSystemTime() -> dZ
org.qiyi.pluginlibrary.debug.PluginCenterDebugHelper -> org.qiyi.pluginlibrary.b.b:
    org.qiyi.pluginlibrary.debug.IPluginDebugHelper iPluginDebugHelper -> mV
    android.content.Context context -> context
    void <init>() -> <init>
    org.qiyi.pluginlibrary.debug.PluginCenterDebugHelper getInstance() -> ea
    void savePluginActivityAndServiceJump(java.lang.String,java.lang.String) -> m
    java.lang.String getCurrentSystemTime() -> dZ
    void <init>(org.qiyi.pluginlibrary.debug.PluginCenterDebugHelper$1) -> <init>
org.qiyi.pluginlibrary.debug.PluginCenterDebugHelper$1 -> org.qiyi.pluginlibrary.b.c:
org.qiyi.pluginlibrary.debug.PluginCenterDebugHelper$SingletonHolder -> org.qiyi.pluginlibrary.b.d:
    org.qiyi.pluginlibrary.debug.PluginCenterDebugHelper mInstance -> mW
    void <clinit>() -> <clinit>
org.qiyi.pluginlibrary.install.IActionFinishCallback -> org.qiyi.pluginlibrary.install.IActionFinishCallback:
    void onActionComplete(java.lang.String,int) -> c
    java.lang.String getProcessName() -> eb
org.qiyi.pluginlibrary.install.IActionFinishCallback$Stub -> org.qiyi.pluginlibrary.install.IActionFinishCallback$Stub:
    void <init>() -> <init>
    org.qiyi.pluginlibrary.install.IActionFinishCallback asInterface(android.os.IBinder) -> c
    android.os.IBinder asBinder() -> asBinder
    boolean onTransact(int,android.os.Parcel,android.os.Parcel,int) -> onTransact
org.qiyi.pluginlibrary.install.IActionFinishCallback$Stub$Proxy -> org.qiyi.pluginlibrary.install.a:
    android.os.IBinder mRemote -> ck
    void <init>(android.os.IBinder) -> <init>
    android.os.IBinder asBinder() -> asBinder
    void onActionComplete(java.lang.String,int) -> c
    java.lang.String getProcessName() -> eb
org.qiyi.pluginlibrary.install.IInstallCallBack -> org.qiyi.pluginlibrary.install.IInstallCallBack:
    void onPacakgeInstalled(org.qiyi.pluginlibrary.pm.CMPackageInfo) -> a
    void onPackageInstallFail(java.lang.String,int) -> d
org.qiyi.pluginlibrary.install.IInstallCallBack$Stub -> org.qiyi.pluginlibrary.install.IInstallCallBack$Stub:
    void <init>() -> <init>
    org.qiyi.pluginlibrary.install.IInstallCallBack asInterface(android.os.IBinder) -> d
    android.os.IBinder asBinder() -> asBinder
    boolean onTransact(int,android.os.Parcel,android.os.Parcel,int) -> onTransact
org.qiyi.pluginlibrary.install.IInstallCallBack$Stub$Proxy -> org.qiyi.pluginlibrary.install.b:
    android.os.IBinder mRemote -> ck
    void <init>(android.os.IBinder) -> <init>
    android.os.IBinder asBinder() -> asBinder
    void onPacakgeInstalled(org.qiyi.pluginlibrary.pm.CMPackageInfo) -> a
    void onPackageInstallFail(java.lang.String,int) -> d
org.qiyi.pluginlibrary.install.PluginInstaller -> org.qiyi.pluginlibrary.install.c:
    boolean sInstallerReceiverRegistered -> mX
    java.util.LinkedList sInstallList -> mY
    java.util.ArrayList sBuildinAppList -> mZ
    android.content.BroadcastReceiver sApkInstallerReceiver -> na
    java.io.File getPluginappRootPath(android.content.Context) -> A
    void installBuildinApps(java.lang.String,android.content.Context,org.qiyi.pluginlibrary.pm.PluginPackageInfoExt) -> a
    boolean installBuildinApp(android.content.Context,java.lang.String,org.qiyi.pluginlibrary.pm.PluginPackageInfoExt) -> a
    void startInstall(android.content.Context,java.lang.String,org.qiyi.pluginlibrary.pm.PluginPackageInfoExt) -> b
    void installApkFile(android.content.Context,java.lang.String,org.qiyi.pluginlibrary.pm.PluginPackageInfoExt) -> c
    java.io.File getInstalledDexFile(android.content.Context,java.lang.String) -> j
    void registerInstallderReceiver(android.content.Context) -> B
    void add2InstallList(java.lang.String) -> av
    void handleApkInstalled(android.content.Context,java.lang.String) -> k
    void deleteInstallerPackage(android.content.Context,java.lang.String,java.lang.String) -> c
    void deletePluginData(android.content.Context,java.lang.String) -> l
    boolean isInstalling(java.lang.String) -> aw
    boolean access$000(android.content.Context,java.lang.String,org.qiyi.pluginlibrary.pm.PluginPackageInfoExt) -> d
    void access$100(android.content.Context,java.lang.String) -> m
    java.util.LinkedList access$200() -> ec
    void <clinit>() -> <clinit>
org.qiyi.pluginlibrary.install.PluginInstaller$1 -> org.qiyi.pluginlibrary.install.d:
    android.content.Context val$context -> ev
    java.lang.String val$packageName -> nb
    org.qiyi.pluginlibrary.pm.PluginPackageInfoExt val$info -> nc
    void <init>(android.content.Context,java.lang.String,org.qiyi.pluginlibrary.pm.PluginPackageInfoExt) -> <init>
    java.lang.Void doInBackground(java.lang.Void[]) -> a
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
org.qiyi.pluginlibrary.install.PluginInstaller$2 -> org.qiyi.pluginlibrary.install.e:
    void <init>() -> <init>
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
org.qiyi.pluginlibrary.install.PluginInstallerService -> org.qiyi.pluginlibrary.install.PluginInstallerService:
    java.lang.String APK_LIB_DIR_PREFIX -> nd
    int APK_LIB_CPUABI_OFFSITE -> ne
    int MSG_ACTION_INSTALL -> nf
    int MSG_ACTION_QUIT -> ng
    int DELAY_QUIT_STEP -> nh
    android.os.Looper mServiceLooper -> ni
    org.qiyi.pluginlibrary.install.PluginInstallerService$ServiceHandler mServiceHandler -> nj
    void <init>() -> <init>
    android.os.IBinder onBind(android.content.Intent) -> onBind
    void onCreate() -> onCreate
    int onStartCommand(android.content.Intent,int,int) -> onStartCommand
    void onDestroy() -> onDestroy
    void onHandleIntent(android.content.Intent) -> onHandleIntent
    void handleInstall(java.lang.String,org.qiyi.pluginlibrary.pm.PluginPackageInfoExt) -> a
    void installSoPlugin(java.lang.String,org.qiyi.pluginlibrary.pm.PluginPackageInfoExt) -> b
    void installDexPlugin(java.lang.String,org.qiyi.pluginlibrary.pm.PluginPackageInfoExt) -> c
    void installBuildinApk(java.lang.String,org.qiyi.pluginlibrary.pm.PluginPackageInfoExt) -> d
    void installAPKFile(java.lang.String,org.qiyi.pluginlibrary.pm.PluginPackageInfoExt) -> e
    java.lang.String doInstall(java.io.InputStream,java.lang.String,org.qiyi.pluginlibrary.pm.PluginPackageInfoExt) -> a
    void setInstallFail(java.lang.String,int,org.qiyi.pluginlibrary.pm.PluginPackageInfoExt) -> a
    void setInstallSuccess(java.lang.String,java.lang.String,java.lang.String,org.qiyi.pluginlibrary.pm.PluginPackageInfoExt) -> a
    void installDex(java.lang.String,java.lang.String,java.lang.String,java.lang.ClassLoader) -> a
    java.io.File getPreferedInstallLocation(android.content.pm.PackageInfo) -> a
    int access$000() -> ed
    void access$100(org.qiyi.pluginlibrary.install.PluginInstallerService,android.content.Intent) -> a
    org.qiyi.pluginlibrary.install.PluginInstallerService$ServiceHandler access$200(org.qiyi.pluginlibrary.install.PluginInstallerService) -> a
    int access$300() -> ee
    int access$400() -> ef
    void <clinit>() -> <clinit>
org.qiyi.pluginlibrary.install.PluginInstallerService$ServiceHandler -> org.qiyi.pluginlibrary.install.f:
    org.qiyi.pluginlibrary.install.PluginInstallerService this$0 -> nk
    void <init>(org.qiyi.pluginlibrary.install.PluginInstallerService,android.os.Looper) -> <init>
    void handleMessage(android.os.Message) -> handleMessage
org.qiyi.pluginlibrary.listenter.IResourchStaticsticsControllerManager -> org.qiyi.pluginlibrary.c.a:
    org.qiyi.pluginlibrary.listenter.IResourchStaticsticsControllerManager$IResourchStaticsticsControllerListener listener -> nl
    void onResume(android.content.Context) -> C
    void onPause(android.content.Context) -> D
org.qiyi.pluginlibrary.listenter.IResourchStaticsticsControllerManager$IResourchStaticsticsControllerListener -> org.qiyi.pluginlibrary.c.b:
    void onResume(android.content.Context) -> C
    void onPause(android.content.Context) -> D
org.qiyi.pluginlibrary.manager.ProxyEnvironment -> org.qiyi.pluginlibrary.d.a:
    java.lang.String TAG -> TAG
    java.util.concurrent.ConcurrentMap sPluginDependences -> nm
    android.app.Application$ActivityLifecycleCallbacks sActivityLifecycleCallback -> nn
    org.qiyi.pluginlibrary.manager.ProxyEnvironment$IAppExitStuff sExitStuff -> no
    android.os.Handler sHandler -> cw
    android.content.Context mContext -> mContext
    java.lang.String mInstallType -> np
    java.lang.String mProcessName -> nq
    dalvik.system.DexClassLoader mDexClassLoader -> nr
    android.content.res.Resources mTargetResources -> ns
    org.qiyi.pluginlibrary.utils.ResourcesToolForPlugin mResTool -> nt
    android.content.res.AssetManager mTargetAssetManager -> nu
    android.content.res.Resources$Theme mTargetTheme -> mS
    org.qiyi.pluginlibrary.plugin.TargetMapping mTargetMapping -> nv
    org.qiyi.pluginlibrary.PActivityStackSupervisor mActivityStackSupervisor -> nw
    java.lang.String mParentPackagename -> nx
    android.app.Application mApplication -> my
    boolean mIsApplicationInit -> ny
    java.lang.String mPluginPakName -> nz
    org.qiyi.pluginlibrary.context.CMContextWrapperNew mAppWrapper -> nA
    org.qiyi.pluginlibrary.PluginInstrument mPluginInstrument -> nB
    boolean mIsLaunchingIntent -> nC
    boolean hasInit() -> eg
    java.lang.String getInstallType() -> eh
    java.lang.String getRunningProcessName() -> ei
    boolean launchIntent(android.content.Context,android.content.ServiceConnection,android.content.Intent) -> a
    boolean launchIntent(android.content.Context,android.content.ServiceConnection,android.content.Intent,boolean) -> a
    void doRealLaunch(android.content.Intent,org.qiyi.pluginlibrary.manager.ProxyEnvironment,java.lang.String,android.content.ServiceConnection,android.content.Context) -> a
    void sendPluginLoadedBroadcast(android.content.Context) -> E
    void executeNext(org.qiyi.pluginlibrary.manager.ProxyEnvironment,java.lang.String,android.content.ServiceConnection,android.content.Context) -> a
    void setApplicationBase(org.qiyi.pluginlibrary.manager.ProxyEnvironment,android.app.Application,java.lang.String) -> a
    void exitProxy(java.lang.String) -> ax
    java.lang.ClassLoader getDexClassLoader() -> ej
    android.content.res.Resources getTargetResources() -> ek
    android.content.res.AssetManager getTargetAssetManager() -> el
    android.content.res.Resources$Theme getTargetTheme() -> em
    org.qiyi.pluginlibrary.plugin.TargetMapping getTargetMapping() -> en
    java.lang.String getTargetPackageName() -> eo
    android.content.pm.PackageInfo getTargetPackageInfo() -> ep
    org.qiyi.pluginlibrary.PActivityStackSupervisor getActivityStackSupervisor() -> eq
    void ejectClassLoader() -> er
    java.lang.String getParentPackagename() -> es
    int getTargetActivityThemeResource(java.lang.String) -> ay
    android.app.Application getApplication() -> getApplication
    android.content.pm.ActivityInfo findActivityByClassName(java.lang.String) -> ad
    void quitApp(boolean) -> q
    void quitApp(boolean,boolean) -> b
    boolean isActivityStackEmpty() -> et
    android.content.Context getHostContext() -> eu
    org.qiyi.pluginlibrary.utils.ResourcesToolForPlugin getHostResourceTool() -> dS
    void changeInstrumentation(android.content.Context,java.lang.String) -> n
    void access$000(android.content.Intent,org.qiyi.pluginlibrary.manager.ProxyEnvironment,java.lang.String,android.content.ServiceConnection,android.content.Context) -> b
    boolean access$102(org.qiyi.pluginlibrary.manager.ProxyEnvironment,boolean) -> a
    void <clinit>() -> <clinit>
org.qiyi.pluginlibrary.manager.ProxyEnvironment$1 -> org.qiyi.pluginlibrary.d.b:
    void <init>() -> <init>
    void onActivityCreated(android.app.Activity,android.os.Bundle) -> onActivityCreated
    void onActivityStarted(android.app.Activity) -> onActivityStarted
    void onActivityResumed(android.app.Activity) -> onActivityResumed
    void onActivityPaused(android.app.Activity) -> onActivityPaused
    void onActivityStopped(android.app.Activity) -> onActivityStopped
    void onActivitySaveInstanceState(android.app.Activity,android.os.Bundle) -> onActivitySaveInstanceState
    void onActivityDestroyed(android.app.Activity) -> onActivityDestroyed
org.qiyi.pluginlibrary.manager.ProxyEnvironment$2 -> org.qiyi.pluginlibrary.d.c:
    java.lang.String val$packageName -> nb
    org.qiyi.pluginlibrary.manager.ProxyEnvironment val$env -> nD
    android.content.ServiceConnection val$conn -> nE
    android.content.Context val$context -> ev
    void <init>(java.lang.String,org.qiyi.pluginlibrary.manager.ProxyEnvironment,android.content.ServiceConnection,android.content.Context) -> <init>
    void run() -> run
org.qiyi.pluginlibrary.manager.ProxyEnvironment$IAppExitStuff -> org.qiyi.pluginlibrary.d.d:
    void doExitStuff(java.lang.String) -> az
org.qiyi.pluginlibrary.manager.ProxyEnvironmentManager -> org.qiyi.pluginlibrary.d.e:
    java.lang.String TAG -> TAG
    android.os.Handler sHandler -> cw
    org.qiyi.pluginlibrary.manager.ProxyEnvironmentManager$IDeliverPlug sDeliverPlug -> nF
    java.util.concurrent.ConcurrentHashMap sPluginsMap -> nG
    void <init>() -> <init>
    org.qiyi.pluginlibrary.manager.ProxyEnvironment getEnvByPkgName(java.lang.String) -> aA
    boolean hasEnvInstance(java.lang.String) -> aB
    org.qiyi.pluginlibrary.manager.ProxyEnvironment removeEnvInstance(java.lang.String) -> aC
    boolean isEnterProxy(java.lang.String) -> aD
    java.util.Map getAllEnv() -> ev
    java.lang.String tryParsePkgName(android.content.Context,android.content.Intent) -> a
    void deliverPlug(android.content.Context,boolean,java.lang.String,int) -> a
    void deliverPlugInner(android.content.Context,boolean,java.lang.String,int) -> b
    void access$400(android.content.Context,boolean,java.lang.String,int) -> c
    void <clinit>() -> <clinit>
org.qiyi.pluginlibrary.manager.ProxyEnvironmentManager$3 -> org.qiyi.pluginlibrary.d.f:
    android.content.Context val$context -> ev
    boolean val$success -> nH
    java.lang.String val$pakName -> nI
    int val$errorCode -> nJ
    void <init>(android.content.Context,boolean,java.lang.String,int) -> <init>
    java.lang.Void doInBackground(java.lang.Void[]) -> a
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
org.qiyi.pluginlibrary.manager.ProxyEnvironmentManager$IDeliverPlug -> org.qiyi.pluginlibrary.d.g:
    void deliverPlug(boolean,org.qiyi.pluginlibrary.pm.PluginPackageInfoExt,int) -> a
org.qiyi.pluginlibrary.manager.TargetActivator -> org.qiyi.pluginlibrary.d.h:
    void unLoadTarget(java.lang.String) -> aE
org.qiyi.pluginlibrary.plugin.InterfaceToGetHost -> org.qiyi.pluginlibrary.e.a:
    android.content.Context getOriginalContext() -> dR
    org.qiyi.pluginlibrary.utils.ResourcesToolForPlugin getHostResourceTool() -> dS
    java.lang.String getPluginPackageName() -> dU
    void exitApp() -> dT
org.qiyi.pluginlibrary.plugin.TargetMapping -> org.qiyi.pluginlibrary.e.b:
    java.lang.String getPackageName() -> getPackageName
    android.content.pm.PackageInfo getPackageInfo() -> ds
    int getThemeResource(java.lang.String) -> ag
    android.content.pm.ActivityInfo getActivityInfo(java.lang.String) -> ah
    android.content.pm.ServiceInfo getServiceInfo(java.lang.String) -> ai
    java.lang.String getApplicationClassName() -> dq
    java.lang.String getDefaultActivityName() -> dr
    android.os.Bundle getMetaData() -> dt
    android.content.pm.ActivityInfo resolveActivity(android.content.Intent) -> b
    java.lang.String getDataDir() -> dl
    java.lang.String getnativeLibraryDir() -> dm
    boolean isClassNeedInject() -> dp
    boolean usePluginApplicationInfo() -> dn
    boolean usePluginCodePath() -> do
org.qiyi.pluginlibrary.pm.CMPackageInfo -> org.qiyi.pluginlibrary.pm.CMPackageInfo:
    java.lang.String TAG -> TAG
    java.lang.String packageName -> packageName
    java.lang.String srcApkPath -> nK
    java.lang.String installStatus -> nL
    org.qiyi.pluginlibrary.pm.PluginPackageInfoExt pluginInfo -> nM
    org.qiyi.pluginlibrary.ApkTargetMappingNew targetInfo -> nN
    android.os.Parcelable$Creator CREATOR -> CREATOR
    void <init>() -> <init>
    org.qiyi.pluginlibrary.ApkTargetMappingNew getTargetMapping(android.content.Context) -> F
    org.qiyi.pluginlibrary.ApkTargetMappingNew getTargetMapping(android.content.Context,java.lang.String,java.lang.String,java.util.Map) -> a
    void <init>(android.os.Parcel) -> <init>
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
    void updateSrcApkPath(android.content.Context,org.qiyi.pluginlibrary.pm.CMPackageInfo) -> a
    void <clinit>() -> <clinit>
org.qiyi.pluginlibrary.pm.CMPackageInfo$1 -> org.qiyi.pluginlibrary.pm.a:
    void <init>() -> <init>
    org.qiyi.pluginlibrary.pm.CMPackageInfo createFromParcel(android.os.Parcel) -> h
    org.qiyi.pluginlibrary.pm.CMPackageInfo[] newArray(int) -> P
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
org.qiyi.pluginlibrary.pm.CMPackageManager -> org.qiyi.pluginlibrary.pm.b:
    android.content.Context mContext -> mContext
    org.qiyi.pluginlibrary.pm.CMPackageManager sInstance -> nO
    java.util.concurrent.ConcurrentHashMap mActionFinishCallbacks -> nP
    java.util.concurrent.ConcurrentHashMap mTargetMappingCache -> nQ
    java.util.List mPackageActions -> nR
    java.util.Map listenerMap -> nS
    org.qiyi.pluginlibrary.pm.ICMPackageInfoManager sCMPackageInfoManager -> nT
    android.content.BroadcastReceiver pluginInstallerReceiver -> nU
    void <init>(android.content.Context) -> <init>
    org.qiyi.pluginlibrary.pm.CMPackageManager getInstance(android.content.Context) -> G
    java.util.List getInstalledApps() -> ew
    void registerInstallderReceiver() -> ex
    void packageAction(org.qiyi.pluginlibrary.pm.CMPackageInfo,org.qiyi.pluginlibrary.install.IInstallCallBack) -> a
    void executePackageAction(org.qiyi.pluginlibrary.pm.CMPackageInfo,boolean,int) -> a
    void clearExpiredPkgAction() -> ey
    boolean isPackageInstalled(java.lang.String) -> aF
    org.qiyi.pluginlibrary.pm.CMPackageInfo getPackageInfo(java.lang.String) -> aG
    void installApkFile(java.lang.String,org.qiyi.pluginlibrary.install.IInstallCallBack,org.qiyi.pluginlibrary.pm.PluginPackageInfoExt) -> a
    void installBuildinApps(java.lang.String,org.qiyi.pluginlibrary.install.IInstallCallBack,org.qiyi.pluginlibrary.pm.PluginPackageInfoExt) -> b
    void deletePackage(org.qiyi.pluginlibrary.pm.CMPackageInfo,org.qiyi.pluginlibrary.pm.IPackageDeleteObserver) -> a
    void deletePackage(org.qiyi.pluginlibrary.pm.CMPackageInfo,org.qiyi.pluginlibrary.pm.IPackageDeleteObserver,boolean,boolean) -> a
    boolean uninstall(org.qiyi.pluginlibrary.pm.CMPackageInfo) -> b
    void setActionFinishCallback(org.qiyi.pluginlibrary.install.IActionFinishCallback) -> a
    void onActionFinish(java.lang.String,int) -> e
    boolean canInstallPackage(org.qiyi.pluginlibrary.pm.PluginPackageInfoExt) -> a
    boolean canUninstallPackage(org.qiyi.pluginlibrary.pm.CMPackageInfo) -> c
    org.qiyi.pluginlibrary.ApkTargetMappingNew getApkTargetMapping(java.lang.String) -> aH
    void notifyClientPluginException(android.content.Context,java.lang.String,java.lang.String) -> d
    java.util.Map access$000(org.qiyi.pluginlibrary.pm.CMPackageManager) -> a
    void access$100(org.qiyi.pluginlibrary.pm.CMPackageManager,org.qiyi.pluginlibrary.pm.CMPackageInfo,boolean,int) -> a
    void access$200(org.qiyi.pluginlibrary.pm.CMPackageManager,java.lang.String,int) -> a
    org.qiyi.pluginlibrary.pm.ICMPackageInfoManager access$300() -> ez
    void <clinit>() -> <clinit>
org.qiyi.pluginlibrary.pm.CMPackageManager$1 -> org.qiyi.pluginlibrary.pm.c:
    org.qiyi.pluginlibrary.pm.CMPackageManager this$0 -> nV
    void <init>(org.qiyi.pluginlibrary.pm.CMPackageManager) -> <init>
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
org.qiyi.pluginlibrary.pm.CMPackageManager$PackageAction -> org.qiyi.pluginlibrary.pm.d:
    long timestamp -> timestamp
    org.qiyi.pluginlibrary.install.IInstallCallBack callBack -> nW
    java.lang.String packageName -> packageName
    org.qiyi.pluginlibrary.pm.CMPackageManager this$0 -> nV
    void <init>(org.qiyi.pluginlibrary.pm.CMPackageManager) -> <init>
    void <init>(org.qiyi.pluginlibrary.pm.CMPackageManager,org.qiyi.pluginlibrary.pm.CMPackageManager$1) -> <init>
org.qiyi.pluginlibrary.pm.CMPackageManagerImpl -> org.qiyi.pluginlibrary.pm.e:
    java.util.concurrent.ConcurrentHashMap mActionMap -> nX
    java.lang.String TAG -> TAG
    org.qiyi.pluginlibrary.pm.ICMPackageManager mService -> nY
    org.qiyi.pluginlibrary.pm.CMPackageManagerImpl sInstance -> nZ
    android.content.Context mContext -> mContext
    java.util.concurrent.ConcurrentMap mTargetMappingCache -> oa
    android.content.ServiceConnection mServiceConnection -> ob
    java.lang.String mProcessName -> nq
    org.qiyi.pluginlibrary.pm.ICMPackageInfoDelegate mPackageInfoDelegate -> oc
    java.util.concurrent.ConcurrentLinkedQueue mPackageActions -> od
    org.qiyi.pluginlibrary.pm.CMPackageManagerImpl getInstance(android.content.Context) -> H
    void <init>(android.content.Context) -> <init>
    void init() -> init
    void onBindService(android.content.Context) -> I
    void executePendingAction() -> eA
    void executePackageAction(android.content.Context) -> J
    java.util.List getInstalledApps() -> ew
    org.qiyi.pluginlibrary.pm.CMPackageInfo getPackageInfo(java.lang.String) -> aG
    void deletePackageInternal(org.qiyi.pluginlibrary.pm.CMPackageInfo,org.qiyi.pluginlibrary.pm.IPackageDeleteObserver) -> b
    void uninstallInternal(org.qiyi.pluginlibrary.pm.CMPackageInfo) -> d
    void packageAction(org.qiyi.pluginlibrary.pm.CMPackageInfo,org.qiyi.pluginlibrary.install.IInstallCallBack) -> a
    void packageActionModified(org.qiyi.pluginlibrary.pm.CMPackageManagerImpl$ExecutionPackageAction) -> a
    void clearExpiredPkgAction() -> ey
    java.util.List getInstalledAppsDirectly() -> eB
    org.qiyi.pluginlibrary.pm.CMPackageInfo getPackageInfoDirectly(java.lang.String) -> aI
    java.util.concurrent.ConcurrentMap getInstalledPackageList() -> eC
    java.lang.String getCurrentProcessName(android.content.Context) -> getCurrentProcessName
    android.content.ServiceConnection getConnection(android.content.Context) -> K
    org.qiyi.pluginlibrary.ApkTargetMappingNew getApkTargetMapping(android.content.Context,java.lang.String,java.lang.String) -> e
    java.lang.String access$000() -> bg
    java.util.concurrent.ConcurrentHashMap access$100() -> eD
    org.qiyi.pluginlibrary.pm.ICMPackageManager access$200() -> eE
    void access$500(org.qiyi.pluginlibrary.pm.CMPackageManagerImpl,org.qiyi.pluginlibrary.pm.CMPackageInfo,org.qiyi.pluginlibrary.pm.IPackageDeleteObserver) -> a
    org.qiyi.pluginlibrary.pm.ICMPackageManager access$202(org.qiyi.pluginlibrary.pm.ICMPackageManager) -> a
    java.lang.String access$700() -> eF
    void access$800(android.content.Context) -> L
    void access$900() -> eG
    java.util.concurrent.ConcurrentMap access$1000() -> eH
    void <clinit>() -> <clinit>
org.qiyi.pluginlibrary.pm.CMPackageManagerImpl$1 -> org.qiyi.pluginlibrary.pm.f:
    int[] $SwitchMap$org$qiyi$pluginlibrary$pm$CMPackageManagerImpl$ActionType -> oe
    void <clinit>() -> <clinit>
org.qiyi.pluginlibrary.pm.CMPackageManagerImpl$Action -> org.qiyi.pluginlibrary.pm.g:
    boolean meetCondition() -> eI
    void doAction() -> eJ
org.qiyi.pluginlibrary.pm.CMPackageManagerImpl$ActionFinishCallback -> org.qiyi.pluginlibrary.pm.h:
    java.lang.String mProcessName -> nq
    void <init>(java.lang.String) -> <init>
    void onActionComplete(java.lang.String,int) -> c
    java.lang.String getProcessName() -> eb
org.qiyi.pluginlibrary.pm.CMPackageManagerImpl$ActionType -> org.qiyi.pluginlibrary.pm.i:
    org.qiyi.pluginlibrary.pm.CMPackageManagerImpl$ActionType INSTALL_APK_FILE -> of
    org.qiyi.pluginlibrary.pm.CMPackageManagerImpl$ActionType INSTALL_BUILD_IN_APPS -> og
    org.qiyi.pluginlibrary.pm.CMPackageManagerImpl$ActionType DELETE_PACKAGE -> oh
    org.qiyi.pluginlibrary.pm.CMPackageManagerImpl$ActionType PACKAGE_ACTION -> oi
    org.qiyi.pluginlibrary.pm.CMPackageManagerImpl$ActionType UNINSTALL_ACTION -> oj
    org.qiyi.pluginlibrary.pm.CMPackageManagerImpl$ActionType[] $VALUES -> ok
    org.qiyi.pluginlibrary.pm.CMPackageManagerImpl$ActionType[] values() -> values
    org.qiyi.pluginlibrary.pm.CMPackageManagerImpl$ActionType valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
org.qiyi.pluginlibrary.pm.CMPackageManagerImpl$CMPackageManagerServiceConnection -> org.qiyi.pluginlibrary.pm.j:
    android.content.Context mContext -> mContext
    void <init>(android.content.Context) -> <init>
    void onServiceConnected(android.content.ComponentName,android.os.IBinder) -> onServiceConnected
    void onServiceDisconnected(android.content.ComponentName) -> onServiceDisconnected
org.qiyi.pluginlibrary.pm.CMPackageManagerImpl$ExecutionPackageAction -> org.qiyi.pluginlibrary.pm.k:
    org.qiyi.pluginlibrary.pm.CMPackageManagerImpl$ActionType type -> ol
    long time -> time
    org.qiyi.pluginlibrary.install.IInstallCallBack callBack -> nW
    org.qiyi.pluginlibrary.pm.CMPackageInfo packageInfo -> om
    org.qiyi.pluginlibrary.pm.CMPackageManagerImpl this$0 -> on
    void <init>(org.qiyi.pluginlibrary.pm.CMPackageManagerImpl) -> <init>
    void <init>(org.qiyi.pluginlibrary.pm.CMPackageManagerImpl,org.qiyi.pluginlibrary.pm.CMPackageManagerImpl$1) -> <init>
org.qiyi.pluginlibrary.pm.CMPackageManagerImpl$PluginDeleteAction -> org.qiyi.pluginlibrary.pm.l:
    org.qiyi.pluginlibrary.pm.IPackageDeleteObserver observer -> oo
    org.qiyi.pluginlibrary.pm.CMPackageInfo info -> op
    org.qiyi.pluginlibrary.pm.CMPackageManagerImpl callbackHost -> oq
    void <init>() -> <init>
    java.lang.String toString() -> toString
    boolean meetCondition() -> eI
    void doAction() -> eJ
    void <init>(org.qiyi.pluginlibrary.pm.CMPackageManagerImpl$1) -> <init>
org.qiyi.pluginlibrary.pm.CMPackageManagerImpl$PluginUninstallAction -> org.qiyi.pluginlibrary.pm.m:
    void <init>() -> <init>
    void doAction() -> eJ
org.qiyi.pluginlibrary.pm.CMPackageManagerService -> org.qiyi.pluginlibrary.pm.CMPackageManagerService:
    org.qiyi.pluginlibrary.pm.CMPackageManager mManager -> or
    void <init>() -> <init>
    void onCreate() -> onCreate
    int onStartCommand(android.content.Intent,int,int) -> onStartCommand
    android.os.IBinder onBind(android.content.Intent) -> onBind
    org.qiyi.pluginlibrary.pm.ICMPackageManager$Stub initBinder() -> eK
    org.qiyi.pluginlibrary.pm.CMPackageManager access$000() -> eL
org.qiyi.pluginlibrary.pm.CMPackageManagerService$1 -> org.qiyi.pluginlibrary.pm.n:
    org.qiyi.pluginlibrary.pm.CMPackageManagerService this$0 -> os
    void <init>(org.qiyi.pluginlibrary.pm.CMPackageManagerService) -> <init>
    java.util.List getInstalledApps() -> ew
    org.qiyi.pluginlibrary.pm.CMPackageInfo getPackageInfo(java.lang.String) -> aG
    boolean isPackageInstalled(java.lang.String) -> aF
    boolean canInstallPackage(org.qiyi.pluginlibrary.pm.PluginPackageInfoExt) -> a
    boolean canUninstallPackage(org.qiyi.pluginlibrary.pm.CMPackageInfo) -> c
    void installApkFile(java.lang.String,org.qiyi.pluginlibrary.install.IInstallCallBack,org.qiyi.pluginlibrary.pm.PluginPackageInfoExt) -> a
    void installBuildinApps(java.lang.String,org.qiyi.pluginlibrary.install.IInstallCallBack,org.qiyi.pluginlibrary.pm.PluginPackageInfoExt) -> b
    void deletePackage(org.qiyi.pluginlibrary.pm.CMPackageInfo,org.qiyi.pluginlibrary.pm.IPackageDeleteObserver) -> a
    boolean uninstall(org.qiyi.pluginlibrary.pm.CMPackageInfo) -> b
    void packageAction(org.qiyi.pluginlibrary.pm.CMPackageInfo,org.qiyi.pluginlibrary.install.IInstallCallBack) -> a
    void setActionFinishCallback(org.qiyi.pluginlibrary.install.IActionFinishCallback) -> a
    org.qiyi.pluginlibrary.ApkTargetMappingNew getApkTargetMapping(java.lang.String) -> aH
org.qiyi.pluginlibrary.pm.ICMPackageInfoDelegate -> org.qiyi.pluginlibrary.pm.o:
    java.util.concurrent.ConcurrentMap getInstalledPackageList() -> eC
org.qiyi.pluginlibrary.pm.ICMPackageInfoManager -> org.qiyi.pluginlibrary.pm.p:
    java.util.List getInstalledPackages() -> eM
    org.qiyi.pluginlibrary.pm.CMPackageInfo getPackageInfo(java.lang.String) -> aG
    boolean isPackageInstalled(java.lang.String) -> aF
    boolean canInstallPackage(org.qiyi.pluginlibrary.pm.PluginPackageInfoExt) -> a
    boolean canUninstallPackage(org.qiyi.pluginlibrary.pm.CMPackageInfo) -> c
    void handlePluginException(java.lang.String,java.lang.String) -> n
org.qiyi.pluginlibrary.pm.ICMPackageManager -> org.qiyi.pluginlibrary.pm.ICMPackageManager:
    java.util.List getInstalledApps() -> ew
    org.qiyi.pluginlibrary.pm.CMPackageInfo getPackageInfo(java.lang.String) -> aG
    boolean isPackageInstalled(java.lang.String) -> aF
    boolean canInstallPackage(org.qiyi.pluginlibrary.pm.PluginPackageInfoExt) -> a
    boolean canUninstallPackage(org.qiyi.pluginlibrary.pm.CMPackageInfo) -> c
    void installApkFile(java.lang.String,org.qiyi.pluginlibrary.install.IInstallCallBack,org.qiyi.pluginlibrary.pm.PluginPackageInfoExt) -> a
    void installBuildinApps(java.lang.String,org.qiyi.pluginlibrary.install.IInstallCallBack,org.qiyi.pluginlibrary.pm.PluginPackageInfoExt) -> b
    void deletePackage(org.qiyi.pluginlibrary.pm.CMPackageInfo,org.qiyi.pluginlibrary.pm.IPackageDeleteObserver) -> a
    boolean uninstall(org.qiyi.pluginlibrary.pm.CMPackageInfo) -> b
    void packageAction(org.qiyi.pluginlibrary.pm.CMPackageInfo,org.qiyi.pluginlibrary.install.IInstallCallBack) -> a
    void setActionFinishCallback(org.qiyi.pluginlibrary.install.IActionFinishCallback) -> a
    org.qiyi.pluginlibrary.ApkTargetMappingNew getApkTargetMapping(java.lang.String) -> aH
org.qiyi.pluginlibrary.pm.ICMPackageManager$Stub -> org.qiyi.pluginlibrary.pm.ICMPackageManager$Stub:
    void <init>() -> <init>
    org.qiyi.pluginlibrary.pm.ICMPackageManager asInterface(android.os.IBinder) -> e
    android.os.IBinder asBinder() -> asBinder
    boolean onTransact(int,android.os.Parcel,android.os.Parcel,int) -> onTransact
org.qiyi.pluginlibrary.pm.ICMPackageManager$Stub$Proxy -> org.qiyi.pluginlibrary.pm.q:
    android.os.IBinder mRemote -> ck
    void <init>(android.os.IBinder) -> <init>
    android.os.IBinder asBinder() -> asBinder
    java.util.List getInstalledApps() -> ew
    org.qiyi.pluginlibrary.pm.CMPackageInfo getPackageInfo(java.lang.String) -> aG
    boolean isPackageInstalled(java.lang.String) -> aF
    boolean canInstallPackage(org.qiyi.pluginlibrary.pm.PluginPackageInfoExt) -> a
    boolean canUninstallPackage(org.qiyi.pluginlibrary.pm.CMPackageInfo) -> c
    void installApkFile(java.lang.String,org.qiyi.pluginlibrary.install.IInstallCallBack,org.qiyi.pluginlibrary.pm.PluginPackageInfoExt) -> a
    void installBuildinApps(java.lang.String,org.qiyi.pluginlibrary.install.IInstallCallBack,org.qiyi.pluginlibrary.pm.PluginPackageInfoExt) -> b
    void deletePackage(org.qiyi.pluginlibrary.pm.CMPackageInfo,org.qiyi.pluginlibrary.pm.IPackageDeleteObserver) -> a
    boolean uninstall(org.qiyi.pluginlibrary.pm.CMPackageInfo) -> b
    void packageAction(org.qiyi.pluginlibrary.pm.CMPackageInfo,org.qiyi.pluginlibrary.install.IInstallCallBack) -> a
    void setActionFinishCallback(org.qiyi.pluginlibrary.install.IActionFinishCallback) -> a
    org.qiyi.pluginlibrary.ApkTargetMappingNew getApkTargetMapping(java.lang.String) -> aH
org.qiyi.pluginlibrary.pm.IPackageDeleteObserver -> org.qiyi.pluginlibrary.pm.IPackageDeleteObserver:
    void packageDeleted(java.lang.String,int) -> f
org.qiyi.pluginlibrary.pm.IPackageDeleteObserver$Stub -> org.qiyi.pluginlibrary.pm.IPackageDeleteObserver$Stub:
    void <init>() -> <init>
    org.qiyi.pluginlibrary.pm.IPackageDeleteObserver asInterface(android.os.IBinder) -> f
    boolean onTransact(int,android.os.Parcel,android.os.Parcel,int) -> onTransact
org.qiyi.pluginlibrary.pm.IPackageDeleteObserver$Stub$Proxy -> org.qiyi.pluginlibrary.pm.r:
    android.os.IBinder mRemote -> ck
    void <init>(android.os.IBinder) -> <init>
    android.os.IBinder asBinder() -> asBinder
    void packageDeleted(java.lang.String,int) -> f
org.qiyi.pluginlibrary.pm.PluginPackageInfoExt -> org.qiyi.pluginlibrary.pm.PluginPackageInfoExt:
    long serialVersionUID -> serialVersionUID
    int is_deliver_startup -> ot
    java.lang.String support_min_version -> ou
    java.lang.String id -> id
    java.lang.String name -> name
    int ver -> ov
    java.lang.String crc -> ow
    int type -> type
    java.lang.String desc -> ox
    java.lang.String icon_url -> oy
    int isAllowUninstall -> oz
    long pluginTotalSize -> oA
    java.lang.String packageName -> packageName
    int local -> oB
    int invisible -> oC
    java.lang.String scrc -> oD
    java.lang.String url -> url
    java.lang.String mPluginInstallMethod -> oE
    java.lang.String mSuffixType -> oF
    java.lang.String mFileSourceType -> oG
    int start_icon -> oH
    int upgrade_type -> oI
    java.lang.String plugin_gray_ver -> oJ
    java.lang.String plugin_ver -> oK
    java.lang.String plugin_refs -> oL
    int is_base -> oM
    java.lang.String md5 -> oN
    android.os.Parcelable$Creator CREATOR -> CREATOR
    java.lang.String toString() -> toString
    void <init>() -> <init>
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    void <init>(android.os.Parcel) -> <init>
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
    org.json.JSONObject data2JsonObj() -> eN
    void <clinit>() -> <clinit>
org.qiyi.pluginlibrary.pm.PluginPackageInfoExt$1 -> org.qiyi.pluginlibrary.pm.s:
    void <init>() -> <init>
    org.qiyi.pluginlibrary.pm.PluginPackageInfoExt createFromParcel(android.os.Parcel) -> i
    org.qiyi.pluginlibrary.pm.PluginPackageInfoExt[] newArray(int) -> Q
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
org.qiyi.pluginlibrary.utils.ClassLoaderInjectHelper -> org.qiyi.pluginlibrary.utils.a:
    void setField(java.lang.Object,java.lang.Class,java.lang.String,java.lang.Object) -> a
    java.lang.Object getField(java.lang.Object,java.lang.Class,java.lang.String) -> a
    java.lang.Object removeArrayElements(java.lang.Object,java.lang.Object) -> a
    java.lang.Object removeArrayElement(java.lang.Object,java.lang.Object) -> b
    org.qiyi.pluginlibrary.utils.ClassLoaderInjectHelper$InjectResult makeInjectResult(boolean,java.lang.Throwable) -> a
    java.lang.Object getPathList(java.lang.Object) -> k
    java.lang.Object getDexElements(java.lang.Object) -> l
    java.lang.Object getNativeLibraryDirectories(java.lang.Object) -> m
    org.qiyi.pluginlibrary.utils.ClassLoaderInjectHelper$InjectResult eject(java.lang.ClassLoader,java.lang.ClassLoader) -> a
    org.qiyi.pluginlibrary.utils.ClassLoaderInjectHelper$InjectResult ejectBelowApiLevel14(java.lang.ClassLoader,java.lang.ClassLoader) -> b
    org.qiyi.pluginlibrary.utils.ClassLoaderInjectHelper$InjectResult ejectAboveEqualApiLevel14(java.lang.ClassLoader,java.lang.ClassLoader) -> c
org.qiyi.pluginlibrary.utils.ClassLoaderInjectHelper$InjectResult -> org.qiyi.pluginlibrary.utils.b:
    boolean mIsSuccessful -> oO
    java.lang.String mErrMsg -> oP
    void <init>() -> <init>
org.qiyi.pluginlibrary.utils.ContextUtils -> org.qiyi.pluginlibrary.utils.ContextUtils:
    java.lang.String TAG -> TAG
    void <init>() -> <init>
    android.content.Context getOriginalContext(android.content.Context) -> getOriginalContext
    java.lang.String getTopActivityName(android.content.Context,java.lang.String) -> getTopActivityName
    java.lang.String getTopActivity(android.content.Context) -> M
    java.lang.String getTopActivity() -> getTopActivity
    java.util.List getRunningPluginPackage() -> getRunningPluginPackage
    org.qiyi.pluginlibrary.utils.ResourcesToolForPlugin getHostResourceTool(android.content.Context) -> getHostResourceTool
    java.lang.String getPluginPackageName(android.content.Context) -> getPluginPackageName
    void exitApp(android.content.Context) -> exitApp
    java.lang.String getInvokeInfo() -> eO
    java.lang.String getPluginappDBPath(android.content.Context,java.lang.String) -> getPluginappDBPath
    android.content.pm.PackageInfo getPluginPluginInfo(android.content.Context) -> getPluginPluginInfo
    boolean isAndroidN() -> isAndroidN
    boolean isAndroidO() -> isAndroidO
    boolean isParticularAndroidVersion(java.lang.String) -> aJ
    void notifyHostPluginStarted(android.content.Context,android.content.Intent) -> notifyHostPluginStarted
    void <clinit>() -> <clinit>
org.qiyi.pluginlibrary.utils.IntentUtils -> org.qiyi.pluginlibrary.utils.c:
    void setProxyInfo(android.content.Intent,java.lang.String) -> a
    java.lang.String getPluginPackage(android.content.Intent) -> f
    java.lang.String getAction(android.content.Intent) -> g
    void resetAction(android.content.Intent) -> h
org.qiyi.pluginlibrary.utils.PluginDebugLog -> org.qiyi.pluginlibrary.utils.d:
    boolean sIsDebug -> oQ
    boolean isDebug() -> aV
    void logInternal(java.lang.String,java.lang.Object) -> b
    void installLog(java.lang.String,java.lang.Object) -> c
    void runtimeLog(java.lang.String,java.lang.Object) -> d
    void runtimeFormatLog(java.lang.String,java.lang.String,java.lang.Object[]) -> a
    void log(java.lang.String,java.lang.Object) -> a
    void formatLog(java.lang.String,java.lang.String,java.lang.Object[]) -> b
    void <clinit>() -> <clinit>
org.qiyi.pluginlibrary.utils.ReflectException -> org.qiyi.pluginlibrary.utils.e:
    long serialVersionUID -> serialVersionUID
    void <init>() -> <init>
    void <init>(java.lang.Throwable) -> <init>
org.qiyi.pluginlibrary.utils.ReflectionUtils -> org.qiyi.pluginlibrary.utils.f:
    java.lang.Object object -> oR
    boolean isClass -> oS
    java.lang.Object getFieldValue(java.lang.Object,java.lang.String) -> a
    java.lang.Object getFieldValue(java.lang.Object,java.lang.String,boolean) -> a
    java.lang.Object[] getField(java.lang.Object,java.lang.String,boolean) -> b
    java.lang.reflect.Field getField_(java.lang.Class,java.lang.String,boolean) -> a
    org.qiyi.pluginlibrary.utils.ReflectionUtils on(java.lang.Object) -> n
    java.lang.reflect.AccessibleObject accessible(java.lang.reflect.AccessibleObject) -> a
    void <init>(java.lang.Object) -> <init>
    java.lang.Object get() -> get
    org.qiyi.pluginlibrary.utils.ReflectionUtils set(java.lang.String,java.lang.Object) -> e
    java.lang.Object get(java.lang.String) -> get
    org.qiyi.pluginlibrary.utils.ReflectionUtils field(java.lang.String) -> aK
    java.lang.reflect.Field field0(java.lang.String) -> aL
    org.qiyi.pluginlibrary.utils.ReflectionUtils call(java.lang.String,java.util.Map,java.lang.Object[]) -> a
    org.qiyi.pluginlibrary.utils.ReflectionUtils callInner(java.lang.String,java.util.Map,java.lang.Class[],java.lang.Object[]) -> a
    java.lang.reflect.Method exactMethod(java.lang.String,java.lang.Class[]) -> a
    java.lang.reflect.Method similarMethod(java.lang.String,java.lang.Class[]) -> b
    boolean isSimilarSignature(java.lang.reflect.Method,java.lang.String,java.lang.Class[]) -> a
    boolean match(java.lang.Class[],java.lang.Class[]) -> a
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
    org.qiyi.pluginlibrary.utils.ReflectionUtils on(java.lang.reflect.Method,java.lang.Object,java.lang.Object[]) -> a
    java.lang.Object unwrap(java.lang.Object) -> o
    java.lang.Class[] types(java.lang.Object[]) -> e
    java.lang.Class type() -> eP
    java.lang.Class wrapper(java.lang.Class) -> b
org.qiyi.pluginlibrary.utils.ReflectionUtils$NULL -> org.qiyi.pluginlibrary.utils.g:
    void <init>() -> <init>
org.qiyi.pluginlibrary.utils.ResolveInfoUtil -> org.qiyi.pluginlibrary.utils.h:
    void parseResolveInfo(java.lang.String,org.qiyi.pluginlibrary.ApkTargetMappingNew) -> a
org.qiyi.pluginlibrary.utils.ResourcesToolForPlugin -> org.qiyi.pluginlibrary.utils.ResourcesToolForPlugin:
    java.lang.String mPackageName -> mPackageName
    android.content.res.Resources mResources -> mResources
    java.lang.ClassLoader mClassLoader -> oT
    boolean mResolveByReflect -> oU
    void <init>(android.content.Context) -> <init>
    void <init>(android.content.res.Resources,java.lang.String,java.lang.ClassLoader) -> <init>
    void <init>(android.content.res.Resources,java.lang.String,java.lang.ClassLoader,boolean) -> <init>
    void setResolveType(boolean) -> setResolveType
    int getResourceId(java.lang.String,java.lang.String) -> getResourceId
    int getResourceIdForString(java.lang.String) -> getResourceIdForString
    int getResourceIdForID(java.lang.String) -> getResourceIdForID
    int getResourceIdForLayout(java.lang.String) -> getResourceIdForLayout
    int getResourceIdForDrawable(java.lang.String) -> getResourceIdForDrawable
    int getResourceIdForStyle(java.lang.String) -> getResourceIdForStyle
    int getResourceIdForColor(java.lang.String) -> getResourceIdForColor
    int getResourceIdForRaw(java.lang.String) -> getResourceIdForRaw
    int getResourceForAnim(java.lang.String) -> getResourceForAnim
    int getResourceForAnimator(java.lang.String) -> getResourceForAnimator
    int getResourceForAttr(java.lang.String) -> getResourceForAttr
    int getResourceForArray(java.lang.String) -> getResourceForArray
    int getResourceForBool(java.lang.String) -> getResourceForBool
    int getResourceForDimen(java.lang.String) -> getResourceForDimen
    int getResourceForInteger(java.lang.String) -> getResourceForInteger
    int getResourceForInterpolator(java.lang.String) -> getResourceForInterpolator
    int getResourceForMenu(java.lang.String) -> getResourceForMenu
    int getResourceForStyleable(java.lang.String) -> getResourceForStyleable
    int[] getResourceForStyleables(java.lang.String) -> getResourceForStyleables
    int getResourceForTransition(java.lang.String) -> getResourceForTransition
    int getResourceForXml(java.lang.String) -> getResourceForXml
    int optValue(java.lang.String,java.lang.String) -> o
    int[] optValueArray(java.lang.String,java.lang.String) -> p
org.qiyi.pluginlibrary.utils.Util -> org.qiyi.pluginlibrary.utils.i:
    boolean copyToFile(java.io.InputStream,java.io.File) -> a
    boolean copyToFile(java.io.File,java.io.File) -> copyToFile
    boolean installNativeLibrary(java.lang.String,java.lang.String) -> q
    boolean installNativeLibrary(java.util.zip.ZipFile,java.lang.String,java.lang.String) -> a
    void deleteDirectory(java.io.File) -> e
    void cleanDirectory(java.io.File) -> f
    void forceDelete(java.io.File) -> g
    void copyFile(java.io.File,java.io.File) -> d
    void moveFile(java.io.File,java.io.File) -> e
    void moveFile(java.io.File,java.io.File,boolean) -> a
    boolean isResumed(android.app.Activity) -> d
org.qiyi.qyscanqrcode.R -> org.qiyi.qyscanqrcode.R:
    void <init>() -> <init>
org.qiyi.qyscanqrcode.R$attr -> org.qiyi.qyscanqrcode.R$attr:
    int actualImageResource -> actualImageResource
    int actualImageScaleType -> actualImageScaleType
    int actualImageUri -> actualImageUri
    int actualPackageName -> actualPackageName
    int auto_animation -> auto_animation
    int backgroundImage -> backgroundImage
    int circle_ratio -> circle_ratio
    int color_round -> color_round
    int edge_color -> edge_color
    int edge_overlay -> edge_overlay
    int edge_width -> edge_width
    int fadeDuration -> fadeDuration
    int failureImage -> failureImage
    int failureImageScaleType -> failureImageScaleType
    int out_frame_bg -> out_frame_bg
    int out_frame_color -> out_frame_color
    int out_frame_line_width -> out_frame_line_width
    int outer_frame -> outer_frame
    int overlayImage -> overlayImage
    int padding_vertical -> padding_vertical
    int placeholderImage -> placeholderImage
    int placeholderImageScaleType -> placeholderImageScaleType
    int pressedStateOverlayImage -> pressedStateOverlayImage
    int progressBarAutoRotateInterval -> progressBarAutoRotateInterval
    int progressBarImage -> progressBarImage
    int progressBarImageScaleType -> progressBarImageScaleType
    int pstsDividerColor -> pstsDividerColor
    int pstsDividerPadding -> pstsDividerPadding
    int pstsIndicatorColor -> pstsIndicatorColor
    int pstsIndicatorHeight -> pstsIndicatorHeight
    int pstsIndicatorWidth -> pstsIndicatorWidth
    int pstsScrollOffset -> pstsScrollOffset
    int pstsScrollToCenter -> pstsScrollToCenter
    int pstsShouldExpand -> pstsShouldExpand
    int pstsTabBackground -> pstsTabBackground
    int pstsTabPaddingLeftRight -> pstsTabPaddingLeftRight
    int pstsTextAllCaps -> pstsTextAllCaps
    int pstsUnderlineColor -> pstsUnderlineColor
    int pstsUnderlineHeight -> pstsUnderlineHeight
    int ratio -> ratio
    int retryImage -> retryImage
    int retryImageScaleType -> retryImageScaleType
    int roundAsCircle -> roundAsCircle
    int roundBottomLeft -> roundBottomLeft
    int roundBottomRight -> roundBottomRight
    int roundTopLeft -> roundTopLeft
    int roundTopRight -> roundTopRight
    int roundWithOverlayColor -> roundWithOverlayColor
    int roundedCornerRadius -> roundedCornerRadius
    int roundingBorderColor -> roundingBorderColor
    int roundingBorderPadding -> roundingBorderPadding
    int roundingBorderWidth -> roundingBorderWidth
    int size -> size
    int static_play -> static_play
    int stroke_width -> stroke_width
    int viewAspectRatio -> viewAspectRatio
    int wh_ratio -> wh_ratio
    void <init>() -> <init>
org.qiyi.qyscanqrcode.R$dimen -> org.qiyi.qyscanqrcode.R$dimen:
    int pad_button_height_36dp -> pad_button_height_36dp
    int pad_button_width_88dp -> pad_button_width_88dp
    int pad_character_icon_height -> pad_character_icon_height
    int pad_character_icon_width -> pad_character_icon_width
    int pad_character_item_width -> pad_character_item_width
    int pad_icon_size_16dp -> pad_icon_size_16dp
    int pad_icon_size_24dp -> pad_icon_size_24dp
    int pad_icon_size_36dp -> pad_icon_size_36dp
    int pad_icon_size_48dp -> pad_icon_size_48dp
    int pad_icon_size_64dp -> pad_icon_size_64dp
    int pad_icon_size_72dp -> pad_icon_size_72dp
    int pad_image_height_101dp -> pad_image_height_101dp
    int pad_image_height_200dp -> pad_image_height_200dp
    int pad_image_width_128dp -> pad_image_width_128dp
    int pad_image_width_200dp -> pad_image_width_200dp
    int pad_my_bottom_tips_height -> pad_my_bottom_tips_height
    int pad_my_button_height -> pad_my_button_height
    int pad_my_title_height -> pad_my_title_height
    int pad_padding_100dp -> pad_padding_100dp
    int pad_padding_10dp -> pad_padding_10dp
    int pad_padding_12dp -> pad_padding_12dp
    int pad_padding_14dp -> pad_padding_14dp
    int pad_padding_168dp -> pad_padding_168dp
    int pad_padding_16dp -> pad_padding_16dp
    int pad_padding_18dp -> pad_padding_18dp
    int pad_padding_20dp -> pad_padding_20dp
    int pad_padding_22dp -> pad_padding_22dp
    int pad_padding_233dp -> pad_padding_233dp
    int pad_padding_24dp -> pad_padding_24dp
    int pad_padding_27dp -> pad_padding_27dp
    int pad_padding_28dp -> pad_padding_28dp
    int pad_padding_30dp -> pad_padding_30dp
    int pad_padding_32dp -> pad_padding_32dp
    int pad_padding_36dp -> pad_padding_36dp
    int pad_padding_3dp -> pad_padding_3dp
    int pad_padding_40dp -> pad_padding_40dp
    int pad_padding_48dp -> pad_padding_48dp
    int pad_padding_4dp -> pad_padding_4dp
    int pad_padding_52dp -> pad_padding_52dp
    int pad_padding_61dp -> pad_padding_61dp
    int pad_padding_64dp -> pad_padding_64dp
    int pad_padding_6dp -> pad_padding_6dp
    int pad_padding_70dp -> pad_padding_70dp
    int pad_padding_80dp -> pad_padding_80dp
    int pad_padding_8dp -> pad_padding_8dp
    int pad_passport_account_hint_height -> pad_passport_account_hint_height
    int pad_passport_button_height -> pad_passport_button_height
    int pad_passport_button_width -> pad_passport_button_width
    int pad_passport_edit_height -> pad_passport_edit_height
    int pad_passport_info_height -> pad_passport_info_height
    int pad_passport_input_height -> pad_passport_input_height
    int pad_passport_region_box_width -> pad_passport_region_box_width
    int pad_passport_region_item_height -> pad_passport_region_item_height
    int pad_passport_sns_height -> pad_passport_sns_height
    int pad_passport_sns_width -> pad_passport_sns_width
    int pad_passport_strength_height -> pad_passport_strength_height
    int pad_passport_strength_hint_height -> pad_passport_strength_hint_height
    int pad_passport_strength_width -> pad_passport_strength_width
    int pad_passport_vcode_height -> pad_passport_vcode_height
    int pad_passport_vcode_width -> pad_passport_vcode_width
    int pad_passport_window_height -> pad_passport_window_height
    int pad_passport_window_width -> pad_passport_window_width
    int pad_pay_frame_width_1dp -> pad_pay_frame_width_1dp
    int pad_pay_frame_width_2dp -> pad_pay_frame_width_2dp
    int pad_pay_title_height_24dp -> pad_pay_title_height_24dp
    int pad_pay_title_height_48dp -> pad_pay_title_height_48dp
    int pad_pay_title_height_54dp -> pad_pay_title_height_54dp
    int pad_pay_title_height_72dp -> pad_pay_title_height_72dp
    int pad_pay_title_height_80dp -> pad_pay_title_height_80dp
    int pad_pay_title_height_84dp -> pad_pay_title_height_84dp
    int pad_pay_title_height_pannel -> pad_pay_title_height_pannel
    int pad_pay_title_width_139dp -> pad_pay_title_width_139dp
    int pad_pay_title_width_167dp -> pad_pay_title_width_167dp
    int pad_pay_window_height -> pad_pay_window_height
    int pad_pay_window_width -> pad_pay_window_width
    int pad_text_size_12sp -> pad_text_size_12sp
    int pad_text_size_14sp -> pad_text_size_14sp
    int pad_text_size_16sp -> pad_text_size_16sp
    int pad_text_size_20sp -> pad_text_size_20sp
    int pad_toast_height_48dp -> pad_toast_height_48dp
    int pad_toast_radius_corner -> pad_toast_radius_corner
    int pad_toast_width_288dp -> pad_toast_width_288dp
    int pad_video_detail_poster_height -> pad_video_detail_poster_height
    int pad_video_detail_poster_width -> pad_video_detail_poster_width
    void <init>() -> <init>
org.qiyi.qyscanqrcode.R$drawable -> org.qiyi.qyscanqrcode.R$drawable:
    int alert_bg_scan -> alert_bg_scan
    int dialog_btn_cancle_scan -> dialog_btn_cancle_scan
    int dialog_btn_ok_scan -> dialog_btn_ok_scan
    int phone_navi_my_scan -> phone_navi_my_scan
    int phone_title_bar_back_normal_scan -> phone_title_bar_back_normal_scan
    int phone_title_bar_back_pressed_scan -> phone_title_bar_back_pressed_scan
    int scan_help_button_scan -> scan_help_button_scan
    int scan_icon_scan -> scan_icon_scan
    int title_bar_back_new_scan -> title_bar_back_new_scan
    void <init>() -> <init>
org.qiyi.qyscanqrcode.R$id -> org.qiyi.qyscanqrcode.R$id:
    int center -> center
    int centerCrop -> centerCrop
    int centerInside -> centerInside
    int dialog_cancel -> dialog_cancel
    int dialog_login -> dialog_login
    int dialog_title -> dialog_title
    int fitCenter -> fitCenter
    int fitEnd -> fitEnd
    int fitStart -> fitStart
    int fitXY -> fitXY
    int focusCrop -> focusCrop
    int icon -> icon
    int login_fail -> login_fail
    int non -> non
    int none -> none
    int phoneTitle -> phoneTitle
    int preview_view -> preview_view
    int rect -> rect
    int rect_padding -> rect_padding
    int round -> round
    int round_left -> round_left
    int round_padding -> round_padding
    int scan_help -> scan_help
    int scan_line -> scan_line
    int user_id -> user_id
    int viewfinder_view -> viewfinder_view
    void <init>() -> <init>
org.qiyi.qyscanqrcode.R$layout -> org.qiyi.qyscanqrcode.R$layout:
    int phone_login_dialog_view_scan -> phone_login_dialog_view_scan
    int phone_scan_main_layout_scan -> phone_scan_main_layout_scan
    void <init>() -> <init>
org.qiyi.qyscanqrcode.R$string -> org.qiyi.qyscanqrcode.R$string:
    int account_scanlogin_success2 -> account_scanlogin_success2
    int account_scanlogin_success_scan -> account_scanlogin_success_scan
    int btn_OK_scan -> btn_OK_scan
    int capture_and_upload_scan -> capture_and_upload_scan
    int login_scan -> login_scan
    int pcloading_login_scan -> pcloading_login_scan
    int phone_login_scan -> phone_login_scan
    int phone_my_setting_confirm_cancel_scan -> phone_my_setting_confirm_cancel_scan
    int phone_scan_help_scan -> phone_scan_help_scan
    int qrtype_not_supported_scan -> qrtype_not_supported_scan
    int scan_fail_text_scan -> scan_fail_text_scan
    int scanner_confirm_download_scan -> scanner_confirm_download_scan
    int scanner_confirm_login_with_this_account_scan -> scanner_confirm_login_with_this_account_scan
    int scanner_confirm_to_download_scan -> scanner_confirm_to_download_scan
    int scanner_login_failed_scan -> scanner_login_failed_scan
    int scanner_login_success_scan -> scanner_login_success_scan
    int scanner_network_error_scan -> scanner_network_error_scan
    int scanner_request_network_scan -> scanner_request_network_scan
    int scanner_title_scan -> scanner_title_scan
    int scanqr_fail_network_down_scan -> scanqr_fail_network_down_scan
    void <init>() -> <init>
org.qiyi.qyscanqrcode.R$style -> org.qiyi.qyscanqrcode.R$style:
    int top_base_item_new_scan -> top_base_item_new_scan
    int top_title_item_new_scan -> top_title_item_new_scan
    int top_title_new_scan -> top_title_new_scan
    void <init>() -> <init>
org.qiyi.qyscanqrcode.R$styleable -> org.qiyi.qyscanqrcode.R$styleable:
    int[] CircleImageView -> CircleImageView
    int CircleImageView_circle_ratio -> CircleImageView_circle_ratio
    int CircleImageView_edge_color -> CircleImageView_edge_color
    int CircleImageView_edge_overlay -> CircleImageView_edge_overlay
    int CircleImageView_edge_width -> CircleImageView_edge_width
    int[] CircleLoadingView -> CircleLoadingView
    int CircleLoadingView_auto_animation -> CircleLoadingView_auto_animation
    int CircleLoadingView_color_round -> CircleLoadingView_color_round
    int CircleLoadingView_padding_vertical -> CircleLoadingView_padding_vertical
    int CircleLoadingView_size -> CircleLoadingView_size
    int CircleLoadingView_static_play -> CircleLoadingView_static_play
    int CircleLoadingView_stroke_width -> CircleLoadingView_stroke_width
    int[] GenericDraweeView -> GenericDraweeView
    int GenericDraweeView_actualImageScaleType -> GenericDraweeView_actualImageScaleType
    int GenericDraweeView_backgroundImage -> GenericDraweeView_backgroundImage
    int GenericDraweeView_fadeDuration -> GenericDraweeView_fadeDuration
    int GenericDraweeView_failureImage -> GenericDraweeView_failureImage
    int GenericDraweeView_failureImageScaleType -> GenericDraweeView_failureImageScaleType
    int GenericDraweeView_overlayImage -> GenericDraweeView_overlayImage
    int GenericDraweeView_placeholderImage -> GenericDraweeView_placeholderImage
    int GenericDraweeView_placeholderImageScaleType -> GenericDraweeView_placeholderImageScaleType
    int GenericDraweeView_pressedStateOverlayImage -> GenericDraweeView_pressedStateOverlayImage
    int GenericDraweeView_progressBarAutoRotateInterval -> GenericDraweeView_progressBarAutoRotateInterval
    int GenericDraweeView_progressBarImage -> GenericDraweeView_progressBarImage
    int GenericDraweeView_progressBarImageScaleType -> GenericDraweeView_progressBarImageScaleType
    int GenericDraweeView_retryImage -> GenericDraweeView_retryImage
    int GenericDraweeView_retryImageScaleType -> GenericDraweeView_retryImageScaleType
    int GenericDraweeView_roundAsCircle -> GenericDraweeView_roundAsCircle
    int GenericDraweeView_roundBottomLeft -> GenericDraweeView_roundBottomLeft
    int GenericDraweeView_roundBottomRight -> GenericDraweeView_roundBottomRight
    int GenericDraweeView_roundTopLeft -> GenericDraweeView_roundTopLeft
    int GenericDraweeView_roundTopRight -> GenericDraweeView_roundTopRight
    int GenericDraweeView_roundWithOverlayColor -> GenericDraweeView_roundWithOverlayColor
    int GenericDraweeView_roundedCornerRadius -> GenericDraweeView_roundedCornerRadius
    int GenericDraweeView_roundingBorderColor -> GenericDraweeView_roundingBorderColor
    int GenericDraweeView_roundingBorderPadding -> GenericDraweeView_roundingBorderPadding
    int GenericDraweeView_roundingBorderWidth -> GenericDraweeView_roundingBorderWidth
    int GenericDraweeView_viewAspectRatio -> GenericDraweeView_viewAspectRatio
    int[] KeepHeightRatioImageView -> KeepHeightRatioImageView
    int KeepHeightRatioImageView_wh_ratio -> KeepHeightRatioImageView_wh_ratio
    int[] KeepRatioImageView -> KeepRatioImageView
    int KeepRatioImageView_ratio -> KeepRatioImageView_ratio
    int[] OuterFrameTextView -> OuterFrameTextView
    int OuterFrameTextView_out_frame_bg -> OuterFrameTextView_out_frame_bg
    int OuterFrameTextView_out_frame_color -> OuterFrameTextView_out_frame_color
    int OuterFrameTextView_out_frame_line_width -> OuterFrameTextView_out_frame_line_width
    int OuterFrameTextView_outer_frame -> OuterFrameTextView_outer_frame
    int[] PagerSlidingTabStrip -> PagerSlidingTabStrip
    int PagerSlidingTabStrip_pstsDividerColor -> PagerSlidingTabStrip_pstsDividerColor
    int PagerSlidingTabStrip_pstsDividerPadding -> PagerSlidingTabStrip_pstsDividerPadding
    int PagerSlidingTabStrip_pstsIndicatorColor -> PagerSlidingTabStrip_pstsIndicatorColor
    int PagerSlidingTabStrip_pstsIndicatorHeight -> PagerSlidingTabStrip_pstsIndicatorHeight
    int PagerSlidingTabStrip_pstsIndicatorWidth -> PagerSlidingTabStrip_pstsIndicatorWidth
    int PagerSlidingTabStrip_pstsScrollOffset -> PagerSlidingTabStrip_pstsScrollOffset
    int PagerSlidingTabStrip_pstsScrollToCenter -> PagerSlidingTabStrip_pstsScrollToCenter
    int PagerSlidingTabStrip_pstsShouldExpand -> PagerSlidingTabStrip_pstsShouldExpand
    int PagerSlidingTabStrip_pstsTabBackground -> PagerSlidingTabStrip_pstsTabBackground
    int PagerSlidingTabStrip_pstsTabPaddingLeftRight -> PagerSlidingTabStrip_pstsTabPaddingLeftRight
    int PagerSlidingTabStrip_pstsTextAllCaps -> PagerSlidingTabStrip_pstsTextAllCaps
    int PagerSlidingTabStrip_pstsUnderlineColor -> PagerSlidingTabStrip_pstsUnderlineColor
    int PagerSlidingTabStrip_pstsUnderlineHeight -> PagerSlidingTabStrip_pstsUnderlineHeight
    int[] SimpleDraweeView -> SimpleDraweeView
    int SimpleDraweeView_actualImageResource -> SimpleDraweeView_actualImageResource
    int SimpleDraweeView_actualImageUri -> SimpleDraweeView_actualImageUri
    int SimpleDraweeView_actualPackageName -> SimpleDraweeView_actualPackageName
    void <init>() -> <init>
    void <clinit>() -> <clinit>
org.qiyi.qyscanqrcode.scan.BaseActivity -> org.qiyi.qyscanqrcode.scan.BaseActivity:
    void <init>() -> <init>
    void onCreate(android.os.Bundle) -> onCreate
    android.content.res.Resources getResources() -> getResources
    android.content.res.AssetManager getAssets() -> getAssets
    android.content.res.Resources$Theme getTheme() -> getTheme
org.qiyi.qyscanqrcode.scan.ScanActivity -> org.qiyi.qyscanqrcode.scan.ScanActivity:
    java.lang.String TAG -> TAG
    java.lang.String START_FOR_RESULT -> START_FOR_RESULT
    java.lang.String RESULT -> RESULT
    boolean isStartForResult -> isStartForResult
    org.qiyi.qyscanqrcode.scan.decoding.CaptureActivityHandler handler -> handler
    org.qiyi.qyscanqrcode.scan.ViewfinderView viewfinderView -> viewfinderView
    boolean hasSurface -> hasSurface
    java.util.Vector decodeFormats -> decodeFormats
    java.lang.String characterSet -> characterSet
    org.qiyi.qyscanqrcode.scan.decoding.InactivityTimer inactivityTimer -> inactivityTimer
    int SOURCE_TV_LOGIN -> SOURCE_TV_LOGIN
    int from_type -> from_type
    long temptime -> temptime
    int REQUEST_TIME -> REQUEST_TIME
    int mCodeType -> mCodeType
    java.lang.String requestConfimLoginUrl -> requestConfimLoginUrl
    android.os.Handler mainHandler -> mainHandler
    int REQUEST_CODE_AUTHORIZATION -> REQUEST_CODE_AUTHORIZATION
    void <init>() -> <init>
    void onCreate(android.os.Bundle) -> onCreate
    void <clinit>() -> <clinit>
org.qiyi.qyscanqrcode.scan.ScanLineView -> org.qiyi.qyscanqrcode.scan.ScanLineView:
    android.content.Context mContext -> mContext
    android.graphics.Bitmap mScanLine -> mScanLine
    android.graphics.Rect mRect -> mRect
    android.view.animation.TranslateAnimation mAnimation -> mAnimation
    void <init>(android.content.Context) -> <init>
    void <init>(android.content.Context,android.util.AttributeSet) -> <init>
    void <init>(android.content.Context,android.util.AttributeSet,int) -> <init>
    void init(android.content.Context) -> init
    void onDraw(android.graphics.Canvas) -> onDraw
    android.view.animation.TranslateAnimation access$000(org.qiyi.qyscanqrcode.scan.ScanLineView) -> access$000
org.qiyi.qyscanqrcode.scan.ScanLineView$1 -> org.qiyi.qyscanqrcode.scan.ScanLineView$1:
    org.qiyi.qyscanqrcode.scan.ScanLineView this$0 -> this$0
    void <init>(org.qiyi.qyscanqrcode.scan.ScanLineView) -> <init>
    void run() -> run
org.qiyi.qyscanqrcode.scan.ViewfinderResultPointCallback -> org.qiyi.qyscanqrcode.scan.ViewfinderResultPointCallback:
    org.qiyi.qyscanqrcode.scan.ViewfinderView viewfinderView -> viewfinderView
    void <init>(org.qiyi.qyscanqrcode.scan.ViewfinderView) -> <init>
    void foundPossibleResultPoint(org.qiyi.qyscanqrcode.scan.zxing.ResultPoint) -> foundPossibleResultPoint
org.qiyi.qyscanqrcode.scan.ViewfinderView -> org.qiyi.qyscanqrcode.scan.ViewfinderView:
    int ScreenRate -> ScreenRate
    int CORNER_WIDTH -> CORNER_WIDTH
    android.graphics.Paint paint -> paint
    int maskColor -> maskColor
    android.graphics.Rect frame -> frame
    void <init>(android.content.Context,android.util.AttributeSet) -> <init>
    void onDraw(android.graphics.Canvas) -> onDraw
    void addPossibleResultPoint(org.qiyi.qyscanqrcode.scan.zxing.ResultPoint) -> addPossibleResultPoint
org.qiyi.qyscanqrcode.scan.camera.AutoFocusCallback -> org.qiyi.qyscanqrcode.scan.camera.AutoFocusCallback:
    java.lang.String TAG -> TAG
    long AUTOFOCUS_INTERVAL_MS -> AUTOFOCUS_INTERVAL_MS
    android.os.Handler autoFocusHandler -> autoFocusHandler
    int autoFocusMessage -> autoFocusMessage
    void <init>() -> <init>
    void setHandler(android.os.Handler,int) -> setHandler
    void onAutoFocus(boolean,android.hardware.Camera) -> onAutoFocus
    void <clinit>() -> <clinit>
org.qiyi.qyscanqrcode.scan.camera.CameraConfigurationManager -> org.qiyi.qyscanqrcode.scan.camera.CameraConfigurationManager:
    java.lang.String TAG -> TAG
    int TEN_DESIRED_ZOOM -> TEN_DESIRED_ZOOM
    int DESIRED_SHARPNESS -> DESIRED_SHARPNESS
    java.util.regex.Pattern COMMA_PATTERN -> COMMA_PATTERN
    android.content.Context context -> context
    android.graphics.Point screenResolution -> screenResolution
    android.graphics.Point cameraResolution -> cameraResolution
    int previewFormat -> previewFormat
    java.lang.String previewFormatString -> previewFormatString
    void <init>(android.content.Context) -> <init>
    void initFromCameraParameters(android.hardware.Camera) -> initFromCameraParameters
    void setDesiredCameraParameters(android.hardware.Camera) -> setDesiredCameraParameters
    android.graphics.Point getCameraResolution() -> getCameraResolution
    android.graphics.Point getScreenResolution() -> getScreenResolution
    int getPreviewFormat() -> getPreviewFormat
    java.lang.String getPreviewFormatString() -> getPreviewFormatString
    android.graphics.Point getCameraResolution(android.hardware.Camera$Parameters,android.graphics.Point) -> getCameraResolution
    android.graphics.Point findBestPreviewSizeValue(java.lang.CharSequence,android.graphics.Point) -> findBestPreviewSizeValue
    int findBestMotZoomValue(java.lang.CharSequence,int) -> findBestMotZoomValue
    void setFlash(android.hardware.Camera$Parameters) -> setFlash
    void setZoom(android.hardware.Camera$Parameters) -> setZoom
    int getDesiredSharpness() -> getDesiredSharpness
    void setDisplayOrientation(android.hardware.Camera,int) -> setDisplayOrientation
    void <clinit>() -> <clinit>
org.qiyi.qyscanqrcode.scan.camera.CameraManager -> org.qiyi.qyscanqrcode.scan.camera.CameraManager:
    java.lang.String TAG -> TAG
    int MIN_FRAME_WIDTH -> MIN_FRAME_WIDTH
    int MIN_FRAME_HEIGHT -> MIN_FRAME_HEIGHT
    int MAX_FRAME_WIDTH -> MAX_FRAME_WIDTH
    int MAX_FRAME_HEIGHT -> MAX_FRAME_HEIGHT
    org.qiyi.qyscanqrcode.scan.camera.CameraManager cameraManager -> cameraManager
    int SDK_INT -> SDK_INT
    android.content.Context context -> context
    org.qiyi.qyscanqrcode.scan.camera.CameraConfigurationManager configManager -> configManager
    android.hardware.Camera camera -> camera
    android.graphics.Rect framingRect -> framingRect
    android.graphics.Rect framingRectInPreview -> framingRectInPreview
    boolean initialized -> initialized
    boolean previewing -> previewing
    boolean useOneShotPreviewCallback -> useOneShotPreviewCallback
    org.qiyi.qyscanqrcode.scan.camera.PreviewCallback previewCallback -> previewCallback
    org.qiyi.qyscanqrcode.scan.camera.AutoFocusCallback autoFocusCallback -> autoFocusCallback
    void init(android.content.Context) -> init
    void reset() -> reset
    org.qiyi.qyscanqrcode.scan.camera.CameraManager get() -> get
    void <init>(android.content.Context) -> <init>
    void openDriver(android.view.SurfaceHolder) -> openDriver
    void closeDriver() -> closeDriver
    void startPreview() -> startPreview
    void stopPreview() -> stopPreview
    void requestPreviewFrame(android.os.Handler,int) -> requestPreviewFrame
    void requestAutoFocus(android.os.Handler,int) -> requestAutoFocus
    android.graphics.Rect getFramingRect() -> getFramingRect
    android.graphics.Rect getFramingRectInPreview() -> getFramingRectInPreview
    org.qiyi.qyscanqrcode.scan.camera.PlanarYUVLuminanceSource buildLuminanceSource(byte[],int,int) -> buildLuminanceSource
    android.content.Context getContext() -> getContext
    void setCameraNull() -> setCameraNull
    void setCameraDisplayOrientation(android.app.Activity,android.hardware.Camera) -> setCameraDisplayOrientation
    void <clinit>() -> <clinit>
org.qiyi.qyscanqrcode.scan.camera.FlashlightManager -> org.qiyi.qyscanqrcode.scan.camera.FlashlightManager:
    java.lang.String TAG -> TAG
    java.lang.Object iHardwareService -> iHardwareService
    java.lang.reflect.Method setFlashEnabledMethod -> setFlashEnabledMethod
    void <init>() -> <init>
    void enableFlashlight() -> enableFlashlight
    void disableFlashlight() -> disableFlashlight
    java.lang.Object getHardwareService() -> getHardwareService
    java.lang.reflect.Method getSetFlashEnabledMethod(java.lang.Object) -> getSetFlashEnabledMethod
    java.lang.Class maybeForName(java.lang.String) -> maybeForName
    java.lang.reflect.Method maybeGetMethod(java.lang.Class,java.lang.String,java.lang.Class[]) -> maybeGetMethod
    java.lang.Object invoke(java.lang.reflect.Method,java.lang.Object,java.lang.Object[]) -> invoke
    void setFlashlight(boolean) -> setFlashlight
    void <clinit>() -> <clinit>
org.qiyi.qyscanqrcode.scan.camera.PlanarYUVLuminanceSource -> org.qiyi.qyscanqrcode.scan.camera.PlanarYUVLuminanceSource:
    byte[] yuvData -> yuvData
    int dataWidth -> dataWidth
    int dataHeight -> dataHeight
    int left -> left
    int top -> top
    void <init>(byte[],int,int,int,int,int,int) -> <init>
    byte[] getRow(int,byte[]) -> getRow
    byte[] getMatrix() -> getMatrix
    boolean isCropSupported() -> isCropSupported
    int getDataWidth() -> getDataWidth
    int getDataHeight() -> getDataHeight
    android.graphics.Bitmap renderCroppedGreyscaleBitmap() -> renderCroppedGreyscaleBitmap
org.qiyi.qyscanqrcode.scan.camera.PreviewCallback -> org.qiyi.qyscanqrcode.scan.camera.PreviewCallback:
    java.lang.String TAG -> TAG
    org.qiyi.qyscanqrcode.scan.camera.CameraConfigurationManager configManager -> configManager
    boolean useOneShotPreviewCallback -> useOneShotPreviewCallback
    android.os.Handler previewHandler -> previewHandler
    int previewMessage -> previewMessage
    void <init>(org.qiyi.qyscanqrcode.scan.camera.CameraConfigurationManager,boolean) -> <init>
    void setHandler(android.os.Handler,int) -> setHandler
    void onPreviewFrame(byte[],android.hardware.Camera) -> onPreviewFrame
    void <clinit>() -> <clinit>
org.qiyi.qyscanqrcode.scan.decoding.CaptureActivityHandler -> org.qiyi.qyscanqrcode.scan.decoding.CaptureActivityHandler:
    java.lang.String TAG -> TAG
    org.qiyi.qyscanqrcode.scan.ScanActivity activity -> activity
    org.qiyi.qyscanqrcode.scan.decoding.DecodeThread decodeThread -> decodeThread
    org.qiyi.qyscanqrcode.scan.decoding.CaptureActivityHandler$State state -> state
    long mLastSucceed -> mLastSucceed
    void <init>(org.qiyi.qyscanqrcode.scan.ScanActivity,java.util.Vector,java.lang.String) -> <init>
    void handleMessage(android.os.Message) -> handleMessage
    void quitSynchronously() -> quitSynchronously
    void restartPreviewAndDecode() -> restartPreviewAndDecode
    void <clinit>() -> <clinit>
org.qiyi.qyscanqrcode.scan.decoding.CaptureActivityHandler$State -> org.qiyi.qyscanqrcode.scan.decoding.CaptureActivityHandler$State:
    org.qiyi.qyscanqrcode.scan.decoding.CaptureActivityHandler$State PREVIEW -> PREVIEW
    org.qiyi.qyscanqrcode.scan.decoding.CaptureActivityHandler$State SUCCESS -> SUCCESS
    org.qiyi.qyscanqrcode.scan.decoding.CaptureActivityHandler$State DONE -> DONE
    org.qiyi.qyscanqrcode.scan.decoding.CaptureActivityHandler$State[] $VALUES -> $VALUES
    org.qiyi.qyscanqrcode.scan.decoding.CaptureActivityHandler$State[] values() -> values
    org.qiyi.qyscanqrcode.scan.decoding.CaptureActivityHandler$State valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
org.qiyi.qyscanqrcode.scan.decoding.DecodeFormatManager -> org.qiyi.qyscanqrcode.scan.decoding.DecodeFormatManager:
    java.util.regex.Pattern COMMA_PATTERN -> COMMA_PATTERN
    java.util.Vector PRODUCT_FORMATS -> PRODUCT_FORMATS
    java.util.Vector ONE_D_FORMATS -> ONE_D_FORMATS
    java.util.Vector QR_CODE_FORMATS -> QR_CODE_FORMATS
    java.util.Vector DATA_MATRIX_FORMATS -> DATA_MATRIX_FORMATS
    void <init>() -> <init>
    java.util.Vector parseDecodeFormats(android.content.Intent) -> parseDecodeFormats
    java.util.Vector parseDecodeFormats(android.net.Uri) -> parseDecodeFormats
    java.util.Vector parseDecodeFormats(java.lang.Iterable,java.lang.String) -> parseDecodeFormats
    void <clinit>() -> <clinit>
org.qiyi.qyscanqrcode.scan.decoding.DecodeHandler -> org.qiyi.qyscanqrcode.scan.decoding.DecodeHandler:
    java.lang.String TAG -> TAG
    org.qiyi.qyscanqrcode.scan.ScanActivity activity -> activity
    org.qiyi.qyscanqrcode.scan.zxing.MultiFormatReader multiFormatReader -> multiFormatReader
    void <init>(org.qiyi.qyscanqrcode.scan.ScanActivity,java.util.Hashtable) -> <init>
    void handleMessage(android.os.Message) -> handleMessage
    void decode(byte[],int,int) -> decode
    void <clinit>() -> <clinit>
org.qiyi.qyscanqrcode.scan.decoding.DecodeThread -> org.qiyi.qyscanqrcode.scan.decoding.DecodeThread:
    java.lang.String BARCODE_BITMAP -> BARCODE_BITMAP
    org.qiyi.qyscanqrcode.scan.ScanActivity activity -> activity
    java.util.Hashtable hints -> hints
    android.os.Handler handler -> handler
    java.util.concurrent.CountDownLatch handlerInitLatch -> handlerInitLatch
    void <init>(org.qiyi.qyscanqrcode.scan.ScanActivity,java.util.Vector,java.lang.String,org.qiyi.qyscanqrcode.scan.zxing.ResultPointCallback) -> <init>
    android.os.Handler getHandler() -> getHandler
    void run() -> run
org.qiyi.qyscanqrcode.scan.decoding.FinishListener -> org.qiyi.qyscanqrcode.scan.decoding.FinishListener:
    android.app.Activity activityToFinish -> activityToFinish
    void <init>(android.app.Activity) -> <init>
    void onCancel(android.content.DialogInterface) -> onCancel
    void onClick(android.content.DialogInterface,int) -> onClick
    void run() -> run
org.qiyi.qyscanqrcode.scan.decoding.InactivityTimer -> org.qiyi.qyscanqrcode.scan.decoding.InactivityTimer:
    int INACTIVITY_DELAY_SECONDS -> INACTIVITY_DELAY_SECONDS
    java.util.concurrent.ScheduledExecutorService inactivityTimer -> inactivityTimer
    android.app.Activity activity -> activity
    java.util.concurrent.ScheduledFuture inactivityFuture -> inactivityFuture
    void <init>(android.app.Activity) -> <init>
    void onActivity() -> onActivity
    void cancel() -> cancel
    void shutdown() -> shutdown
org.qiyi.qyscanqrcode.scan.decoding.InactivityTimer$1 -> org.qiyi.qyscanqrcode.scan.decoding.InactivityTimer$1:
org.qiyi.qyscanqrcode.scan.decoding.InactivityTimer$DaemonThreadFactory -> org.qiyi.qyscanqrcode.scan.decoding.InactivityTimer$DaemonThreadFactory:
    void <init>() -> <init>
    java.lang.Thread newThread(java.lang.Runnable) -> newThread
    void <init>(org.qiyi.qyscanqrcode.scan.decoding.InactivityTimer$1) -> <init>
org.qiyi.qyscanqrcode.scan.decoding.Intents -> org.qiyi.qyscanqrcode.scan.decoding.Intents:
    void <init>() -> <init>
org.qiyi.qyscanqrcode.scan.decoding.Intents$Encode -> org.qiyi.qyscanqrcode.scan.decoding.Intents$Encode:
    java.lang.String ACTION -> ACTION
    java.lang.String DATA -> DATA
    java.lang.String TYPE -> TYPE
    java.lang.String FORMAT -> FORMAT
    void <init>() -> <init>
org.qiyi.qyscanqrcode.scan.decoding.Intents$Scan -> org.qiyi.qyscanqrcode.scan.decoding.Intents$Scan:
    java.lang.String ACTION -> ACTION
    java.lang.String MODE -> MODE
    java.lang.String SCAN_FORMATS -> SCAN_FORMATS
    java.lang.String CHARACTER_SET -> CHARACTER_SET
    java.lang.String PRODUCT_MODE -> PRODUCT_MODE
    java.lang.String ONE_D_MODE -> ONE_D_MODE
    java.lang.String QR_CODE_MODE -> QR_CODE_MODE
    java.lang.String DATA_MATRIX_MODE -> DATA_MATRIX_MODE
    java.lang.String RESULT -> RESULT
    java.lang.String RESULT_FORMAT -> RESULT_FORMAT
    java.lang.String SAVE_HISTORY -> SAVE_HISTORY
    void <init>() -> <init>
org.qiyi.qyscanqrcode.scan.decoding.Intents$SearchBookContents -> org.qiyi.qyscanqrcode.scan.decoding.Intents$SearchBookContents:
    java.lang.String ACTION -> ACTION
    java.lang.String ISBN -> ISBN
    java.lang.String QUERY -> QUERY
    void <init>() -> <init>
org.qiyi.qyscanqrcode.scan.decoding.Intents$Share -> org.qiyi.qyscanqrcode.scan.decoding.Intents$Share:
    java.lang.String ACTION -> ACTION
    void <init>() -> <init>
org.qiyi.qyscanqrcode.scan.decoding.Intents$WifiConnect -> org.qiyi.qyscanqrcode.scan.decoding.Intents$WifiConnect:
    java.lang.String ACTION -> ACTION
    java.lang.String SSID -> SSID
    java.lang.String TYPE -> TYPE
    java.lang.String PASSWORD -> PASSWORD
    void <init>() -> <init>
org.qiyi.qyscanqrcode.scan.zxing.BarcodeFormat -> org.qiyi.qyscanqrcode.scan.zxing.BarcodeFormat:
    org.qiyi.qyscanqrcode.scan.zxing.BarcodeFormat AZTEC -> AZTEC
    org.qiyi.qyscanqrcode.scan.zxing.BarcodeFormat CODABAR -> CODABAR
    org.qiyi.qyscanqrcode.scan.zxing.BarcodeFormat CODE_39 -> CODE_39
    org.qiyi.qyscanqrcode.scan.zxing.BarcodeFormat CODE_93 -> CODE_93
    org.qiyi.qyscanqrcode.scan.zxing.BarcodeFormat CODE_128 -> CODE_128
    org.qiyi.qyscanqrcode.scan.zxing.BarcodeFormat DATA_MATRIX -> DATA_MATRIX
    org.qiyi.qyscanqrcode.scan.zxing.BarcodeFormat EAN_8 -> EAN_8
    org.qiyi.qyscanqrcode.scan.zxing.BarcodeFormat EAN_13 -> EAN_13
    org.qiyi.qyscanqrcode.scan.zxing.BarcodeFormat ITF -> ITF
    org.qiyi.qyscanqrcode.scan.zxing.BarcodeFormat MAXICODE -> MAXICODE
    org.qiyi.qyscanqrcode.scan.zxing.BarcodeFormat PDF_417 -> PDF_417
    org.qiyi.qyscanqrcode.scan.zxing.BarcodeFormat QR_CODE -> QR_CODE
    org.qiyi.qyscanqrcode.scan.zxing.BarcodeFormat RSS_14 -> RSS_14
    org.qiyi.qyscanqrcode.scan.zxing.BarcodeFormat RSS_EXPANDED -> RSS_EXPANDED
    org.qiyi.qyscanqrcode.scan.zxing.BarcodeFormat UPC_A -> UPC_A
    org.qiyi.qyscanqrcode.scan.zxing.BarcodeFormat UPC_E -> UPC_E
    org.qiyi.qyscanqrcode.scan.zxing.BarcodeFormat UPC_EAN_EXTENSION -> UPC_EAN_EXTENSION
    org.qiyi.qyscanqrcode.scan.zxing.BarcodeFormat[] $VALUES -> $VALUES
    org.qiyi.qyscanqrcode.scan.zxing.BarcodeFormat[] values() -> values
    org.qiyi.qyscanqrcode.scan.zxing.BarcodeFormat valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
org.qiyi.qyscanqrcode.scan.zxing.Binarizer -> org.qiyi.qyscanqrcode.scan.zxing.Binarizer:
    org.qiyi.qyscanqrcode.scan.zxing.LuminanceSource source -> source
    void <init>(org.qiyi.qyscanqrcode.scan.zxing.LuminanceSource) -> <init>
    org.qiyi.qyscanqrcode.scan.zxing.LuminanceSource getLuminanceSource() -> getLuminanceSource
    org.qiyi.qyscanqrcode.scan.zxing.common.BitArray getBlackRow(int,org.qiyi.qyscanqrcode.scan.zxing.common.BitArray) -> getBlackRow
    org.qiyi.qyscanqrcode.scan.zxing.common.BitMatrix getBlackMatrix() -> getBlackMatrix
    org.qiyi.qyscanqrcode.scan.zxing.Binarizer createBinarizer(org.qiyi.qyscanqrcode.scan.zxing.LuminanceSource) -> createBinarizer
    int getWidth() -> getWidth
    int getHeight() -> getHeight
org.qiyi.qyscanqrcode.scan.zxing.BinaryBitmap -> org.qiyi.qyscanqrcode.scan.zxing.BinaryBitmap:
    org.qiyi.qyscanqrcode.scan.zxing.Binarizer binarizer -> binarizer
    org.qiyi.qyscanqrcode.scan.zxing.common.BitMatrix matrix -> matrix
    void <init>(org.qiyi.qyscanqrcode.scan.zxing.Binarizer) -> <init>
    int getWidth() -> getWidth
    int getHeight() -> getHeight
    org.qiyi.qyscanqrcode.scan.zxing.common.BitArray getBlackRow(int,org.qiyi.qyscanqrcode.scan.zxing.common.BitArray) -> getBlackRow
    org.qiyi.qyscanqrcode.scan.zxing.common.BitMatrix getBlackMatrix() -> getBlackMatrix
    boolean isCropSupported() -> isCropSupported
    org.qiyi.qyscanqrcode.scan.zxing.BinaryBitmap crop(int,int,int,int) -> crop
    boolean isRotateSupported() -> isRotateSupported
    org.qiyi.qyscanqrcode.scan.zxing.BinaryBitmap rotateCounterClockwise() -> rotateCounterClockwise
    org.qiyi.qyscanqrcode.scan.zxing.BinaryBitmap rotateCounterClockwise45() -> rotateCounterClockwise45
    java.lang.String toString() -> toString
org.qiyi.qyscanqrcode.scan.zxing.ChecksumException -> org.qiyi.qyscanqrcode.scan.zxing.ChecksumException:
    org.qiyi.qyscanqrcode.scan.zxing.ChecksumException instance -> instance
    void <init>() -> <init>
    void <init>(java.lang.Throwable) -> <init>
    org.qiyi.qyscanqrcode.scan.zxing.ChecksumException getChecksumInstance() -> getChecksumInstance
    org.qiyi.qyscanqrcode.scan.zxing.ChecksumException getChecksumInstance(java.lang.Throwable) -> getChecksumInstance
    void <clinit>() -> <clinit>
org.qiyi.qyscanqrcode.scan.zxing.CodeUtil -> org.qiyi.qyscanqrcode.scan.zxing.CodeUtil:
    void <init>() -> <init>
    android.graphics.Bitmap Create2DCode(java.lang.String,int,int) -> Create2DCode
    org.qiyi.qyscanqrcode.scan.zxing.common.BitMatrix deleteWhite(org.qiyi.qyscanqrcode.scan.zxing.common.BitMatrix) -> deleteWhite
org.qiyi.qyscanqrcode.scan.zxing.DecodeHintType -> org.qiyi.qyscanqrcode.scan.zxing.DecodeHintType:
    org.qiyi.qyscanqrcode.scan.zxing.DecodeHintType OTHER -> OTHER
    org.qiyi.qyscanqrcode.scan.zxing.DecodeHintType PURE_BARCODE -> PURE_BARCODE
    org.qiyi.qyscanqrcode.scan.zxing.DecodeHintType POSSIBLE_FORMATS -> POSSIBLE_FORMATS
    org.qiyi.qyscanqrcode.scan.zxing.DecodeHintType TRY_HARDER -> TRY_HARDER
    org.qiyi.qyscanqrcode.scan.zxing.DecodeHintType CHARACTER_SET -> CHARACTER_SET
    org.qiyi.qyscanqrcode.scan.zxing.DecodeHintType ALLOWED_LENGTHS -> ALLOWED_LENGTHS
    org.qiyi.qyscanqrcode.scan.zxing.DecodeHintType ASSUME_CODE_39_CHECK_DIGIT -> ASSUME_CODE_39_CHECK_DIGIT
    org.qiyi.qyscanqrcode.scan.zxing.DecodeHintType ASSUME_GS1 -> ASSUME_GS1
    org.qiyi.qyscanqrcode.scan.zxing.DecodeHintType RETURN_CODABAR_START_END -> RETURN_CODABAR_START_END
    org.qiyi.qyscanqrcode.scan.zxing.DecodeHintType NEED_RESULT_POINT_CALLBACK -> NEED_RESULT_POINT_CALLBACK
    org.qiyi.qyscanqrcode.scan.zxing.DecodeHintType ALLOWED_EAN_EXTENSIONS -> ALLOWED_EAN_EXTENSIONS
    java.lang.Class valueType -> valueType
    org.qiyi.qyscanqrcode.scan.zxing.DecodeHintType[] $VALUES -> $VALUES
    org.qiyi.qyscanqrcode.scan.zxing.DecodeHintType[] values() -> values
    org.qiyi.qyscanqrcode.scan.zxing.DecodeHintType valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,java.lang.Class) -> <init>
    java.lang.Class getValueType() -> getValueType
    void <clinit>() -> <clinit>
org.qiyi.qyscanqrcode.scan.zxing.Dimension -> org.qiyi.qyscanqrcode.scan.zxing.Dimension:
    int width -> width
    int height -> height
    void <init>(int,int) -> <init>
    int getWidth() -> getWidth
    int getHeight() -> getHeight
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
org.qiyi.qyscanqrcode.scan.zxing.EncodeHintType -> org.qiyi.qyscanqrcode.scan.zxing.EncodeHintType:
    org.qiyi.qyscanqrcode.scan.zxing.EncodeHintType ERROR_CORRECTION -> ERROR_CORRECTION
    org.qiyi.qyscanqrcode.scan.zxing.EncodeHintType CHARACTER_SET -> CHARACTER_SET
    org.qiyi.qyscanqrcode.scan.zxing.EncodeHintType DATA_MATRIX_SHAPE -> DATA_MATRIX_SHAPE
    org.qiyi.qyscanqrcode.scan.zxing.EncodeHintType MIN_SIZE -> MIN_SIZE
    org.qiyi.qyscanqrcode.scan.zxing.EncodeHintType MAX_SIZE -> MAX_SIZE
    org.qiyi.qyscanqrcode.scan.zxing.EncodeHintType MARGIN -> MARGIN
    org.qiyi.qyscanqrcode.scan.zxing.EncodeHintType PDF417_COMPACT -> PDF417_COMPACT
    org.qiyi.qyscanqrcode.scan.zxing.EncodeHintType PDF417_COMPACTION -> PDF417_COMPACTION
    org.qiyi.qyscanqrcode.scan.zxing.EncodeHintType PDF417_DIMENSIONS -> PDF417_DIMENSIONS
    org.qiyi.qyscanqrcode.scan.zxing.EncodeHintType AZTEC_LAYERS -> AZTEC_LAYERS
    org.qiyi.qyscanqrcode.scan.zxing.EncodeHintType[] $VALUES -> $VALUES
    org.qiyi.qyscanqrcode.scan.zxing.EncodeHintType[] values() -> values
    org.qiyi.qyscanqrcode.scan.zxing.EncodeHintType valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
org.qiyi.qyscanqrcode.scan.zxing.FormatException -> org.qiyi.qyscanqrcode.scan.zxing.FormatException:
    org.qiyi.qyscanqrcode.scan.zxing.FormatException instance -> instance
    void <init>() -> <init>
    void <init>(java.lang.Throwable) -> <init>
    org.qiyi.qyscanqrcode.scan.zxing.FormatException getFormatInstance() -> getFormatInstance
    org.qiyi.qyscanqrcode.scan.zxing.FormatException getFormatInstance(java.lang.Throwable) -> getFormatInstance
    void <clinit>() -> <clinit>
org.qiyi.qyscanqrcode.scan.zxing.InvertedLuminanceSource -> org.qiyi.qyscanqrcode.scan.zxing.InvertedLuminanceSource:
    org.qiyi.qyscanqrcode.scan.zxing.LuminanceSource delegate -> delegate
    void <init>(org.qiyi.qyscanqrcode.scan.zxing.LuminanceSource) -> <init>
    byte[] getRow(int,byte[]) -> getRow
    byte[] getMatrix() -> getMatrix
    boolean isCropSupported() -> isCropSupported
    org.qiyi.qyscanqrcode.scan.zxing.LuminanceSource crop(int,int,int,int) -> crop
    boolean isRotateSupported() -> isRotateSupported
    org.qiyi.qyscanqrcode.scan.zxing.LuminanceSource invert() -> invert
    org.qiyi.qyscanqrcode.scan.zxing.LuminanceSource rotateCounterClockwise() -> rotateCounterClockwise
    org.qiyi.qyscanqrcode.scan.zxing.LuminanceSource rotateCounterClockwise45() -> rotateCounterClockwise45
org.qiyi.qyscanqrcode.scan.zxing.LuminanceSource -> org.qiyi.qyscanqrcode.scan.zxing.LuminanceSource:
    int width -> width
    int height -> height
    void <init>(int,int) -> <init>
    byte[] getRow(int,byte[]) -> getRow
    byte[] getMatrix() -> getMatrix
    int getWidth() -> getWidth
    int getHeight() -> getHeight
    boolean isCropSupported() -> isCropSupported
    org.qiyi.qyscanqrcode.scan.zxing.LuminanceSource crop(int,int,int,int) -> crop
    boolean isRotateSupported() -> isRotateSupported
    org.qiyi.qyscanqrcode.scan.zxing.LuminanceSource invert() -> invert
    org.qiyi.qyscanqrcode.scan.zxing.LuminanceSource rotateCounterClockwise() -> rotateCounterClockwise
    org.qiyi.qyscanqrcode.scan.zxing.LuminanceSource rotateCounterClockwise45() -> rotateCounterClockwise45
    java.lang.String toString() -> toString
org.qiyi.qyscanqrcode.scan.zxing.MultiFormatReader -> org.qiyi.qyscanqrcode.scan.zxing.MultiFormatReader:
    java.util.Map hints -> hints
    org.qiyi.qyscanqrcode.scan.zxing.Reader[] readers -> readers
    void <init>() -> <init>
    org.qiyi.qyscanqrcode.scan.zxing.Result decode(org.qiyi.qyscanqrcode.scan.zxing.BinaryBitmap) -> decode
    org.qiyi.qyscanqrcode.scan.zxing.Result decode(org.qiyi.qyscanqrcode.scan.zxing.BinaryBitmap,java.util.Map) -> decode
    org.qiyi.qyscanqrcode.scan.zxing.Result decodeWithState(org.qiyi.qyscanqrcode.scan.zxing.BinaryBitmap) -> decodeWithState
    void setHints(java.util.Map) -> setHints
    void reset() -> reset
    org.qiyi.qyscanqrcode.scan.zxing.Result decodeInternal(org.qiyi.qyscanqrcode.scan.zxing.BinaryBitmap) -> decodeInternal
org.qiyi.qyscanqrcode.scan.zxing.MultiFormatWriter -> org.qiyi.qyscanqrcode.scan.zxing.MultiFormatWriter:
    void <init>() -> <init>
    org.qiyi.qyscanqrcode.scan.zxing.common.BitMatrix encode(java.lang.String,org.qiyi.qyscanqrcode.scan.zxing.BarcodeFormat,int,int) -> encode
    org.qiyi.qyscanqrcode.scan.zxing.common.BitMatrix encode(java.lang.String,org.qiyi.qyscanqrcode.scan.zxing.BarcodeFormat,int,int,java.util.Map) -> encode
org.qiyi.qyscanqrcode.scan.zxing.MultiFormatWriter$1 -> org.qiyi.qyscanqrcode.scan.zxing.MultiFormatWriter$1:
    int[] $SwitchMap$org$qiyi$qyscanqrcode$scan$zxing$BarcodeFormat -> $SwitchMap$org$qiyi$qyscanqrcode$scan$zxing$BarcodeFormat
    void <clinit>() -> <clinit>
org.qiyi.qyscanqrcode.scan.zxing.NotFoundException -> org.qiyi.qyscanqrcode.scan.zxing.NotFoundException:
    org.qiyi.qyscanqrcode.scan.zxing.NotFoundException instance -> instance
    void <init>() -> <init>
    org.qiyi.qyscanqrcode.scan.zxing.NotFoundException getNotFoundInstance() -> getNotFoundInstance
    void <clinit>() -> <clinit>
org.qiyi.qyscanqrcode.scan.zxing.PlanarYUVLuminanceSource -> org.qiyi.qyscanqrcode.scan.zxing.PlanarYUVLuminanceSource:
    int THUMBNAIL_SCALE_FACTOR -> THUMBNAIL_SCALE_FACTOR
    byte[] yuvData -> yuvData
    int dataWidth -> dataWidth
    int dataHeight -> dataHeight
    int left -> left
    int top -> top
    void <init>(byte[],int,int,int,int,int,int,boolean) -> <init>
    byte[] getRow(int,byte[]) -> getRow
    byte[] getMatrix() -> getMatrix
    boolean isCropSupported() -> isCropSupported
    org.qiyi.qyscanqrcode.scan.zxing.LuminanceSource crop(int,int,int,int) -> crop
    int[] renderThumbnail() -> renderThumbnail
    int getThumbnailWidth() -> getThumbnailWidth
    int getThumbnailHeight() -> getThumbnailHeight
    void reverseHorizontal(int,int) -> reverseHorizontal
org.qiyi.qyscanqrcode.scan.zxing.RGBLuminanceSource -> org.qiyi.qyscanqrcode.scan.zxing.RGBLuminanceSource:
    byte[] luminances -> luminances
    int dataWidth -> dataWidth
    int dataHeight -> dataHeight
    int left -> left
    int top -> top
    void <init>(int,int,int[]) -> <init>
    void <init>(byte[],int,int,int,int,int,int) -> <init>
    byte[] getRow(int,byte[]) -> getRow
    byte[] getMatrix() -> getMatrix
    boolean isCropSupported() -> isCropSupported
    org.qiyi.qyscanqrcode.scan.zxing.LuminanceSource crop(int,int,int,int) -> crop
org.qiyi.qyscanqrcode.scan.zxing.Reader -> org.qiyi.qyscanqrcode.scan.zxing.Reader:
    org.qiyi.qyscanqrcode.scan.zxing.Result decode(org.qiyi.qyscanqrcode.scan.zxing.BinaryBitmap) -> decode
    org.qiyi.qyscanqrcode.scan.zxing.Result decode(org.qiyi.qyscanqrcode.scan.zxing.BinaryBitmap,java.util.Map) -> decode
    void reset() -> reset
org.qiyi.qyscanqrcode.scan.zxing.ReaderException -> org.qiyi.qyscanqrcode.scan.zxing.ReaderException:
    boolean isStackTrace -> isStackTrace
    void <init>() -> <init>
    void <init>(java.lang.Throwable) -> <init>
    java.lang.Throwable fillInStackTrace() -> fillInStackTrace
    void <clinit>() -> <clinit>
org.qiyi.qyscanqrcode.scan.zxing.Result -> org.qiyi.qyscanqrcode.scan.zxing.Result:
    java.lang.String text -> text
    byte[] rawBytes -> rawBytes
    org.qiyi.qyscanqrcode.scan.zxing.ResultPoint[] resultPoints -> resultPoints
    org.qiyi.qyscanqrcode.scan.zxing.BarcodeFormat format -> format
    java.util.Map resultMetadata -> resultMetadata
    long timestamp -> timestamp
    void <init>(java.lang.String,byte[],org.qiyi.qyscanqrcode.scan.zxing.ResultPoint[],org.qiyi.qyscanqrcode.scan.zxing.BarcodeFormat) -> <init>
    void <init>(java.lang.String,byte[],org.qiyi.qyscanqrcode.scan.zxing.ResultPoint[],org.qiyi.qyscanqrcode.scan.zxing.BarcodeFormat,long) -> <init>
    java.lang.String getText() -> getText
    byte[] getRawBytes() -> getRawBytes
    org.qiyi.qyscanqrcode.scan.zxing.ResultPoint[] getResultPoints() -> getResultPoints
    org.qiyi.qyscanqrcode.scan.zxing.BarcodeFormat getBarcodeFormat() -> getBarcodeFormat
    java.util.Map getResultMetadata() -> getResultMetadata
    void putMetadata(org.qiyi.qyscanqrcode.scan.zxing.ResultMetadataType,java.lang.Object) -> putMetadata
    void putAllMetadata(java.util.Map) -> putAllMetadata
    void addResultPoints(org.qiyi.qyscanqrcode.scan.zxing.ResultPoint[]) -> addResultPoints
    long getTimestamp() -> getTimestamp
    java.lang.String toString() -> toString
org.qiyi.qyscanqrcode.scan.zxing.ResultMetadataType -> org.qiyi.qyscanqrcode.scan.zxing.ResultMetadataType:
    org.qiyi.qyscanqrcode.scan.zxing.ResultMetadataType OTHER -> OTHER
    org.qiyi.qyscanqrcode.scan.zxing.ResultMetadataType ORIENTATION -> ORIENTATION
    org.qiyi.qyscanqrcode.scan.zxing.ResultMetadataType BYTE_SEGMENTS -> BYTE_SEGMENTS
    org.qiyi.qyscanqrcode.scan.zxing.ResultMetadataType ERROR_CORRECTION_LEVEL -> ERROR_CORRECTION_LEVEL
    org.qiyi.qyscanqrcode.scan.zxing.ResultMetadataType ISSUE_NUMBER -> ISSUE_NUMBER
    org.qiyi.qyscanqrcode.scan.zxing.ResultMetadataType SUGGESTED_PRICE -> SUGGESTED_PRICE
    org.qiyi.qyscanqrcode.scan.zxing.ResultMetadataType POSSIBLE_COUNTRY -> POSSIBLE_COUNTRY
    org.qiyi.qyscanqrcode.scan.zxing.ResultMetadataType UPC_EAN_EXTENSION -> UPC_EAN_EXTENSION
    org.qiyi.qyscanqrcode.scan.zxing.ResultMetadataType PDF417_EXTRA_METADATA -> PDF417_EXTRA_METADATA
    org.qiyi.qyscanqrcode.scan.zxing.ResultMetadataType STRUCTURED_APPEND_SEQUENCE -> STRUCTURED_APPEND_SEQUENCE
    org.qiyi.qyscanqrcode.scan.zxing.ResultMetadataType STRUCTURED_APPEND_PARITY -> STRUCTURED_APPEND_PARITY
    org.qiyi.qyscanqrcode.scan.zxing.ResultMetadataType[] $VALUES -> $VALUES
    org.qiyi.qyscanqrcode.scan.zxing.ResultMetadataType[] values() -> values
    org.qiyi.qyscanqrcode.scan.zxing.ResultMetadataType valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
org.qiyi.qyscanqrcode.scan.zxing.ResultPoint -> org.qiyi.qyscanqrcode.scan.zxing.ResultPoint:
    float x -> x
    float y -> y
    void <init>(float,float) -> <init>
    float getX() -> getX
    float getY() -> getY
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void orderBestPatterns(org.qiyi.qyscanqrcode.scan.zxing.ResultPoint[]) -> orderBestPatterns
    float distance(org.qiyi.qyscanqrcode.scan.zxing.ResultPoint,org.qiyi.qyscanqrcode.scan.zxing.ResultPoint) -> distance
    float crossProductZ(org.qiyi.qyscanqrcode.scan.zxing.ResultPoint,org.qiyi.qyscanqrcode.scan.zxing.ResultPoint,org.qiyi.qyscanqrcode.scan.zxing.ResultPoint) -> crossProductZ
org.qiyi.qyscanqrcode.scan.zxing.ResultPointCallback -> org.qiyi.qyscanqrcode.scan.zxing.ResultPointCallback:
    void foundPossibleResultPoint(org.qiyi.qyscanqrcode.scan.zxing.ResultPoint) -> foundPossibleResultPoint
org.qiyi.qyscanqrcode.scan.zxing.Writer -> org.qiyi.qyscanqrcode.scan.zxing.Writer:
    org.qiyi.qyscanqrcode.scan.zxing.common.BitMatrix encode(java.lang.String,org.qiyi.qyscanqrcode.scan.zxing.BarcodeFormat,int,int) -> encode
    org.qiyi.qyscanqrcode.scan.zxing.common.BitMatrix encode(java.lang.String,org.qiyi.qyscanqrcode.scan.zxing.BarcodeFormat,int,int,java.util.Map) -> encode
org.qiyi.qyscanqrcode.scan.zxing.WriterException -> org.qiyi.qyscanqrcode.scan.zxing.WriterException:
    void <init>() -> <init>
    void <init>(java.lang.String) -> <init>
    void <init>(java.lang.Throwable) -> <init>
org.qiyi.qyscanqrcode.scan.zxing.common.BitArray -> org.qiyi.qyscanqrcode.scan.zxing.common.BitArray:
    int[] bits -> bits
    int size -> size
    void <init>() -> <init>
    void <init>(int) -> <init>
    void <init>(int[],int) -> <init>
    int getSize() -> getSize
    int getSizeInBytes() -> getSizeInBytes
    void ensureCapacity(int) -> ensureCapacity
    boolean get(int) -> get
    void set(int) -> set
    void flip(int) -> flip
    int getNextSet(int) -> getNextSet
    int getNextUnset(int) -> getNextUnset
    void setBulk(int,int) -> setBulk
    void setRange(int,int) -> setRange
    void clear() -> clear
    boolean isRange(int,int,boolean) -> isRange
    void appendBit(boolean) -> appendBit
    void appendBits(int,int) -> appendBits
    void appendBitArray(org.qiyi.qyscanqrcode.scan.zxing.common.BitArray) -> appendBitArray
    void xor(org.qiyi.qyscanqrcode.scan.zxing.common.BitArray) -> xor
    void toBytes(int,byte[],int,int) -> toBytes
    int[] getBitArray() -> getBitArray
    void reverse() -> reverse
    int[] makeArray(int) -> makeArray
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    org.qiyi.qyscanqrcode.scan.zxing.common.BitArray clone() -> clone
    java.lang.Object clone() -> clone
org.qiyi.qyscanqrcode.scan.zxing.common.BitMatrix -> org.qiyi.qyscanqrcode.scan.zxing.common.BitMatrix:
    int width -> width
    int height -> height
    int rowSize -> rowSize
    int[] bits -> bits
    void <init>(int) -> <init>
    void <init>(int,int) -> <init>
    void <init>(int,int,int,int[]) -> <init>
    org.qiyi.qyscanqrcode.scan.zxing.common.BitMatrix parse(java.lang.String,java.lang.String,java.lang.String) -> parse
    boolean get(int,int) -> get
    void set(int,int) -> set
    void unset(int,int) -> unset
    void flip(int,int) -> flip
    void xor(org.qiyi.qyscanqrcode.scan.zxing.common.BitMatrix) -> xor
    void clear() -> clear
    void setRegion(int,int,int,int) -> setRegion
    org.qiyi.qyscanqrcode.scan.zxing.common.BitArray getRow(int,org.qiyi.qyscanqrcode.scan.zxing.common.BitArray) -> getRow
    void setRow(int,org.qiyi.qyscanqrcode.scan.zxing.common.BitArray) -> setRow
    void rotate180() -> rotate180
    int[] getEnclosingRectangle() -> getEnclosingRectangle
    int[] getTopLeftOnBit() -> getTopLeftOnBit
    int[] getBottomRightOnBit() -> getBottomRightOnBit
    int getWidth() -> getWidth
    int getHeight() -> getHeight
    int getRowSize() -> getRowSize
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    java.lang.String toString(java.lang.String,java.lang.String) -> toString
    java.lang.String toString(java.lang.String,java.lang.String,java.lang.String) -> toString
    org.qiyi.qyscanqrcode.scan.zxing.common.BitMatrix clone() -> clone
    java.lang.Object clone() -> clone
org.qiyi.qyscanqrcode.scan.zxing.common.BitSource -> org.qiyi.qyscanqrcode.scan.zxing.common.BitSource:
    byte[] bytes -> bytes
    int byteOffset -> byteOffset
    int bitOffset -> bitOffset
    void <init>(byte[]) -> <init>
    int getBitOffset() -> getBitOffset
    int getByteOffset() -> getByteOffset
    int readBits(int) -> readBits
    int available() -> available
org.qiyi.qyscanqrcode.scan.zxing.common.CharacterSetECI -> org.qiyi.qyscanqrcode.scan.zxing.common.CharacterSetECI:
    org.qiyi.qyscanqrcode.scan.zxing.common.CharacterSetECI Cp437 -> Cp437
    org.qiyi.qyscanqrcode.scan.zxing.common.CharacterSetECI ISO8859_1 -> ISO8859_1
    org.qiyi.qyscanqrcode.scan.zxing.common.CharacterSetECI ISO8859_2 -> ISO8859_2
    org.qiyi.qyscanqrcode.scan.zxing.common.CharacterSetECI ISO8859_3 -> ISO8859_3
    org.qiyi.qyscanqrcode.scan.zxing.common.CharacterSetECI ISO8859_4 -> ISO8859_4
    org.qiyi.qyscanqrcode.scan.zxing.common.CharacterSetECI ISO8859_5 -> ISO8859_5
    org.qiyi.qyscanqrcode.scan.zxing.common.CharacterSetECI ISO8859_6 -> ISO8859_6
    org.qiyi.qyscanqrcode.scan.zxing.common.CharacterSetECI ISO8859_7 -> ISO8859_7
    org.qiyi.qyscanqrcode.scan.zxing.common.CharacterSetECI ISO8859_8 -> ISO8859_8
    org.qiyi.qyscanqrcode.scan.zxing.common.CharacterSetECI ISO8859_9 -> ISO8859_9
    org.qiyi.qyscanqrcode.scan.zxing.common.CharacterSetECI ISO8859_10 -> ISO8859_10
    org.qiyi.qyscanqrcode.scan.zxing.common.CharacterSetECI ISO8859_11 -> ISO8859_11
    org.qiyi.qyscanqrcode.scan.zxing.common.CharacterSetECI ISO8859_13 -> ISO8859_13
    org.qiyi.qyscanqrcode.scan.zxing.common.CharacterSetECI ISO8859_14 -> ISO8859_14
    org.qiyi.qyscanqrcode.scan.zxing.common.CharacterSetECI ISO8859_15 -> ISO8859_15
    org.qiyi.qyscanqrcode.scan.zxing.common.CharacterSetECI ISO8859_16 -> ISO8859_16
    org.qiyi.qyscanqrcode.scan.zxing.common.CharacterSetECI SJIS -> SJIS
    org.qiyi.qyscanqrcode.scan.zxing.common.CharacterSetECI Cp1250 -> Cp1250
    org.qiyi.qyscanqrcode.scan.zxing.common.CharacterSetECI Cp1251 -> Cp1251
    org.qiyi.qyscanqrcode.scan.zxing.common.CharacterSetECI Cp1252 -> Cp1252
    org.qiyi.qyscanqrcode.scan.zxing.common.CharacterSetECI Cp1256 -> Cp1256
    org.qiyi.qyscanqrcode.scan.zxing.common.CharacterSetECI UnicodeBigUnmarked -> UnicodeBigUnmarked
    org.qiyi.qyscanqrcode.scan.zxing.common.CharacterSetECI UTF8 -> UTF8
    org.qiyi.qyscanqrcode.scan.zxing.common.CharacterSetECI ASCII -> ASCII
    org.qiyi.qyscanqrcode.scan.zxing.common.CharacterSetECI Big5 -> Big5
    org.qiyi.qyscanqrcode.scan.zxing.common.CharacterSetECI GB18030 -> GB18030
    org.qiyi.qyscanqrcode.scan.zxing.common.CharacterSetECI EUC_KR -> EUC_KR
    java.util.Map VALUE_TO_ECI -> VALUE_TO_ECI
    java.util.Map NAME_TO_ECI -> NAME_TO_ECI
    int[] values -> values
    java.lang.String[] otherEncodingNames -> otherEncodingNames
    org.qiyi.qyscanqrcode.scan.zxing.common.CharacterSetECI[] $VALUES -> $VALUES
    org.qiyi.qyscanqrcode.scan.zxing.common.CharacterSetECI[] values() -> values
    org.qiyi.qyscanqrcode.scan.zxing.common.CharacterSetECI valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,int) -> <init>
    void <init>(java.lang.String,int,int,java.lang.String[]) -> <init>
    void <init>(java.lang.String,int,int[],java.lang.String[]) -> <init>
    int getValue() -> getValue
    org.qiyi.qyscanqrcode.scan.zxing.common.CharacterSetECI getCharacterSetECIByValue(int) -> getCharacterSetECIByValue
    org.qiyi.qyscanqrcode.scan.zxing.common.CharacterSetECI getCharacterSetECIByName(java.lang.String) -> getCharacterSetECIByName
    void <clinit>() -> <clinit>
org.qiyi.qyscanqrcode.scan.zxing.common.DecoderResult -> org.qiyi.qyscanqrcode.scan.zxing.common.DecoderResult:
    byte[] rawBytes -> rawBytes
    java.lang.String text -> text
    java.util.List byteSegments -> byteSegments
    java.lang.String ecLevel -> ecLevel
    java.lang.Integer errorsCorrected -> errorsCorrected
    java.lang.Integer erasures -> erasures
    java.lang.Object other -> other
    int structuredAppendParity -> structuredAppendParity
    int structuredAppendSequenceNumber -> structuredAppendSequenceNumber
    void <init>(byte[],java.lang.String,java.util.List,java.lang.String) -> <init>
    void <init>(byte[],java.lang.String,java.util.List,java.lang.String,int,int) -> <init>
    byte[] getRawBytes() -> getRawBytes
    java.lang.String getText() -> getText
    java.util.List getByteSegments() -> getByteSegments
    java.lang.String getECLevel() -> getECLevel
    java.lang.Integer getErrorsCorrected() -> getErrorsCorrected
    void setErrorsCorrected(java.lang.Integer) -> setErrorsCorrected
    java.lang.Integer getErasures() -> getErasures
    void setErasures(java.lang.Integer) -> setErasures
    java.lang.Object getOther() -> getOther
    void setOther(java.lang.Object) -> setOther
    boolean hasStructuredAppend() -> hasStructuredAppend
    int getStructuredAppendParity() -> getStructuredAppendParity
    int getStructuredAppendSequenceNumber() -> getStructuredAppendSequenceNumber
org.qiyi.qyscanqrcode.scan.zxing.common.DefaultGridSampler -> org.qiyi.qyscanqrcode.scan.zxing.common.DefaultGridSampler:
    void <init>() -> <init>
    org.qiyi.qyscanqrcode.scan.zxing.common.BitMatrix sampleGrid(org.qiyi.qyscanqrcode.scan.zxing.common.BitMatrix,int,int,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float) -> sampleGrid
    org.qiyi.qyscanqrcode.scan.zxing.common.BitMatrix sampleGrid(org.qiyi.qyscanqrcode.scan.zxing.common.BitMatrix,int,int,org.qiyi.qyscanqrcode.scan.zxing.common.PerspectiveTransform) -> sampleGrid
org.qiyi.qyscanqrcode.scan.zxing.common.DetectorResult -> org.qiyi.qyscanqrcode.scan.zxing.common.DetectorResult:
    org.qiyi.qyscanqrcode.scan.zxing.common.BitMatrix bits -> bits
    org.qiyi.qyscanqrcode.scan.zxing.ResultPoint[] points -> points
    void <init>(org.qiyi.qyscanqrcode.scan.zxing.common.BitMatrix,org.qiyi.qyscanqrcode.scan.zxing.ResultPoint[]) -> <init>
    org.qiyi.qyscanqrcode.scan.zxing.common.BitMatrix getBits() -> getBits
    org.qiyi.qyscanqrcode.scan.zxing.ResultPoint[] getPoints() -> getPoints
org.qiyi.qyscanqrcode.scan.zxing.common.GlobalHistogramBinarizer -> org.qiyi.qyscanqrcode.scan.zxing.common.GlobalHistogramBinarizer:
    int LUMINANCE_BITS -> LUMINANCE_BITS
    int LUMINANCE_SHIFT -> LUMINANCE_SHIFT
    int LUMINANCE_BUCKETS -> LUMINANCE_BUCKETS
    byte[] EMPTY -> EMPTY
    byte[] luminances -> luminances
    int[] buckets -> buckets
    void <init>(org.qiyi.qyscanqrcode.scan.zxing.LuminanceSource) -> <init>
    org.qiyi.qyscanqrcode.scan.zxing.common.BitArray getBlackRow(int,org.qiyi.qyscanqrcode.scan.zxing.common.BitArray) -> getBlackRow
    org.qiyi.qyscanqrcode.scan.zxing.common.BitMatrix getBlackMatrix() -> getBlackMatrix
    org.qiyi.qyscanqrcode.scan.zxing.Binarizer createBinarizer(org.qiyi.qyscanqrcode.scan.zxing.LuminanceSource) -> createBinarizer
    void initArrays(int) -> initArrays
    int estimateBlackPoint(int[]) -> estimateBlackPoint
    void <clinit>() -> <clinit>
org.qiyi.qyscanqrcode.scan.zxing.common.GridSampler -> org.qiyi.qyscanqrcode.scan.zxing.common.GridSampler:
    org.qiyi.qyscanqrcode.scan.zxing.common.GridSampler gridSampler -> gridSampler
    void <init>() -> <init>
    void setGridSampler(org.qiyi.qyscanqrcode.scan.zxing.common.GridSampler) -> setGridSampler
    org.qiyi.qyscanqrcode.scan.zxing.common.GridSampler getInstance() -> getInstance
    org.qiyi.qyscanqrcode.scan.zxing.common.BitMatrix sampleGrid(org.qiyi.qyscanqrcode.scan.zxing.common.BitMatrix,int,int,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float) -> sampleGrid
    org.qiyi.qyscanqrcode.scan.zxing.common.BitMatrix sampleGrid(org.qiyi.qyscanqrcode.scan.zxing.common.BitMatrix,int,int,org.qiyi.qyscanqrcode.scan.zxing.common.PerspectiveTransform) -> sampleGrid
    void checkAndNudgePoints(org.qiyi.qyscanqrcode.scan.zxing.common.BitMatrix,float[]) -> checkAndNudgePoints
    void <clinit>() -> <clinit>
org.qiyi.qyscanqrcode.scan.zxing.common.HybridBinarizer -> org.qiyi.qyscanqrcode.scan.zxing.common.HybridBinarizer:
    int BLOCK_SIZE_POWER -> BLOCK_SIZE_POWER
    int BLOCK_SIZE -> BLOCK_SIZE
    int BLOCK_SIZE_MASK -> BLOCK_SIZE_MASK
    int MINIMUM_DIMENSION -> MINIMUM_DIMENSION
    int MIN_DYNAMIC_RANGE -> MIN_DYNAMIC_RANGE
    org.qiyi.qyscanqrcode.scan.zxing.common.BitMatrix matrix -> matrix
    void <init>(org.qiyi.qyscanqrcode.scan.zxing.LuminanceSource) -> <init>
    org.qiyi.qyscanqrcode.scan.zxing.common.BitMatrix getBlackMatrix() -> getBlackMatrix
    org.qiyi.qyscanqrcode.scan.zxing.Binarizer createBinarizer(org.qiyi.qyscanqrcode.scan.zxing.LuminanceSource) -> createBinarizer
    void calculateThresholdForBlock(byte[],int,int,int,int,int[][],org.qiyi.qyscanqrcode.scan.zxing.common.BitMatrix) -> calculateThresholdForBlock
    int cap(int,int,int) -> cap
    void thresholdBlock(byte[],int,int,int,int,org.qiyi.qyscanqrcode.scan.zxing.common.BitMatrix) -> thresholdBlock
    int[][] calculateBlackPoints(byte[],int,int,int,int) -> calculateBlackPoints
org.qiyi.qyscanqrcode.scan.zxing.common.PerspectiveTransform -> org.qiyi.qyscanqrcode.scan.zxing.common.PerspectiveTransform:
    float a11 -> a11
    float a12 -> a12
    float a13 -> a13
    float a21 -> a21
    float a22 -> a22
    float a23 -> a23
    float a31 -> a31
    float a32 -> a32
    float a33 -> a33
    void <init>(float,float,float,float,float,float,float,float,float) -> <init>
    org.qiyi.qyscanqrcode.scan.zxing.common.PerspectiveTransform quadrilateralToQuadrilateral(float,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float) -> quadrilateralToQuadrilateral
    void transformPoints(float[]) -> transformPoints
    void transformPoints(float[],float[]) -> transformPoints
    org.qiyi.qyscanqrcode.scan.zxing.common.PerspectiveTransform squareToQuadrilateral(float,float,float,float,float,float,float,float) -> squareToQuadrilateral
    org.qiyi.qyscanqrcode.scan.zxing.common.PerspectiveTransform quadrilateralToSquare(float,float,float,float,float,float,float,float) -> quadrilateralToSquare
    org.qiyi.qyscanqrcode.scan.zxing.common.PerspectiveTransform buildAdjoint() -> buildAdjoint
    org.qiyi.qyscanqrcode.scan.zxing.common.PerspectiveTransform times(org.qiyi.qyscanqrcode.scan.zxing.common.PerspectiveTransform) -> times
org.qiyi.qyscanqrcode.scan.zxing.common.StringUtils -> org.qiyi.qyscanqrcode.scan.zxing.common.StringUtils:
    java.lang.String PLATFORM_DEFAULT_ENCODING -> PLATFORM_DEFAULT_ENCODING
    java.lang.String SHIFT_JIS -> SHIFT_JIS
    java.lang.String GB2312 -> GB2312
    java.lang.String EUC_JP -> EUC_JP
    java.lang.String UTF8 -> UTF8
    java.lang.String ISO88591 -> ISO88591
    boolean ASSUME_SHIFT_JIS -> ASSUME_SHIFT_JIS
    void <init>() -> <init>
    java.lang.String guessEncoding(byte[],java.util.Map) -> guessEncoding
    void <clinit>() -> <clinit>
org.qiyi.qyscanqrcode.scan.zxing.common.detector.MathUtils -> org.qiyi.qyscanqrcode.scan.zxing.common.detector.MathUtils:
    void <init>() -> <init>
    int round(float) -> round
    float distance(float,float,float,float) -> distance
    float distance(int,int,int,int) -> distance
org.qiyi.qyscanqrcode.scan.zxing.common.detector.MonochromeRectangleDetector -> org.qiyi.qyscanqrcode.scan.zxing.common.detector.MonochromeRectangleDetector:
    int MAX_MODULES -> MAX_MODULES
    org.qiyi.qyscanqrcode.scan.zxing.common.BitMatrix image -> image
    void <init>(org.qiyi.qyscanqrcode.scan.zxing.common.BitMatrix) -> <init>
    org.qiyi.qyscanqrcode.scan.zxing.ResultPoint[] detect() -> detect
    org.qiyi.qyscanqrcode.scan.zxing.ResultPoint findCornerFromCenter(int,int,int,int,int,int,int,int,int) -> findCornerFromCenter
    int[] blackWhiteRange(int,int,int,int,boolean) -> blackWhiteRange
org.qiyi.qyscanqrcode.scan.zxing.common.detector.WhiteRectangleDetector -> org.qiyi.qyscanqrcode.scan.zxing.common.detector.WhiteRectangleDetector:
    int INIT_SIZE -> INIT_SIZE
    int CORR -> CORR
    org.qiyi.qyscanqrcode.scan.zxing.common.BitMatrix image -> image
    int height -> height
    int width -> width
    int leftInit -> leftInit
    int rightInit -> rightInit
    int downInit -> downInit
    int upInit -> upInit
    void <init>(org.qiyi.qyscanqrcode.scan.zxing.common.BitMatrix) -> <init>
    void <init>(org.qiyi.qyscanqrcode.scan.zxing.common.BitMatrix,int,int,int) -> <init>
    org.qiyi.qyscanqrcode.scan.zxing.ResultPoint[] detect() -> detect
    org.qiyi.qyscanqrcode.scan.zxing.ResultPoint getBlackPointOnSegment(float,float,float,float) -> getBlackPointOnSegment
    org.qiyi.qyscanqrcode.scan.zxing.ResultPoint[] centerEdges(org.qiyi.qyscanqrcode.scan.zxing.ResultPoint,org.qiyi.qyscanqrcode.scan.zxing.ResultPoint,org.qiyi.qyscanqrcode.scan.zxing.ResultPoint,org.qiyi.qyscanqrcode.scan.zxing.ResultPoint) -> centerEdges
    boolean containsBlackPoint(int,int,int,boolean) -> containsBlackPoint
org.qiyi.qyscanqrcode.scan.zxing.common.reedsolomon.GenericGF -> org.qiyi.qyscanqrcode.scan.zxing.common.reedsolomon.GenericGF:
    org.qiyi.qyscanqrcode.scan.zxing.common.reedsolomon.GenericGF AZTEC_DATA_12 -> AZTEC_DATA_12
    org.qiyi.qyscanqrcode.scan.zxing.common.reedsolomon.GenericGF AZTEC_DATA_10 -> AZTEC_DATA_10
    org.qiyi.qyscanqrcode.scan.zxing.common.reedsolomon.GenericGF AZTEC_DATA_6 -> AZTEC_DATA_6
    org.qiyi.qyscanqrcode.scan.zxing.common.reedsolomon.GenericGF AZTEC_PARAM -> AZTEC_PARAM
    org.qiyi.qyscanqrcode.scan.zxing.common.reedsolomon.GenericGF QR_CODE_FIELD_256 -> QR_CODE_FIELD_256
    org.qiyi.qyscanqrcode.scan.zxing.common.reedsolomon.GenericGF DATA_MATRIX_FIELD_256 -> DATA_MATRIX_FIELD_256
    org.qiyi.qyscanqrcode.scan.zxing.common.reedsolomon.GenericGF AZTEC_DATA_8 -> AZTEC_DATA_8
    org.qiyi.qyscanqrcode.scan.zxing.common.reedsolomon.GenericGF MAXICODE_FIELD_64 -> MAXICODE_FIELD_64
    int[] expTable -> expTable
    int[] logTable -> logTable
    org.qiyi.qyscanqrcode.scan.zxing.common.reedsolomon.GenericGFPoly zero -> zero
    org.qiyi.qyscanqrcode.scan.zxing.common.reedsolomon.GenericGFPoly one -> one
    int size -> size
    int primitive -> primitive
    int generatorBase -> generatorBase
    void <init>(int,int,int) -> <init>
    org.qiyi.qyscanqrcode.scan.zxing.common.reedsolomon.GenericGFPoly getZero() -> getZero
    org.qiyi.qyscanqrcode.scan.zxing.common.reedsolomon.GenericGFPoly getOne() -> getOne
    org.qiyi.qyscanqrcode.scan.zxing.common.reedsolomon.GenericGFPoly buildMonomial(int,int) -> buildMonomial
    int addOrSubtract(int,int) -> addOrSubtract
    int exp(int) -> exp
    int log(int) -> log
    int inverse(int) -> inverse
    int multiply(int,int) -> multiply
    int getSize() -> getSize
    int getGeneratorBase() -> getGeneratorBase
    java.lang.String toString() -> toString
    void <clinit>() -> <clinit>
org.qiyi.qyscanqrcode.scan.zxing.common.reedsolomon.GenericGFPoly -> org.qiyi.qyscanqrcode.scan.zxing.common.reedsolomon.GenericGFPoly:
    org.qiyi.qyscanqrcode.scan.zxing.common.reedsolomon.GenericGF field -> field
    int[] coefficients -> coefficients
    void <init>(org.qiyi.qyscanqrcode.scan.zxing.common.reedsolomon.GenericGF,int[]) -> <init>
    int[] getCoefficients() -> getCoefficients
    int getDegree() -> getDegree
    boolean isZero() -> isZero
    int getCoefficient(int) -> getCoefficient
    int evaluateAt(int) -> evaluateAt
    org.qiyi.qyscanqrcode.scan.zxing.common.reedsolomon.GenericGFPoly addOrSubtract(org.qiyi.qyscanqrcode.scan.zxing.common.reedsolomon.GenericGFPoly) -> addOrSubtract
    org.qiyi.qyscanqrcode.scan.zxing.common.reedsolomon.GenericGFPoly multiply(org.qiyi.qyscanqrcode.scan.zxing.common.reedsolomon.GenericGFPoly) -> multiply
    org.qiyi.qyscanqrcode.scan.zxing.common.reedsolomon.GenericGFPoly multiply(int) -> multiply
    org.qiyi.qyscanqrcode.scan.zxing.common.reedsolomon.GenericGFPoly multiplyByMonomial(int,int) -> multiplyByMonomial
    org.qiyi.qyscanqrcode.scan.zxing.common.reedsolomon.GenericGFPoly[] divide(org.qiyi.qyscanqrcode.scan.zxing.common.reedsolomon.GenericGFPoly) -> divide
    java.lang.String toString() -> toString
org.qiyi.qyscanqrcode.scan.zxing.common.reedsolomon.ReedSolomonDecoder -> org.qiyi.qyscanqrcode.scan.zxing.common.reedsolomon.ReedSolomonDecoder:
    org.qiyi.qyscanqrcode.scan.zxing.common.reedsolomon.GenericGF field -> field
    void <init>(org.qiyi.qyscanqrcode.scan.zxing.common.reedsolomon.GenericGF) -> <init>
    void decode(int[],int) -> decode
    org.qiyi.qyscanqrcode.scan.zxing.common.reedsolomon.GenericGFPoly[] runEuclideanAlgorithm(org.qiyi.qyscanqrcode.scan.zxing.common.reedsolomon.GenericGFPoly,org.qiyi.qyscanqrcode.scan.zxing.common.reedsolomon.GenericGFPoly,int) -> runEuclideanAlgorithm
    int[] findErrorLocations(org.qiyi.qyscanqrcode.scan.zxing.common.reedsolomon.GenericGFPoly) -> findErrorLocations
    int[] findErrorMagnitudes(org.qiyi.qyscanqrcode.scan.zxing.common.reedsolomon.GenericGFPoly,int[]) -> findErrorMagnitudes
org.qiyi.qyscanqrcode.scan.zxing.common.reedsolomon.ReedSolomonEncoder -> org.qiyi.qyscanqrcode.scan.zxing.common.reedsolomon.ReedSolomonEncoder:
    org.qiyi.qyscanqrcode.scan.zxing.common.reedsolomon.GenericGF field -> field
    java.util.List cachedGenerators -> cachedGenerators
    void <init>(org.qiyi.qyscanqrcode.scan.zxing.common.reedsolomon.GenericGF) -> <init>
    org.qiyi.qyscanqrcode.scan.zxing.common.reedsolomon.GenericGFPoly buildGenerator(int) -> buildGenerator
    void encode(int[],int) -> encode
org.qiyi.qyscanqrcode.scan.zxing.common.reedsolomon.ReedSolomonException -> org.qiyi.qyscanqrcode.scan.zxing.common.reedsolomon.ReedSolomonException:
    void <init>(java.lang.String) -> <init>
org.qiyi.qyscanqrcode.scan.zxing.qrcode.QRCodeReader -> org.qiyi.qyscanqrcode.scan.zxing.qrcode.QRCodeReader:
    org.qiyi.qyscanqrcode.scan.zxing.ResultPoint[] NO_POINTS -> NO_POINTS
    org.qiyi.qyscanqrcode.scan.zxing.qrcode.decoder.Decoder decoder -> decoder
    void <init>() -> <init>
    org.qiyi.qyscanqrcode.scan.zxing.qrcode.decoder.Decoder getDecoder() -> getDecoder
    org.qiyi.qyscanqrcode.scan.zxing.Result decode(org.qiyi.qyscanqrcode.scan.zxing.BinaryBitmap) -> decode
    org.qiyi.qyscanqrcode.scan.zxing.Result decode(org.qiyi.qyscanqrcode.scan.zxing.BinaryBitmap,java.util.Map) -> decode
    void reset() -> reset
    org.qiyi.qyscanqrcode.scan.zxing.common.BitMatrix extractPureBits(org.qiyi.qyscanqrcode.scan.zxing.common.BitMatrix) -> extractPureBits
    float moduleSize(int[],org.qiyi.qyscanqrcode.scan.zxing.common.BitMatrix) -> moduleSize
    void <clinit>() -> <clinit>
org.qiyi.qyscanqrcode.scan.zxing.qrcode.QRCodeWriter -> org.qiyi.qyscanqrcode.scan.zxing.qrcode.QRCodeWriter:
    int QUIET_ZONE_SIZE -> QUIET_ZONE_SIZE
    void <init>() -> <init>
    org.qiyi.qyscanqrcode.scan.zxing.common.BitMatrix encode(java.lang.String,org.qiyi.qyscanqrcode.scan.zxing.BarcodeFormat,int,int) -> encode
    org.qiyi.qyscanqrcode.scan.zxing.common.BitMatrix encode(java.lang.String,org.qiyi.qyscanqrcode.scan.zxing.BarcodeFormat,int,int,java.util.Map) -> encode
    org.qiyi.qyscanqrcode.scan.zxing.common.BitMatrix renderResult(org.qiyi.qyscanqrcode.scan.zxing.qrcode.encoder.QRCode,int,int,int) -> renderResult
org.qiyi.qyscanqrcode.scan.zxing.qrcode.decoder.BitMatrixParser -> org.qiyi.qyscanqrcode.scan.zxing.qrcode.decoder.BitMatrixParser:
    org.qiyi.qyscanqrcode.scan.zxing.common.BitMatrix bitMatrix -> bitMatrix
    org.qiyi.qyscanqrcode.scan.zxing.qrcode.decoder.Version parsedVersion -> parsedVersion
    org.qiyi.qyscanqrcode.scan.zxing.qrcode.decoder.FormatInformation parsedFormatInfo -> parsedFormatInfo
    boolean mirror -> mirror
    void <init>(org.qiyi.qyscanqrcode.scan.zxing.common.BitMatrix) -> <init>
    org.qiyi.qyscanqrcode.scan.zxing.qrcode.decoder.FormatInformation readFormatInformation() -> readFormatInformation
    org.qiyi.qyscanqrcode.scan.zxing.qrcode.decoder.Version readVersion() -> readVersion
    int copyBit(int,int,int) -> copyBit
    byte[] readCodewords() -> readCodewords
    void remask() -> remask
    void setMirror(boolean) -> setMirror
    void mirror() -> mirror
org.qiyi.qyscanqrcode.scan.zxing.qrcode.decoder.DataBlock -> org.qiyi.qyscanqrcode.scan.zxing.qrcode.decoder.DataBlock:
    int numDataCodewords -> numDataCodewords
    byte[] codewords -> codewords
    void <init>(int,byte[]) -> <init>
    org.qiyi.qyscanqrcode.scan.zxing.qrcode.decoder.DataBlock[] getDataBlocks(byte[],org.qiyi.qyscanqrcode.scan.zxing.qrcode.decoder.Version,org.qiyi.qyscanqrcode.scan.zxing.qrcode.decoder.ErrorCorrectionLevel) -> getDataBlocks
    int getNumDataCodewords() -> getNumDataCodewords
    byte[] getCodewords() -> getCodewords
org.qiyi.qyscanqrcode.scan.zxing.qrcode.decoder.DataMask -> org.qiyi.qyscanqrcode.scan.zxing.qrcode.decoder.DataMask:
    org.qiyi.qyscanqrcode.scan.zxing.qrcode.decoder.DataMask[] DATA_MASKS -> DATA_MASKS
    void <init>() -> <init>
    void unmaskBitMatrix(org.qiyi.qyscanqrcode.scan.zxing.common.BitMatrix,int) -> unmaskBitMatrix
    boolean isMasked(int,int) -> isMasked
    org.qiyi.qyscanqrcode.scan.zxing.qrcode.decoder.DataMask forReference(int) -> forReference
    void <init>(org.qiyi.qyscanqrcode.scan.zxing.qrcode.decoder.DataMask$1) -> <init>
    void <clinit>() -> <clinit>
org.qiyi.qyscanqrcode.scan.zxing.qrcode.decoder.DataMask$1 -> org.qiyi.qyscanqrcode.scan.zxing.qrcode.decoder.DataMask$1:
org.qiyi.qyscanqrcode.scan.zxing.qrcode.decoder.DataMask$DataMask000 -> org.qiyi.qyscanqrcode.scan.zxing.qrcode.decoder.DataMask$DataMask000:
    void <init>() -> <init>
    boolean isMasked(int,int) -> isMasked
    void <init>(org.qiyi.qyscanqrcode.scan.zxing.qrcode.decoder.DataMask$1) -> <init>
org.qiyi.qyscanqrcode.scan.zxing.qrcode.decoder.DataMask$DataMask001 -> org.qiyi.qyscanqrcode.scan.zxing.qrcode.decoder.DataMask$DataMask001:
    void <init>() -> <init>
    boolean isMasked(int,int) -> isMasked
    void <init>(org.qiyi.qyscanqrcode.scan.zxing.qrcode.decoder.DataMask$1) -> <init>
org.qiyi.qyscanqrcode.scan.zxing.qrcode.decoder.DataMask$DataMask010 -> org.qiyi.qyscanqrcode.scan.zxing.qrcode.decoder.DataMask$DataMask010:
    void <init>() -> <init>
    boolean isMasked(int,int) -> isMasked
    void <init>(org.qiyi.qyscanqrcode.scan.zxing.qrcode.decoder.DataMask$1) -> <init>
org.qiyi.qyscanqrcode.scan.zxing.qrcode.decoder.DataMask$DataMask011 -> org.qiyi.qyscanqrcode.scan.zxing.qrcode.decoder.DataMask$DataMask011:
    void <init>() -> <init>
    boolean isMasked(int,int) -> isMasked
    void <init>(org.qiyi.qyscanqrcode.scan.zxing.qrcode.decoder.DataMask$1) -> <init>
org.qiyi.qyscanqrcode.scan.zxing.qrcode.decoder.DataMask$DataMask100 -> org.qiyi.qyscanqrcode.scan.zxing.qrcode.decoder.DataMask$DataMask100:
    void <init>() -> <init>
    boolean isMasked(int,int) -> isMasked
    void <init>(org.qiyi.qyscanqrcode.scan.zxing.qrcode.decoder.DataMask$1) -> <init>
org.qiyi.qyscanqrcode.scan.zxing.qrcode.decoder.DataMask$DataMask101 -> org.qiyi.qyscanqrcode.scan.zxing.qrcode.decoder.DataMask$DataMask101:
    void <init>() -> <init>
    boolean isMasked(int,int) -> isMasked
    void <init>(org.qiyi.qyscanqrcode.scan.zxing.qrcode.decoder.DataMask$1) -> <init>
org.qiyi.qyscanqrcode.scan.zxing.qrcode.decoder.DataMask$DataMask110 -> org.qiyi.qyscanqrcode.scan.zxing.qrcode.decoder.DataMask$DataMask110:
    void <init>() -> <init>
    boolean isMasked(int,int) -> isMasked
    void <init>(org.qiyi.qyscanqrcode.scan.zxing.qrcode.decoder.DataMask$1) -> <init>
org.qiyi.qyscanqrcode.scan.zxing.qrcode.decoder.DataMask$DataMask111 -> org.qiyi.qyscanqrcode.scan.zxing.qrcode.decoder.DataMask$DataMask111:
    void <init>() -> <init>
    boolean isMasked(int,int) -> isMasked
    void <init>(org.qiyi.qyscanqrcode.scan.zxing.qrcode.decoder.DataMask$1) -> <init>
org.qiyi.qyscanqrcode.scan.zxing.qrcode.decoder.DecodedBitStreamParser -> org.qiyi.qyscanqrcode.scan.zxing.qrcode.decoder.DecodedBitStreamParser:
    char[] ALPHANUMERIC_CHARS -> ALPHANUMERIC_CHARS
    int GB2312_SUBSET -> GB2312_SUBSET
    void <init>() -> <init>
    org.qiyi.qyscanqrcode.scan.zxing.common.DecoderResult decode(byte[],org.qiyi.qyscanqrcode.scan.zxing.qrcode.decoder.Version,org.qiyi.qyscanqrcode.scan.zxing.qrcode.decoder.ErrorCorrectionLevel,java.util.Map) -> decode
    void decodeHanziSegment(org.qiyi.qyscanqrcode.scan.zxing.common.BitSource,java.lang.StringBuilder,int) -> decodeHanziSegment
    void decodeKanjiSegment(org.qiyi.qyscanqrcode.scan.zxing.common.BitSource,java.lang.StringBuilder,int) -> decodeKanjiSegment
    void decodeByteSegment(org.qiyi.qyscanqrcode.scan.zxing.common.BitSource,java.lang.StringBuilder,int,org.qiyi.qyscanqrcode.scan.zxing.common.CharacterSetECI,java.util.Collection,java.util.Map) -> decodeByteSegment
    char toAlphaNumericChar(int) -> toAlphaNumericChar
    void decodeAlphanumericSegment(org.qiyi.qyscanqrcode.scan.zxing.common.BitSource,java.lang.StringBuilder,int,boolean) -> decodeAlphanumericSegment
    void decodeNumericSegment(org.qiyi.qyscanqrcode.scan.zxing.common.BitSource,java.lang.StringBuilder,int) -> decodeNumericSegment
    int parseECIValue(org.qiyi.qyscanqrcode.scan.zxing.common.BitSource) -> parseECIValue
    void <clinit>() -> <clinit>
org.qiyi.qyscanqrcode.scan.zxing.qrcode.decoder.Decoder -> org.qiyi.qyscanqrcode.scan.zxing.qrcode.decoder.Decoder:
    org.qiyi.qyscanqrcode.scan.zxing.common.reedsolomon.ReedSolomonDecoder rsDecoder -> rsDecoder
    void <init>() -> <init>
    org.qiyi.qyscanqrcode.scan.zxing.common.DecoderResult decode(boolean[][]) -> decode
    org.qiyi.qyscanqrcode.scan.zxing.common.DecoderResult decode(boolean[][],java.util.Map) -> decode
    org.qiyi.qyscanqrcode.scan.zxing.common.DecoderResult decode(org.qiyi.qyscanqrcode.scan.zxing.common.BitMatrix) -> decode
    org.qiyi.qyscanqrcode.scan.zxing.common.DecoderResult decode(org.qiyi.qyscanqrcode.scan.zxing.common.BitMatrix,java.util.Map) -> decode
    org.qiyi.qyscanqrcode.scan.zxing.common.DecoderResult decode(org.qiyi.qyscanqrcode.scan.zxing.qrcode.decoder.BitMatrixParser,java.util.Map) -> decode
    void correctErrors(byte[],int) -> correctErrors
org.qiyi.qyscanqrcode.scan.zxing.qrcode.decoder.ErrorCorrectionLevel -> org.qiyi.qyscanqrcode.scan.zxing.qrcode.decoder.ErrorCorrectionLevel:
    org.qiyi.qyscanqrcode.scan.zxing.qrcode.decoder.ErrorCorrectionLevel L -> L
    org.qiyi.qyscanqrcode.scan.zxing.qrcode.decoder.ErrorCorrectionLevel M -> M
    org.qiyi.qyscanqrcode.scan.zxing.qrcode.decoder.ErrorCorrectionLevel Q -> Q
    org.qiyi.qyscanqrcode.scan.zxing.qrcode.decoder.ErrorCorrectionLevel H -> H
    org.qiyi.qyscanqrcode.scan.zxing.qrcode.decoder.ErrorCorrectionLevel[] FOR_BITS -> FOR_BITS
    int bits -> bits
    org.qiyi.qyscanqrcode.scan.zxing.qrcode.decoder.ErrorCorrectionLevel[] $VALUES -> $VALUES
    org.qiyi.qyscanqrcode.scan.zxing.qrcode.decoder.ErrorCorrectionLevel[] values() -> values
    org.qiyi.qyscanqrcode.scan.zxing.qrcode.decoder.ErrorCorrectionLevel valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,int) -> <init>
    int getBits() -> getBits
    org.qiyi.qyscanqrcode.scan.zxing.qrcode.decoder.ErrorCorrectionLevel forBits(int) -> forBits
    void <clinit>() -> <clinit>
org.qiyi.qyscanqrcode.scan.zxing.qrcode.decoder.FormatInformation -> org.qiyi.qyscanqrcode.scan.zxing.qrcode.decoder.FormatInformation:
    int FORMAT_INFO_MASK_QR -> FORMAT_INFO_MASK_QR
    int[][] FORMAT_INFO_DECODE_LOOKUP -> FORMAT_INFO_DECODE_LOOKUP
    int[] BITS_SET_IN_HALF_BYTE -> BITS_SET_IN_HALF_BYTE
    org.qiyi.qyscanqrcode.scan.zxing.qrcode.decoder.ErrorCorrectionLevel errorCorrectionLevel -> errorCorrectionLevel
    byte dataMask -> dataMask
    void <init>(int) -> <init>
    int numBitsDiffering(int,int) -> numBitsDiffering
    org.qiyi.qyscanqrcode.scan.zxing.qrcode.decoder.FormatInformation decodeFormatInformation(int,int) -> decodeFormatInformation
    org.qiyi.qyscanqrcode.scan.zxing.qrcode.decoder.FormatInformation doDecodeFormatInformation(int,int) -> doDecodeFormatInformation
    org.qiyi.qyscanqrcode.scan.zxing.qrcode.decoder.ErrorCorrectionLevel getErrorCorrectionLevel() -> getErrorCorrectionLevel
    byte getDataMask() -> getDataMask
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    void <clinit>() -> <clinit>
org.qiyi.qyscanqrcode.scan.zxing.qrcode.decoder.Mode -> org.qiyi.qyscanqrcode.scan.zxing.qrcode.decoder.Mode:
    org.qiyi.qyscanqrcode.scan.zxing.qrcode.decoder.Mode TERMINATOR -> TERMINATOR
    org.qiyi.qyscanqrcode.scan.zxing.qrcode.decoder.Mode NUMERIC -> NUMERIC
    org.qiyi.qyscanqrcode.scan.zxing.qrcode.decoder.Mode ALPHANUMERIC -> ALPHANUMERIC
    org.qiyi.qyscanqrcode.scan.zxing.qrcode.decoder.Mode STRUCTURED_APPEND -> STRUCTURED_APPEND
    org.qiyi.qyscanqrcode.scan.zxing.qrcode.decoder.Mode BYTE -> BYTE
    org.qiyi.qyscanqrcode.scan.zxing.qrcode.decoder.Mode ECI -> ECI
    org.qiyi.qyscanqrcode.scan.zxing.qrcode.decoder.Mode KANJI -> KANJI
    org.qiyi.qyscanqrcode.scan.zxing.qrcode.decoder.Mode FNC1_FIRST_POSITION -> FNC1_FIRST_POSITION
    org.qiyi.qyscanqrcode.scan.zxing.qrcode.decoder.Mode FNC1_SECOND_POSITION -> FNC1_SECOND_POSITION
    org.qiyi.qyscanqrcode.scan.zxing.qrcode.decoder.Mode HANZI -> HANZI
    int[] characterCountBitsForVersions -> characterCountBitsForVersions
    int bits -> bits
    org.qiyi.qyscanqrcode.scan.zxing.qrcode.decoder.Mode[] $VALUES -> $VALUES
    org.qiyi.qyscanqrcode.scan.zxing.qrcode.decoder.Mode[] values() -> values
    org.qiyi.qyscanqrcode.scan.zxing.qrcode.decoder.Mode valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,int[],int) -> <init>
    org.qiyi.qyscanqrcode.scan.zxing.qrcode.decoder.Mode forBits(int) -> forBits
    int getCharacterCountBits(org.qiyi.qyscanqrcode.scan.zxing.qrcode.decoder.Version) -> getCharacterCountBits
    int getBits() -> getBits
    void <clinit>() -> <clinit>
org.qiyi.qyscanqrcode.scan.zxing.qrcode.decoder.QRCodeDecoderMetaData -> org.qiyi.qyscanqrcode.scan.zxing.qrcode.decoder.QRCodeDecoderMetaData:
    boolean mirrored -> mirrored
    void <init>(boolean) -> <init>
    boolean isMirrored() -> isMirrored
    void applyMirroredCorrection(org.qiyi.qyscanqrcode.scan.zxing.ResultPoint[]) -> applyMirroredCorrection
org.qiyi.qyscanqrcode.scan.zxing.qrcode.decoder.Version -> org.qiyi.qyscanqrcode.scan.zxing.qrcode.decoder.Version:
    int[] VERSION_DECODE_INFO -> VERSION_DECODE_INFO
    org.qiyi.qyscanqrcode.scan.zxing.qrcode.decoder.Version[] VERSIONS -> VERSIONS
    int versionNumber -> versionNumber
    int[] alignmentPatternCenters -> alignmentPatternCenters
    org.qiyi.qyscanqrcode.scan.zxing.qrcode.decoder.Version$ECBlocks[] ecBlocks -> ecBlocks
    int totalCodewords -> totalCodewords
    void <init>(int,int[],org.qiyi.qyscanqrcode.scan.zxing.qrcode.decoder.Version$ECBlocks[]) -> <init>
    int getVersionNumber() -> getVersionNumber
    int[] getAlignmentPatternCenters() -> getAlignmentPatternCenters
    int getTotalCodewords() -> getTotalCodewords
    int getDimensionForVersion() -> getDimensionForVersion
    org.qiyi.qyscanqrcode.scan.zxing.qrcode.decoder.Version$ECBlocks getECBlocksForLevel(org.qiyi.qyscanqrcode.scan.zxing.qrcode.decoder.ErrorCorrectionLevel) -> getECBlocksForLevel
    org.qiyi.qyscanqrcode.scan.zxing.qrcode.decoder.Version getProvisionalVersionForDimension(int) -> getProvisionalVersionForDimension
    org.qiyi.qyscanqrcode.scan.zxing.qrcode.decoder.Version getVersionForNumber(int) -> getVersionForNumber
    org.qiyi.qyscanqrcode.scan.zxing.qrcode.decoder.Version decodeVersionInformation(int) -> decodeVersionInformation
    org.qiyi.qyscanqrcode.scan.zxing.common.BitMatrix buildFunctionPattern() -> buildFunctionPattern
    java.lang.String toString() -> toString
    org.qiyi.qyscanqrcode.scan.zxing.qrcode.decoder.Version[] buildVersions() -> buildVersions
    void <clinit>() -> <clinit>
org.qiyi.qyscanqrcode.scan.zxing.qrcode.decoder.Version$ECB -> org.qiyi.qyscanqrcode.scan.zxing.qrcode.decoder.Version$ECB:
    int count -> count
    int dataCodewords -> dataCodewords
    void <init>(int,int) -> <init>
    int getCount() -> getCount
    int getDataCodewords() -> getDataCodewords
org.qiyi.qyscanqrcode.scan.zxing.qrcode.decoder.Version$ECBlocks -> org.qiyi.qyscanqrcode.scan.zxing.qrcode.decoder.Version$ECBlocks:
    int ecCodewordsPerBlock -> ecCodewordsPerBlock
    org.qiyi.qyscanqrcode.scan.zxing.qrcode.decoder.Version$ECB[] ecBlocks -> ecBlocks
    void <init>(int,org.qiyi.qyscanqrcode.scan.zxing.qrcode.decoder.Version$ECB[]) -> <init>
    int getECCodewordsPerBlock() -> getECCodewordsPerBlock
    int getNumBlocks() -> getNumBlocks
    int getTotalECCodewords() -> getTotalECCodewords
    org.qiyi.qyscanqrcode.scan.zxing.qrcode.decoder.Version$ECB[] getECBlocks() -> getECBlocks
org.qiyi.qyscanqrcode.scan.zxing.qrcode.detector.AlignmentPattern -> org.qiyi.qyscanqrcode.scan.zxing.qrcode.detector.AlignmentPattern:
    float estimatedModuleSize -> estimatedModuleSize
    void <init>(float,float,float) -> <init>
    boolean aboutEquals(float,float,float) -> aboutEquals
    org.qiyi.qyscanqrcode.scan.zxing.qrcode.detector.AlignmentPattern combineEstimate(float,float,float) -> combineEstimate
org.qiyi.qyscanqrcode.scan.zxing.qrcode.detector.AlignmentPatternFinder -> org.qiyi.qyscanqrcode.scan.zxing.qrcode.detector.AlignmentPatternFinder:
    org.qiyi.qyscanqrcode.scan.zxing.common.BitMatrix image -> image
    java.util.List possibleCenters -> possibleCenters
    int startX -> startX
    int startY -> startY
    int width -> width
    int height -> height
    float moduleSize -> moduleSize
    int[] crossCheckStateCount -> crossCheckStateCount
    org.qiyi.qyscanqrcode.scan.zxing.ResultPointCallback resultPointCallback -> resultPointCallback
    void <init>(org.qiyi.qyscanqrcode.scan.zxing.common.BitMatrix,int,int,int,int,float,org.qiyi.qyscanqrcode.scan.zxing.ResultPointCallback) -> <init>
    org.qiyi.qyscanqrcode.scan.zxing.qrcode.detector.AlignmentPattern find() -> find
    float centerFromEnd(int[],int) -> centerFromEnd
    boolean foundPatternCross(int[]) -> foundPatternCross
    float crossCheckVertical(int,int,int,int) -> crossCheckVertical
    org.qiyi.qyscanqrcode.scan.zxing.qrcode.detector.AlignmentPattern handlePossibleCenter(int[],int,int) -> handlePossibleCenter
org.qiyi.qyscanqrcode.scan.zxing.qrcode.detector.Detector -> org.qiyi.qyscanqrcode.scan.zxing.qrcode.detector.Detector:
    org.qiyi.qyscanqrcode.scan.zxing.common.BitMatrix image -> image
    org.qiyi.qyscanqrcode.scan.zxing.ResultPointCallback resultPointCallback -> resultPointCallback
    void <init>(org.qiyi.qyscanqrcode.scan.zxing.common.BitMatrix) -> <init>
    org.qiyi.qyscanqrcode.scan.zxing.common.BitMatrix getImage() -> getImage
    org.qiyi.qyscanqrcode.scan.zxing.ResultPointCallback getResultPointCallback() -> getResultPointCallback
    org.qiyi.qyscanqrcode.scan.zxing.common.DetectorResult detect() -> detect
    org.qiyi.qyscanqrcode.scan.zxing.common.DetectorResult detect(java.util.Map) -> detect
    org.qiyi.qyscanqrcode.scan.zxing.common.DetectorResult processFinderPatternInfo(org.qiyi.qyscanqrcode.scan.zxing.qrcode.detector.FinderPatternInfo) -> processFinderPatternInfo
    org.qiyi.qyscanqrcode.scan.zxing.common.PerspectiveTransform createTransform(org.qiyi.qyscanqrcode.scan.zxing.ResultPoint,org.qiyi.qyscanqrcode.scan.zxing.ResultPoint,org.qiyi.qyscanqrcode.scan.zxing.ResultPoint,org.qiyi.qyscanqrcode.scan.zxing.ResultPoint,int) -> createTransform
    org.qiyi.qyscanqrcode.scan.zxing.common.BitMatrix sampleGrid(org.qiyi.qyscanqrcode.scan.zxing.common.BitMatrix,org.qiyi.qyscanqrcode.scan.zxing.common.PerspectiveTransform,int) -> sampleGrid
    int computeDimension(org.qiyi.qyscanqrcode.scan.zxing.ResultPoint,org.qiyi.qyscanqrcode.scan.zxing.ResultPoint,org.qiyi.qyscanqrcode.scan.zxing.ResultPoint,float) -> computeDimension
    float calculateModuleSize(org.qiyi.qyscanqrcode.scan.zxing.ResultPoint,org.qiyi.qyscanqrcode.scan.zxing.ResultPoint,org.qiyi.qyscanqrcode.scan.zxing.ResultPoint) -> calculateModuleSize
    float calculateModuleSizeOneWay(org.qiyi.qyscanqrcode.scan.zxing.ResultPoint,org.qiyi.qyscanqrcode.scan.zxing.ResultPoint) -> calculateModuleSizeOneWay
    float sizeOfBlackWhiteBlackRunBothWays(int,int,int,int) -> sizeOfBlackWhiteBlackRunBothWays
    float sizeOfBlackWhiteBlackRun(int,int,int,int) -> sizeOfBlackWhiteBlackRun
    org.qiyi.qyscanqrcode.scan.zxing.qrcode.detector.AlignmentPattern findAlignmentInRegion(float,int,int,float) -> findAlignmentInRegion
org.qiyi.qyscanqrcode.scan.zxing.qrcode.detector.FinderPattern -> org.qiyi.qyscanqrcode.scan.zxing.qrcode.detector.FinderPattern:
    float estimatedModuleSize -> estimatedModuleSize
    int count -> count
    void <init>(float,float,float) -> <init>
    void <init>(float,float,float,int) -> <init>
    float getEstimatedModuleSize() -> getEstimatedModuleSize
    int getCount() -> getCount
    boolean aboutEquals(float,float,float) -> aboutEquals
    org.qiyi.qyscanqrcode.scan.zxing.qrcode.detector.FinderPattern combineEstimate(float,float,float) -> combineEstimate
org.qiyi.qyscanqrcode.scan.zxing.qrcode.detector.FinderPatternFinder -> org.qiyi.qyscanqrcode.scan.zxing.qrcode.detector.FinderPatternFinder:
    int CENTER_QUORUM -> CENTER_QUORUM
    int MIN_SKIP -> MIN_SKIP
    int MAX_MODULES -> MAX_MODULES
    org.qiyi.qyscanqrcode.scan.zxing.common.BitMatrix image -> image
    java.util.List possibleCenters -> possibleCenters
    boolean hasSkipped -> hasSkipped
    int[] crossCheckStateCount -> crossCheckStateCount
    org.qiyi.qyscanqrcode.scan.zxing.ResultPointCallback resultPointCallback -> resultPointCallback
    void <init>(org.qiyi.qyscanqrcode.scan.zxing.common.BitMatrix) -> <init>
    void <init>(org.qiyi.qyscanqrcode.scan.zxing.common.BitMatrix,org.qiyi.qyscanqrcode.scan.zxing.ResultPointCallback) -> <init>
    org.qiyi.qyscanqrcode.scan.zxing.common.BitMatrix getImage() -> getImage
    java.util.List getPossibleCenters() -> getPossibleCenters
    org.qiyi.qyscanqrcode.scan.zxing.qrcode.detector.FinderPatternInfo find(java.util.Map) -> find
    float centerFromEnd(int[],int) -> centerFromEnd
    boolean foundPatternCross(int[]) -> foundPatternCross
    int[] getCrossCheckStateCount() -> getCrossCheckStateCount
    boolean crossCheckDiagonal(int,int,int,int) -> crossCheckDiagonal
    float crossCheckVertical(int,int,int,int) -> crossCheckVertical
    float crossCheckHorizontal(int,int,int,int) -> crossCheckHorizontal
    boolean handlePossibleCenter(int[],int,int,boolean) -> handlePossibleCenter
    int findRowSkip() -> findRowSkip
    boolean haveMultiplyConfirmedCenters() -> haveMultiplyConfirmedCenters
    org.qiyi.qyscanqrcode.scan.zxing.qrcode.detector.FinderPattern[] selectBestPatterns() -> selectBestPatterns
org.qiyi.qyscanqrcode.scan.zxing.qrcode.detector.FinderPatternFinder$1 -> org.qiyi.qyscanqrcode.scan.zxing.qrcode.detector.FinderPatternFinder$1:
org.qiyi.qyscanqrcode.scan.zxing.qrcode.detector.FinderPatternFinder$CenterComparator -> org.qiyi.qyscanqrcode.scan.zxing.qrcode.detector.FinderPatternFinder$CenterComparator:
    float average -> average
    void <init>(float) -> <init>
    int compare(org.qiyi.qyscanqrcode.scan.zxing.qrcode.detector.FinderPattern,org.qiyi.qyscanqrcode.scan.zxing.qrcode.detector.FinderPattern) -> compare
    int compare(java.lang.Object,java.lang.Object) -> compare
    void <init>(float,org.qiyi.qyscanqrcode.scan.zxing.qrcode.detector.FinderPatternFinder$1) -> <init>
org.qiyi.qyscanqrcode.scan.zxing.qrcode.detector.FinderPatternFinder$FurthestFromAverageComparator -> org.qiyi.qyscanqrcode.scan.zxing.qrcode.detector.FinderPatternFinder$FurthestFromAverageComparator:
    float average -> average
    void <init>(float) -> <init>
    int compare(org.qiyi.qyscanqrcode.scan.zxing.qrcode.detector.FinderPattern,org.qiyi.qyscanqrcode.scan.zxing.qrcode.detector.FinderPattern) -> compare
    int compare(java.lang.Object,java.lang.Object) -> compare
    void <init>(float,org.qiyi.qyscanqrcode.scan.zxing.qrcode.detector.FinderPatternFinder$1) -> <init>
org.qiyi.qyscanqrcode.scan.zxing.qrcode.detector.FinderPatternInfo -> org.qiyi.qyscanqrcode.scan.zxing.qrcode.detector.FinderPatternInfo:
    org.qiyi.qyscanqrcode.scan.zxing.qrcode.detector.FinderPattern bottomLeft -> bottomLeft
    org.qiyi.qyscanqrcode.scan.zxing.qrcode.detector.FinderPattern topLeft -> topLeft
    org.qiyi.qyscanqrcode.scan.zxing.qrcode.detector.FinderPattern topRight -> topRight
    void <init>(org.qiyi.qyscanqrcode.scan.zxing.qrcode.detector.FinderPattern[]) -> <init>
    org.qiyi.qyscanqrcode.scan.zxing.qrcode.detector.FinderPattern getBottomLeft() -> getBottomLeft
    org.qiyi.qyscanqrcode.scan.zxing.qrcode.detector.FinderPattern getTopLeft() -> getTopLeft
    org.qiyi.qyscanqrcode.scan.zxing.qrcode.detector.FinderPattern getTopRight() -> getTopRight
org.qiyi.qyscanqrcode.scan.zxing.qrcode.encoder.BlockPair -> org.qiyi.qyscanqrcode.scan.zxing.qrcode.encoder.BlockPair:
    byte[] dataBytes -> dataBytes
    byte[] errorCorrectionBytes -> errorCorrectionBytes
    void <init>(byte[],byte[]) -> <init>
    byte[] getDataBytes() -> getDataBytes
    byte[] getErrorCorrectionBytes() -> getErrorCorrectionBytes
org.qiyi.qyscanqrcode.scan.zxing.qrcode.encoder.ByteMatrix -> org.qiyi.qyscanqrcode.scan.zxing.qrcode.encoder.ByteMatrix:
    byte[][] bytes -> bytes
    int width -> width
    int height -> height
    void <init>(int,int) -> <init>
    int getHeight() -> getHeight
    int getWidth() -> getWidth
    byte get(int,int) -> get
    byte[][] getArray() -> getArray
    void set(int,int,byte) -> set
    void set(int,int,int) -> set
    void set(int,int,boolean) -> set
    void clear(byte) -> clear
    java.lang.String toString() -> toString
org.qiyi.qyscanqrcode.scan.zxing.qrcode.encoder.Encoder -> org.qiyi.qyscanqrcode.scan.zxing.qrcode.encoder.Encoder:
    int[] ALPHANUMERIC_TABLE -> ALPHANUMERIC_TABLE
    java.lang.String DEFAULT_BYTE_MODE_ENCODING -> DEFAULT_BYTE_MODE_ENCODING
    void <init>() -> <init>
    int calculateMaskPenalty(org.qiyi.qyscanqrcode.scan.zxing.qrcode.encoder.ByteMatrix) -> calculateMaskPenalty
    org.qiyi.qyscanqrcode.scan.zxing.qrcode.encoder.QRCode encode(java.lang.String,org.qiyi.qyscanqrcode.scan.zxing.qrcode.decoder.ErrorCorrectionLevel) -> encode
    org.qiyi.qyscanqrcode.scan.zxing.qrcode.encoder.QRCode encode(java.lang.String,org.qiyi.qyscanqrcode.scan.zxing.qrcode.decoder.ErrorCorrectionLevel,java.util.Map) -> encode
    int getAlphanumericCode(int) -> getAlphanumericCode
    org.qiyi.qyscanqrcode.scan.zxing.qrcode.decoder.Mode chooseMode(java.lang.String) -> chooseMode
    org.qiyi.qyscanqrcode.scan.zxing.qrcode.decoder.Mode chooseMode(java.lang.String,java.lang.String) -> chooseMode
    boolean isOnlyDoubleByteKanji(java.lang.String) -> isOnlyDoubleByteKanji
    int chooseMaskPattern(org.qiyi.qyscanqrcode.scan.zxing.common.BitArray,org.qiyi.qyscanqrcode.scan.zxing.qrcode.decoder.ErrorCorrectionLevel,org.qiyi.qyscanqrcode.scan.zxing.qrcode.decoder.Version,org.qiyi.qyscanqrcode.scan.zxing.qrcode.encoder.ByteMatrix) -> chooseMaskPattern
    org.qiyi.qyscanqrcode.scan.zxing.qrcode.decoder.Version chooseVersion(int,org.qiyi.qyscanqrcode.scan.zxing.qrcode.decoder.ErrorCorrectionLevel) -> chooseVersion
    void terminateBits(int,org.qiyi.qyscanqrcode.scan.zxing.common.BitArray) -> terminateBits
    void getNumDataBytesAndNumECBytesForBlockID(int,int,int,int,int[],int[]) -> getNumDataBytesAndNumECBytesForBlockID
    org.qiyi.qyscanqrcode.scan.zxing.common.BitArray interleaveWithECBytes(org.qiyi.qyscanqrcode.scan.zxing.common.BitArray,int,int,int) -> interleaveWithECBytes
    byte[] generateECBytes(byte[],int) -> generateECBytes
    void appendModeInfo(org.qiyi.qyscanqrcode.scan.zxing.qrcode.decoder.Mode,org.qiyi.qyscanqrcode.scan.zxing.common.BitArray) -> appendModeInfo
    void appendLengthInfo(int,org.qiyi.qyscanqrcode.scan.zxing.qrcode.decoder.Version,org.qiyi.qyscanqrcode.scan.zxing.qrcode.decoder.Mode,org.qiyi.qyscanqrcode.scan.zxing.common.BitArray) -> appendLengthInfo
    void appendBytes(java.lang.String,org.qiyi.qyscanqrcode.scan.zxing.qrcode.decoder.Mode,org.qiyi.qyscanqrcode.scan.zxing.common.BitArray,java.lang.String) -> appendBytes
    void appendNumericBytes(java.lang.CharSequence,org.qiyi.qyscanqrcode.scan.zxing.common.BitArray) -> appendNumericBytes
    void appendAlphanumericBytes(java.lang.CharSequence,org.qiyi.qyscanqrcode.scan.zxing.common.BitArray) -> appendAlphanumericBytes
    void append8BitBytes(java.lang.String,org.qiyi.qyscanqrcode.scan.zxing.common.BitArray,java.lang.String) -> append8BitBytes
    void appendKanjiBytes(java.lang.String,org.qiyi.qyscanqrcode.scan.zxing.common.BitArray) -> appendKanjiBytes
    void appendECI(org.qiyi.qyscanqrcode.scan.zxing.common.CharacterSetECI,org.qiyi.qyscanqrcode.scan.zxing.common.BitArray) -> appendECI
    void <clinit>() -> <clinit>
org.qiyi.qyscanqrcode.scan.zxing.qrcode.encoder.Encoder$1 -> org.qiyi.qyscanqrcode.scan.zxing.qrcode.encoder.Encoder$1:
    int[] $SwitchMap$org$qiyi$qyscanqrcode$scan$zxing$qrcode$decoder$Mode -> $SwitchMap$org$qiyi$qyscanqrcode$scan$zxing$qrcode$decoder$Mode
    void <clinit>() -> <clinit>
org.qiyi.qyscanqrcode.scan.zxing.qrcode.encoder.MaskUtil -> org.qiyi.qyscanqrcode.scan.zxing.qrcode.encoder.MaskUtil:
    int N1 -> N1
    int N2 -> N2
    int N3 -> N3
    int N4 -> N4
    void <init>() -> <init>
    int applyMaskPenaltyRule1(org.qiyi.qyscanqrcode.scan.zxing.qrcode.encoder.ByteMatrix) -> applyMaskPenaltyRule1
    int applyMaskPenaltyRule2(org.qiyi.qyscanqrcode.scan.zxing.qrcode.encoder.ByteMatrix) -> applyMaskPenaltyRule2
    int applyMaskPenaltyRule3(org.qiyi.qyscanqrcode.scan.zxing.qrcode.encoder.ByteMatrix) -> applyMaskPenaltyRule3
    boolean isWhiteHorizontal(byte[],int,int) -> isWhiteHorizontal
    boolean isWhiteVertical(byte[][],int,int,int) -> isWhiteVertical
    int applyMaskPenaltyRule4(org.qiyi.qyscanqrcode.scan.zxing.qrcode.encoder.ByteMatrix) -> applyMaskPenaltyRule4
    boolean getDataMaskBit(int,int,int) -> getDataMaskBit
    int applyMaskPenaltyRule1Internal(org.qiyi.qyscanqrcode.scan.zxing.qrcode.encoder.ByteMatrix,boolean) -> applyMaskPenaltyRule1Internal
org.qiyi.qyscanqrcode.scan.zxing.qrcode.encoder.MatrixUtil -> org.qiyi.qyscanqrcode.scan.zxing.qrcode.encoder.MatrixUtil:
    int[][] POSITION_DETECTION_PATTERN -> POSITION_DETECTION_PATTERN
    int[][] POSITION_ADJUSTMENT_PATTERN -> POSITION_ADJUSTMENT_PATTERN
    int[][] POSITION_ADJUSTMENT_PATTERN_COORDINATE_TABLE -> POSITION_ADJUSTMENT_PATTERN_COORDINATE_TABLE
    int[][] TYPE_INFO_COORDINATES -> TYPE_INFO_COORDINATES
    int VERSION_INFO_POLY -> VERSION_INFO_POLY
    int TYPE_INFO_POLY -> TYPE_INFO_POLY
    int TYPE_INFO_MASK_PATTERN -> TYPE_INFO_MASK_PATTERN
    void <init>() -> <init>
    void clearMatrix(org.qiyi.qyscanqrcode.scan.zxing.qrcode.encoder.ByteMatrix) -> clearMatrix
    void buildMatrix(org.qiyi.qyscanqrcode.scan.zxing.common.BitArray,org.qiyi.qyscanqrcode.scan.zxing.qrcode.decoder.ErrorCorrectionLevel,org.qiyi.qyscanqrcode.scan.zxing.qrcode.decoder.Version,int,org.qiyi.qyscanqrcode.scan.zxing.qrcode.encoder.ByteMatrix) -> buildMatrix
    void embedBasicPatterns(org.qiyi.qyscanqrcode.scan.zxing.qrcode.decoder.Version,org.qiyi.qyscanqrcode.scan.zxing.qrcode.encoder.ByteMatrix) -> embedBasicPatterns
    void embedTypeInfo(org.qiyi.qyscanqrcode.scan.zxing.qrcode.decoder.ErrorCorrectionLevel,int,org.qiyi.qyscanqrcode.scan.zxing.qrcode.encoder.ByteMatrix) -> embedTypeInfo
    void maybeEmbedVersionInfo(org.qiyi.qyscanqrcode.scan.zxing.qrcode.decoder.Version,org.qiyi.qyscanqrcode.scan.zxing.qrcode.encoder.ByteMatrix) -> maybeEmbedVersionInfo
    void embedDataBits(org.qiyi.qyscanqrcode.scan.zxing.common.BitArray,int,org.qiyi.qyscanqrcode.scan.zxing.qrcode.encoder.ByteMatrix) -> embedDataBits
    int findMSBSet(int) -> findMSBSet
    int calculateBCHCode(int,int) -> calculateBCHCode
    void makeTypeInfoBits(org.qiyi.qyscanqrcode.scan.zxing.qrcode.decoder.ErrorCorrectionLevel,int,org.qiyi.qyscanqrcode.scan.zxing.common.BitArray) -> makeTypeInfoBits
    void makeVersionInfoBits(org.qiyi.qyscanqrcode.scan.zxing.qrcode.decoder.Version,org.qiyi.qyscanqrcode.scan.zxing.common.BitArray) -> makeVersionInfoBits
    boolean isEmpty(int) -> isEmpty
    void embedTimingPatterns(org.qiyi.qyscanqrcode.scan.zxing.qrcode.encoder.ByteMatrix) -> embedTimingPatterns
    void embedDarkDotAtLeftBottomCorner(org.qiyi.qyscanqrcode.scan.zxing.qrcode.encoder.ByteMatrix) -> embedDarkDotAtLeftBottomCorner
    void embedHorizontalSeparationPattern(int,int,org.qiyi.qyscanqrcode.scan.zxing.qrcode.encoder.ByteMatrix) -> embedHorizontalSeparationPattern
    void embedVerticalSeparationPattern(int,int,org.qiyi.qyscanqrcode.scan.zxing.qrcode.encoder.ByteMatrix) -> embedVerticalSeparationPattern
    void embedPositionAdjustmentPattern(int,int,org.qiyi.qyscanqrcode.scan.zxing.qrcode.encoder.ByteMatrix) -> embedPositionAdjustmentPattern
    void embedPositionDetectionPattern(int,int,org.qiyi.qyscanqrcode.scan.zxing.qrcode.encoder.ByteMatrix) -> embedPositionDetectionPattern
    void embedPositionDetectionPatternsAndSeparators(org.qiyi.qyscanqrcode.scan.zxing.qrcode.encoder.ByteMatrix) -> embedPositionDetectionPatternsAndSeparators
    void maybeEmbedPositionAdjustmentPatterns(org.qiyi.qyscanqrcode.scan.zxing.qrcode.decoder.Version,org.qiyi.qyscanqrcode.scan.zxing.qrcode.encoder.ByteMatrix) -> maybeEmbedPositionAdjustmentPatterns
    void <clinit>() -> <clinit>
org.qiyi.qyscanqrcode.scan.zxing.qrcode.encoder.QRCode -> org.qiyi.qyscanqrcode.scan.zxing.qrcode.encoder.QRCode:
    int NUM_MASK_PATTERNS -> NUM_MASK_PATTERNS
    org.qiyi.qyscanqrcode.scan.zxing.qrcode.decoder.Mode mode -> mode
    org.qiyi.qyscanqrcode.scan.zxing.qrcode.decoder.ErrorCorrectionLevel ecLevel -> ecLevel
    org.qiyi.qyscanqrcode.scan.zxing.qrcode.decoder.Version version -> version
    int maskPattern -> maskPattern
    org.qiyi.qyscanqrcode.scan.zxing.qrcode.encoder.ByteMatrix matrix -> matrix
    void <init>() -> <init>
    org.qiyi.qyscanqrcode.scan.zxing.qrcode.decoder.Mode getMode() -> getMode
    org.qiyi.qyscanqrcode.scan.zxing.qrcode.decoder.ErrorCorrectionLevel getECLevel() -> getECLevel
    org.qiyi.qyscanqrcode.scan.zxing.qrcode.decoder.Version getVersion() -> getVersion
    int getMaskPattern() -> getMaskPattern
    org.qiyi.qyscanqrcode.scan.zxing.qrcode.encoder.ByteMatrix getMatrix() -> getMatrix
    java.lang.String toString() -> toString
    void setMode(org.qiyi.qyscanqrcode.scan.zxing.qrcode.decoder.Mode) -> setMode
    void setECLevel(org.qiyi.qyscanqrcode.scan.zxing.qrcode.decoder.ErrorCorrectionLevel) -> setECLevel
    void setVersion(org.qiyi.qyscanqrcode.scan.zxing.qrcode.decoder.Version) -> setVersion
    void setMaskPattern(int) -> setMaskPattern
    void setMatrix(org.qiyi.qyscanqrcode.scan.zxing.qrcode.encoder.ByteMatrix) -> setMatrix
    boolean isValidMaskPattern(int) -> isValidMaskPattern
org.qiyi.video.module.download.exbean.DownloadStatus -> org.qiyi.video.module.download.exbean.a:
    org.qiyi.video.module.download.exbean.DownloadStatus DEFAULT -> oV
    org.qiyi.video.module.download.exbean.DownloadStatus DOWNLOADING -> oW
    org.qiyi.video.module.download.exbean.DownloadStatus FINISHED -> oX
    org.qiyi.video.module.download.exbean.DownloadStatus WAITING -> oY
    org.qiyi.video.module.download.exbean.DownloadStatus FAILED -> oZ
    org.qiyi.video.module.download.exbean.DownloadStatus PAUSING -> pa
    org.qiyi.video.module.download.exbean.DownloadStatus STARTING -> pb
    org.qiyi.video.module.download.exbean.DownloadStatus[] $VALUES -> pc
    org.qiyi.video.module.download.exbean.DownloadStatus[] values() -> values
    org.qiyi.video.module.download.exbean.DownloadStatus valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
org.qiyi.video.module.download.exbean.FileDownloadObject -> org.qiyi.video.module.download.exbean.FileDownloadObject:
    long serialVersionUID -> serialVersionUID
    java.lang.String fileId -> pd
    java.lang.String fileName -> pe
    java.lang.String filePath -> pf
    int taskStatus -> pg
    java.lang.String downloadUrl -> downloadUrl
    org.qiyi.video.module.download.exbean.DownloadStatus status -> ph
    org.qiyi.video.module.download.exbean.ScheduleBean scheduleBean -> cq
    org.qiyi.video.module.download.exbean.FileDownloadObject$DownloadConfig mDownloadConfig -> pi
    long completeSize -> pj
    long totalSize -> pk
    long speed -> pl
    java.lang.String errorCode -> di
    android.os.Parcelable$Creator CREATOR -> CREATOR
    void <init>(android.os.Parcel) -> <init>
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
    int describeContents() -> describeContents
    java.lang.String getFileName() -> getFileName
    java.lang.String getDownloadPath() -> getDownloadPath
    void setDownloadUrl(java.lang.String) -> setDownloadUrl
    java.lang.String getDownloadUrl() -> getDownloadUrl
    void setErrorCode(java.lang.String) -> setErrorCode
    long getFileSzie() -> getFileSzie
    void setFileSize(long) -> setFileSize
    void setCompleteSize(long) -> setCompleteSize
    long getCompleteSize() -> getCompleteSize
    long getSpeed() -> getSpeed
    void setSpeed(long) -> setSpeed
    java.lang.String getDownloadingPath() -> getDownloadingPath
    java.lang.String getSaveDir() -> getSaveDir
    int getMaxRetryTimes() -> aG
    java.lang.String getGroupName() -> eQ
    float getDownloadPercent() -> getDownloadPercent
    boolean isAllowInMobile() -> isAllowInMobile
    int getPrority() -> eR
    int getGroupPriority() -> eS
    org.qiyi.video.module.download.exbean.FileDownloadObject$DownloadConfig getDownloadConfig() -> eT
    org.qiyi.video.module.download.exbean.ScheduleBean getScheduleBean() -> getScheduleBean
    java.lang.String getId() -> getId
    int getDownWay() -> getDownWay
    int getStatus() -> getStatus
    void setStatus(int) -> setStatus
    java.lang.String toString() -> toString
    java.lang.Object clone() -> clone
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    boolean recoverToDoStatus() -> recoverToDoStatus
    boolean autoNextTaskWhenError() -> autoNextTaskWhenError
    boolean isNeedForeground() -> isNeedForeground
    int getNeeddel() -> getNeeddel
    int getType() -> getType
    void <clinit>() -> <clinit>
org.qiyi.video.module.download.exbean.FileDownloadObject$1 -> org.qiyi.video.module.download.exbean.b:
    void <init>() -> <init>
    org.qiyi.video.module.download.exbean.FileDownloadObject createFromParcel(android.os.Parcel) -> j
    org.qiyi.video.module.download.exbean.FileDownloadObject[] newArray(int) -> R
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
org.qiyi.video.module.download.exbean.FileDownloadObject$DownloadConfig -> org.qiyi.video.module.download.exbean.c:
    long serialVersionUID -> serialVersionUID
    int type -> type
    int downloadWay -> pm
    java.lang.String groupName -> pn
    int groupPriority -> po
    int priority -> priority
    int maxRetryTimes -> pp
    boolean slientDownload -> pq
    boolean needResume -> pr
    boolean needDb -> ps
    boolean allowedInMobile -> pt
    boolean supportJumpQueue -> pu
    boolean needVerify -> pv
    int verifyWay -> pw
    java.lang.String verifySign -> px
    boolean supportUnzip -> py
    java.io.Serializable customObject -> pz
    java.util.HashMap hashMap -> pA
    void <init>() -> <init>
    java.lang.String toString() -> toString
org.qiyi.video.module.download.exbean.ScheduleBean -> org.qiyi.video.module.download.exbean.d:
    int prority -> pB
    int groupPriority -> po
    void <init>() -> <init>
    java.lang.String toString() -> toString
org.qiyi.video.module.download.exbean.XTaskBean -> org.qiyi.video.module.download.exbean.XTaskBean:
    int STATUS_DEFAULT -> STATUS_DEFAULT
    int STATUS_TODO -> STATUS_TODO
    int STATUS_DOING -> STATUS_DOING
    int STATUS_DONE -> STATUS_DONE
    int STATUS_ERROR -> STATUS_ERROR
    int STATUS_STARTING -> STATUS_STARTING
    int STATUS_PAUSING -> STATUS_PAUSING
    int DOWNLOAD_TYPE_VIDEO -> DOWNLOAD_TYPE_VIDEO
    int DOWNLOAD_TYPE_GAME -> DOWNLOAD_TYPE_GAME
    int DOWNLOAD_TYPE_FILE -> DOWNLOAD_TYPE_FILE
    java.lang.String getId() -> getId
    int getDownWay() -> getDownWay
    int getType() -> getType
    int getStatus() -> getStatus
    void setStatus(int) -> setStatus
    java.lang.Object clone() -> clone
    int getNeeddel() -> getNeeddel
    java.lang.String getSaveDir() -> getSaveDir
    boolean recoverToDoStatus() -> recoverToDoStatus
    boolean autoNextTaskWhenError() -> autoNextTaskWhenError
    long getCompleteSize() -> getCompleteSize
    boolean isNeedForeground() -> isNeedForeground
    void setErrorCode(java.lang.String) -> setErrorCode
    boolean isAllowInMobile() -> isAllowInMobile
    org.qiyi.video.module.download.exbean.ScheduleBean getScheduleBean() -> getScheduleBean
    java.lang.String getDownloadUrl() -> getDownloadUrl
    void setDownloadUrl(java.lang.String) -> setDownloadUrl
    java.lang.String getDownloadPath() -> getDownloadPath
    long getFileSzie() -> getFileSzie
    void setFileSize(long) -> setFileSize
    void setCompleteSize(long) -> setCompleteSize
    java.lang.String getFileName() -> getFileName
    long getSpeed() -> getSpeed
    void setSpeed(long) -> setSpeed
    java.lang.String getDownloadingPath() -> getDownloadingPath
